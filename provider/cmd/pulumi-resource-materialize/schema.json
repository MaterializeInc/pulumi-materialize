{
    "name": "materialize",
    "displayName": "Materialize",
    "description": "A Pulumi package for creating and managing materialize cloud resources.",
    "keywords": [
        "pulumi",
        "materialize",
        "category/cloud"
    ],
    "homepage": "https://github.com/MaterializeInc/terraform-provider-materialize",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`materialize` Terraform Provider](https://github.com/MaterializeInc/terraform-provider-materialize).",
    "repository": "https://github.com/MaterializeInc/terraform-provider-materialize",
    "logoUrl": "https://github.com/MaterializeInc/pulumi-materialize/assets/7467658/77df931a-b571-461f-a279-dac62fbbc236",
    "pluginDownloadURL": "github://api.github.com/MaterializeInc/pulumi-materialize",
    "publisher": "Materialize Inc",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "compatibility": "tfbridge20"
        },
        "go": {
            "importBasePath": "github.com/pulumi/pulumi-materialize/sdk/go/materialize",
            "generateResourceContainerTypes": true,
            "generateExtraInputTypes": true
        },
        "nodejs": {
            "packageDescription": "A Pulumi package for creating and managing materialize cloud resources.",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/MaterializeInc/terraform-provider-materialize)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-materialize` repo](https://github.com/MaterializeInc/terraform-provider-materialize/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-materialize` repo](https://github.com/MaterializeInc/terraform-provider-materialize/issues).",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "compatibility": "tfbridge20",
            "disableUnionOutputTypes": true
        },
        "python": {
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            },
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/MaterializeInc/terraform-provider-materialize)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-materialize` repo](https://github.com/MaterializeInc/terraform-provider-materialize/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-materialize` repo](https://github.com/MaterializeInc/terraform-provider-materialize/issues).",
            "compatibility": "tfbridge20",
            "pyproject": {}
        }
    },
    "config": {
        "variables": {
            "baseEndpoint": {
                "type": "string",
                "description": "The base endpoint for Materialize.\n",
                "defaultInfo": {
                    "environment": [
                        "MZ_BASE_ENDPOINT"
                    ]
                }
            },
            "cloudEndpoint": {
                "type": "string",
                "description": "The endpoint for the Materialize Cloud API.\n",
                "defaultInfo": {
                    "environment": [
                        "MZ_CLOUD_ENDPOINT"
                    ]
                }
            },
            "database": {
                "type": "string",
                "description": "The Materialize database. Can also come from the `MZ_DATABASE` environment variable. Defaults to `materialize`.\n",
                "defaultInfo": {
                    "environment": [
                        "MZ_DATABASE"
                    ]
                }
            },
            "defaultRegion": {
                "type": "string",
                "description": "The default region if not specified in the resource\n",
                "defaultInfo": {
                    "environment": [
                        "MZ_DEFAULT_REGION"
                    ]
                }
            },
            "endpoint": {
                "type": "string",
                "description": "The endpoint for the Materialize API.\n",
                "defaultInfo": {
                    "environment": [
                        "MZ_ENDPOINT"
                    ]
                }
            },
            "password": {
                "type": "string",
                "description": "Materialize host. Can also come from the `MZ_PASSWORD` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "MZ_PASSWORD"
                    ]
                },
                "secret": true
            },
            "sslmode": {
                "type": "string",
                "description": "For testing purposes, the SSL mode to use.\n",
                "defaultInfo": {
                    "environment": [
                        "MZ_SSLMODE"
                    ]
                }
            }
        }
    },
    "types": {
        "materialize:index/ClusterScheduling:ClusterScheduling": {
            "properties": {
                "onRefresh": {
                    "$ref": "#/types/materialize:index/ClusterSchedulingOnRefresh:ClusterSchedulingOnRefresh",
                    "description": "Configuration for refreshing the cluster.\n"
                }
            },
            "type": "object"
        },
        "materialize:index/ClusterSchedulingOnRefresh:ClusterSchedulingOnRefresh": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "hydrationTimeEstimate": {
                    "type": "string"
                },
                "rehydrationTimeEstimate": {
                    "type": "string",
                    "deprecationMessage": "Use `hydration_time_estimate` instead."
                }
            },
            "type": "object"
        },
        "materialize:index/ConnectionAwsAccessKeyId:ConnectionAwsAccessKeyId": {
            "properties": {
                "secret": {
                    "$ref": "#/types/materialize:index/ConnectionAwsAccessKeyIdSecret:ConnectionAwsAccessKeyIdSecret",
                    "description": "The `access_key_id` secret value. Conflicts with `text` within this block.\n",
                    "willReplaceOnChanges": true
                },
                "text": {
                    "type": "string",
                    "description": "The `access_key_id` text value. Conflicts with `secret` within this block\n",
                    "secret": true
                }
            },
            "type": "object"
        },
        "materialize:index/ConnectionAwsAccessKeyIdSecret:ConnectionAwsAccessKeyIdSecret": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the connection database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the connection.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the connection schema in Materialize. Defaults to `public`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/ConnectionAwsSecretAccessKey:ConnectionAwsSecretAccessKey": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The secret*access*key database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The secret*access*key name.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The secret*access*key schema name. Defaults to `public`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/ConnectionAwsSessionToken:ConnectionAwsSessionToken": {
            "properties": {
                "secret": {
                    "$ref": "#/types/materialize:index/ConnectionAwsSessionTokenSecret:ConnectionAwsSessionTokenSecret",
                    "description": "The `session_token` secret value. Conflicts with `text` within this block.\n",
                    "willReplaceOnChanges": true
                },
                "text": {
                    "type": "string",
                    "description": "The `session_token` text value. Conflicts with `secret` within this block\n",
                    "secret": true
                }
            },
            "type": "object"
        },
        "materialize:index/ConnectionAwsSessionTokenSecret:ConnectionAwsSessionTokenSecret": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the connection database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the connection.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the connection schema in Materialize. Defaults to `public`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/ConnectionConfluentSchemaRegistryAwsPrivatelink:ConnectionConfluentSchemaRegistryAwsPrivatelink": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The aws_privatelink database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The aws_privatelink name.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The aws_privatelink schema name. Defaults to `public`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/ConnectionConfluentSchemaRegistryPassword:ConnectionConfluentSchemaRegistryPassword": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The password database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The password name.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The password schema name. Defaults to `public`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/ConnectionConfluentSchemaRegistrySshTunnel:ConnectionConfluentSchemaRegistrySshTunnel": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The ssh_tunnel database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The ssh_tunnel name.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The ssh_tunnel schema name. Defaults to `public`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/ConnectionConfluentSchemaRegistrySslCertificate:ConnectionConfluentSchemaRegistrySslCertificate": {
            "properties": {
                "secret": {
                    "$ref": "#/types/materialize:index/ConnectionConfluentSchemaRegistrySslCertificateSecret:ConnectionConfluentSchemaRegistrySslCertificateSecret",
                    "description": "The `ssl_certificate` secret value. Conflicts with `text` within this block.\n",
                    "willReplaceOnChanges": true
                },
                "text": {
                    "type": "string",
                    "description": "The `ssl_certificate` text value. Conflicts with `secret` within this block\n",
                    "secret": true
                }
            },
            "type": "object"
        },
        "materialize:index/ConnectionConfluentSchemaRegistrySslCertificateAuthority:ConnectionConfluentSchemaRegistrySslCertificateAuthority": {
            "properties": {
                "secret": {
                    "$ref": "#/types/materialize:index/ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecret:ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecret",
                    "description": "The `ssl_certificate_authority` secret value. Conflicts with `text` within this block.\n",
                    "willReplaceOnChanges": true
                },
                "text": {
                    "type": "string",
                    "description": "The `ssl_certificate_authority` text value. Conflicts with `secret` within this block\n",
                    "secret": true
                }
            },
            "type": "object"
        },
        "materialize:index/ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecret:ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecret": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the connection database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the connection.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the connection schema in Materialize. Defaults to `public`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/ConnectionConfluentSchemaRegistrySslCertificateSecret:ConnectionConfluentSchemaRegistrySslCertificateSecret": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the connection database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the connection.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the connection schema in Materialize. Defaults to `public`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/ConnectionConfluentSchemaRegistrySslKey:ConnectionConfluentSchemaRegistrySslKey": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The ssl_key database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The ssl_key name.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The ssl_key schema name. Defaults to `public`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/ConnectionConfluentSchemaRegistryUsername:ConnectionConfluentSchemaRegistryUsername": {
            "properties": {
                "secret": {
                    "$ref": "#/types/materialize:index/ConnectionConfluentSchemaRegistryUsernameSecret:ConnectionConfluentSchemaRegistryUsernameSecret",
                    "description": "The `username` secret value. Conflicts with `text` within this block.\n",
                    "willReplaceOnChanges": true
                },
                "text": {
                    "type": "string",
                    "description": "The `username` text value. Conflicts with `secret` within this block\n",
                    "secret": true
                }
            },
            "type": "object"
        },
        "materialize:index/ConnectionConfluentSchemaRegistryUsernameSecret:ConnectionConfluentSchemaRegistryUsernameSecret": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the connection database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the connection.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the connection schema in Materialize. Defaults to `public`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/ConnectionKafkaAwsPrivatelink:ConnectionKafkaAwsPrivatelink": {
            "properties": {
                "privatelinkConnection": {
                    "$ref": "#/types/materialize:index/ConnectionKafkaAwsPrivatelinkPrivatelinkConnection:ConnectionKafkaAwsPrivatelinkPrivatelinkConnection",
                    "description": "The AWS PrivateLink connection name in Materialize.\n"
                },
                "privatelinkConnectionPort": {
                    "type": "integer",
                    "description": "The port of the AWS PrivateLink connection.\n"
                }
            },
            "type": "object",
            "required": [
                "privatelinkConnection",
                "privatelinkConnectionPort"
            ]
        },
        "materialize:index/ConnectionKafkaAwsPrivatelinkPrivatelinkConnection:ConnectionKafkaAwsPrivatelinkPrivatelinkConnection": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the connection database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the connection.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the connection schema in Materialize. Defaults to `public`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/ConnectionKafkaKafkaBroker:ConnectionKafkaKafkaBroker": {
            "properties": {
                "availabilityZone": {
                    "type": "string",
                    "description": "The availability zone of the Kafka broker.\n"
                },
                "broker": {
                    "type": "string",
                    "description": "The Kafka broker, in the form of `host:port`.\n"
                },
                "privatelinkConnection": {
                    "$ref": "#/types/materialize:index/ConnectionKafkaKafkaBrokerPrivatelinkConnection:ConnectionKafkaKafkaBrokerPrivatelinkConnection",
                    "description": "The AWS PrivateLink connection name in Materialize.\n"
                },
                "sshTunnel": {
                    "$ref": "#/types/materialize:index/ConnectionKafkaKafkaBrokerSshTunnel:ConnectionKafkaKafkaBrokerSshTunnel",
                    "description": "The name of an SSH tunnel connection to route network traffic through by default.\n"
                },
                "targetGroupPort": {
                    "type": "integer",
                    "description": "The port of the target group associated with the Kafka broker.\n"
                }
            },
            "type": "object",
            "required": [
                "broker"
            ]
        },
        "materialize:index/ConnectionKafkaKafkaBrokerPrivatelinkConnection:ConnectionKafkaKafkaBrokerPrivatelinkConnection": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the connection database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the connection.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the connection schema in Materialize. Defaults to `public`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/ConnectionKafkaKafkaBrokerSshTunnel:ConnectionKafkaKafkaBrokerSshTunnel": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The ssh_tunnel database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The ssh_tunnel name.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The ssh_tunnel schema name. Defaults to `public`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/ConnectionKafkaSaslPassword:ConnectionKafkaSaslPassword": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The sasl_password database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The sasl_password name.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The sasl_password schema name. Defaults to `public`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/ConnectionKafkaSaslUsername:ConnectionKafkaSaslUsername": {
            "properties": {
                "secret": {
                    "$ref": "#/types/materialize:index/ConnectionKafkaSaslUsernameSecret:ConnectionKafkaSaslUsernameSecret",
                    "description": "The `sasl_username` secret value. Conflicts with `text` within this block.\n",
                    "willReplaceOnChanges": true
                },
                "text": {
                    "type": "string",
                    "description": "The `sasl_username` text value. Conflicts with `secret` within this block\n",
                    "secret": true
                }
            },
            "type": "object"
        },
        "materialize:index/ConnectionKafkaSaslUsernameSecret:ConnectionKafkaSaslUsernameSecret": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the connection database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the connection.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the connection schema in Materialize. Defaults to `public`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/ConnectionKafkaSshTunnel:ConnectionKafkaSshTunnel": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The ssh_tunnel database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The ssh_tunnel name.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The ssh_tunnel schema name. Defaults to `public`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/ConnectionKafkaSslCertificate:ConnectionKafkaSslCertificate": {
            "properties": {
                "secret": {
                    "$ref": "#/types/materialize:index/ConnectionKafkaSslCertificateSecret:ConnectionKafkaSslCertificateSecret",
                    "description": "The `ssl_certificate` secret value. Conflicts with `text` within this block.\n",
                    "willReplaceOnChanges": true
                },
                "text": {
                    "type": "string",
                    "description": "The `ssl_certificate` text value. Conflicts with `secret` within this block\n",
                    "secret": true
                }
            },
            "type": "object"
        },
        "materialize:index/ConnectionKafkaSslCertificateAuthority:ConnectionKafkaSslCertificateAuthority": {
            "properties": {
                "secret": {
                    "$ref": "#/types/materialize:index/ConnectionKafkaSslCertificateAuthoritySecret:ConnectionKafkaSslCertificateAuthoritySecret",
                    "description": "The `ssl_certificate_authority` secret value. Conflicts with `text` within this block.\n",
                    "willReplaceOnChanges": true
                },
                "text": {
                    "type": "string",
                    "description": "The `ssl_certificate_authority` text value. Conflicts with `secret` within this block\n",
                    "secret": true
                }
            },
            "type": "object"
        },
        "materialize:index/ConnectionKafkaSslCertificateAuthoritySecret:ConnectionKafkaSslCertificateAuthoritySecret": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the connection database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the connection.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the connection schema in Materialize. Defaults to `public`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/ConnectionKafkaSslCertificateSecret:ConnectionKafkaSslCertificateSecret": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the connection database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the connection.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the connection schema in Materialize. Defaults to `public`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/ConnectionKafkaSslKey:ConnectionKafkaSslKey": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The ssl_key database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The ssl_key name.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The ssl_key schema name. Defaults to `public`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/ConnectionMysqlAwsPrivatelink:ConnectionMysqlAwsPrivatelink": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The aws_privatelink database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The aws_privatelink name.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The aws_privatelink schema name. Defaults to `public`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/ConnectionMysqlPassword:ConnectionMysqlPassword": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The password database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The password name.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The password schema name. Defaults to `public`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/ConnectionMysqlSshTunnel:ConnectionMysqlSshTunnel": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The ssh_tunnel database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The ssh_tunnel name.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The ssh_tunnel schema name. Defaults to `public`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/ConnectionMysqlSslCertificate:ConnectionMysqlSslCertificate": {
            "properties": {
                "secret": {
                    "$ref": "#/types/materialize:index/ConnectionMysqlSslCertificateSecret:ConnectionMysqlSslCertificateSecret",
                    "description": "The `ssl_certificate` secret value. Conflicts with `text` within this block.\n",
                    "willReplaceOnChanges": true
                },
                "text": {
                    "type": "string",
                    "description": "The `ssl_certificate` text value. Conflicts with `secret` within this block\n",
                    "secret": true
                }
            },
            "type": "object"
        },
        "materialize:index/ConnectionMysqlSslCertificateAuthority:ConnectionMysqlSslCertificateAuthority": {
            "properties": {
                "secret": {
                    "$ref": "#/types/materialize:index/ConnectionMysqlSslCertificateAuthoritySecret:ConnectionMysqlSslCertificateAuthoritySecret",
                    "description": "The `ssl_certificate_authority` secret value. Conflicts with `text` within this block.\n",
                    "willReplaceOnChanges": true
                },
                "text": {
                    "type": "string",
                    "description": "The `ssl_certificate_authority` text value. Conflicts with `secret` within this block\n",
                    "secret": true
                }
            },
            "type": "object"
        },
        "materialize:index/ConnectionMysqlSslCertificateAuthoritySecret:ConnectionMysqlSslCertificateAuthoritySecret": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the connection database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the connection.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the connection schema in Materialize. Defaults to `public`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/ConnectionMysqlSslCertificateSecret:ConnectionMysqlSslCertificateSecret": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the connection database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the connection.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the connection schema in Materialize. Defaults to `public`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/ConnectionMysqlSslKey:ConnectionMysqlSslKey": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The ssl_key database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The ssl_key name.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The ssl_key schema name. Defaults to `public`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/ConnectionMysqlUser:ConnectionMysqlUser": {
            "properties": {
                "secret": {
                    "$ref": "#/types/materialize:index/ConnectionMysqlUserSecret:ConnectionMysqlUserSecret",
                    "description": "The `user` secret value. Conflicts with `text` within this block.\n",
                    "willReplaceOnChanges": true
                },
                "text": {
                    "type": "string",
                    "description": "The `user` text value. Conflicts with `secret` within this block\n",
                    "secret": true
                }
            },
            "type": "object"
        },
        "materialize:index/ConnectionMysqlUserSecret:ConnectionMysqlUserSecret": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the connection database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the connection.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the connection schema in Materialize. Defaults to `public`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/ConnectionPostgresAwsPrivatelink:ConnectionPostgresAwsPrivatelink": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The aws_privatelink database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The aws_privatelink name.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The aws_privatelink schema name. Defaults to `public`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/ConnectionPostgresPassword:ConnectionPostgresPassword": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The password database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The password name.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The password schema name. Defaults to `public`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/ConnectionPostgresSshTunnel:ConnectionPostgresSshTunnel": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The ssh_tunnel database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The ssh_tunnel name.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The ssh_tunnel schema name. Defaults to `public`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/ConnectionPostgresSslCertificate:ConnectionPostgresSslCertificate": {
            "properties": {
                "secret": {
                    "$ref": "#/types/materialize:index/ConnectionPostgresSslCertificateSecret:ConnectionPostgresSslCertificateSecret",
                    "description": "The `ssl_certificate` secret value. Conflicts with `text` within this block.\n",
                    "willReplaceOnChanges": true
                },
                "text": {
                    "type": "string",
                    "description": "The `ssl_certificate` text value. Conflicts with `secret` within this block\n",
                    "secret": true
                }
            },
            "type": "object"
        },
        "materialize:index/ConnectionPostgresSslCertificateAuthority:ConnectionPostgresSslCertificateAuthority": {
            "properties": {
                "secret": {
                    "$ref": "#/types/materialize:index/ConnectionPostgresSslCertificateAuthoritySecret:ConnectionPostgresSslCertificateAuthoritySecret",
                    "description": "The `ssl_certificate_authority` secret value. Conflicts with `text` within this block.\n",
                    "willReplaceOnChanges": true
                },
                "text": {
                    "type": "string",
                    "description": "The `ssl_certificate_authority` text value. Conflicts with `secret` within this block\n",
                    "secret": true
                }
            },
            "type": "object"
        },
        "materialize:index/ConnectionPostgresSslCertificateAuthoritySecret:ConnectionPostgresSslCertificateAuthoritySecret": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the connection database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the connection.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the connection schema in Materialize. Defaults to `public`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/ConnectionPostgresSslCertificateSecret:ConnectionPostgresSslCertificateSecret": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the connection database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the connection.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the connection schema in Materialize. Defaults to `public`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/ConnectionPostgresSslKey:ConnectionPostgresSslKey": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The ssl_key database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The ssl_key name.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The ssl_key schema name. Defaults to `public`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/ConnectionPostgresUser:ConnectionPostgresUser": {
            "properties": {
                "secret": {
                    "$ref": "#/types/materialize:index/ConnectionPostgresUserSecret:ConnectionPostgresUserSecret",
                    "description": "The `user` secret value. Conflicts with `text` within this block.\n",
                    "willReplaceOnChanges": true
                },
                "text": {
                    "type": "string",
                    "description": "The `user` text value. Conflicts with `secret` within this block\n",
                    "secret": true
                }
            },
            "type": "object"
        },
        "materialize:index/ConnectionPostgresUserSecret:ConnectionPostgresUserSecret": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the connection database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the connection.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the connection schema in Materialize. Defaults to `public`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/GetClusterReplicasClusterReplica:GetClusterReplicasClusterReplica": {
            "properties": {
                "availabilityZone": {
                    "type": "string"
                },
                "cluster": {
                    "type": "string"
                },
                "disk": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of this resource.\n"
                },
                "name": {
                    "type": "string"
                },
                "size": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "availabilityZone",
                "cluster",
                "disk",
                "id",
                "name",
                "size"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "materialize:index/GetClustersCluster:GetClustersCluster": {
            "properties": {
                "disk": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of this resource.\n"
                },
                "managed": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "replicationFactor": {
                    "type": "integer"
                },
                "size": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "disk",
                "id",
                "managed",
                "name",
                "replicationFactor",
                "size"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "materialize:index/GetConnectionsConnection:GetConnectionsConnection": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "Limit connections to a specific database\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of this resource.\n"
                },
                "name": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string",
                    "description": "Limit connections to a specific schema within a specific database\n"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "databaseName",
                "id",
                "name",
                "schemaName",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "materialize:index/GetDatabasesDatabase:GetDatabasesDatabase": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of this resource.\n"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "materialize:index/GetIndexesIndex:GetIndexesIndex": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of this resource.\n"
                },
                "name": {
                    "type": "string"
                },
                "objDatabase": {
                    "type": "string"
                },
                "objName": {
                    "type": "string"
                },
                "objSchema": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name",
                "objDatabase",
                "objName",
                "objSchema"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "materialize:index/GetMaterializedViewsMaterializedView:GetMaterializedViewsMaterializedView": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "Limit materialized views to a specific database\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of this resource.\n"
                },
                "name": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string",
                    "description": "Limit materialized views to a specific schema within a specific database\n"
                }
            },
            "type": "object",
            "required": [
                "databaseName",
                "id",
                "name",
                "schemaName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "materialize:index/GetRolesRole:GetRolesRole": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of this resource.\n"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "materialize:index/GetSCIMConfigsConfiguration:GetSCIMConfigsConfiguration": {
            "properties": {
                "connectionName": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of this resource.\n"
                },
                "source": {
                    "type": "string"
                },
                "syncToUserManagement": {
                    "type": "boolean"
                },
                "tenantId": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "connectionName",
                "createdAt",
                "id",
                "source",
                "syncToUserManagement",
                "tenantId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "materialize:index/GetSCIMGroupsGroup:GetSCIMGroupsGroup": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of this resource.\n"
                },
                "managedBy": {
                    "type": "string"
                },
                "metadata": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/materialize:index/GetSCIMGroupsGroupRole:GetSCIMGroupsGroupRole"
                    }
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/materialize:index/GetSCIMGroupsGroupUser:GetSCIMGroupsGroupUser"
                    }
                }
            },
            "type": "object",
            "required": [
                "description",
                "id",
                "managedBy",
                "metadata",
                "name",
                "roles",
                "users"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "materialize:index/GetSCIMGroupsGroupRole:GetSCIMGroupsGroupRole": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of this resource.\n"
                },
                "isDefault": {
                    "type": "boolean"
                },
                "key": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "description",
                "id",
                "isDefault",
                "key",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "materialize:index/GetSCIMGroupsGroupUser:GetSCIMGroupsGroupUser": {
            "properties": {
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of this resource.\n"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "email",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "materialize:index/GetSSOConfigSsoConfig:GetSSOConfigSsoConfig": {
            "properties": {
                "domains": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/materialize:index/GetSSOConfigSsoConfigDomain:GetSSOConfigSsoConfigDomain"
                    }
                },
                "enabled": {
                    "type": "boolean"
                },
                "groups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/materialize:index/GetSSOConfigSsoConfigGroup:GetSSOConfigSsoConfigGroup"
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of this resource.\n"
                },
                "oidcClientId": {
                    "type": "string"
                },
                "oidcSecret": {
                    "type": "string"
                },
                "publicCertificate": {
                    "type": "string"
                },
                "roleIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "signRequest": {
                    "type": "boolean"
                },
                "ssoEndpoint": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "domains",
                "enabled",
                "groups",
                "id",
                "oidcClientId",
                "oidcSecret",
                "publicCertificate",
                "roleIds",
                "signRequest",
                "ssoEndpoint",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "materialize:index/GetSSOConfigSsoConfigDomain:GetSSOConfigSsoConfigDomain": {
            "properties": {
                "domain": {
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of this resource.\n"
                },
                "validated": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "domain",
                "id",
                "validated"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "materialize:index/GetSSOConfigSsoConfigGroup:GetSSOConfigSsoConfigGroup": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "group": {
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of this resource.\n"
                },
                "roleIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "group",
                "id",
                "roleIds"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "materialize:index/GetSchemasSchema:GetSchemasSchema": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "Limit schemas to a specific database\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of this resource.\n"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "databaseName",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "materialize:index/GetSecretsSecret:GetSecretsSecret": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "Limit secrets to a specific database\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of this resource.\n"
                },
                "name": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string",
                    "description": "Limit secrets to a specific schema within a specific database\n"
                }
            },
            "type": "object",
            "required": [
                "databaseName",
                "id",
                "name",
                "schemaName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "materialize:index/GetSinksSink:GetSinksSink": {
            "properties": {
                "clusterName": {
                    "type": "string"
                },
                "connectionName": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string",
                    "description": "Limit sinks to a specific database\n"
                },
                "envelopeType": {
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of this resource.\n"
                },
                "name": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string",
                    "description": "Limit sinks to a specific schema within a specific database\n"
                },
                "size": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "clusterName",
                "connectionName",
                "databaseName",
                "envelopeType",
                "id",
                "name",
                "schemaName",
                "size",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "materialize:index/GetSourcesSource:GetSourcesSource": {
            "properties": {
                "clusterName": {
                    "type": "string"
                },
                "connectionName": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string",
                    "description": "Limit sources to a specific database\n"
                },
                "envelopeType": {
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of this resource.\n"
                },
                "name": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string",
                    "description": "Limit sources to a specific schema within a specific database\n"
                },
                "size": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "clusterName",
                "connectionName",
                "databaseName",
                "envelopeType",
                "id",
                "name",
                "schemaName",
                "size",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "materialize:index/GetSystemParametersParameter:GetSystemParametersParameter": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the specific system parameter to fetch.\n"
                },
                "setting": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "description",
                "name",
                "setting"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "materialize:index/GetTablesTable:GetTablesTable": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "Limit tables to a specific database\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of this resource.\n"
                },
                "name": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string",
                    "description": "Limit tables to a specific schema within a specific database\n"
                }
            },
            "type": "object",
            "required": [
                "databaseName",
                "id",
                "name",
                "schemaName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "materialize:index/GetTypesType:GetTypesType": {
            "properties": {
                "category": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string",
                    "description": "Limit types to a specific database\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of this resource.\n"
                },
                "name": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string",
                    "description": "Limit types to a specific schema within a specific database\n"
                }
            },
            "type": "object",
            "required": [
                "category",
                "databaseName",
                "id",
                "name",
                "schemaName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "materialize:index/GetViewsView:GetViewsView": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "Limit views to a specific database\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of this resource.\n"
                },
                "name": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string",
                    "description": "Limit views to a specific schema within a specific database\n"
                }
            },
            "type": "object",
            "required": [
                "databaseName",
                "id",
                "name",
                "schemaName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "materialize:index/IndexColExpr:IndexColExpr": {
            "properties": {
                "field": {
                    "type": "string",
                    "description": "The name of the option you want to set.\n"
                }
            },
            "type": "object",
            "required": [
                "field"
            ]
        },
        "materialize:index/IndexObjName:IndexObjName": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The obj_name database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The obj_name name.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The obj_name schema name. Defaults to `public`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/RegionRegion:RegionRegion": {
            "properties": {
                "cloudProvider": {
                    "type": "string"
                },
                "host": {
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of this resource.\n"
                },
                "name": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "cloudProvider",
                "host",
                "id",
                "name",
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "materialize:index/SinkKafkaEnvelope:SinkKafkaEnvelope": {
            "properties": {
                "debezium": {
                    "type": "boolean",
                    "description": "The generated schemas have a Debezium-style diff envelope to capture changes in the input view or source.\n",
                    "willReplaceOnChanges": true
                },
                "upsert": {
                    "type": "boolean",
                    "description": "The sink emits data with upsert semantics: updates and inserts for the given key are expressed as a value, and deletes are expressed as a null value payload in Kafka.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "materialize:index/SinkKafkaFormat:SinkKafkaFormat": {
            "properties": {
                "avro": {
                    "$ref": "#/types/materialize:index/SinkKafkaFormatAvro:SinkKafkaFormatAvro",
                    "description": "Avro format.\n",
                    "willReplaceOnChanges": true
                },
                "json": {
                    "type": "boolean",
                    "description": "JSON format.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "materialize:index/SinkKafkaFormatAvro:SinkKafkaFormatAvro": {
            "properties": {
                "avroDocColumns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/materialize:index/SinkKafkaFormatAvroAvroDocColumn:SinkKafkaFormatAvroAvroDocColumn"
                    },
                    "willReplaceOnChanges": true
                },
                "avroDocType": {
                    "$ref": "#/types/materialize:index/SinkKafkaFormatAvroAvroDocType:SinkKafkaFormatAvroAvroDocType",
                    "willReplaceOnChanges": true
                },
                "avroKeyFullname": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "avroValueFullname": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "keyCompatibilityLevel": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "schemaRegistryConnection": {
                    "$ref": "#/types/materialize:index/SinkKafkaFormatAvroSchemaRegistryConnection:SinkKafkaFormatAvroSchemaRegistryConnection",
                    "willReplaceOnChanges": true
                },
                "valueCompatibilityLevel": {
                    "type": "string",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "schemaRegistryConnection"
            ]
        },
        "materialize:index/SinkKafkaFormatAvroAvroDocColumn:SinkKafkaFormatAvroAvroDocColumn": {
            "properties": {
                "column": {
                    "type": "string"
                },
                "doc": {
                    "type": "string"
                },
                "key": {
                    "type": "boolean",
                    "description": "An optional list of columns to use for the Kafka key. If unspecified, the Kafka key is left unset.\n"
                },
                "object": {
                    "$ref": "#/types/materialize:index/SinkKafkaFormatAvroAvroDocColumnObject:SinkKafkaFormatAvroAvroDocColumnObject",
                    "willReplaceOnChanges": true
                },
                "value": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "column",
                "doc",
                "object"
            ]
        },
        "materialize:index/SinkKafkaFormatAvroAvroDocColumnObject:SinkKafkaFormatAvroAvroDocColumnObject": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the sink database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the sink.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the sink schema in Materialize. Defaults to `public`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/SinkKafkaFormatAvroAvroDocType:SinkKafkaFormatAvroAvroDocType": {
            "properties": {
                "doc": {
                    "type": "string"
                },
                "key": {
                    "type": "boolean",
                    "description": "An optional list of columns to use for the Kafka key. If unspecified, the Kafka key is left unset.\n"
                },
                "object": {
                    "$ref": "#/types/materialize:index/SinkKafkaFormatAvroAvroDocTypeObject:SinkKafkaFormatAvroAvroDocTypeObject",
                    "willReplaceOnChanges": true
                },
                "value": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "doc",
                "object"
            ]
        },
        "materialize:index/SinkKafkaFormatAvroAvroDocTypeObject:SinkKafkaFormatAvroAvroDocTypeObject": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the sink database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the sink.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the sink schema in Materialize. Defaults to `public`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/SinkKafkaFormatAvroSchemaRegistryConnection:SinkKafkaFormatAvroSchemaRegistryConnection": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the sink database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the sink.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the sink schema in Materialize. Defaults to `public`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/SinkKafkaFrom:SinkKafkaFrom": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The from database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The from name.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The from schema name. Defaults to `public`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/SinkKafkaKafkaConnection:SinkKafkaKafkaConnection": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The kafka_connection database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The kafka_connection name.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The kafka_connection schema name. Defaults to `public`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/SourceKafkaEnvelope:SourceKafkaEnvelope": {
            "properties": {
                "debezium": {
                    "type": "boolean",
                    "description": "Use the Debezium envelope, which uses a diff envelope to handle CRUD operations.\n",
                    "willReplaceOnChanges": true
                },
                "none": {
                    "type": "boolean",
                    "description": "Use an append-only envelope. This means that records will only be appended and cannot be updated or deleted.\n",
                    "willReplaceOnChanges": true
                },
                "upsert": {
                    "type": "boolean",
                    "description": "Use the upsert envelope, which uses message keys to handle CRUD operations.\n",
                    "willReplaceOnChanges": true
                },
                "upsertOptions": {
                    "$ref": "#/types/materialize:index/SourceKafkaEnvelopeUpsertOptions:SourceKafkaEnvelopeUpsertOptions",
                    "description": "Options for the upsert envelope.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "materialize:index/SourceKafkaEnvelopeUpsertOptions:SourceKafkaEnvelopeUpsertOptions": {
            "properties": {
                "valueDecodingErrors": {
                    "$ref": "#/types/materialize:index/SourceKafkaEnvelopeUpsertOptionsValueDecodingErrors:SourceKafkaEnvelopeUpsertOptionsValueDecodingErrors",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "materialize:index/SourceKafkaEnvelopeUpsertOptionsValueDecodingErrors:SourceKafkaEnvelopeUpsertOptionsValueDecodingErrors": {
            "properties": {
                "inline": {
                    "$ref": "#/types/materialize:index/SourceKafkaEnvelopeUpsertOptionsValueDecodingErrorsInline:SourceKafkaEnvelopeUpsertOptionsValueDecodingErrorsInline"
                }
            },
            "type": "object"
        },
        "materialize:index/SourceKafkaEnvelopeUpsertOptionsValueDecodingErrorsInline:SourceKafkaEnvelopeUpsertOptionsValueDecodingErrorsInline": {
            "properties": {
                "alias": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "materialize:index/SourceKafkaExposeProgress:SourceKafkaExposeProgress": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The expose_progress database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The expose_progress name.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The expose_progress schema name. Defaults to `public`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/SourceKafkaFormat:SourceKafkaFormat": {
            "properties": {
                "avro": {
                    "$ref": "#/types/materialize:index/SourceKafkaFormatAvro:SourceKafkaFormatAvro",
                    "description": "Avro format.\n",
                    "willReplaceOnChanges": true
                },
                "bytes": {
                    "type": "boolean",
                    "description": "BYTES format.\n",
                    "willReplaceOnChanges": true
                },
                "csvs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/materialize:index/SourceKafkaFormatCsv:SourceKafkaFormatCsv"
                    },
                    "description": "CSV format.\n",
                    "willReplaceOnChanges": true
                },
                "json": {
                    "type": "boolean",
                    "description": "JSON format.\n",
                    "willReplaceOnChanges": true
                },
                "protobuf": {
                    "$ref": "#/types/materialize:index/SourceKafkaFormatProtobuf:SourceKafkaFormatProtobuf",
                    "description": "Protobuf format.\n",
                    "willReplaceOnChanges": true
                },
                "text": {
                    "type": "boolean",
                    "description": "Text format.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "materialize:index/SourceKafkaFormatAvro:SourceKafkaFormatAvro": {
            "properties": {
                "keyStrategy": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "schemaRegistryConnection": {
                    "$ref": "#/types/materialize:index/SourceKafkaFormatAvroSchemaRegistryConnection:SourceKafkaFormatAvroSchemaRegistryConnection",
                    "willReplaceOnChanges": true
                },
                "valueStrategy": {
                    "type": "string",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "schemaRegistryConnection"
            ]
        },
        "materialize:index/SourceKafkaFormatAvroSchemaRegistryConnection:SourceKafkaFormatAvroSchemaRegistryConnection": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the source database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the source.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the source schema in Materialize. Defaults to `public`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/SourceKafkaFormatCsv:SourceKafkaFormatCsv": {
            "properties": {
                "column": {
                    "type": "integer",
                    "willReplaceOnChanges": true
                },
                "delimitedBy": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "headers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "materialize:index/SourceKafkaFormatProtobuf:SourceKafkaFormatProtobuf": {
            "properties": {
                "message": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "schemaRegistryConnection": {
                    "$ref": "#/types/materialize:index/SourceKafkaFormatProtobufSchemaRegistryConnection:SourceKafkaFormatProtobufSchemaRegistryConnection",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "message",
                "schemaRegistryConnection"
            ]
        },
        "materialize:index/SourceKafkaFormatProtobufSchemaRegistryConnection:SourceKafkaFormatProtobufSchemaRegistryConnection": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the source database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the source.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the source schema in Materialize. Defaults to `public`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/SourceKafkaKafkaConnection:SourceKafkaKafkaConnection": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The kafka_connection database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The kafka_connection name.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The kafka_connection schema name. Defaults to `public`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/SourceKafkaKeyFormat:SourceKafkaKeyFormat": {
            "properties": {
                "avro": {
                    "$ref": "#/types/materialize:index/SourceKafkaKeyFormatAvro:SourceKafkaKeyFormatAvro",
                    "description": "Avro format.\n",
                    "willReplaceOnChanges": true
                },
                "bytes": {
                    "type": "boolean",
                    "description": "BYTES format.\n",
                    "willReplaceOnChanges": true
                },
                "csvs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/materialize:index/SourceKafkaKeyFormatCsv:SourceKafkaKeyFormatCsv"
                    },
                    "description": "CSV format.\n",
                    "willReplaceOnChanges": true
                },
                "json": {
                    "type": "boolean",
                    "description": "JSON format.\n",
                    "willReplaceOnChanges": true
                },
                "protobuf": {
                    "$ref": "#/types/materialize:index/SourceKafkaKeyFormatProtobuf:SourceKafkaKeyFormatProtobuf",
                    "description": "Protobuf format.\n",
                    "willReplaceOnChanges": true
                },
                "text": {
                    "type": "boolean",
                    "description": "Text format.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "materialize:index/SourceKafkaKeyFormatAvro:SourceKafkaKeyFormatAvro": {
            "properties": {
                "keyStrategy": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "schemaRegistryConnection": {
                    "$ref": "#/types/materialize:index/SourceKafkaKeyFormatAvroSchemaRegistryConnection:SourceKafkaKeyFormatAvroSchemaRegistryConnection",
                    "willReplaceOnChanges": true
                },
                "valueStrategy": {
                    "type": "string",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "schemaRegistryConnection"
            ]
        },
        "materialize:index/SourceKafkaKeyFormatAvroSchemaRegistryConnection:SourceKafkaKeyFormatAvroSchemaRegistryConnection": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the source database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the source.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the source schema in Materialize. Defaults to `public`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/SourceKafkaKeyFormatCsv:SourceKafkaKeyFormatCsv": {
            "properties": {
                "column": {
                    "type": "integer",
                    "willReplaceOnChanges": true
                },
                "delimitedBy": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "headers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "materialize:index/SourceKafkaKeyFormatProtobuf:SourceKafkaKeyFormatProtobuf": {
            "properties": {
                "message": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "schemaRegistryConnection": {
                    "$ref": "#/types/materialize:index/SourceKafkaKeyFormatProtobufSchemaRegistryConnection:SourceKafkaKeyFormatProtobufSchemaRegistryConnection",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "message",
                "schemaRegistryConnection"
            ]
        },
        "materialize:index/SourceKafkaKeyFormatProtobufSchemaRegistryConnection:SourceKafkaKeyFormatProtobufSchemaRegistryConnection": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the source database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the source.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the source schema in Materialize. Defaults to `public`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/SourceKafkaValueFormat:SourceKafkaValueFormat": {
            "properties": {
                "avro": {
                    "$ref": "#/types/materialize:index/SourceKafkaValueFormatAvro:SourceKafkaValueFormatAvro",
                    "description": "Avro format.\n",
                    "willReplaceOnChanges": true
                },
                "bytes": {
                    "type": "boolean",
                    "description": "BYTES format.\n",
                    "willReplaceOnChanges": true
                },
                "csvs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/materialize:index/SourceKafkaValueFormatCsv:SourceKafkaValueFormatCsv"
                    },
                    "description": "CSV format.\n",
                    "willReplaceOnChanges": true
                },
                "json": {
                    "type": "boolean",
                    "description": "JSON format.\n",
                    "willReplaceOnChanges": true
                },
                "protobuf": {
                    "$ref": "#/types/materialize:index/SourceKafkaValueFormatProtobuf:SourceKafkaValueFormatProtobuf",
                    "description": "Protobuf format.\n",
                    "willReplaceOnChanges": true
                },
                "text": {
                    "type": "boolean",
                    "description": "Text format.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "materialize:index/SourceKafkaValueFormatAvro:SourceKafkaValueFormatAvro": {
            "properties": {
                "keyStrategy": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "schemaRegistryConnection": {
                    "$ref": "#/types/materialize:index/SourceKafkaValueFormatAvroSchemaRegistryConnection:SourceKafkaValueFormatAvroSchemaRegistryConnection",
                    "willReplaceOnChanges": true
                },
                "valueStrategy": {
                    "type": "string",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "schemaRegistryConnection"
            ]
        },
        "materialize:index/SourceKafkaValueFormatAvroSchemaRegistryConnection:SourceKafkaValueFormatAvroSchemaRegistryConnection": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the source database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the source.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the source schema in Materialize. Defaults to `public`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/SourceKafkaValueFormatCsv:SourceKafkaValueFormatCsv": {
            "properties": {
                "column": {
                    "type": "integer",
                    "willReplaceOnChanges": true
                },
                "delimitedBy": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "headers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "materialize:index/SourceKafkaValueFormatProtobuf:SourceKafkaValueFormatProtobuf": {
            "properties": {
                "message": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "schemaRegistryConnection": {
                    "$ref": "#/types/materialize:index/SourceKafkaValueFormatProtobufSchemaRegistryConnection:SourceKafkaValueFormatProtobufSchemaRegistryConnection",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "message",
                "schemaRegistryConnection"
            ]
        },
        "materialize:index/SourceKafkaValueFormatProtobufSchemaRegistryConnection:SourceKafkaValueFormatProtobufSchemaRegistryConnection": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the source database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the source.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the source schema in Materialize. Defaults to `public`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/SourceLoadgenAuctionOptions:SourceLoadgenAuctionOptions": {
            "properties": {
                "scaleFactor": {
                    "type": "number",
                    "description": "(Deprecated) The scale factor for the generator. Defaults to 0.01 (~ 10MB).\n",
                    "deprecationMessage": "Scale factor is deprecated and will be removed in a future release.",
                    "willReplaceOnChanges": true
                },
                "tickInterval": {
                    "type": "string",
                    "description": "The interval at which the next datum should be emitted. Defaults to one second.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "materialize:index/SourceLoadgenCounterOptions:SourceLoadgenCounterOptions": {
            "properties": {
                "maxCardinality": {
                    "type": "integer",
                    "description": "Causes the generator to delete old values to keep the collection at most a given size. Defaults to unlimited.\n",
                    "willReplaceOnChanges": true
                },
                "scaleFactor": {
                    "type": "number",
                    "description": "(Deprecated) The scale factor for the generator. Defaults to 0.01 (~ 10MB).\n",
                    "deprecationMessage": "Scale factor is deprecated and will be removed in a future release.",
                    "willReplaceOnChanges": true
                },
                "tickInterval": {
                    "type": "string",
                    "description": "The interval at which the next datum should be emitted. Defaults to one second.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "materialize:index/SourceLoadgenExposeProgress:SourceLoadgenExposeProgress": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The expose_progress database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The expose_progress name.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The expose_progress schema name. Defaults to `public`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/SourceLoadgenKeyValueOptions:SourceLoadgenKeyValueOptions": {
            "properties": {
                "batchSize": {
                    "type": "integer",
                    "description": "The number of keys per partition to produce in each update.\n",
                    "willReplaceOnChanges": true
                },
                "keys": {
                    "type": "integer",
                    "description": "The number of keys in the source. This must be divisible by the product of 'partitions' and 'batch_size'.\n",
                    "willReplaceOnChanges": true
                },
                "partitions": {
                    "type": "integer",
                    "description": "The number of partitions to spread the keys across.\n",
                    "willReplaceOnChanges": true
                },
                "seed": {
                    "type": "integer",
                    "description": "A per-source seed for seeding the random data.\n",
                    "willReplaceOnChanges": true
                },
                "snapshotRounds": {
                    "type": "integer",
                    "description": "The number of rounds of data to produce as the source starts up.\n",
                    "willReplaceOnChanges": true
                },
                "tickInterval": {
                    "type": "string",
                    "description": "The interval at which the next datum should be emitted. Defaults to one second.\n",
                    "willReplaceOnChanges": true
                },
                "transactionalSnapshot": {
                    "type": "boolean",
                    "description": "Whether to emit the snapshot as a singular transaction.\n",
                    "willReplaceOnChanges": true
                },
                "valueSize": {
                    "type": "integer",
                    "description": "The number of bytes in each value.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "keys"
            ]
        },
        "materialize:index/SourceLoadgenMarketingOptions:SourceLoadgenMarketingOptions": {
            "properties": {
                "scaleFactor": {
                    "type": "number",
                    "description": "(Deprecated) The scale factor for the generator. Defaults to 0.01 (~ 10MB).\n",
                    "deprecationMessage": "Scale factor is deprecated and will be removed in a future release.",
                    "willReplaceOnChanges": true
                },
                "tickInterval": {
                    "type": "string",
                    "description": "The interval at which the next datum should be emitted. Defaults to one second.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "materialize:index/SourceLoadgenTpchOptions:SourceLoadgenTpchOptions": {
            "properties": {
                "scaleFactor": {
                    "type": "number",
                    "description": "The scale factor for the generator. Defaults to 0.01 (~ 10MB).\n",
                    "willReplaceOnChanges": true
                },
                "tickInterval": {
                    "type": "string",
                    "description": "The interval at which the next datum should be emitted. Defaults to one second.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "materialize:index/SourceMysqlExposeProgress:SourceMysqlExposeProgress": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The expose_progress database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The expose_progress name.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The expose_progress schema name. Defaults to `public`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/SourceMysqlMysqlConnection:SourceMysqlMysqlConnection": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The mysql_connection database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The mysql_connection name.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The mysql_connection schema name. Defaults to `public`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/SourceMysqlTable:SourceMysqlTable": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The database of the table in Materialize.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name for the table, used in Materialize.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The schema of the table in Materialize.\n"
                },
                "upstreamName": {
                    "type": "string",
                    "description": "The name of the table in the upstream MySQL database.\n"
                },
                "upstreamSchemaName": {
                    "type": "string",
                    "description": "The schema of the table in the upstream MySQL database.\n"
                }
            },
            "type": "object",
            "required": [
                "upstreamName"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "databaseName",
                        "name",
                        "schemaName",
                        "upstreamName",
                        "upstreamSchemaName"
                    ]
                }
            }
        },
        "materialize:index/SourcePostgresExposeProgress:SourcePostgresExposeProgress": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The expose_progress database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The expose_progress name.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The expose_progress schema name. Defaults to `public`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/SourcePostgresPostgresConnection:SourcePostgresPostgresConnection": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The postgres_connection database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The postgres_connection name.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The postgres_connection schema name. Defaults to `public`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/SourcePostgresTable:SourcePostgresTable": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The database of the table in Materialize.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the table in Materialize.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The schema of the table in Materialize.\n"
                },
                "upstreamName": {
                    "type": "string",
                    "description": "The name of the table in the upstream Postgres database.\n"
                },
                "upstreamSchemaName": {
                    "type": "string",
                    "description": "The schema of the table in the upstream Postgres database.\n"
                }
            },
            "type": "object",
            "required": [
                "upstreamName"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "databaseName",
                        "name",
                        "schemaName",
                        "upstreamName",
                        "upstreamSchemaName"
                    ]
                }
            }
        },
        "materialize:index/SourceWebhookCheckOption:SourceWebhookCheckOption": {
            "properties": {
                "alias": {
                    "type": "string",
                    "description": "The alias for the check options.\n"
                },
                "bytes": {
                    "type": "boolean",
                    "description": "Change type to `bytea`.\n"
                },
                "field": {
                    "$ref": "#/types/materialize:index/SourceWebhookCheckOptionField:SourceWebhookCheckOptionField",
                    "description": "The field for the check options.\n"
                }
            },
            "type": "object",
            "required": [
                "field"
            ]
        },
        "materialize:index/SourceWebhookCheckOptionField:SourceWebhookCheckOptionField": {
            "properties": {
                "body": {
                    "type": "boolean"
                },
                "headers": {
                    "type": "boolean"
                },
                "secret": {
                    "$ref": "#/types/materialize:index/SourceWebhookCheckOptionFieldSecret:SourceWebhookCheckOptionFieldSecret",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "materialize:index/SourceWebhookCheckOptionFieldSecret:SourceWebhookCheckOptionFieldSecret": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the source database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the source.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the source schema in Materialize. Defaults to `public`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/SourceWebhookIncludeHeader:SourceWebhookIncludeHeader": {
            "properties": {
                "alias": {
                    "type": "string",
                    "description": "The alias for the header.\n"
                },
                "bytes": {
                    "type": "boolean",
                    "description": "Change type to `bytea`.\n"
                },
                "header": {
                    "type": "string",
                    "description": "The name for the header.\n"
                }
            },
            "type": "object",
            "required": [
                "header"
            ]
        },
        "materialize:index/SourceWebhookIncludeHeaders:SourceWebhookIncludeHeaders": {
            "properties": {
                "all": {
                    "type": "boolean",
                    "description": "Include all headers.\n"
                },
                "nots": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Headers that should be excluded.\n"
                },
                "onlies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Headers that should be included.\n"
                }
            },
            "type": "object"
        },
        "materialize:index/TableColumn:TableColumn": {
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "**Public Preview** Comment on an object in the database.\n"
                },
                "default": {
                    "type": "string",
                    "description": "A default value to use for the column in an INSERT statement if an explicit value is not provided. If not specified, `NULL` is assumed..\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The name of the column to be created in the table.\n",
                    "willReplaceOnChanges": true
                },
                "nullable": {
                    "type": "boolean",
                    "description": "Do not allow the column to contain `NULL` values. Columns without this constraint can contain `NULL` values.\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "The data type of the column indicated by name.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "name",
                "type"
            ]
        },
        "materialize:index/TypeListProperties:TypeListProperties": {
            "properties": {
                "elementType": {
                    "type": "string",
                    "description": "Creates a custom list whose elements are of `ELEMENT TYPE`\n"
                }
            },
            "type": "object",
            "required": [
                "elementType"
            ]
        },
        "materialize:index/TypeMapProperties:TypeMapProperties": {
            "properties": {
                "keyType": {
                    "type": "string",
                    "description": "Creates a custom map whose keys are of `KEY TYPE`. `KEY TYPE` must resolve to text.\n"
                },
                "valueType": {
                    "type": "string",
                    "description": "Creates a custom map whose values are of `VALUE TYPE`.\n"
                }
            },
            "type": "object",
            "required": [
                "keyType",
                "valueType"
            ]
        },
        "materialize:index/TypeRowProperty:TypeRowProperty": {
            "properties": {
                "fieldName": {
                    "type": "string",
                    "description": "The name of a field in a row type.\n"
                },
                "fieldType": {
                    "type": "string",
                    "description": "The data type of a field indicated by `FIELD NAME`.\n"
                }
            },
            "type": "object",
            "required": [
                "fieldName",
                "fieldType"
            ]
        }
    },
    "provider": {
        "description": "The provider type for the materialize package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "baseEndpoint": {
                "type": "string",
                "description": "The base endpoint for Materialize.\n"
            },
            "cloudEndpoint": {
                "type": "string",
                "description": "The endpoint for the Materialize Cloud API.\n"
            },
            "database": {
                "type": "string",
                "description": "The Materialize database. Can also come from the `MZ_DATABASE` environment variable. Defaults to `materialize`.\n"
            },
            "defaultRegion": {
                "type": "string",
                "description": "The default region if not specified in the resource\n"
            },
            "endpoint": {
                "type": "string",
                "description": "The endpoint for the Materialize API.\n"
            },
            "password": {
                "type": "string",
                "description": "Materialize host. Can also come from the `MZ_PASSWORD` environment variable.\n",
                "secret": true
            },
            "sslmode": {
                "type": "string",
                "description": "For testing purposes, the SSL mode to use.\n"
            }
        },
        "inputProperties": {
            "baseEndpoint": {
                "type": "string",
                "description": "The base endpoint for Materialize.\n",
                "defaultInfo": {
                    "environment": [
                        "MZ_BASE_ENDPOINT"
                    ]
                }
            },
            "cloudEndpoint": {
                "type": "string",
                "description": "The endpoint for the Materialize Cloud API.\n",
                "defaultInfo": {
                    "environment": [
                        "MZ_CLOUD_ENDPOINT"
                    ]
                }
            },
            "database": {
                "type": "string",
                "description": "The Materialize database. Can also come from the `MZ_DATABASE` environment variable. Defaults to `materialize`.\n",
                "defaultInfo": {
                    "environment": [
                        "MZ_DATABASE"
                    ]
                }
            },
            "defaultRegion": {
                "type": "string",
                "description": "The default region if not specified in the resource\n",
                "defaultInfo": {
                    "environment": [
                        "MZ_DEFAULT_REGION"
                    ]
                }
            },
            "endpoint": {
                "type": "string",
                "description": "The endpoint for the Materialize API.\n",
                "defaultInfo": {
                    "environment": [
                        "MZ_ENDPOINT"
                    ]
                }
            },
            "password": {
                "type": "string",
                "description": "Materialize host. Can also come from the `MZ_PASSWORD` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "MZ_PASSWORD"
                    ]
                },
                "secret": true
            },
            "sslmode": {
                "type": "string",
                "description": "For testing purposes, the SSL mode to use.\n",
                "defaultInfo": {
                    "environment": [
                        "MZ_SSLMODE"
                    ]
                }
            }
        }
    },
    "resources": {
        "materialize:index/appPassword:AppPassword": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\n// Create a service user and app password\nconst productionDashboard = new materialize.Role(\"productionDashboard\", {});\nconst productionDashboardAppPassword = new materialize.AppPassword(\"productionDashboardAppPassword\", {\n    type: \"service\",\n    user: productionDashboard.name,\n    roles: [\"Member\"],\n});\nconst databaseGrantUsage = new materialize.GrantDatabase(\"databaseGrantUsage\", {\n    roleName: productionDashboard.name,\n    privilege: \"USAGE\",\n    databaseName: \"production_analytics\",\n});\n// Create a personal app password for the current user\nconst exampleAppPassword = new materialize.AppPassword(\"exampleAppPassword\", {});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\n# Create a service user and app password\nproduction_dashboard = materialize.Role(\"productionDashboard\")\nproduction_dashboard_app_password = materialize.AppPassword(\"productionDashboardAppPassword\",\n    type=\"service\",\n    user=production_dashboard.name,\n    roles=[\"Member\"])\ndatabase_grant_usage = materialize.GrantDatabase(\"databaseGrantUsage\",\n    role_name=production_dashboard.name,\n    privilege=\"USAGE\",\n    database_name=\"production_analytics\")\n# Create a personal app password for the current user\nexample_app_password = materialize.AppPassword(\"exampleAppPassword\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a service user and app password\n    var productionDashboard = new Materialize.Role(\"productionDashboard\");\n\n    var productionDashboardAppPassword = new Materialize.AppPassword(\"productionDashboardAppPassword\", new()\n    {\n        Type = \"service\",\n        User = productionDashboard.Name,\n        Roles = new[]\n        {\n            \"Member\",\n        },\n    });\n\n    var databaseGrantUsage = new Materialize.GrantDatabase(\"databaseGrantUsage\", new()\n    {\n        RoleName = productionDashboard.Name,\n        Privilege = \"USAGE\",\n        DatabaseName = \"production_analytics\",\n    });\n\n    // Create a personal app password for the current user\n    var exampleAppPassword = new Materialize.AppPassword(\"exampleAppPassword\");\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproductionDashboard, err := materialize.NewRole(ctx, \"productionDashboard\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = materialize.NewAppPassword(ctx, \"productionDashboardAppPassword\", \u0026materialize.AppPasswordArgs{\n\t\t\tType: pulumi.String(\"service\"),\n\t\t\tUser: productionDashboard.Name,\n\t\t\tRoles: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"Member\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = materialize.NewGrantDatabase(ctx, \"databaseGrantUsage\", \u0026materialize.GrantDatabaseArgs{\n\t\t\tRoleName:     productionDashboard.Name,\n\t\t\tPrivilege:    pulumi.String(\"USAGE\"),\n\t\t\tDatabaseName: pulumi.String(\"production_analytics\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = materialize.NewAppPassword(ctx, \"exampleAppPassword\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.Role;\nimport com.pulumi.materialize.AppPassword;\nimport com.pulumi.materialize.AppPasswordArgs;\nimport com.pulumi.materialize.GrantDatabase;\nimport com.pulumi.materialize.GrantDatabaseArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var productionDashboard = new Role(\"productionDashboard\");\n\n        var productionDashboardAppPassword = new AppPassword(\"productionDashboardAppPassword\", AppPasswordArgs.builder()        \n            .type(\"service\")\n            .user(productionDashboard.name())\n            .roles(\"Member\")\n            .build());\n\n        var databaseGrantUsage = new GrantDatabase(\"databaseGrantUsage\", GrantDatabaseArgs.builder()        \n            .roleName(productionDashboard.name())\n            .privilege(\"USAGE\")\n            .databaseName(\"production_analytics\")\n            .build());\n\n        var exampleAppPassword = new AppPassword(\"exampleAppPassword\");\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a service user and app password\n  productionDashboard:\n    type: materialize:Role\n  productionDashboardAppPassword:\n    type: materialize:AppPassword\n    properties:\n      type: service\n      user: ${productionDashboard.name}\n      roles:\n        - Member\n  databaseGrantUsage:\n    type: materialize:GrantDatabase\n    properties:\n      roleName: ${productionDashboard.name}\n      privilege: USAGE\n      databaseName: production_analytics\n  # Create a personal app password for the current user\n  exampleAppPassword:\n    type: materialize:AppPassword\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nApp passwords can be imported using the app password id\n\n```sh\n $ pulumi import materialize:index/appPassword:AppPassword example_app_password \u003capp_password_id\u003e\n```\n\n ",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "The time at which the app password was created.\n"
                },
                "name": {
                    "type": "string",
                    "description": "A human-readable name for the app password.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The value of the app password.\n",
                    "secret": true
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The roles to assign to the app password. Allowed values are 'Member' and 'Admin'. Only valid with service-type app passwords.\n"
                },
                "secret": {
                    "type": "string",
                    "secret": true
                },
                "type": {
                    "type": "string",
                    "description": "The type of the app password: personal or service.\n"
                },
                "user": {
                    "type": "string",
                    "description": "The user to associate with the app password. Only valid with service-type app passwords.\n"
                }
            },
            "required": [
                "createdAt",
                "name",
                "password",
                "secret"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "A human-readable name for the app password.\n",
                    "willReplaceOnChanges": true
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The roles to assign to the app password. Allowed values are 'Member' and 'Admin'. Only valid with service-type app passwords.\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "The type of the app password: personal or service.\n",
                    "willReplaceOnChanges": true
                },
                "user": {
                    "type": "string",
                    "description": "The user to associate with the app password. Only valid with service-type app passwords.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AppPassword resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "The time at which the app password was created.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "A human-readable name for the app password.\n",
                        "willReplaceOnChanges": true
                    },
                    "password": {
                        "type": "string",
                        "description": "The value of the app password.\n",
                        "secret": true
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The roles to assign to the app password. Allowed values are 'Member' and 'Admin'. Only valid with service-type app passwords.\n",
                        "willReplaceOnChanges": true
                    },
                    "secret": {
                        "type": "string",
                        "secret": true
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the app password: personal or service.\n",
                        "willReplaceOnChanges": true
                    },
                    "user": {
                        "type": "string",
                        "description": "The user to associate with the app password. Only valid with service-type app passwords.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/cloudRegion:CloudRegion": {
            "description": "The region resource allows you to manage regions in Materialize. When a new region is created, it automatically includes an 'xsmall' quickstart cluster as part of the initialization process. Users are billed for this quickstart cluster from the moment the region is created. To avoid unnecessary charges, you can connect to the new region and drop the quickstart cluster if it is not needed. Please note that disabling a region cannot be achieved directly through this provider. If you need to disable a region, contact Materialize support for assistance. This process ensures that any necessary cleanup and billing adjustments are handled properly.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\nconst example = new materialize.CloudRegion(\"example\", {regionId: \"aws/us-east-1\"});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\nexample = materialize.CloudRegion(\"example\", region_id=\"aws/us-east-1\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Materialize.CloudRegion(\"example\", new()\n    {\n        RegionId = \"aws/us-east-1\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.NewCloudRegion(ctx, \"example\", \u0026materialize.CloudRegionArgs{\n\t\t\tRegionId: pulumi.String(\"aws/us-east-1\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.CloudRegion;\nimport com.pulumi.materialize.CloudRegionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new CloudRegion(\"example\", CloudRegionArgs.builder()        \n            .regionId(\"aws/us-east-1\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: materialize:CloudRegion\n    properties:\n      regionId: aws/us-east-1\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nRegions can be imported using the `aws/` prefix followed by the region name.\n\n```sh\n $ pulumi import materialize:index/cloudRegion:CloudRegion example_region aws/us-east-1\n```\n\n ",
            "properties": {
                "enabledAt": {
                    "type": "string",
                    "description": "The timestamp when the region was enabled.\n"
                },
                "httpAddress": {
                    "type": "string",
                    "description": "The HTTP address of the region.\n"
                },
                "regionId": {
                    "type": "string",
                    "description": "The ID of the region to manage. Example: aws/us-west-2\n"
                },
                "regionState": {
                    "type": "boolean",
                    "description": "The state of the region. True if enabled, false otherwise.\n"
                },
                "resolvable": {
                    "type": "boolean",
                    "description": "Indicates if the region is resolvable.\n"
                },
                "sqlAddress": {
                    "type": "string",
                    "description": "The SQL address of the region.\n"
                }
            },
            "required": [
                "enabledAt",
                "httpAddress",
                "regionId",
                "regionState",
                "resolvable",
                "sqlAddress"
            ],
            "inputProperties": {
                "regionId": {
                    "type": "string",
                    "description": "The ID of the region to manage. Example: aws/us-west-2\n"
                }
            },
            "requiredInputs": [
                "regionId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CloudRegion resources.\n",
                "properties": {
                    "enabledAt": {
                        "type": "string",
                        "description": "The timestamp when the region was enabled.\n"
                    },
                    "httpAddress": {
                        "type": "string",
                        "description": "The HTTP address of the region.\n"
                    },
                    "regionId": {
                        "type": "string",
                        "description": "The ID of the region to manage. Example: aws/us-west-2\n"
                    },
                    "regionState": {
                        "type": "boolean",
                        "description": "The state of the region. True if enabled, false otherwise.\n"
                    },
                    "resolvable": {
                        "type": "boolean",
                        "description": "Indicates if the region is resolvable.\n"
                    },
                    "sqlAddress": {
                        "type": "string",
                        "description": "The SQL address of the region.\n"
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/cluster:Cluster": {
            "description": "Clusters describe logical compute resources that can be used by sources, sinks, indexes, and materialized views. Managed clusters are created by setting the `size` attribute\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\nconst exampleCluster = new materialize.Cluster(\"exampleCluster\", {});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\nexample_cluster = materialize.Cluster(\"exampleCluster\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleCluster = new Materialize.Cluster(\"exampleCluster\");\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.NewCluster(ctx, \"exampleCluster\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.Cluster;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleCluster = new Cluster(\"exampleCluster\");\n\n    }\n}\n```\n```yaml\nresources:\n  exampleCluster:\n    type: materialize:Cluster\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nClusters can be imported using the cluster id or name\n\n```sh\n $ pulumi import materialize:index/cluster:Cluster example_cluster \u003cregion\u003e:id:\u003ccluster_id\u003e\n```\n\n To import using the cluster name, you need to set the `identify_by_name` attribute to true\n\n```sh\n $ pulumi import materialize:index/cluster:Cluster example_cluster \u003cregion\u003e:name:\u003ccluster_name\u003e\n```\n\n Cluster id and information be found in the `mz_catalog.mz_clusters` table The region is the region where the database is located (e.g. aws/us-east-1) ",
            "properties": {
                "availabilityZones": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The specific availability zones of the cluster.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "**Public Preview** Comment on an object in the database.\n"
                },
                "disk": {
                    "type": "boolean",
                    "description": "**Deprecated**. This attribute is maintained for backward compatibility with existing configurations. New users should use 'cc' sizes for disk access.\n",
                    "deprecationMessage": "Disk replicas are deprecated and will be removed in a future release. The `disk` attribute will be enabled by default for 'cc' clusters"
                },
                "identifyByName": {
                    "type": "boolean",
                    "description": "Use the cluster name as the Terraform resource ID instead of the internal cluster ID.\n"
                },
                "introspectionDebugging": {
                    "type": "boolean",
                    "description": "Whether to introspect the gathering of the introspection data.\n"
                },
                "introspectionInterval": {
                    "type": "string",
                    "description": "The interval at which to collect introspection data.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the cluster.\n"
                },
                "ownershipRole": {
                    "type": "string",
                    "description": "The owernship role of the object.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n"
                },
                "replicationFactor": {
                    "type": "integer",
                    "description": "The number of replicas of each dataflow-powered object to maintain.\n"
                },
                "scheduling": {
                    "$ref": "#/types/materialize:index/ClusterScheduling:ClusterScheduling",
                    "description": "Defines the scheduling parameters for the cluster.\n"
                },
                "size": {
                    "type": "string",
                    "description": "The size of the managed cluster.\n"
                }
            },
            "required": [
                "availabilityZones",
                "disk",
                "name",
                "ownershipRole",
                "region",
                "replicationFactor"
            ],
            "inputProperties": {
                "availabilityZones": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The specific availability zones of the cluster.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "**Public Preview** Comment on an object in the database.\n"
                },
                "disk": {
                    "type": "boolean",
                    "description": "**Deprecated**. This attribute is maintained for backward compatibility with existing configurations. New users should use 'cc' sizes for disk access.\n",
                    "deprecationMessage": "Disk replicas are deprecated and will be removed in a future release. The `disk` attribute will be enabled by default for 'cc' clusters"
                },
                "identifyByName": {
                    "type": "boolean",
                    "description": "Use the cluster name as the Terraform resource ID instead of the internal cluster ID.\n"
                },
                "introspectionDebugging": {
                    "type": "boolean",
                    "description": "Whether to introspect the gathering of the introspection data.\n"
                },
                "introspectionInterval": {
                    "type": "string",
                    "description": "The interval at which to collect introspection data.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the cluster.\n",
                    "willReplaceOnChanges": true
                },
                "ownershipRole": {
                    "type": "string",
                    "description": "The owernship role of the object.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                    "willReplaceOnChanges": true
                },
                "replicationFactor": {
                    "type": "integer",
                    "description": "The number of replicas of each dataflow-powered object to maintain.\n"
                },
                "scheduling": {
                    "$ref": "#/types/materialize:index/ClusterScheduling:ClusterScheduling",
                    "description": "Defines the scheduling parameters for the cluster.\n"
                },
                "size": {
                    "type": "string",
                    "description": "The size of the managed cluster.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Cluster resources.\n",
                "properties": {
                    "availabilityZones": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The specific availability zones of the cluster.\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "**Public Preview** Comment on an object in the database.\n"
                    },
                    "disk": {
                        "type": "boolean",
                        "description": "**Deprecated**. This attribute is maintained for backward compatibility with existing configurations. New users should use 'cc' sizes for disk access.\n",
                        "deprecationMessage": "Disk replicas are deprecated and will be removed in a future release. The `disk` attribute will be enabled by default for 'cc' clusters"
                    },
                    "identifyByName": {
                        "type": "boolean",
                        "description": "Use the cluster name as the Terraform resource ID instead of the internal cluster ID.\n"
                    },
                    "introspectionDebugging": {
                        "type": "boolean",
                        "description": "Whether to introspect the gathering of the introspection data.\n"
                    },
                    "introspectionInterval": {
                        "type": "string",
                        "description": "The interval at which to collect introspection data.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The identifier for the cluster.\n",
                        "willReplaceOnChanges": true
                    },
                    "ownershipRole": {
                        "type": "string",
                        "description": "The owernship role of the object.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                        "willReplaceOnChanges": true
                    },
                    "replicationFactor": {
                        "type": "integer",
                        "description": "The number of replicas of each dataflow-powered object to maintain.\n"
                    },
                    "scheduling": {
                        "$ref": "#/types/materialize:index/ClusterScheduling:ClusterScheduling",
                        "description": "Defines the scheduling parameters for the cluster.\n"
                    },
                    "size": {
                        "type": "string",
                        "description": "The size of the managed cluster.\n"
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/clusterReplica:ClusterReplica": {
            "description": "Cluster replicas allocate physical compute resources for a cluster.\n\n*Note*: Cluster replicas are deprecated. We recommend migrating to a managed cluster using the `materialize.Cluster` resource and selecting `size`.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\nconst exampleClusterReplica = new materialize.ClusterReplica(\"exampleClusterReplica\", {\n    clusterName: \"cluster\",\n    size: \"2xsmall\",\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\nexample_cluster_replica = materialize.ClusterReplica(\"exampleClusterReplica\",\n    cluster_name=\"cluster\",\n    size=\"2xsmall\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleClusterReplica = new Materialize.ClusterReplica(\"exampleClusterReplica\", new()\n    {\n        ClusterName = \"cluster\",\n        Size = \"2xsmall\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.NewClusterReplica(ctx, \"exampleClusterReplica\", \u0026materialize.ClusterReplicaArgs{\n\t\t\tClusterName: pulumi.String(\"cluster\"),\n\t\t\tSize:        pulumi.String(\"2xsmall\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.ClusterReplica;\nimport com.pulumi.materialize.ClusterReplicaArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleClusterReplica = new ClusterReplica(\"exampleClusterReplica\", ClusterReplicaArgs.builder()        \n            .clusterName(\"cluster\")\n            .size(\"2xsmall\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleClusterReplica:\n    type: materialize:ClusterReplica\n    properties:\n      clusterName: cluster\n      size: 2xsmall\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nCluster replicas can be imported using the cluster replica id\n\n```sh\n $ pulumi import materialize:index/clusterReplica:ClusterReplica example_1_cluster_replica \u003cregion\u003e:\u003ccluster_replica_id\u003e\n```\n\n Cluster replica id and information be found in the `mz_catalog.mz_cluster_replicas` table The region is the region where the database is located (e.g. aws/us-east-1) ",
            "properties": {
                "availabilityZone": {
                    "type": "string",
                    "description": "The specific availability zone of the replica.\n"
                },
                "clusterName": {
                    "type": "string",
                    "description": "The cluster whose resources you want to create an additional computation of.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "**Public Preview** Comment on an object in the database.\n"
                },
                "disk": {
                    "type": "boolean",
                    "description": "**Deprecated**. This attribute is maintained for backward compatibility with existing configurations. New users should use 'cc' sizes for disk access.\n",
                    "deprecationMessage": "Disk replicas are deprecated and will be removed in a future release. The `disk` attribute will be enabled by default for 'cc' clusters"
                },
                "introspectionDebugging": {
                    "type": "boolean",
                    "description": "Whether to introspect the gathering of the introspection data.\n"
                },
                "introspectionInterval": {
                    "type": "string",
                    "description": "The interval at which to collect introspection data.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the replica.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n"
                },
                "size": {
                    "type": "string",
                    "description": "The size of the replica.\n"
                }
            },
            "required": [
                "availabilityZone",
                "clusterName",
                "disk",
                "name",
                "region",
                "size"
            ],
            "inputProperties": {
                "availabilityZone": {
                    "type": "string",
                    "description": "The specific availability zone of the replica.\n",
                    "willReplaceOnChanges": true
                },
                "clusterName": {
                    "type": "string",
                    "description": "The cluster whose resources you want to create an additional computation of.\n",
                    "willReplaceOnChanges": true
                },
                "comment": {
                    "type": "string",
                    "description": "**Public Preview** Comment on an object in the database.\n"
                },
                "disk": {
                    "type": "boolean",
                    "description": "**Deprecated**. This attribute is maintained for backward compatibility with existing configurations. New users should use 'cc' sizes for disk access.\n",
                    "deprecationMessage": "Disk replicas are deprecated and will be removed in a future release. The `disk` attribute will be enabled by default for 'cc' clusters",
                    "willReplaceOnChanges": true
                },
                "introspectionDebugging": {
                    "type": "boolean",
                    "description": "Whether to introspect the gathering of the introspection data.\n",
                    "willReplaceOnChanges": true
                },
                "introspectionInterval": {
                    "type": "string",
                    "description": "The interval at which to collect introspection data.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the replica.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                    "willReplaceOnChanges": true
                },
                "size": {
                    "type": "string",
                    "description": "The size of the replica.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "clusterName",
                "size"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ClusterReplica resources.\n",
                "properties": {
                    "availabilityZone": {
                        "type": "string",
                        "description": "The specific availability zone of the replica.\n",
                        "willReplaceOnChanges": true
                    },
                    "clusterName": {
                        "type": "string",
                        "description": "The cluster whose resources you want to create an additional computation of.\n",
                        "willReplaceOnChanges": true
                    },
                    "comment": {
                        "type": "string",
                        "description": "**Public Preview** Comment on an object in the database.\n"
                    },
                    "disk": {
                        "type": "boolean",
                        "description": "**Deprecated**. This attribute is maintained for backward compatibility with existing configurations. New users should use 'cc' sizes for disk access.\n",
                        "deprecationMessage": "Disk replicas are deprecated and will be removed in a future release. The `disk` attribute will be enabled by default for 'cc' clusters",
                        "willReplaceOnChanges": true
                    },
                    "introspectionDebugging": {
                        "type": "boolean",
                        "description": "Whether to introspect the gathering of the introspection data.\n",
                        "willReplaceOnChanges": true
                    },
                    "introspectionInterval": {
                        "type": "string",
                        "description": "The interval at which to collect introspection data.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The identifier for the replica.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                        "willReplaceOnChanges": true
                    },
                    "size": {
                        "type": "string",
                        "description": "The size of the replica.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/connectionAws:ConnectionAws": {
            "description": "An Amazon Web Services (AWS) connection provides Materialize with access to an Identity and Access Management (IAM) user or role in your AWS account.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\n// Create a AWS Connection\nconst exampleConnection = new materialize.ConnectionAws(\"exampleConnection\", {\n    accessKeyId: \"foo\",\n    schemaName: \"public\",\n    secretAccessKey: \"bar\",\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\n# Create a AWS Connection\nexample_connection = materialize.ConnectionAws(\"exampleConnection\",\n    access_key_id=\"foo\",\n    schema_name=\"public\",\n    secret_access_key=\"bar\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a AWS Connection\n    var exampleConnection = new Materialize.ConnectionAws(\"exampleConnection\", new()\n    {\n        AccessKeyId = \"foo\",\n        SchemaName = \"public\",\n        SecretAccessKey = \"bar\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.NewConnectionAws(ctx, \"exampleConnection\", \u0026materialize.ConnectionAwsArgs{\n\t\t\tAccessKeyId:     \"foo\",\n\t\t\tSchemaName:      pulumi.String(\"public\"),\n\t\t\tSecretAccessKey: \"bar\",\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.ConnectionAws;\nimport com.pulumi.materialize.ConnectionAwsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleConnection = new ConnectionAws(\"exampleConnection\", ConnectionAwsArgs.builder()        \n            .accessKeyId(\"foo\")\n            .schemaName(\"public\")\n            .secretAccessKey(\"bar\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a AWS Connection\n  exampleConnection:\n    type: materialize:ConnectionAws\n    properties:\n      accessKeyId: foo\n      schemaName: public\n      secretAccessKey: bar\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n#Connections can be imported using the connection id\n\n```sh\n $ pulumi import materialize:index/connectionAws:ConnectionAws example \u003cregion\u003e:\u003cconnection_id\u003e\n```\n\n Connection id and information be found in the `mz_catalog.mz_connections` table The region is the region where the database is located (e.g. aws/us-east-1) ",
            "properties": {
                "accessKeyId": {
                    "$ref": "#/types/materialize:index/ConnectionAwsAccessKeyId:ConnectionAwsAccessKeyId",
                    "description": "The access key ID to connect with.. Can be supplied as either free text using `text` or reference to a secret object using `secret`.\n"
                },
                "assumeRoleArn": {
                    "type": "string",
                    "description": "The Amazon Resource Name (ARN) of the IAM role to assume.\n"
                },
                "assumeRoleSessionName": {
                    "type": "string",
                    "description": "The session name to use when assuming the role.\n"
                },
                "awsRegion": {
                    "type": "string",
                    "description": "The AWS region to connect to.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "**Public Preview** Comment on an object in the database.\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the connection database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "endpoint": {
                    "type": "string",
                    "description": "Override the default AWS endpoint URL.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the connection.\n"
                },
                "ownershipRole": {
                    "type": "string",
                    "description": "The owernship role of the object.\n"
                },
                "qualifiedSqlName": {
                    "type": "string",
                    "description": "The fully qualified name of the connection.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the connection schema in Materialize. Defaults to `public`.\n"
                },
                "secretAccessKey": {
                    "$ref": "#/types/materialize:index/ConnectionAwsSecretAccessKey:ConnectionAwsSecretAccessKey",
                    "description": "The secret access key corresponding to the specified access key ID.\n"
                },
                "sessionToken": {
                    "$ref": "#/types/materialize:index/ConnectionAwsSessionToken:ConnectionAwsSessionToken",
                    "description": "The session token corresponding to the specified access key ID.. Can be supplied as either free text using `text` or reference to a secret object using `secret`.\n"
                },
                "validate": {
                    "type": "boolean",
                    "description": "**Private Preview** If the connection should wait for validation.\n"
                }
            },
            "required": [
                "name",
                "ownershipRole",
                "qualifiedSqlName",
                "region"
            ],
            "inputProperties": {
                "accessKeyId": {
                    "$ref": "#/types/materialize:index/ConnectionAwsAccessKeyId:ConnectionAwsAccessKeyId",
                    "description": "The access key ID to connect with.. Can be supplied as either free text using `text` or reference to a secret object using `secret`.\n"
                },
                "assumeRoleArn": {
                    "type": "string",
                    "description": "The Amazon Resource Name (ARN) of the IAM role to assume.\n"
                },
                "assumeRoleSessionName": {
                    "type": "string",
                    "description": "The session name to use when assuming the role.\n"
                },
                "awsRegion": {
                    "type": "string",
                    "description": "The AWS region to connect to.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "**Public Preview** Comment on an object in the database.\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the connection database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n",
                    "willReplaceOnChanges": true
                },
                "endpoint": {
                    "type": "string",
                    "description": "Override the default AWS endpoint URL.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the connection.\n"
                },
                "ownershipRole": {
                    "type": "string",
                    "description": "The owernship role of the object.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                    "willReplaceOnChanges": true
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the connection schema in Materialize. Defaults to `public`.\n",
                    "willReplaceOnChanges": true
                },
                "secretAccessKey": {
                    "$ref": "#/types/materialize:index/ConnectionAwsSecretAccessKey:ConnectionAwsSecretAccessKey",
                    "description": "The secret access key corresponding to the specified access key ID.\n"
                },
                "sessionToken": {
                    "$ref": "#/types/materialize:index/ConnectionAwsSessionToken:ConnectionAwsSessionToken",
                    "description": "The session token corresponding to the specified access key ID.. Can be supplied as either free text using `text` or reference to a secret object using `secret`.\n"
                },
                "validate": {
                    "type": "boolean",
                    "description": "**Private Preview** If the connection should wait for validation.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ConnectionAws resources.\n",
                "properties": {
                    "accessKeyId": {
                        "$ref": "#/types/materialize:index/ConnectionAwsAccessKeyId:ConnectionAwsAccessKeyId",
                        "description": "The access key ID to connect with.. Can be supplied as either free text using `text` or reference to a secret object using `secret`.\n"
                    },
                    "assumeRoleArn": {
                        "type": "string",
                        "description": "The Amazon Resource Name (ARN) of the IAM role to assume.\n"
                    },
                    "assumeRoleSessionName": {
                        "type": "string",
                        "description": "The session name to use when assuming the role.\n"
                    },
                    "awsRegion": {
                        "type": "string",
                        "description": "The AWS region to connect to.\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "**Public Preview** Comment on an object in the database.\n"
                    },
                    "databaseName": {
                        "type": "string",
                        "description": "The identifier for the connection database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n",
                        "willReplaceOnChanges": true
                    },
                    "endpoint": {
                        "type": "string",
                        "description": "Override the default AWS endpoint URL.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The identifier for the connection.\n"
                    },
                    "ownershipRole": {
                        "type": "string",
                        "description": "The owernship role of the object.\n"
                    },
                    "qualifiedSqlName": {
                        "type": "string",
                        "description": "The fully qualified name of the connection.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                        "willReplaceOnChanges": true
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "The identifier for the connection schema in Materialize. Defaults to `public`.\n",
                        "willReplaceOnChanges": true
                    },
                    "secretAccessKey": {
                        "$ref": "#/types/materialize:index/ConnectionAwsSecretAccessKey:ConnectionAwsSecretAccessKey",
                        "description": "The secret access key corresponding to the specified access key ID.\n"
                    },
                    "sessionToken": {
                        "$ref": "#/types/materialize:index/ConnectionAwsSessionToken:ConnectionAwsSessionToken",
                        "description": "The session token corresponding to the specified access key ID.. Can be supplied as either free text using `text` or reference to a secret object using `secret`.\n"
                    },
                    "validate": {
                        "type": "boolean",
                        "description": "**Private Preview** If the connection should wait for validation.\n"
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/connectionAwsPrivatelink:ConnectionAwsPrivatelink": {
            "description": "An AWS PrivateLink connection establishes a link to an AWS PrivateLink service.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\n// Create a AWS Private Connection\n// Note: you need the max_aws_privatelink_connections increased for this to work:\n// show max_aws_privatelink_connections;\nconst examplePrivatelinkConnection = new materialize.ConnectionAwsPrivatelink(\"examplePrivatelinkConnection\", {\n    availabilityZones: [\n        \"use1-az2\",\n        \"use1-az6\",\n    ],\n    schemaName: \"public\",\n    serviceName: \"com.amazonaws.us-east-1.materialize.example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\n# Create a AWS Private Connection\n# Note: you need the max_aws_privatelink_connections increased for this to work:\n# show max_aws_privatelink_connections;\nexample_privatelink_connection = materialize.ConnectionAwsPrivatelink(\"examplePrivatelinkConnection\",\n    availability_zones=[\n        \"use1-az2\",\n        \"use1-az6\",\n    ],\n    schema_name=\"public\",\n    service_name=\"com.amazonaws.us-east-1.materialize.example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a AWS Private Connection\n    // Note: you need the max_aws_privatelink_connections increased for this to work:\n    // show max_aws_privatelink_connections;\n    var examplePrivatelinkConnection = new Materialize.ConnectionAwsPrivatelink(\"examplePrivatelinkConnection\", new()\n    {\n        AvailabilityZones = new[]\n        {\n            \"use1-az2\",\n            \"use1-az6\",\n        },\n        SchemaName = \"public\",\n        ServiceName = \"com.amazonaws.us-east-1.materialize.example\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.NewConnectionAwsPrivatelink(ctx, \"examplePrivatelinkConnection\", \u0026materialize.ConnectionAwsPrivatelinkArgs{\n\t\t\tAvailabilityZones: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"use1-az2\"),\n\t\t\t\tpulumi.String(\"use1-az6\"),\n\t\t\t},\n\t\t\tSchemaName:  pulumi.String(\"public\"),\n\t\t\tServiceName: pulumi.String(\"com.amazonaws.us-east-1.materialize.example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.ConnectionAwsPrivatelink;\nimport com.pulumi.materialize.ConnectionAwsPrivatelinkArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var examplePrivatelinkConnection = new ConnectionAwsPrivatelink(\"examplePrivatelinkConnection\", ConnectionAwsPrivatelinkArgs.builder()        \n            .availabilityZones(            \n                \"use1-az2\",\n                \"use1-az6\")\n            .schemaName(\"public\")\n            .serviceName(\"com.amazonaws.us-east-1.materialize.example\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a AWS Private Connection\n  # // Note: you need the max_aws_privatelink_connections increased for this to work:\n  # // show max_aws_privatelink_connections;\n  examplePrivatelinkConnection:\n    type: materialize:ConnectionAwsPrivatelink\n    properties:\n      availabilityZones:\n        - use1-az2\n        - use1-az6\n      schemaName: public\n      serviceName: com.amazonaws.us-east-1.materialize.example\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n#Connections can be imported using the connection id\n\n```sh\n $ pulumi import materialize:index/connectionAwsPrivatelink:ConnectionAwsPrivatelink example \u003cregion\u003e:\u003cconnection_id\u003e\n```\n\n Connection id and information be found in the `mz_catalog.mz_connections` table The region is the region where the database is located (e.g. aws/us-east-1) ",
            "properties": {
                "availabilityZones": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The availability zones of the AWS PrivateLink service.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "**Public Preview** Comment on an object in the database.\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the connection database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the connection.\n"
                },
                "ownershipRole": {
                    "type": "string",
                    "description": "The owernship role of the object.\n"
                },
                "principal": {
                    "type": "string",
                    "description": "The principal of the AWS PrivateLink service.\n",
                    "secret": true
                },
                "qualifiedSqlName": {
                    "type": "string",
                    "description": "The fully qualified name of the connection.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the connection schema in Materialize. Defaults to `public`.\n"
                },
                "serviceName": {
                    "type": "string",
                    "description": "The name of the AWS PrivateLink service.\n"
                },
                "validate": {
                    "type": "boolean",
                    "description": "**Private Preview** If the connection should wait for validation.\n"
                }
            },
            "required": [
                "availabilityZones",
                "name",
                "ownershipRole",
                "principal",
                "qualifiedSqlName",
                "region",
                "serviceName"
            ],
            "inputProperties": {
                "availabilityZones": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The availability zones of the AWS PrivateLink service.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "**Public Preview** Comment on an object in the database.\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the connection database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the connection.\n"
                },
                "ownershipRole": {
                    "type": "string",
                    "description": "The owernship role of the object.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                    "willReplaceOnChanges": true
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the connection schema in Materialize. Defaults to `public`.\n",
                    "willReplaceOnChanges": true
                },
                "serviceName": {
                    "type": "string",
                    "description": "The name of the AWS PrivateLink service.\n"
                },
                "validate": {
                    "type": "boolean",
                    "description": "**Private Preview** If the connection should wait for validation.\n"
                }
            },
            "requiredInputs": [
                "availabilityZones",
                "serviceName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ConnectionAwsPrivatelink resources.\n",
                "properties": {
                    "availabilityZones": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The availability zones of the AWS PrivateLink service.\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "**Public Preview** Comment on an object in the database.\n"
                    },
                    "databaseName": {
                        "type": "string",
                        "description": "The identifier for the connection database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The identifier for the connection.\n"
                    },
                    "ownershipRole": {
                        "type": "string",
                        "description": "The owernship role of the object.\n"
                    },
                    "principal": {
                        "type": "string",
                        "description": "The principal of the AWS PrivateLink service.\n",
                        "secret": true
                    },
                    "qualifiedSqlName": {
                        "type": "string",
                        "description": "The fully qualified name of the connection.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                        "willReplaceOnChanges": true
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "The identifier for the connection schema in Materialize. Defaults to `public`.\n",
                        "willReplaceOnChanges": true
                    },
                    "serviceName": {
                        "type": "string",
                        "description": "The name of the AWS PrivateLink service.\n"
                    },
                    "validate": {
                        "type": "boolean",
                        "description": "**Private Preview** If the connection should wait for validation.\n"
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/connectionConfluentSchemaRegistry:ConnectionConfluentSchemaRegistry": {
            "description": "A Confluent Schema Registry connection establishes a link to a Confluent Schema Registry server.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\n// Create a Confluent Schema Registry Connection\nconst exampleConfluentSchemaRegistryConnection = new materialize.ConnectionConfluentSchemaRegistry(\"exampleConfluentSchemaRegistryConnection\", {\n    password: {\n        databaseName: \"database\",\n        name: \"example\",\n        schemaName: \"schema\",\n    },\n    url: \"https://rp-f00000bar.data.vectorized.cloud:30993\",\n    username: {\n        text: \"example\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\n# Create a Confluent Schema Registry Connection\nexample_confluent_schema_registry_connection = materialize.ConnectionConfluentSchemaRegistry(\"exampleConfluentSchemaRegistryConnection\",\n    password=materialize.ConnectionConfluentSchemaRegistryPasswordArgs(\n        database_name=\"database\",\n        name=\"example\",\n        schema_name=\"schema\",\n    ),\n    url=\"https://rp-f00000bar.data.vectorized.cloud:30993\",\n    username=materialize.ConnectionConfluentSchemaRegistryUsernameArgs(\n        text=\"example\",\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a Confluent Schema Registry Connection\n    var exampleConfluentSchemaRegistryConnection = new Materialize.ConnectionConfluentSchemaRegistry(\"exampleConfluentSchemaRegistryConnection\", new()\n    {\n        Password = new Materialize.Inputs.ConnectionConfluentSchemaRegistryPasswordArgs\n        {\n            DatabaseName = \"database\",\n            Name = \"example\",\n            SchemaName = \"schema\",\n        },\n        Url = \"https://rp-f00000bar.data.vectorized.cloud:30993\",\n        Username = new Materialize.Inputs.ConnectionConfluentSchemaRegistryUsernameArgs\n        {\n            Text = \"example\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.NewConnectionConfluentSchemaRegistry(ctx, \"exampleConfluentSchemaRegistryConnection\", \u0026materialize.ConnectionConfluentSchemaRegistryArgs{\n\t\t\tPassword: \u0026materialize.ConnectionConfluentSchemaRegistryPasswordArgs{\n\t\t\t\tDatabaseName: pulumi.String(\"database\"),\n\t\t\t\tName:         pulumi.String(\"example\"),\n\t\t\t\tSchemaName:   pulumi.String(\"schema\"),\n\t\t\t},\n\t\t\tUrl: pulumi.String(\"https://rp-f00000bar.data.vectorized.cloud:30993\"),\n\t\t\tUsername: \u0026materialize.ConnectionConfluentSchemaRegistryUsernameArgs{\n\t\t\t\tText: pulumi.String(\"example\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.ConnectionConfluentSchemaRegistry;\nimport com.pulumi.materialize.ConnectionConfluentSchemaRegistryArgs;\nimport com.pulumi.materialize.inputs.ConnectionConfluentSchemaRegistryPasswordArgs;\nimport com.pulumi.materialize.inputs.ConnectionConfluentSchemaRegistryUsernameArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleConfluentSchemaRegistryConnection = new ConnectionConfluentSchemaRegistry(\"exampleConfluentSchemaRegistryConnection\", ConnectionConfluentSchemaRegistryArgs.builder()        \n            .password(ConnectionConfluentSchemaRegistryPasswordArgs.builder()\n                .databaseName(\"database\")\n                .name(\"example\")\n                .schemaName(\"schema\")\n                .build())\n            .url(\"https://rp-f00000bar.data.vectorized.cloud:30993\")\n            .username(ConnectionConfluentSchemaRegistryUsernameArgs.builder()\n                .text(\"example\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a Confluent Schema Registry Connection\n  exampleConfluentSchemaRegistryConnection:\n    type: materialize:ConnectionConfluentSchemaRegistry\n    properties:\n      password:\n        databaseName: database\n        name: example\n        schemaName: schema\n      url: https://rp-f00000bar.data.vectorized.cloud:30993\n      username:\n        text: example\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n#Connections can be imported using the connection id\n\n```sh\n $ pulumi import materialize:index/connectionConfluentSchemaRegistry:ConnectionConfluentSchemaRegistry example \u003cregion\u003e:\u003cconnection_id\u003e\n```\n\n Connection id and information be found in the `mz_catalog.mz_connections` table The region is the region where the database is located (e.g. aws/us-east-1) ",
            "properties": {
                "awsPrivatelink": {
                    "$ref": "#/types/materialize:index/ConnectionConfluentSchemaRegistryAwsPrivatelink:ConnectionConfluentSchemaRegistryAwsPrivatelink",
                    "description": "The AWS PrivateLink configuration for the Confluent Schema Registry.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "**Public Preview** Comment on an object in the database.\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the connection database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the connection.\n"
                },
                "ownershipRole": {
                    "type": "string",
                    "description": "The owernship role of the object.\n"
                },
                "password": {
                    "$ref": "#/types/materialize:index/ConnectionConfluentSchemaRegistryPassword:ConnectionConfluentSchemaRegistryPassword",
                    "description": "The password for the Confluent Schema Registry.\n"
                },
                "qualifiedSqlName": {
                    "type": "string",
                    "description": "The fully qualified name of the connection.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the connection schema in Materialize. Defaults to `public`.\n"
                },
                "sshTunnel": {
                    "$ref": "#/types/materialize:index/ConnectionConfluentSchemaRegistrySshTunnel:ConnectionConfluentSchemaRegistrySshTunnel",
                    "description": "The SSH tunnel configuration for the Confluent Schema Registry.\n"
                },
                "sslCertificate": {
                    "$ref": "#/types/materialize:index/ConnectionConfluentSchemaRegistrySslCertificate:ConnectionConfluentSchemaRegistrySslCertificate",
                    "description": "The client certificate for the Confluent Schema Registry.. Can be supplied as either free text using `text` or reference to a secret object using `secret`.\n"
                },
                "sslCertificateAuthority": {
                    "$ref": "#/types/materialize:index/ConnectionConfluentSchemaRegistrySslCertificateAuthority:ConnectionConfluentSchemaRegistrySslCertificateAuthority",
                    "description": "The CA certificate for the Confluent Schema Registry.. Can be supplied as either free text using `text` or reference to a secret object using `secret`.\n"
                },
                "sslKey": {
                    "$ref": "#/types/materialize:index/ConnectionConfluentSchemaRegistrySslKey:ConnectionConfluentSchemaRegistrySslKey",
                    "description": "The client key for the Confluent Schema Registry.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL of the Confluent Schema Registry.\n"
                },
                "username": {
                    "$ref": "#/types/materialize:index/ConnectionConfluentSchemaRegistryUsername:ConnectionConfluentSchemaRegistryUsername",
                    "description": "The username for the Confluent Schema Registry.. Can be supplied as either free text using `text` or reference to a secret object using `secret`.\n"
                },
                "validate": {
                    "type": "boolean",
                    "description": "**Private Preview** If the connection should wait for validation.\n"
                }
            },
            "required": [
                "name",
                "ownershipRole",
                "qualifiedSqlName",
                "region",
                "url"
            ],
            "inputProperties": {
                "awsPrivatelink": {
                    "$ref": "#/types/materialize:index/ConnectionConfluentSchemaRegistryAwsPrivatelink:ConnectionConfluentSchemaRegistryAwsPrivatelink",
                    "description": "The AWS PrivateLink configuration for the Confluent Schema Registry.\n",
                    "willReplaceOnChanges": true
                },
                "comment": {
                    "type": "string",
                    "description": "**Public Preview** Comment on an object in the database.\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the connection database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the connection.\n"
                },
                "ownershipRole": {
                    "type": "string",
                    "description": "The owernship role of the object.\n"
                },
                "password": {
                    "$ref": "#/types/materialize:index/ConnectionConfluentSchemaRegistryPassword:ConnectionConfluentSchemaRegistryPassword",
                    "description": "The password for the Confluent Schema Registry.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                    "willReplaceOnChanges": true
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the connection schema in Materialize. Defaults to `public`.\n",
                    "willReplaceOnChanges": true
                },
                "sshTunnel": {
                    "$ref": "#/types/materialize:index/ConnectionConfluentSchemaRegistrySshTunnel:ConnectionConfluentSchemaRegistrySshTunnel",
                    "description": "The SSH tunnel configuration for the Confluent Schema Registry.\n",
                    "willReplaceOnChanges": true
                },
                "sslCertificate": {
                    "$ref": "#/types/materialize:index/ConnectionConfluentSchemaRegistrySslCertificate:ConnectionConfluentSchemaRegistrySslCertificate",
                    "description": "The client certificate for the Confluent Schema Registry.. Can be supplied as either free text using `text` or reference to a secret object using `secret`.\n"
                },
                "sslCertificateAuthority": {
                    "$ref": "#/types/materialize:index/ConnectionConfluentSchemaRegistrySslCertificateAuthority:ConnectionConfluentSchemaRegistrySslCertificateAuthority",
                    "description": "The CA certificate for the Confluent Schema Registry.. Can be supplied as either free text using `text` or reference to a secret object using `secret`.\n"
                },
                "sslKey": {
                    "$ref": "#/types/materialize:index/ConnectionConfluentSchemaRegistrySslKey:ConnectionConfluentSchemaRegistrySslKey",
                    "description": "The client key for the Confluent Schema Registry.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL of the Confluent Schema Registry.\n"
                },
                "username": {
                    "$ref": "#/types/materialize:index/ConnectionConfluentSchemaRegistryUsername:ConnectionConfluentSchemaRegistryUsername",
                    "description": "The username for the Confluent Schema Registry.. Can be supplied as either free text using `text` or reference to a secret object using `secret`.\n"
                },
                "validate": {
                    "type": "boolean",
                    "description": "**Private Preview** If the connection should wait for validation.\n"
                }
            },
            "requiredInputs": [
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ConnectionConfluentSchemaRegistry resources.\n",
                "properties": {
                    "awsPrivatelink": {
                        "$ref": "#/types/materialize:index/ConnectionConfluentSchemaRegistryAwsPrivatelink:ConnectionConfluentSchemaRegistryAwsPrivatelink",
                        "description": "The AWS PrivateLink configuration for the Confluent Schema Registry.\n",
                        "willReplaceOnChanges": true
                    },
                    "comment": {
                        "type": "string",
                        "description": "**Public Preview** Comment on an object in the database.\n"
                    },
                    "databaseName": {
                        "type": "string",
                        "description": "The identifier for the connection database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The identifier for the connection.\n"
                    },
                    "ownershipRole": {
                        "type": "string",
                        "description": "The owernship role of the object.\n"
                    },
                    "password": {
                        "$ref": "#/types/materialize:index/ConnectionConfluentSchemaRegistryPassword:ConnectionConfluentSchemaRegistryPassword",
                        "description": "The password for the Confluent Schema Registry.\n"
                    },
                    "qualifiedSqlName": {
                        "type": "string",
                        "description": "The fully qualified name of the connection.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                        "willReplaceOnChanges": true
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "The identifier for the connection schema in Materialize. Defaults to `public`.\n",
                        "willReplaceOnChanges": true
                    },
                    "sshTunnel": {
                        "$ref": "#/types/materialize:index/ConnectionConfluentSchemaRegistrySshTunnel:ConnectionConfluentSchemaRegistrySshTunnel",
                        "description": "The SSH tunnel configuration for the Confluent Schema Registry.\n",
                        "willReplaceOnChanges": true
                    },
                    "sslCertificate": {
                        "$ref": "#/types/materialize:index/ConnectionConfluentSchemaRegistrySslCertificate:ConnectionConfluentSchemaRegistrySslCertificate",
                        "description": "The client certificate for the Confluent Schema Registry.. Can be supplied as either free text using `text` or reference to a secret object using `secret`.\n"
                    },
                    "sslCertificateAuthority": {
                        "$ref": "#/types/materialize:index/ConnectionConfluentSchemaRegistrySslCertificateAuthority:ConnectionConfluentSchemaRegistrySslCertificateAuthority",
                        "description": "The CA certificate for the Confluent Schema Registry.. Can be supplied as either free text using `text` or reference to a secret object using `secret`.\n"
                    },
                    "sslKey": {
                        "$ref": "#/types/materialize:index/ConnectionConfluentSchemaRegistrySslKey:ConnectionConfluentSchemaRegistrySslKey",
                        "description": "The client key for the Confluent Schema Registry.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "The URL of the Confluent Schema Registry.\n"
                    },
                    "username": {
                        "$ref": "#/types/materialize:index/ConnectionConfluentSchemaRegistryUsername:ConnectionConfluentSchemaRegistryUsername",
                        "description": "The username for the Confluent Schema Registry.. Can be supplied as either free text using `text` or reference to a secret object using `secret`.\n"
                    },
                    "validate": {
                        "type": "boolean",
                        "description": "**Private Preview** If the connection should wait for validation.\n"
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/connectionKafka:ConnectionKafka": {
            "description": "A Kafka connection establishes a link to a Kafka cluster.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\n// Create a Kafka Connection\nconst exampleKafkaConnection = new materialize.ConnectionKafka(\"exampleKafkaConnection\", {\n    kafkaBrokers: [{\n        broker: \"b-1.hostname-1:9096\",\n    }],\n    progressTopic: \"example\",\n    saslMechanisms: \"SCRAM-SHA-256\",\n    saslPassword: {\n        databaseName: \"materialize\",\n        name: \"kafka_password\",\n        schemaName: \"public\",\n    },\n    saslUsername: {\n        text: \"user\",\n    },\n});\nconst exampleKafkaConnectionMultipleBrokers = new materialize.ConnectionKafka(\"exampleKafkaConnectionMultipleBrokers\", {kafkaBrokers: [\n    {\n        availabilityZone: \"use1-az1\",\n        broker: \"b-1.hostname-1:9096\",\n        privatelinkConnection: {\n            databaseName: \"materialize\",\n            name: \"example_aws_privatelink_conn\",\n            schemaName: \"public\",\n        },\n        targetGroupPort: 9001,\n    },\n    {\n        availabilityZone: \"use1-az2\",\n        broker: \"b-2.hostname-2:9096\",\n        privatelinkConnection: {\n            databaseName: \"materialize\",\n            name: \"example_aws_privatelink_conn\",\n            schemaName: \"public\",\n        },\n        targetGroupPort: 9002,\n    },\n]});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\n# Create a Kafka Connection\nexample_kafka_connection = materialize.ConnectionKafka(\"exampleKafkaConnection\",\n    kafka_brokers=[materialize.ConnectionKafkaKafkaBrokerArgs(\n        broker=\"b-1.hostname-1:9096\",\n    )],\n    progress_topic=\"example\",\n    sasl_mechanisms=\"SCRAM-SHA-256\",\n    sasl_password=materialize.ConnectionKafkaSaslPasswordArgs(\n        database_name=\"materialize\",\n        name=\"kafka_password\",\n        schema_name=\"public\",\n    ),\n    sasl_username=materialize.ConnectionKafkaSaslUsernameArgs(\n        text=\"user\",\n    ))\nexample_kafka_connection_multiple_brokers = materialize.ConnectionKafka(\"exampleKafkaConnectionMultipleBrokers\", kafka_brokers=[\n    materialize.ConnectionKafkaKafkaBrokerArgs(\n        availability_zone=\"use1-az1\",\n        broker=\"b-1.hostname-1:9096\",\n        privatelink_connection=materialize.ConnectionKafkaKafkaBrokerPrivatelinkConnectionArgs(\n            database_name=\"materialize\",\n            name=\"example_aws_privatelink_conn\",\n            schema_name=\"public\",\n        ),\n        target_group_port=9001,\n    ),\n    materialize.ConnectionKafkaKafkaBrokerArgs(\n        availability_zone=\"use1-az2\",\n        broker=\"b-2.hostname-2:9096\",\n        privatelink_connection=materialize.ConnectionKafkaKafkaBrokerPrivatelinkConnectionArgs(\n            database_name=\"materialize\",\n            name=\"example_aws_privatelink_conn\",\n            schema_name=\"public\",\n        ),\n        target_group_port=9002,\n    ),\n])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a Kafka Connection\n    var exampleKafkaConnection = new Materialize.ConnectionKafka(\"exampleKafkaConnection\", new()\n    {\n        KafkaBrokers = new[]\n        {\n            new Materialize.Inputs.ConnectionKafkaKafkaBrokerArgs\n            {\n                Broker = \"b-1.hostname-1:9096\",\n            },\n        },\n        ProgressTopic = \"example\",\n        SaslMechanisms = \"SCRAM-SHA-256\",\n        SaslPassword = new Materialize.Inputs.ConnectionKafkaSaslPasswordArgs\n        {\n            DatabaseName = \"materialize\",\n            Name = \"kafka_password\",\n            SchemaName = \"public\",\n        },\n        SaslUsername = new Materialize.Inputs.ConnectionKafkaSaslUsernameArgs\n        {\n            Text = \"user\",\n        },\n    });\n\n    var exampleKafkaConnectionMultipleBrokers = new Materialize.ConnectionKafka(\"exampleKafkaConnectionMultipleBrokers\", new()\n    {\n        KafkaBrokers = new[]\n        {\n            new Materialize.Inputs.ConnectionKafkaKafkaBrokerArgs\n            {\n                AvailabilityZone = \"use1-az1\",\n                Broker = \"b-1.hostname-1:9096\",\n                PrivatelinkConnection = new Materialize.Inputs.ConnectionKafkaKafkaBrokerPrivatelinkConnectionArgs\n                {\n                    DatabaseName = \"materialize\",\n                    Name = \"example_aws_privatelink_conn\",\n                    SchemaName = \"public\",\n                },\n                TargetGroupPort = 9001,\n            },\n            new Materialize.Inputs.ConnectionKafkaKafkaBrokerArgs\n            {\n                AvailabilityZone = \"use1-az2\",\n                Broker = \"b-2.hostname-2:9096\",\n                PrivatelinkConnection = new Materialize.Inputs.ConnectionKafkaKafkaBrokerPrivatelinkConnectionArgs\n                {\n                    DatabaseName = \"materialize\",\n                    Name = \"example_aws_privatelink_conn\",\n                    SchemaName = \"public\",\n                },\n                TargetGroupPort = 9002,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.NewConnectionKafka(ctx, \"exampleKafkaConnection\", \u0026materialize.ConnectionKafkaArgs{\n\t\t\tKafkaBrokers: materialize.ConnectionKafkaKafkaBrokerArray{\n\t\t\t\t\u0026materialize.ConnectionKafkaKafkaBrokerArgs{\n\t\t\t\t\tBroker: pulumi.String(\"b-1.hostname-1:9096\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tProgressTopic:  pulumi.String(\"example\"),\n\t\t\tSaslMechanisms: pulumi.String(\"SCRAM-SHA-256\"),\n\t\t\tSaslPassword: \u0026materialize.ConnectionKafkaSaslPasswordArgs{\n\t\t\t\tDatabaseName: pulumi.String(\"materialize\"),\n\t\t\t\tName:         pulumi.String(\"kafka_password\"),\n\t\t\t\tSchemaName:   pulumi.String(\"public\"),\n\t\t\t},\n\t\t\tSaslUsername: \u0026materialize.ConnectionKafkaSaslUsernameArgs{\n\t\t\t\tText: pulumi.String(\"user\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = materialize.NewConnectionKafka(ctx, \"exampleKafkaConnectionMultipleBrokers\", \u0026materialize.ConnectionKafkaArgs{\n\t\t\tKafkaBrokers: materialize.ConnectionKafkaKafkaBrokerArray{\n\t\t\t\t\u0026materialize.ConnectionKafkaKafkaBrokerArgs{\n\t\t\t\t\tAvailabilityZone: pulumi.String(\"use1-az1\"),\n\t\t\t\t\tBroker:           pulumi.String(\"b-1.hostname-1:9096\"),\n\t\t\t\t\tPrivatelinkConnection: \u0026materialize.ConnectionKafkaKafkaBrokerPrivatelinkConnectionArgs{\n\t\t\t\t\t\tDatabaseName: pulumi.String(\"materialize\"),\n\t\t\t\t\t\tName:         pulumi.String(\"example_aws_privatelink_conn\"),\n\t\t\t\t\t\tSchemaName:   pulumi.String(\"public\"),\n\t\t\t\t\t},\n\t\t\t\t\tTargetGroupPort: pulumi.Int(9001),\n\t\t\t\t},\n\t\t\t\t\u0026materialize.ConnectionKafkaKafkaBrokerArgs{\n\t\t\t\t\tAvailabilityZone: pulumi.String(\"use1-az2\"),\n\t\t\t\t\tBroker:           pulumi.String(\"b-2.hostname-2:9096\"),\n\t\t\t\t\tPrivatelinkConnection: \u0026materialize.ConnectionKafkaKafkaBrokerPrivatelinkConnectionArgs{\n\t\t\t\t\t\tDatabaseName: pulumi.String(\"materialize\"),\n\t\t\t\t\t\tName:         pulumi.String(\"example_aws_privatelink_conn\"),\n\t\t\t\t\t\tSchemaName:   pulumi.String(\"public\"),\n\t\t\t\t\t},\n\t\t\t\t\tTargetGroupPort: pulumi.Int(9002),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.ConnectionKafka;\nimport com.pulumi.materialize.ConnectionKafkaArgs;\nimport com.pulumi.materialize.inputs.ConnectionKafkaKafkaBrokerArgs;\nimport com.pulumi.materialize.inputs.ConnectionKafkaSaslPasswordArgs;\nimport com.pulumi.materialize.inputs.ConnectionKafkaSaslUsernameArgs;\nimport com.pulumi.materialize.inputs.ConnectionKafkaKafkaBrokerPrivatelinkConnectionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleKafkaConnection = new ConnectionKafka(\"exampleKafkaConnection\", ConnectionKafkaArgs.builder()        \n            .kafkaBrokers(ConnectionKafkaKafkaBrokerArgs.builder()\n                .broker(\"b-1.hostname-1:9096\")\n                .build())\n            .progressTopic(\"example\")\n            .saslMechanisms(\"SCRAM-SHA-256\")\n            .saslPassword(ConnectionKafkaSaslPasswordArgs.builder()\n                .databaseName(\"materialize\")\n                .name(\"kafka_password\")\n                .schemaName(\"public\")\n                .build())\n            .saslUsername(ConnectionKafkaSaslUsernameArgs.builder()\n                .text(\"user\")\n                .build())\n            .build());\n\n        var exampleKafkaConnectionMultipleBrokers = new ConnectionKafka(\"exampleKafkaConnectionMultipleBrokers\", ConnectionKafkaArgs.builder()        \n            .kafkaBrokers(            \n                ConnectionKafkaKafkaBrokerArgs.builder()\n                    .availabilityZone(\"use1-az1\")\n                    .broker(\"b-1.hostname-1:9096\")\n                    .privatelinkConnection(ConnectionKafkaKafkaBrokerPrivatelinkConnectionArgs.builder()\n                        .databaseName(\"materialize\")\n                        .name(\"example_aws_privatelink_conn\")\n                        .schemaName(\"public\")\n                        .build())\n                    .targetGroupPort(\"9001\")\n                    .build(),\n                ConnectionKafkaKafkaBrokerArgs.builder()\n                    .availabilityZone(\"use1-az2\")\n                    .broker(\"b-2.hostname-2:9096\")\n                    .privatelinkConnection(ConnectionKafkaKafkaBrokerPrivatelinkConnectionArgs.builder()\n                        .databaseName(\"materialize\")\n                        .name(\"example_aws_privatelink_conn\")\n                        .schemaName(\"public\")\n                        .build())\n                    .targetGroupPort(\"9002\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a Kafka Connection\n  exampleKafkaConnection:\n    type: materialize:ConnectionKafka\n    properties:\n      kafkaBrokers:\n        - broker: b-1.hostname-1:9096\n      progressTopic: example\n      saslMechanisms: SCRAM-SHA-256\n      saslPassword:\n        databaseName: materialize\n        name: kafka_password\n        schemaName: public\n      saslUsername:\n        text: user\n  exampleKafkaConnectionMultipleBrokers:\n    type: materialize:ConnectionKafka\n    properties:\n      kafkaBrokers:\n        - availabilityZone: use1-az1\n          broker: b-1.hostname-1:9096\n          privatelinkConnection:\n            databaseName: materialize\n            name: example_aws_privatelink_conn\n            schemaName: public\n          targetGroupPort: '9001'\n        - availabilityZone: use1-az2\n          broker: b-2.hostname-2:9096\n          privatelinkConnection:\n            databaseName: materialize\n            name: example_aws_privatelink_conn\n            schemaName: public\n          targetGroupPort: '9002'\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nConnections can be imported using the connection id\n\n```sh\n $ pulumi import materialize:index/connectionKafka:ConnectionKafka example \u003cregion\u003e:\u003cconnection_id\u003e\n```\n\n Connection id and information be found in the `mz_catalog.mz_connections` table The region is the region where the database is located (e.g. aws/us-east-1) ",
            "properties": {
                "awsPrivatelink": {
                    "$ref": "#/types/materialize:index/ConnectionKafkaAwsPrivatelink:ConnectionKafkaAwsPrivatelink",
                    "description": "AWS PrivateLink configuration. Conflicts with `kafka_broker`.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "**Public Preview** Comment on an object in the database.\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the connection database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "kafkaBrokers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/materialize:index/ConnectionKafkaKafkaBroker:ConnectionKafkaKafkaBroker"
                    },
                    "description": "The Kafka broker's configuration.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the connection.\n"
                },
                "ownershipRole": {
                    "type": "string",
                    "description": "The owernship role of the object.\n"
                },
                "progressTopic": {
                    "type": "string",
                    "description": "The name of a topic that Kafka sinks can use to track internal consistency metadata.\n"
                },
                "progressTopicReplicationFactor": {
                    "type": "integer",
                    "description": "The replication factor to use when creating the Kafka progress topic (if the Kafka topic does not already exist).\n"
                },
                "qualifiedSqlName": {
                    "type": "string",
                    "description": "The fully qualified name of the connection.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n"
                },
                "saslMechanisms": {
                    "type": "string",
                    "description": "The SASL mechanism for the Kafka broker.\n"
                },
                "saslPassword": {
                    "$ref": "#/types/materialize:index/ConnectionKafkaSaslPassword:ConnectionKafkaSaslPassword",
                    "description": "The SASL password for the Kafka broker.\n"
                },
                "saslUsername": {
                    "$ref": "#/types/materialize:index/ConnectionKafkaSaslUsername:ConnectionKafkaSaslUsername",
                    "description": "The SASL username for the Kafka broker.. Can be supplied as either free text using `text` or reference to a secret object using `secret`.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the connection schema in Materialize. Defaults to `public`.\n"
                },
                "securityProtocol": {
                    "type": "string",
                    "description": "The security protocol to use: `PLAINTEXT`, `SSL`, `SASL_PLAINTEXT`, or `SASL_SSL`.\n"
                },
                "sshTunnel": {
                    "$ref": "#/types/materialize:index/ConnectionKafkaSshTunnel:ConnectionKafkaSshTunnel",
                    "description": "The default SSH tunnel configuration for the Kafka brokers.\n"
                },
                "sslCertificate": {
                    "$ref": "#/types/materialize:index/ConnectionKafkaSslCertificate:ConnectionKafkaSslCertificate",
                    "description": "The client certificate for the Kafka broker.. Can be supplied as either free text using `text` or reference to a secret object using `secret`.\n"
                },
                "sslCertificateAuthority": {
                    "$ref": "#/types/materialize:index/ConnectionKafkaSslCertificateAuthority:ConnectionKafkaSslCertificateAuthority",
                    "description": "The CA certificate for the Kafka broker.. Can be supplied as either free text using `text` or reference to a secret object using `secret`.\n"
                },
                "sslKey": {
                    "$ref": "#/types/materialize:index/ConnectionKafkaSslKey:ConnectionKafkaSslKey",
                    "description": "The client key for the Kafka broker.\n"
                },
                "validate": {
                    "type": "boolean",
                    "description": "**Private Preview** If the connection should wait for validation.\n"
                }
            },
            "required": [
                "name",
                "ownershipRole",
                "qualifiedSqlName",
                "region"
            ],
            "inputProperties": {
                "awsPrivatelink": {
                    "$ref": "#/types/materialize:index/ConnectionKafkaAwsPrivatelink:ConnectionKafkaAwsPrivatelink",
                    "description": "AWS PrivateLink configuration. Conflicts with `kafka_broker`.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "**Public Preview** Comment on an object in the database.\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the connection database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n",
                    "willReplaceOnChanges": true
                },
                "kafkaBrokers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/materialize:index/ConnectionKafkaKafkaBroker:ConnectionKafkaKafkaBroker"
                    },
                    "description": "The Kafka broker's configuration.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the connection.\n"
                },
                "ownershipRole": {
                    "type": "string",
                    "description": "The owernship role of the object.\n"
                },
                "progressTopic": {
                    "type": "string",
                    "description": "The name of a topic that Kafka sinks can use to track internal consistency metadata.\n",
                    "willReplaceOnChanges": true
                },
                "progressTopicReplicationFactor": {
                    "type": "integer",
                    "description": "The replication factor to use when creating the Kafka progress topic (if the Kafka topic does not already exist).\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                    "willReplaceOnChanges": true
                },
                "saslMechanisms": {
                    "type": "string",
                    "description": "The SASL mechanism for the Kafka broker.\n"
                },
                "saslPassword": {
                    "$ref": "#/types/materialize:index/ConnectionKafkaSaslPassword:ConnectionKafkaSaslPassword",
                    "description": "The SASL password for the Kafka broker.\n"
                },
                "saslUsername": {
                    "$ref": "#/types/materialize:index/ConnectionKafkaSaslUsername:ConnectionKafkaSaslUsername",
                    "description": "The SASL username for the Kafka broker.. Can be supplied as either free text using `text` or reference to a secret object using `secret`.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the connection schema in Materialize. Defaults to `public`.\n",
                    "willReplaceOnChanges": true
                },
                "securityProtocol": {
                    "type": "string",
                    "description": "The security protocol to use: `PLAINTEXT`, `SSL`, `SASL_PLAINTEXT`, or `SASL_SSL`.\n"
                },
                "sshTunnel": {
                    "$ref": "#/types/materialize:index/ConnectionKafkaSshTunnel:ConnectionKafkaSshTunnel",
                    "description": "The default SSH tunnel configuration for the Kafka brokers.\n"
                },
                "sslCertificate": {
                    "$ref": "#/types/materialize:index/ConnectionKafkaSslCertificate:ConnectionKafkaSslCertificate",
                    "description": "The client certificate for the Kafka broker.. Can be supplied as either free text using `text` or reference to a secret object using `secret`.\n"
                },
                "sslCertificateAuthority": {
                    "$ref": "#/types/materialize:index/ConnectionKafkaSslCertificateAuthority:ConnectionKafkaSslCertificateAuthority",
                    "description": "The CA certificate for the Kafka broker.. Can be supplied as either free text using `text` or reference to a secret object using `secret`.\n"
                },
                "sslKey": {
                    "$ref": "#/types/materialize:index/ConnectionKafkaSslKey:ConnectionKafkaSslKey",
                    "description": "The client key for the Kafka broker.\n"
                },
                "validate": {
                    "type": "boolean",
                    "description": "**Private Preview** If the connection should wait for validation.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ConnectionKafka resources.\n",
                "properties": {
                    "awsPrivatelink": {
                        "$ref": "#/types/materialize:index/ConnectionKafkaAwsPrivatelink:ConnectionKafkaAwsPrivatelink",
                        "description": "AWS PrivateLink configuration. Conflicts with `kafka_broker`.\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "**Public Preview** Comment on an object in the database.\n"
                    },
                    "databaseName": {
                        "type": "string",
                        "description": "The identifier for the connection database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n",
                        "willReplaceOnChanges": true
                    },
                    "kafkaBrokers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/materialize:index/ConnectionKafkaKafkaBroker:ConnectionKafkaKafkaBroker"
                        },
                        "description": "The Kafka broker's configuration.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The identifier for the connection.\n"
                    },
                    "ownershipRole": {
                        "type": "string",
                        "description": "The owernship role of the object.\n"
                    },
                    "progressTopic": {
                        "type": "string",
                        "description": "The name of a topic that Kafka sinks can use to track internal consistency metadata.\n",
                        "willReplaceOnChanges": true
                    },
                    "progressTopicReplicationFactor": {
                        "type": "integer",
                        "description": "The replication factor to use when creating the Kafka progress topic (if the Kafka topic does not already exist).\n",
                        "willReplaceOnChanges": true
                    },
                    "qualifiedSqlName": {
                        "type": "string",
                        "description": "The fully qualified name of the connection.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                        "willReplaceOnChanges": true
                    },
                    "saslMechanisms": {
                        "type": "string",
                        "description": "The SASL mechanism for the Kafka broker.\n"
                    },
                    "saslPassword": {
                        "$ref": "#/types/materialize:index/ConnectionKafkaSaslPassword:ConnectionKafkaSaslPassword",
                        "description": "The SASL password for the Kafka broker.\n"
                    },
                    "saslUsername": {
                        "$ref": "#/types/materialize:index/ConnectionKafkaSaslUsername:ConnectionKafkaSaslUsername",
                        "description": "The SASL username for the Kafka broker.. Can be supplied as either free text using `text` or reference to a secret object using `secret`.\n"
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "The identifier for the connection schema in Materialize. Defaults to `public`.\n",
                        "willReplaceOnChanges": true
                    },
                    "securityProtocol": {
                        "type": "string",
                        "description": "The security protocol to use: `PLAINTEXT`, `SSL`, `SASL_PLAINTEXT`, or `SASL_SSL`.\n"
                    },
                    "sshTunnel": {
                        "$ref": "#/types/materialize:index/ConnectionKafkaSshTunnel:ConnectionKafkaSshTunnel",
                        "description": "The default SSH tunnel configuration for the Kafka brokers.\n"
                    },
                    "sslCertificate": {
                        "$ref": "#/types/materialize:index/ConnectionKafkaSslCertificate:ConnectionKafkaSslCertificate",
                        "description": "The client certificate for the Kafka broker.. Can be supplied as either free text using `text` or reference to a secret object using `secret`.\n"
                    },
                    "sslCertificateAuthority": {
                        "$ref": "#/types/materialize:index/ConnectionKafkaSslCertificateAuthority:ConnectionKafkaSslCertificateAuthority",
                        "description": "The CA certificate for the Kafka broker.. Can be supplied as either free text using `text` or reference to a secret object using `secret`.\n"
                    },
                    "sslKey": {
                        "$ref": "#/types/materialize:index/ConnectionKafkaSslKey:ConnectionKafkaSslKey",
                        "description": "The client key for the Kafka broker.\n"
                    },
                    "validate": {
                        "type": "boolean",
                        "description": "**Private Preview** If the connection should wait for validation.\n"
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/connectionMysql:ConnectionMysql": {
            "description": "A MySQL connection establishes a link to a single database of a MySQL server.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\n// Create a MySQL Connection with SSH tunnel \u0026 plain text user\nconst exampleMysqlConnection = new materialize.ConnectionMysql(\"exampleMysqlConnection\", {\n    host: \"instance.foo000.us-west-1.rds.amazonaws.com\",\n    password: {\n        databaseName: \"database\",\n        name: \"example\",\n        schemaName: \"schema\",\n    },\n    port: 3306,\n    sshTunnel: {\n        name: \"example\",\n    },\n    user: {\n        text: \"my_user\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\n# Create a MySQL Connection with SSH tunnel \u0026 plain text user\nexample_mysql_connection = materialize.ConnectionMysql(\"exampleMysqlConnection\",\n    host=\"instance.foo000.us-west-1.rds.amazonaws.com\",\n    password=materialize.ConnectionMysqlPasswordArgs(\n        database_name=\"database\",\n        name=\"example\",\n        schema_name=\"schema\",\n    ),\n    port=3306,\n    ssh_tunnel=materialize.ConnectionMysqlSshTunnelArgs(\n        name=\"example\",\n    ),\n    user=materialize.ConnectionMysqlUserArgs(\n        text=\"my_user\",\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a MySQL Connection with SSH tunnel \u0026 plain text user\n    var exampleMysqlConnection = new Materialize.ConnectionMysql(\"exampleMysqlConnection\", new()\n    {\n        Host = \"instance.foo000.us-west-1.rds.amazonaws.com\",\n        Password = new Materialize.Inputs.ConnectionMysqlPasswordArgs\n        {\n            DatabaseName = \"database\",\n            Name = \"example\",\n            SchemaName = \"schema\",\n        },\n        Port = 3306,\n        SshTunnel = new Materialize.Inputs.ConnectionMysqlSshTunnelArgs\n        {\n            Name = \"example\",\n        },\n        User = new Materialize.Inputs.ConnectionMysqlUserArgs\n        {\n            Text = \"my_user\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.NewConnectionMysql(ctx, \"exampleMysqlConnection\", \u0026materialize.ConnectionMysqlArgs{\n\t\t\tHost: pulumi.String(\"instance.foo000.us-west-1.rds.amazonaws.com\"),\n\t\t\tPassword: \u0026materialize.ConnectionMysqlPasswordArgs{\n\t\t\t\tDatabaseName: pulumi.String(\"database\"),\n\t\t\t\tName:         pulumi.String(\"example\"),\n\t\t\t\tSchemaName:   pulumi.String(\"schema\"),\n\t\t\t},\n\t\t\tPort: pulumi.Int(3306),\n\t\t\tSshTunnel: \u0026materialize.ConnectionMysqlSshTunnelArgs{\n\t\t\t\tName: pulumi.String(\"example\"),\n\t\t\t},\n\t\t\tUser: \u0026materialize.ConnectionMysqlUserArgs{\n\t\t\t\tText: pulumi.String(\"my_user\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.ConnectionMysql;\nimport com.pulumi.materialize.ConnectionMysqlArgs;\nimport com.pulumi.materialize.inputs.ConnectionMysqlPasswordArgs;\nimport com.pulumi.materialize.inputs.ConnectionMysqlSshTunnelArgs;\nimport com.pulumi.materialize.inputs.ConnectionMysqlUserArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleMysqlConnection = new ConnectionMysql(\"exampleMysqlConnection\", ConnectionMysqlArgs.builder()        \n            .host(\"instance.foo000.us-west-1.rds.amazonaws.com\")\n            .password(ConnectionMysqlPasswordArgs.builder()\n                .databaseName(\"database\")\n                .name(\"example\")\n                .schemaName(\"schema\")\n                .build())\n            .port(3306)\n            .sshTunnel(ConnectionMysqlSshTunnelArgs.builder()\n                .name(\"example\")\n                .build())\n            .user(ConnectionMysqlUserArgs.builder()\n                .text(\"my_user\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a MySQL Connection with SSH tunnel \u0026 plain text user\n  exampleMysqlConnection:\n    type: materialize:ConnectionMysql\n    properties:\n      host: instance.foo000.us-west-1.rds.amazonaws.com\n      password:\n        databaseName: database\n        name: example\n        schemaName: schema\n      port: 3306\n      sshTunnel:\n        name: example\n      user:\n        text: my_user\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nConnections can be imported using the connection id\n\n```sh\n $ pulumi import materialize:index/connectionMysql:ConnectionMysql example \u003cregion\u003e:\u003cconnection_id\u003e\n```\n\n Connection id and information be found in the `mz_catalog.mz_connections` table The region is the region where the database is located (e.g. aws/us-east-1) ",
            "properties": {
                "awsPrivatelink": {
                    "$ref": "#/types/materialize:index/ConnectionMysqlAwsPrivatelink:ConnectionMysqlAwsPrivatelink",
                    "description": "The AWS PrivateLink configuration for the MySQL database.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "**Public Preview** Comment on an object in the database.\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the connection database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "host": {
                    "type": "string",
                    "description": "The MySQL database hostname.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the connection.\n"
                },
                "ownershipRole": {
                    "type": "string",
                    "description": "The owernship role of the object.\n"
                },
                "password": {
                    "$ref": "#/types/materialize:index/ConnectionMysqlPassword:ConnectionMysqlPassword",
                    "description": "The MySQL database password.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The MySQL database port.\n"
                },
                "qualifiedSqlName": {
                    "type": "string",
                    "description": "The fully qualified name of the connection.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the connection schema in Materialize. Defaults to `public`.\n"
                },
                "sshTunnel": {
                    "$ref": "#/types/materialize:index/ConnectionMysqlSshTunnel:ConnectionMysqlSshTunnel",
                    "description": "The SSH tunnel configuration for the MySQL database.\n"
                },
                "sslCertificate": {
                    "$ref": "#/types/materialize:index/ConnectionMysqlSslCertificate:ConnectionMysqlSslCertificate",
                    "description": "The client certificate for the MySQL database.. Can be supplied as either free text using `text` or reference to a secret object using `secret`.\n"
                },
                "sslCertificateAuthority": {
                    "$ref": "#/types/materialize:index/ConnectionMysqlSslCertificateAuthority:ConnectionMysqlSslCertificateAuthority",
                    "description": "The CA certificate for the MySQL database.. Can be supplied as either free text using `text` or reference to a secret object using `secret`.\n"
                },
                "sslKey": {
                    "$ref": "#/types/materialize:index/ConnectionMysqlSslKey:ConnectionMysqlSslKey",
                    "description": "The client key for the MySQL database.\n"
                },
                "sslMode": {
                    "type": "string",
                    "description": "The SSL mode for the MySQL database. Allowed values are disabled, required, verify-ca, verify-identity.\n"
                },
                "user": {
                    "$ref": "#/types/materialize:index/ConnectionMysqlUser:ConnectionMysqlUser",
                    "description": "The MySQL database username.. Can be supplied as either free text using `text` or reference to a secret object using `secret`.\n"
                },
                "validate": {
                    "type": "boolean",
                    "description": "**Private Preview** If the connection should wait for validation.\n"
                }
            },
            "required": [
                "host",
                "name",
                "ownershipRole",
                "qualifiedSqlName",
                "region",
                "user"
            ],
            "inputProperties": {
                "awsPrivatelink": {
                    "$ref": "#/types/materialize:index/ConnectionMysqlAwsPrivatelink:ConnectionMysqlAwsPrivatelink",
                    "description": "The AWS PrivateLink configuration for the MySQL database.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "**Public Preview** Comment on an object in the database.\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the connection database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n",
                    "willReplaceOnChanges": true
                },
                "host": {
                    "type": "string",
                    "description": "The MySQL database hostname.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the connection.\n"
                },
                "ownershipRole": {
                    "type": "string",
                    "description": "The owernship role of the object.\n"
                },
                "password": {
                    "$ref": "#/types/materialize:index/ConnectionMysqlPassword:ConnectionMysqlPassword",
                    "description": "The MySQL database password.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The MySQL database port.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                    "willReplaceOnChanges": true
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the connection schema in Materialize. Defaults to `public`.\n",
                    "willReplaceOnChanges": true
                },
                "sshTunnel": {
                    "$ref": "#/types/materialize:index/ConnectionMysqlSshTunnel:ConnectionMysqlSshTunnel",
                    "description": "The SSH tunnel configuration for the MySQL database.\n"
                },
                "sslCertificate": {
                    "$ref": "#/types/materialize:index/ConnectionMysqlSslCertificate:ConnectionMysqlSslCertificate",
                    "description": "The client certificate for the MySQL database.. Can be supplied as either free text using `text` or reference to a secret object using `secret`.\n"
                },
                "sslCertificateAuthority": {
                    "$ref": "#/types/materialize:index/ConnectionMysqlSslCertificateAuthority:ConnectionMysqlSslCertificateAuthority",
                    "description": "The CA certificate for the MySQL database.. Can be supplied as either free text using `text` or reference to a secret object using `secret`.\n"
                },
                "sslKey": {
                    "$ref": "#/types/materialize:index/ConnectionMysqlSslKey:ConnectionMysqlSslKey",
                    "description": "The client key for the MySQL database.\n"
                },
                "sslMode": {
                    "type": "string",
                    "description": "The SSL mode for the MySQL database. Allowed values are disabled, required, verify-ca, verify-identity.\n"
                },
                "user": {
                    "$ref": "#/types/materialize:index/ConnectionMysqlUser:ConnectionMysqlUser",
                    "description": "The MySQL database username.. Can be supplied as either free text using `text` or reference to a secret object using `secret`.\n"
                },
                "validate": {
                    "type": "boolean",
                    "description": "**Private Preview** If the connection should wait for validation.\n"
                }
            },
            "requiredInputs": [
                "host",
                "user"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ConnectionMysql resources.\n",
                "properties": {
                    "awsPrivatelink": {
                        "$ref": "#/types/materialize:index/ConnectionMysqlAwsPrivatelink:ConnectionMysqlAwsPrivatelink",
                        "description": "The AWS PrivateLink configuration for the MySQL database.\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "**Public Preview** Comment on an object in the database.\n"
                    },
                    "databaseName": {
                        "type": "string",
                        "description": "The identifier for the connection database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n",
                        "willReplaceOnChanges": true
                    },
                    "host": {
                        "type": "string",
                        "description": "The MySQL database hostname.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The identifier for the connection.\n"
                    },
                    "ownershipRole": {
                        "type": "string",
                        "description": "The owernship role of the object.\n"
                    },
                    "password": {
                        "$ref": "#/types/materialize:index/ConnectionMysqlPassword:ConnectionMysqlPassword",
                        "description": "The MySQL database password.\n"
                    },
                    "port": {
                        "type": "integer",
                        "description": "The MySQL database port.\n"
                    },
                    "qualifiedSqlName": {
                        "type": "string",
                        "description": "The fully qualified name of the connection.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                        "willReplaceOnChanges": true
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "The identifier for the connection schema in Materialize. Defaults to `public`.\n",
                        "willReplaceOnChanges": true
                    },
                    "sshTunnel": {
                        "$ref": "#/types/materialize:index/ConnectionMysqlSshTunnel:ConnectionMysqlSshTunnel",
                        "description": "The SSH tunnel configuration for the MySQL database.\n"
                    },
                    "sslCertificate": {
                        "$ref": "#/types/materialize:index/ConnectionMysqlSslCertificate:ConnectionMysqlSslCertificate",
                        "description": "The client certificate for the MySQL database.. Can be supplied as either free text using `text` or reference to a secret object using `secret`.\n"
                    },
                    "sslCertificateAuthority": {
                        "$ref": "#/types/materialize:index/ConnectionMysqlSslCertificateAuthority:ConnectionMysqlSslCertificateAuthority",
                        "description": "The CA certificate for the MySQL database.. Can be supplied as either free text using `text` or reference to a secret object using `secret`.\n"
                    },
                    "sslKey": {
                        "$ref": "#/types/materialize:index/ConnectionMysqlSslKey:ConnectionMysqlSslKey",
                        "description": "The client key for the MySQL database.\n"
                    },
                    "sslMode": {
                        "type": "string",
                        "description": "The SSL mode for the MySQL database. Allowed values are disabled, required, verify-ca, verify-identity.\n"
                    },
                    "user": {
                        "$ref": "#/types/materialize:index/ConnectionMysqlUser:ConnectionMysqlUser",
                        "description": "The MySQL database username.. Can be supplied as either free text using `text` or reference to a secret object using `secret`.\n"
                    },
                    "validate": {
                        "type": "boolean",
                        "description": "**Private Preview** If the connection should wait for validation.\n"
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/connectionPostgres:ConnectionPostgres": {
            "description": "A Postgres connection establishes a link to a single database of a PostgreSQL server.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\n// Create a Postgres Connection with SSH tunnel \u0026 plain text user\nconst examplePostgresConnection = new materialize.ConnectionPostgres(\"examplePostgresConnection\", {\n    database: \"example\",\n    host: \"instance.foo000.us-west-1.rds.amazonaws.com\",\n    password: {\n        databaseName: \"database\",\n        name: \"example\",\n        schemaName: \"schema\",\n    },\n    port: 5432,\n    sshTunnel: {\n        name: \"example\",\n    },\n    user: {\n        text: \"my_user\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\n# Create a Postgres Connection with SSH tunnel \u0026 plain text user\nexample_postgres_connection = materialize.ConnectionPostgres(\"examplePostgresConnection\",\n    database=\"example\",\n    host=\"instance.foo000.us-west-1.rds.amazonaws.com\",\n    password=materialize.ConnectionPostgresPasswordArgs(\n        database_name=\"database\",\n        name=\"example\",\n        schema_name=\"schema\",\n    ),\n    port=5432,\n    ssh_tunnel=materialize.ConnectionPostgresSshTunnelArgs(\n        name=\"example\",\n    ),\n    user=materialize.ConnectionPostgresUserArgs(\n        text=\"my_user\",\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a Postgres Connection with SSH tunnel \u0026 plain text user\n    var examplePostgresConnection = new Materialize.ConnectionPostgres(\"examplePostgresConnection\", new()\n    {\n        Database = \"example\",\n        Host = \"instance.foo000.us-west-1.rds.amazonaws.com\",\n        Password = new Materialize.Inputs.ConnectionPostgresPasswordArgs\n        {\n            DatabaseName = \"database\",\n            Name = \"example\",\n            SchemaName = \"schema\",\n        },\n        Port = 5432,\n        SshTunnel = new Materialize.Inputs.ConnectionPostgresSshTunnelArgs\n        {\n            Name = \"example\",\n        },\n        User = new Materialize.Inputs.ConnectionPostgresUserArgs\n        {\n            Text = \"my_user\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.NewConnectionPostgres(ctx, \"examplePostgresConnection\", \u0026materialize.ConnectionPostgresArgs{\n\t\t\tDatabase: pulumi.String(\"example\"),\n\t\t\tHost:     pulumi.String(\"instance.foo000.us-west-1.rds.amazonaws.com\"),\n\t\t\tPassword: \u0026materialize.ConnectionPostgresPasswordArgs{\n\t\t\t\tDatabaseName: pulumi.String(\"database\"),\n\t\t\t\tName:         pulumi.String(\"example\"),\n\t\t\t\tSchemaName:   pulumi.String(\"schema\"),\n\t\t\t},\n\t\t\tPort: pulumi.Int(5432),\n\t\t\tSshTunnel: \u0026materialize.ConnectionPostgresSshTunnelArgs{\n\t\t\t\tName: pulumi.String(\"example\"),\n\t\t\t},\n\t\t\tUser: \u0026materialize.ConnectionPostgresUserArgs{\n\t\t\t\tText: pulumi.String(\"my_user\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.ConnectionPostgres;\nimport com.pulumi.materialize.ConnectionPostgresArgs;\nimport com.pulumi.materialize.inputs.ConnectionPostgresPasswordArgs;\nimport com.pulumi.materialize.inputs.ConnectionPostgresSshTunnelArgs;\nimport com.pulumi.materialize.inputs.ConnectionPostgresUserArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var examplePostgresConnection = new ConnectionPostgres(\"examplePostgresConnection\", ConnectionPostgresArgs.builder()        \n            .database(\"example\")\n            .host(\"instance.foo000.us-west-1.rds.amazonaws.com\")\n            .password(ConnectionPostgresPasswordArgs.builder()\n                .databaseName(\"database\")\n                .name(\"example\")\n                .schemaName(\"schema\")\n                .build())\n            .port(5432)\n            .sshTunnel(ConnectionPostgresSshTunnelArgs.builder()\n                .name(\"example\")\n                .build())\n            .user(ConnectionPostgresUserArgs.builder()\n                .text(\"my_user\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a Postgres Connection with SSH tunnel \u0026 plain text user\n  examplePostgresConnection:\n    type: materialize:ConnectionPostgres\n    properties:\n      database: example\n      host: instance.foo000.us-west-1.rds.amazonaws.com\n      password:\n        databaseName: database\n        name: example\n        schemaName: schema\n      port: 5432\n      sshTunnel:\n        name: example\n      user:\n        text: my_user\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nConnections can be imported using the connection id\n\n```sh\n $ pulumi import materialize:index/connectionPostgres:ConnectionPostgres example \u003cregion\u003e:\u003cconnection_id\u003e\n```\n\n Connection id and information be found in the `mz_catalog.mz_connections` table The region is the region where the database is located (e.g. aws/us-east-1) ",
            "properties": {
                "awsPrivatelink": {
                    "$ref": "#/types/materialize:index/ConnectionPostgresAwsPrivatelink:ConnectionPostgresAwsPrivatelink",
                    "description": "The AWS PrivateLink configuration for the Postgres database.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "**Public Preview** Comment on an object in the database.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The target Postgres database.\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the connection database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "host": {
                    "type": "string",
                    "description": "The Postgres database hostname.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the connection.\n"
                },
                "ownershipRole": {
                    "type": "string",
                    "description": "The owernship role of the object.\n"
                },
                "password": {
                    "$ref": "#/types/materialize:index/ConnectionPostgresPassword:ConnectionPostgresPassword",
                    "description": "The Postgres database password.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The Postgres database port.\n"
                },
                "qualifiedSqlName": {
                    "type": "string",
                    "description": "The fully qualified name of the connection.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the connection schema in Materialize. Defaults to `public`.\n"
                },
                "sshTunnel": {
                    "$ref": "#/types/materialize:index/ConnectionPostgresSshTunnel:ConnectionPostgresSshTunnel",
                    "description": "The SSH tunnel configuration for the Postgres database.\n"
                },
                "sslCertificate": {
                    "$ref": "#/types/materialize:index/ConnectionPostgresSslCertificate:ConnectionPostgresSslCertificate",
                    "description": "The client certificate for the Postgres database.. Can be supplied as either free text using `text` or reference to a secret object using `secret`.\n"
                },
                "sslCertificateAuthority": {
                    "$ref": "#/types/materialize:index/ConnectionPostgresSslCertificateAuthority:ConnectionPostgresSslCertificateAuthority",
                    "description": "The CA certificate for the Postgres database.. Can be supplied as either free text using `text` or reference to a secret object using `secret`.\n"
                },
                "sslKey": {
                    "$ref": "#/types/materialize:index/ConnectionPostgresSslKey:ConnectionPostgresSslKey",
                    "description": "The client key for the Postgres database.\n"
                },
                "sslMode": {
                    "type": "string",
                    "description": "The SSL mode for the Postgres database.\n"
                },
                "user": {
                    "$ref": "#/types/materialize:index/ConnectionPostgresUser:ConnectionPostgresUser",
                    "description": "The Postgres database username.. Can be supplied as either free text using `text` or reference to a secret object using `secret`.\n"
                },
                "validate": {
                    "type": "boolean",
                    "description": "**Private Preview** If the connection should wait for validation.\n"
                }
            },
            "required": [
                "database",
                "host",
                "name",
                "ownershipRole",
                "qualifiedSqlName",
                "region",
                "user"
            ],
            "inputProperties": {
                "awsPrivatelink": {
                    "$ref": "#/types/materialize:index/ConnectionPostgresAwsPrivatelink:ConnectionPostgresAwsPrivatelink",
                    "description": "The AWS PrivateLink configuration for the Postgres database.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "**Public Preview** Comment on an object in the database.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The target Postgres database.\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the connection database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n",
                    "willReplaceOnChanges": true
                },
                "host": {
                    "type": "string",
                    "description": "The Postgres database hostname.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the connection.\n"
                },
                "ownershipRole": {
                    "type": "string",
                    "description": "The owernship role of the object.\n"
                },
                "password": {
                    "$ref": "#/types/materialize:index/ConnectionPostgresPassword:ConnectionPostgresPassword",
                    "description": "The Postgres database password.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The Postgres database port.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                    "willReplaceOnChanges": true
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the connection schema in Materialize. Defaults to `public`.\n",
                    "willReplaceOnChanges": true
                },
                "sshTunnel": {
                    "$ref": "#/types/materialize:index/ConnectionPostgresSshTunnel:ConnectionPostgresSshTunnel",
                    "description": "The SSH tunnel configuration for the Postgres database.\n"
                },
                "sslCertificate": {
                    "$ref": "#/types/materialize:index/ConnectionPostgresSslCertificate:ConnectionPostgresSslCertificate",
                    "description": "The client certificate for the Postgres database.. Can be supplied as either free text using `text` or reference to a secret object using `secret`.\n"
                },
                "sslCertificateAuthority": {
                    "$ref": "#/types/materialize:index/ConnectionPostgresSslCertificateAuthority:ConnectionPostgresSslCertificateAuthority",
                    "description": "The CA certificate for the Postgres database.. Can be supplied as either free text using `text` or reference to a secret object using `secret`.\n"
                },
                "sslKey": {
                    "$ref": "#/types/materialize:index/ConnectionPostgresSslKey:ConnectionPostgresSslKey",
                    "description": "The client key for the Postgres database.\n"
                },
                "sslMode": {
                    "type": "string",
                    "description": "The SSL mode for the Postgres database.\n"
                },
                "user": {
                    "$ref": "#/types/materialize:index/ConnectionPostgresUser:ConnectionPostgresUser",
                    "description": "The Postgres database username.. Can be supplied as either free text using `text` or reference to a secret object using `secret`.\n"
                },
                "validate": {
                    "type": "boolean",
                    "description": "**Private Preview** If the connection should wait for validation.\n"
                }
            },
            "requiredInputs": [
                "database",
                "host",
                "user"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ConnectionPostgres resources.\n",
                "properties": {
                    "awsPrivatelink": {
                        "$ref": "#/types/materialize:index/ConnectionPostgresAwsPrivatelink:ConnectionPostgresAwsPrivatelink",
                        "description": "The AWS PrivateLink configuration for the Postgres database.\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "**Public Preview** Comment on an object in the database.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The target Postgres database.\n"
                    },
                    "databaseName": {
                        "type": "string",
                        "description": "The identifier for the connection database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n",
                        "willReplaceOnChanges": true
                    },
                    "host": {
                        "type": "string",
                        "description": "The Postgres database hostname.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The identifier for the connection.\n"
                    },
                    "ownershipRole": {
                        "type": "string",
                        "description": "The owernship role of the object.\n"
                    },
                    "password": {
                        "$ref": "#/types/materialize:index/ConnectionPostgresPassword:ConnectionPostgresPassword",
                        "description": "The Postgres database password.\n"
                    },
                    "port": {
                        "type": "integer",
                        "description": "The Postgres database port.\n"
                    },
                    "qualifiedSqlName": {
                        "type": "string",
                        "description": "The fully qualified name of the connection.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                        "willReplaceOnChanges": true
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "The identifier for the connection schema in Materialize. Defaults to `public`.\n",
                        "willReplaceOnChanges": true
                    },
                    "sshTunnel": {
                        "$ref": "#/types/materialize:index/ConnectionPostgresSshTunnel:ConnectionPostgresSshTunnel",
                        "description": "The SSH tunnel configuration for the Postgres database.\n"
                    },
                    "sslCertificate": {
                        "$ref": "#/types/materialize:index/ConnectionPostgresSslCertificate:ConnectionPostgresSslCertificate",
                        "description": "The client certificate for the Postgres database.. Can be supplied as either free text using `text` or reference to a secret object using `secret`.\n"
                    },
                    "sslCertificateAuthority": {
                        "$ref": "#/types/materialize:index/ConnectionPostgresSslCertificateAuthority:ConnectionPostgresSslCertificateAuthority",
                        "description": "The CA certificate for the Postgres database.. Can be supplied as either free text using `text` or reference to a secret object using `secret`.\n"
                    },
                    "sslKey": {
                        "$ref": "#/types/materialize:index/ConnectionPostgresSslKey:ConnectionPostgresSslKey",
                        "description": "The client key for the Postgres database.\n"
                    },
                    "sslMode": {
                        "type": "string",
                        "description": "The SSL mode for the Postgres database.\n"
                    },
                    "user": {
                        "$ref": "#/types/materialize:index/ConnectionPostgresUser:ConnectionPostgresUser",
                        "description": "The Postgres database username.. Can be supplied as either free text using `text` or reference to a secret object using `secret`.\n"
                    },
                    "validate": {
                        "type": "boolean",
                        "description": "**Private Preview** If the connection should wait for validation.\n"
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/connectionSshTunnel:ConnectionSshTunnel": {
            "description": "An SSH tunnel connection establishes a link to an SSH bastion server.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\n// Create SSH Connection\nconst exampleSshConnection = new materialize.ConnectionSshTunnel(\"exampleSshConnection\", {\n    host: \"example.com\",\n    port: 22,\n    schemaName: \"public\",\n    user: \"example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\n# Create SSH Connection\nexample_ssh_connection = materialize.ConnectionSshTunnel(\"exampleSshConnection\",\n    host=\"example.com\",\n    port=22,\n    schema_name=\"public\",\n    user=\"example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create SSH Connection\n    var exampleSshConnection = new Materialize.ConnectionSshTunnel(\"exampleSshConnection\", new()\n    {\n        Host = \"example.com\",\n        Port = 22,\n        SchemaName = \"public\",\n        User = \"example\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.NewConnectionSshTunnel(ctx, \"exampleSshConnection\", \u0026materialize.ConnectionSshTunnelArgs{\n\t\t\tHost:       pulumi.String(\"example.com\"),\n\t\t\tPort:       pulumi.Int(22),\n\t\t\tSchemaName: pulumi.String(\"public\"),\n\t\t\tUser:       pulumi.String(\"example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.ConnectionSshTunnel;\nimport com.pulumi.materialize.ConnectionSshTunnelArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleSshConnection = new ConnectionSshTunnel(\"exampleSshConnection\", ConnectionSshTunnelArgs.builder()        \n            .host(\"example.com\")\n            .port(22)\n            .schemaName(\"public\")\n            .user(\"example\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create SSH Connection\n  exampleSshConnection:\n    type: materialize:ConnectionSshTunnel\n    properties:\n      host: example.com\n      port: 22\n      schemaName: public\n      user: example\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n#Connections can be imported using the connection id\n\n```sh\n $ pulumi import materialize:index/connectionSshTunnel:ConnectionSshTunnel example \u003cregion\u003e:\u003cconnection_id\u003e\n```\n\n Connection id and information be found in the `mz_catalog.mz_connections` table The region is the region where the database is located (e.g. aws/us-east-1) ",
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "**Public Preview** Comment on an object in the database.\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the connection database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "host": {
                    "type": "string",
                    "description": "The host of the SSH tunnel.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the connection.\n"
                },
                "ownershipRole": {
                    "type": "string",
                    "description": "The owernship role of the object.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port of the SSH tunnel.\n"
                },
                "publicKey1": {
                    "type": "string",
                    "description": "The first public key associated with the SSH tunnel.\n"
                },
                "publicKey2": {
                    "type": "string",
                    "description": "The second public key associated with the SSH tunnel.\n"
                },
                "qualifiedSqlName": {
                    "type": "string",
                    "description": "The fully qualified name of the connection.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the connection schema in Materialize. Defaults to `public`.\n"
                },
                "user": {
                    "type": "string",
                    "description": "The user of the SSH tunnel.\n"
                },
                "validate": {
                    "type": "boolean",
                    "description": "**Private Preview** If the connection should wait for validation.\n"
                }
            },
            "required": [
                "host",
                "name",
                "ownershipRole",
                "port",
                "publicKey1",
                "publicKey2",
                "qualifiedSqlName",
                "region",
                "user"
            ],
            "inputProperties": {
                "comment": {
                    "type": "string",
                    "description": "**Public Preview** Comment on an object in the database.\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the connection database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n",
                    "willReplaceOnChanges": true
                },
                "host": {
                    "type": "string",
                    "description": "The host of the SSH tunnel.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the connection.\n"
                },
                "ownershipRole": {
                    "type": "string",
                    "description": "The owernship role of the object.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port of the SSH tunnel.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                    "willReplaceOnChanges": true
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the connection schema in Materialize. Defaults to `public`.\n",
                    "willReplaceOnChanges": true
                },
                "user": {
                    "type": "string",
                    "description": "The user of the SSH tunnel.\n"
                },
                "validate": {
                    "type": "boolean",
                    "description": "**Private Preview** If the connection should wait for validation.\n"
                }
            },
            "requiredInputs": [
                "host",
                "port",
                "user"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ConnectionSshTunnel resources.\n",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "**Public Preview** Comment on an object in the database.\n"
                    },
                    "databaseName": {
                        "type": "string",
                        "description": "The identifier for the connection database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n",
                        "willReplaceOnChanges": true
                    },
                    "host": {
                        "type": "string",
                        "description": "The host of the SSH tunnel.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The identifier for the connection.\n"
                    },
                    "ownershipRole": {
                        "type": "string",
                        "description": "The owernship role of the object.\n"
                    },
                    "port": {
                        "type": "integer",
                        "description": "The port of the SSH tunnel.\n"
                    },
                    "publicKey1": {
                        "type": "string",
                        "description": "The first public key associated with the SSH tunnel.\n"
                    },
                    "publicKey2": {
                        "type": "string",
                        "description": "The second public key associated with the SSH tunnel.\n"
                    },
                    "qualifiedSqlName": {
                        "type": "string",
                        "description": "The fully qualified name of the connection.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                        "willReplaceOnChanges": true
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "The identifier for the connection schema in Materialize. Defaults to `public`.\n",
                        "willReplaceOnChanges": true
                    },
                    "user": {
                        "type": "string",
                        "description": "The user of the SSH tunnel.\n"
                    },
                    "validate": {
                        "type": "boolean",
                        "description": "**Private Preview** If the connection should wait for validation.\n"
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/database:Database": {
            "description": "The highest level namespace hierarchy in Materialize.\n\n**Note**: This resource will not automatically create a public schema.If needed, the public schema must be explicitly defined in your configuration using the `materialize.Schema` resource.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\n// Create a Materialize database without a public schema\nconst example = new materialize.Database(\"example\", {});\n// By default, Materialize creates a public schema in each database\n// The Terraform provider on the other hand does not create a public schema by default\n// Optionally you can create a public schema in the database using the materialize_schema resource\nconst _public = new materialize.Schema(\"public\", {databaseName: example.name});\n// Grant USAGE to the PUBLIC pseudo-role for the public schema\n// This matches the default behavior of Materialize\nconst schemaGrantUsage = new materialize.GrantSchema(\"schemaGrantUsage\", {\n    roleName: \"PUBLIC\",\n    privilege: \"USAGE\",\n    databaseName: example.name,\n    schemaName: _public.name,\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\n# Create a Materialize database without a public schema\nexample = materialize.Database(\"example\")\n# By default, Materialize creates a public schema in each database\n# The Terraform provider on the other hand does not create a public schema by default\n# Optionally you can create a public schema in the database using the materialize_schema resource\npublic = materialize.Schema(\"public\", database_name=example.name)\n# Grant USAGE to the PUBLIC pseudo-role for the public schema\n# This matches the default behavior of Materialize\nschema_grant_usage = materialize.GrantSchema(\"schemaGrantUsage\",\n    role_name=\"PUBLIC\",\n    privilege=\"USAGE\",\n    database_name=example.name,\n    schema_name=public.name)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a Materialize database without a public schema\n    var example = new Materialize.Database(\"example\");\n\n    // By default, Materialize creates a public schema in each database\n    // The Terraform provider on the other hand does not create a public schema by default\n    // Optionally you can create a public schema in the database using the materialize_schema resource\n    var @public = new Materialize.Schema(\"public\", new()\n    {\n        DatabaseName = example.Name,\n    });\n\n    // Grant USAGE to the PUBLIC pseudo-role for the public schema\n    // This matches the default behavior of Materialize\n    var schemaGrantUsage = new Materialize.GrantSchema(\"schemaGrantUsage\", new()\n    {\n        RoleName = \"PUBLIC\",\n        Privilege = \"USAGE\",\n        DatabaseName = example.Name,\n        SchemaName = @public.Name,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := materialize.NewDatabase(ctx, \"example\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tpublic, err := materialize.NewSchema(ctx, \"public\", \u0026materialize.SchemaArgs{\n\t\t\tDatabaseName: example.Name,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = materialize.NewGrantSchema(ctx, \"schemaGrantUsage\", \u0026materialize.GrantSchemaArgs{\n\t\t\tRoleName:     pulumi.String(\"PUBLIC\"),\n\t\t\tPrivilege:    pulumi.String(\"USAGE\"),\n\t\t\tDatabaseName: example.Name,\n\t\t\tSchemaName:   public.Name,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.Database;\nimport com.pulumi.materialize.Schema;\nimport com.pulumi.materialize.SchemaArgs;\nimport com.pulumi.materialize.GrantSchema;\nimport com.pulumi.materialize.GrantSchemaArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Database(\"example\");\n\n        var public_ = new Schema(\"public\", SchemaArgs.builder()        \n            .databaseName(example.name())\n            .build());\n\n        var schemaGrantUsage = new GrantSchema(\"schemaGrantUsage\", GrantSchemaArgs.builder()        \n            .roleName(\"PUBLIC\")\n            .privilege(\"USAGE\")\n            .databaseName(example.name())\n            .schemaName(public_.name())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a Materialize database without a public schema\n  example:\n    type: materialize:Database\n  # By default, Materialize creates a public schema in each database\n  # The Terraform provider on the other hand does not create a public schema by default\n  # Optionally you can create a public schema in the database using the materialize_schema resource\n  public:\n    type: materialize:Schema\n    properties:\n      databaseName: ${example.name}\n  # Grant USAGE to the PUBLIC pseudo-role for the public schema\n  # This matches the default behavior of Materialize\n  schemaGrantUsage:\n    type: materialize:GrantSchema\n    properties:\n      roleName: PUBLIC\n      privilege: USAGE\n      databaseName: ${example.name}\n      schemaName: ${public.name}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nDatabases can be imported using the database id\n\n```sh\n $ pulumi import materialize:index/database:Database example_database \u003cregion\u003e:\u003cdatabase_id\u003e\n```\n\n Database id and information be found in the `mz_catalog.mz_databases` table The region is the region where the database is located (e.g. aws/us-east-1) ",
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "**Public Preview** Comment on an object in the database.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the database.\n"
                },
                "ownershipRole": {
                    "type": "string",
                    "description": "The owernship role of the object.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n"
                }
            },
            "required": [
                "name",
                "ownershipRole",
                "region"
            ],
            "inputProperties": {
                "comment": {
                    "type": "string",
                    "description": "**Public Preview** Comment on an object in the database.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the database.\n",
                    "willReplaceOnChanges": true
                },
                "ownershipRole": {
                    "type": "string",
                    "description": "The owernship role of the object.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Database resources.\n",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "**Public Preview** Comment on an object in the database.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The identifier for the database.\n",
                        "willReplaceOnChanges": true
                    },
                    "ownershipRole": {
                        "type": "string",
                        "description": "The owernship role of the object.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/grantCluster:GrantCluster": {
            "description": "Manages the privileges on a Materailize cluster for roles.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\n// Grant USAGE to role example_role to cluster example_cluster\nconst clusterGrantUsage = new materialize.GrantCluster(\"clusterGrantUsage\", {\n    clusterName: \"example_cluster\",\n    privilege: \"USAGE\",\n    roleName: \"example_role\",\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\n# Grant USAGE to role example_role to cluster example_cluster\ncluster_grant_usage = materialize.GrantCluster(\"clusterGrantUsage\",\n    cluster_name=\"example_cluster\",\n    privilege=\"USAGE\",\n    role_name=\"example_role\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Grant USAGE to role example_role to cluster example_cluster\n    var clusterGrantUsage = new Materialize.GrantCluster(\"clusterGrantUsage\", new()\n    {\n        ClusterName = \"example_cluster\",\n        Privilege = \"USAGE\",\n        RoleName = \"example_role\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.NewGrantCluster(ctx, \"clusterGrantUsage\", \u0026materialize.GrantClusterArgs{\n\t\t\tClusterName: pulumi.String(\"example_cluster\"),\n\t\t\tPrivilege:   pulumi.String(\"USAGE\"),\n\t\t\tRoleName:    pulumi.String(\"example_role\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.GrantCluster;\nimport com.pulumi.materialize.GrantClusterArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var clusterGrantUsage = new GrantCluster(\"clusterGrantUsage\", GrantClusterArgs.builder()        \n            .clusterName(\"example_cluster\")\n            .privilege(\"USAGE\")\n            .roleName(\"example_role\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Grant USAGE to role example_role to cluster example_cluster\n  clusterGrantUsage:\n    type: materialize:GrantCluster\n    properties:\n      clusterName: example_cluster\n      privilege: USAGE\n      roleName: example_role\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n#Grants can be imported using the concatenation of GRANT, the object type, the id of the object, the id of the role and the privilege\n\n\n\n```sh\n $ pulumi import materialize:index/grantCluster:GrantCluster example \u003cregion\u003e:GRANT|CLUSTER|\u003ccluster_id\u003e|\u003crole_id\u003e|\u003cprivilege\u003e\n```\n\n The region is the region where the database is located (e.g. aws/us-east-1) ",
            "properties": {
                "clusterName": {
                    "type": "string",
                    "description": "The cluster that is being granted on.\n"
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant to the object.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n"
                },
                "roleName": {
                    "type": "string",
                    "description": "The name of the role to grant privilege to.\n"
                }
            },
            "required": [
                "clusterName",
                "privilege",
                "region",
                "roleName"
            ],
            "inputProperties": {
                "clusterName": {
                    "type": "string",
                    "description": "The cluster that is being granted on.\n",
                    "willReplaceOnChanges": true
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant to the object.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                    "willReplaceOnChanges": true
                },
                "roleName": {
                    "type": "string",
                    "description": "The name of the role to grant privilege to.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "clusterName",
                "privilege",
                "roleName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GrantCluster resources.\n",
                "properties": {
                    "clusterName": {
                        "type": "string",
                        "description": "The cluster that is being granted on.\n",
                        "willReplaceOnChanges": true
                    },
                    "privilege": {
                        "type": "string",
                        "description": "The privilege to grant to the object.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                        "willReplaceOnChanges": true
                    },
                    "roleName": {
                        "type": "string",
                        "description": "The name of the role to grant privilege to.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/grantClusterDefaultPrivilege:GrantClusterDefaultPrivilege": {
            "description": "Defines default privileges that will be applied to objects created in the future. It does not affect any existing objects.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\n// Grant role the privilege USAGE for objects\nconst example = new materialize.GrantClusterDefaultPrivilege(\"example\", {\n    granteeName: \"grantee\",\n    privilege: \"USAGE\",\n    targetRoleName: \"target_role\",\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\n# Grant role the privilege USAGE for objects\nexample = materialize.GrantClusterDefaultPrivilege(\"example\",\n    grantee_name=\"grantee\",\n    privilege=\"USAGE\",\n    target_role_name=\"target_role\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Grant role the privilege USAGE for objects\n    var example = new Materialize.GrantClusterDefaultPrivilege(\"example\", new()\n    {\n        GranteeName = \"grantee\",\n        Privilege = \"USAGE\",\n        TargetRoleName = \"target_role\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.NewGrantClusterDefaultPrivilege(ctx, \"example\", \u0026materialize.GrantClusterDefaultPrivilegeArgs{\n\t\t\tGranteeName:    pulumi.String(\"grantee\"),\n\t\t\tPrivilege:      pulumi.String(\"USAGE\"),\n\t\t\tTargetRoleName: pulumi.String(\"target_role\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.GrantClusterDefaultPrivilege;\nimport com.pulumi.materialize.GrantClusterDefaultPrivilegeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new GrantClusterDefaultPrivilege(\"example\", GrantClusterDefaultPrivilegeArgs.builder()        \n            .granteeName(\"grantee\")\n            .privilege(\"USAGE\")\n            .targetRoleName(\"target_role\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Grant role the privilege USAGE for objects\n  example:\n    type: materialize:GrantClusterDefaultPrivilege\n    properties:\n      granteeName: grantee\n      privilege: USAGE\n      targetRoleName: target_role\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n#Grants can be imported using the concatenation of GRANT DEFAULT, the grantee id of the role #Optionally you can include the target id. The privilege is required\n\n\n\n```sh\n $ pulumi import materialize:index/grantClusterDefaultPrivilege:GrantClusterDefaultPrivilege example \u003cregion\u003e:GRANT DEFAULT|CLUSTER|\u003cgrantee_id\u003e|\u003ctarget_role_id\u003e|||\u003cprivilege\u003e\n```\n\n The region is the region where the database is located (e.g. aws/us-east-1) ",
            "properties": {
                "granteeName": {
                    "type": "string",
                    "description": "The role name that will gain the default privilege. Use the `PUBLIC` pseudo-role to grant privileges to all roles.\n"
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant to the object.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n"
                },
                "targetRoleName": {
                    "type": "string",
                    "description": "The default privilege will apply to objects created by this role. If this is left blank, then the current role is assumed. Use the `PUBLIC` pseudo-role to target objects created by all roles.\n"
                }
            },
            "required": [
                "granteeName",
                "privilege",
                "region",
                "targetRoleName"
            ],
            "inputProperties": {
                "granteeName": {
                    "type": "string",
                    "description": "The role name that will gain the default privilege. Use the `PUBLIC` pseudo-role to grant privileges to all roles.\n",
                    "willReplaceOnChanges": true
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant to the object.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                    "willReplaceOnChanges": true
                },
                "targetRoleName": {
                    "type": "string",
                    "description": "The default privilege will apply to objects created by this role. If this is left blank, then the current role is assumed. Use the `PUBLIC` pseudo-role to target objects created by all roles.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "granteeName",
                "privilege",
                "targetRoleName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GrantClusterDefaultPrivilege resources.\n",
                "properties": {
                    "granteeName": {
                        "type": "string",
                        "description": "The role name that will gain the default privilege. Use the `PUBLIC` pseudo-role to grant privileges to all roles.\n",
                        "willReplaceOnChanges": true
                    },
                    "privilege": {
                        "type": "string",
                        "description": "The privilege to grant to the object.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                        "willReplaceOnChanges": true
                    },
                    "targetRoleName": {
                        "type": "string",
                        "description": "The default privilege will apply to objects created by this role. If this is left blank, then the current role is assumed. Use the `PUBLIC` pseudo-role to target objects created by all roles.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/grantConnection:GrantConnection": {
            "description": "Manages the privileges on a Materailize connection for roles.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\n// Grant USAGE to role example_role to connection example_database.example_schema.example_connection\nconst connectionGrantUsage = new materialize.GrantConnection(\"connectionGrantUsage\", {\n    connectionName: \"example_connection\",\n    databaseName: \"example_database\",\n    privilege: \"USAGE\",\n    roleName: \"example_role\",\n    schemaName: \"example_schema\",\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\n# Grant USAGE to role example_role to connection example_database.example_schema.example_connection\nconnection_grant_usage = materialize.GrantConnection(\"connectionGrantUsage\",\n    connection_name=\"example_connection\",\n    database_name=\"example_database\",\n    privilege=\"USAGE\",\n    role_name=\"example_role\",\n    schema_name=\"example_schema\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Grant USAGE to role example_role to connection example_database.example_schema.example_connection\n    var connectionGrantUsage = new Materialize.GrantConnection(\"connectionGrantUsage\", new()\n    {\n        ConnectionName = \"example_connection\",\n        DatabaseName = \"example_database\",\n        Privilege = \"USAGE\",\n        RoleName = \"example_role\",\n        SchemaName = \"example_schema\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.NewGrantConnection(ctx, \"connectionGrantUsage\", \u0026materialize.GrantConnectionArgs{\n\t\t\tConnectionName: pulumi.String(\"example_connection\"),\n\t\t\tDatabaseName:   pulumi.String(\"example_database\"),\n\t\t\tPrivilege:      pulumi.String(\"USAGE\"),\n\t\t\tRoleName:       pulumi.String(\"example_role\"),\n\t\t\tSchemaName:     pulumi.String(\"example_schema\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.GrantConnection;\nimport com.pulumi.materialize.GrantConnectionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var connectionGrantUsage = new GrantConnection(\"connectionGrantUsage\", GrantConnectionArgs.builder()        \n            .connectionName(\"example_connection\")\n            .databaseName(\"example_database\")\n            .privilege(\"USAGE\")\n            .roleName(\"example_role\")\n            .schemaName(\"example_schema\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Grant USAGE to role example_role to connection example_database.example_schema.example_connection\n  connectionGrantUsage:\n    type: materialize:GrantConnection\n    properties:\n      connectionName: example_connection\n      databaseName: example_database\n      privilege: USAGE\n      roleName: example_role\n      schemaName: example_schema\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n#Grants can be imported using the concatenation of GRANT, the object type, the id of the object, the id of the role and the privilege\n\n\n\n```sh\n $ pulumi import materialize:index/grantConnection:GrantConnection example \u003cregion\u003e:GRANT|CONNECTION|\u003cconnection_id\u003e|\u003crole_id\u003e|\u003cprivilege\u003e\n```\n\n The region is the region where the database is located (e.g. aws/us-east-1) ",
            "properties": {
                "connectionName": {
                    "type": "string",
                    "description": "The connection that is being granted on.\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "The database that the connection belongs to.\n"
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant to the object.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n"
                },
                "roleName": {
                    "type": "string",
                    "description": "The name of the role to grant privilege to.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The schema that the connection being to.\n"
                }
            },
            "required": [
                "connectionName",
                "databaseName",
                "privilege",
                "region",
                "roleName",
                "schemaName"
            ],
            "inputProperties": {
                "connectionName": {
                    "type": "string",
                    "description": "The connection that is being granted on.\n",
                    "willReplaceOnChanges": true
                },
                "databaseName": {
                    "type": "string",
                    "description": "The database that the connection belongs to.\n",
                    "willReplaceOnChanges": true
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant to the object.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                    "willReplaceOnChanges": true
                },
                "roleName": {
                    "type": "string",
                    "description": "The name of the role to grant privilege to.\n",
                    "willReplaceOnChanges": true
                },
                "schemaName": {
                    "type": "string",
                    "description": "The schema that the connection being to.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "connectionName",
                "databaseName",
                "privilege",
                "roleName",
                "schemaName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GrantConnection resources.\n",
                "properties": {
                    "connectionName": {
                        "type": "string",
                        "description": "The connection that is being granted on.\n",
                        "willReplaceOnChanges": true
                    },
                    "databaseName": {
                        "type": "string",
                        "description": "The database that the connection belongs to.\n",
                        "willReplaceOnChanges": true
                    },
                    "privilege": {
                        "type": "string",
                        "description": "The privilege to grant to the object.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                        "willReplaceOnChanges": true
                    },
                    "roleName": {
                        "type": "string",
                        "description": "The name of the role to grant privilege to.\n",
                        "willReplaceOnChanges": true
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "The schema that the connection being to.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/grantConnectionDefaultPrivilege:GrantConnectionDefaultPrivilege": {
            "description": "Defines default privileges that will be applied to objects created in the future. It does not affect any existing objects.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\n// Grant role the privilege USAGE for objects in the schema database.schema\nconst example = new materialize.GrantConnectionDefaultPrivilege(\"example\", {\n    databaseName: \"database\",\n    granteeName: \"grantee\",\n    privilege: \"USAGE\",\n    schemaName: \"schema\",\n    targetRoleName: \"target_role\",\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\n# Grant role the privilege USAGE for objects in the schema database.schema\nexample = materialize.GrantConnectionDefaultPrivilege(\"example\",\n    database_name=\"database\",\n    grantee_name=\"grantee\",\n    privilege=\"USAGE\",\n    schema_name=\"schema\",\n    target_role_name=\"target_role\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Grant role the privilege USAGE for objects in the schema database.schema\n    var example = new Materialize.GrantConnectionDefaultPrivilege(\"example\", new()\n    {\n        DatabaseName = \"database\",\n        GranteeName = \"grantee\",\n        Privilege = \"USAGE\",\n        SchemaName = \"schema\",\n        TargetRoleName = \"target_role\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.NewGrantConnectionDefaultPrivilege(ctx, \"example\", \u0026materialize.GrantConnectionDefaultPrivilegeArgs{\n\t\t\tDatabaseName:   pulumi.String(\"database\"),\n\t\t\tGranteeName:    pulumi.String(\"grantee\"),\n\t\t\tPrivilege:      pulumi.String(\"USAGE\"),\n\t\t\tSchemaName:     pulumi.String(\"schema\"),\n\t\t\tTargetRoleName: pulumi.String(\"target_role\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.GrantConnectionDefaultPrivilege;\nimport com.pulumi.materialize.GrantConnectionDefaultPrivilegeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new GrantConnectionDefaultPrivilege(\"example\", GrantConnectionDefaultPrivilegeArgs.builder()        \n            .databaseName(\"database\")\n            .granteeName(\"grantee\")\n            .privilege(\"USAGE\")\n            .schemaName(\"schema\")\n            .targetRoleName(\"target_role\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Grant role the privilege USAGE for objects in the schema database.schema\n  example:\n    type: materialize:GrantConnectionDefaultPrivilege\n    properties:\n      databaseName: database\n      granteeName: grantee\n      privilege: USAGE\n      schemaName: schema\n      targetRoleName: target_role\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n#Grants can be imported using the concatenation of GRANT DEFAULT, the grantee id of the role #Optionally you can include the target id, database id and schema id. The privilege is required\n\n\n\n```sh\n $ pulumi import materialize:index/grantConnectionDefaultPrivilege:GrantConnectionDefaultPrivilege example \u003cregion\u003e:GRANT DEFAULT|CONNECTION|\u003cgrantee_id\u003e|\u003ctarget_role_id\u003e|\u003cdatabase_id\u003e|\u003cschema_id\u003e|\u003cprivilege\u003e\n```\n\n The region is the region where the database is located (e.g. aws/us-east-1) ",
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The default privilege will apply only to objects created in this database, if specified.\n"
                },
                "granteeName": {
                    "type": "string",
                    "description": "The role name that will gain the default privilege. Use the `PUBLIC` pseudo-role to grant privileges to all roles.\n"
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant to the object.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The default privilege will apply only to objects created in this schema, if specified.\n"
                },
                "targetRoleName": {
                    "type": "string",
                    "description": "The default privilege will apply to objects created by this role. If this is left blank, then the current role is assumed. Use the `PUBLIC` pseudo-role to target objects created by all roles.\n"
                }
            },
            "required": [
                "granteeName",
                "privilege",
                "region",
                "targetRoleName"
            ],
            "inputProperties": {
                "databaseName": {
                    "type": "string",
                    "description": "The default privilege will apply only to objects created in this database, if specified.\n",
                    "willReplaceOnChanges": true
                },
                "granteeName": {
                    "type": "string",
                    "description": "The role name that will gain the default privilege. Use the `PUBLIC` pseudo-role to grant privileges to all roles.\n",
                    "willReplaceOnChanges": true
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant to the object.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                    "willReplaceOnChanges": true
                },
                "schemaName": {
                    "type": "string",
                    "description": "The default privilege will apply only to objects created in this schema, if specified.\n",
                    "willReplaceOnChanges": true
                },
                "targetRoleName": {
                    "type": "string",
                    "description": "The default privilege will apply to objects created by this role. If this is left blank, then the current role is assumed. Use the `PUBLIC` pseudo-role to target objects created by all roles.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "granteeName",
                "privilege",
                "targetRoleName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GrantConnectionDefaultPrivilege resources.\n",
                "properties": {
                    "databaseName": {
                        "type": "string",
                        "description": "The default privilege will apply only to objects created in this database, if specified.\n",
                        "willReplaceOnChanges": true
                    },
                    "granteeName": {
                        "type": "string",
                        "description": "The role name that will gain the default privilege. Use the `PUBLIC` pseudo-role to grant privileges to all roles.\n",
                        "willReplaceOnChanges": true
                    },
                    "privilege": {
                        "type": "string",
                        "description": "The privilege to grant to the object.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                        "willReplaceOnChanges": true
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "The default privilege will apply only to objects created in this schema, if specified.\n",
                        "willReplaceOnChanges": true
                    },
                    "targetRoleName": {
                        "type": "string",
                        "description": "The default privilege will apply to objects created by this role. If this is left blank, then the current role is assumed. Use the `PUBLIC` pseudo-role to target objects created by all roles.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/grantDatabase:GrantDatabase": {
            "description": "Manages the privileges on a Materailize database for roles.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\n// Grant USAGE to role example_role to database example_database\nconst databaseGrantUsage = new materialize.GrantDatabase(\"databaseGrantUsage\", {\n    databaseName: \"example_database\",\n    privilege: \"USAGE\",\n    roleName: \"example_role\",\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\n# Grant USAGE to role example_role to database example_database\ndatabase_grant_usage = materialize.GrantDatabase(\"databaseGrantUsage\",\n    database_name=\"example_database\",\n    privilege=\"USAGE\",\n    role_name=\"example_role\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Grant USAGE to role example_role to database example_database\n    var databaseGrantUsage = new Materialize.GrantDatabase(\"databaseGrantUsage\", new()\n    {\n        DatabaseName = \"example_database\",\n        Privilege = \"USAGE\",\n        RoleName = \"example_role\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.NewGrantDatabase(ctx, \"databaseGrantUsage\", \u0026materialize.GrantDatabaseArgs{\n\t\t\tDatabaseName: pulumi.String(\"example_database\"),\n\t\t\tPrivilege:    pulumi.String(\"USAGE\"),\n\t\t\tRoleName:     pulumi.String(\"example_role\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.GrantDatabase;\nimport com.pulumi.materialize.GrantDatabaseArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var databaseGrantUsage = new GrantDatabase(\"databaseGrantUsage\", GrantDatabaseArgs.builder()        \n            .databaseName(\"example_database\")\n            .privilege(\"USAGE\")\n            .roleName(\"example_role\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Grant USAGE to role example_role to database example_database\n  databaseGrantUsage:\n    type: materialize:GrantDatabase\n    properties:\n      databaseName: example_database\n      privilege: USAGE\n      roleName: example_role\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n#Grants can be imported using the concatenation of GRANT, the object type, the id of the object, the id of the role and the privilege\n\n\n\n```sh\n $ pulumi import materialize:index/grantDatabase:GrantDatabase example \u003cregion\u003e:GRANT|DATABASE|\u003cdatabase_id\u003e|\u003crole_id\u003e|\u003cprivilege\u003e\n```\n\n The region is the region where the database is located (e.g. aws/us-east-1) ",
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The database that is being granted on.\n"
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant to the object.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n"
                },
                "roleName": {
                    "type": "string",
                    "description": "The name of the role to grant privilege to.\n"
                }
            },
            "required": [
                "databaseName",
                "privilege",
                "region",
                "roleName"
            ],
            "inputProperties": {
                "databaseName": {
                    "type": "string",
                    "description": "The database that is being granted on.\n",
                    "willReplaceOnChanges": true
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant to the object.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                    "willReplaceOnChanges": true
                },
                "roleName": {
                    "type": "string",
                    "description": "The name of the role to grant privilege to.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "databaseName",
                "privilege",
                "roleName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GrantDatabase resources.\n",
                "properties": {
                    "databaseName": {
                        "type": "string",
                        "description": "The database that is being granted on.\n",
                        "willReplaceOnChanges": true
                    },
                    "privilege": {
                        "type": "string",
                        "description": "The privilege to grant to the object.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                        "willReplaceOnChanges": true
                    },
                    "roleName": {
                        "type": "string",
                        "description": "The name of the role to grant privilege to.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/grantDatabaseDefaultPrivilege:GrantDatabaseDefaultPrivilege": {
            "description": "Defines default privileges that will be applied to objects created in the future. It does not affect any existing objects.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\n// Grant role the privilege USAGE for objects in the database database\nconst example = new materialize.GrantDatabaseDefaultPrivilege(\"example\", {\n    granteeName: \"grantee\",\n    privilege: \"USAGE\",\n    targetRoleName: \"target_role\",\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\n# Grant role the privilege USAGE for objects in the database database\nexample = materialize.GrantDatabaseDefaultPrivilege(\"example\",\n    grantee_name=\"grantee\",\n    privilege=\"USAGE\",\n    target_role_name=\"target_role\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Grant role the privilege USAGE for objects in the database database\n    var example = new Materialize.GrantDatabaseDefaultPrivilege(\"example\", new()\n    {\n        GranteeName = \"grantee\",\n        Privilege = \"USAGE\",\n        TargetRoleName = \"target_role\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.NewGrantDatabaseDefaultPrivilege(ctx, \"example\", \u0026materialize.GrantDatabaseDefaultPrivilegeArgs{\n\t\t\tGranteeName:    pulumi.String(\"grantee\"),\n\t\t\tPrivilege:      pulumi.String(\"USAGE\"),\n\t\t\tTargetRoleName: pulumi.String(\"target_role\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.GrantDatabaseDefaultPrivilege;\nimport com.pulumi.materialize.GrantDatabaseDefaultPrivilegeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new GrantDatabaseDefaultPrivilege(\"example\", GrantDatabaseDefaultPrivilegeArgs.builder()        \n            .granteeName(\"grantee\")\n            .privilege(\"USAGE\")\n            .targetRoleName(\"target_role\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Grant role the privilege USAGE for objects in the database database\n  example:\n    type: materialize:GrantDatabaseDefaultPrivilege\n    properties:\n      granteeName: grantee\n      privilege: USAGE\n      targetRoleName: target_role\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n#Grants can be imported using the concatenation of GRANT DEFAULT, the grantee id of the role #Optionally you can include the target id, database id. The privilege is required\n\n\n\n```sh\n $ pulumi import materialize:index/grantDatabaseDefaultPrivilege:GrantDatabaseDefaultPrivilege example \u003cregion\u003e:GRANT DEFAULT|CONNECTION|\u003cgrantee_id\u003e|\u003ctarget_role_id\u003e|\u003cdatabase_id\u003e||\u003cprivilege\u003e\n```\n\n The region is the region where the database is located (e.g. aws/us-east-1) ",
            "properties": {
                "granteeName": {
                    "type": "string",
                    "description": "The role name that will gain the default privilege. Use the `PUBLIC` pseudo-role to grant privileges to all roles.\n"
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant to the object.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n"
                },
                "targetRoleName": {
                    "type": "string",
                    "description": "The default privilege will apply to objects created by this role. If this is left blank, then the current role is assumed. Use the `PUBLIC` pseudo-role to target objects created by all roles.\n"
                }
            },
            "required": [
                "granteeName",
                "privilege",
                "region",
                "targetRoleName"
            ],
            "inputProperties": {
                "granteeName": {
                    "type": "string",
                    "description": "The role name that will gain the default privilege. Use the `PUBLIC` pseudo-role to grant privileges to all roles.\n",
                    "willReplaceOnChanges": true
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant to the object.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                    "willReplaceOnChanges": true
                },
                "targetRoleName": {
                    "type": "string",
                    "description": "The default privilege will apply to objects created by this role. If this is left blank, then the current role is assumed. Use the `PUBLIC` pseudo-role to target objects created by all roles.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "granteeName",
                "privilege",
                "targetRoleName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GrantDatabaseDefaultPrivilege resources.\n",
                "properties": {
                    "granteeName": {
                        "type": "string",
                        "description": "The role name that will gain the default privilege. Use the `PUBLIC` pseudo-role to grant privileges to all roles.\n",
                        "willReplaceOnChanges": true
                    },
                    "privilege": {
                        "type": "string",
                        "description": "The privilege to grant to the object.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                        "willReplaceOnChanges": true
                    },
                    "targetRoleName": {
                        "type": "string",
                        "description": "The default privilege will apply to objects created by this role. If this is left blank, then the current role is assumed. Use the `PUBLIC` pseudo-role to target objects created by all roles.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/grantMaterializedView:GrantMaterializedView": {
            "description": "Manages the privileges on a Materailize materialized view for roles.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\n// Grant SELECT to role example_role to connection example_database.example_schema.example_materialized_view\nconst materializedViewGrantSelect = new materialize.GrantMaterializedView(\"materializedViewGrantSelect\", {\n    databaseName: \"example_database\",\n    materializedViewName: \"example_materialized_view\",\n    privilege: \"SELECT\",\n    roleName: \"example_role\",\n    schemaName: \"example_schema\",\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\n# Grant SELECT to role example_role to connection example_database.example_schema.example_materialized_view\nmaterialized_view_grant_select = materialize.GrantMaterializedView(\"materializedViewGrantSelect\",\n    database_name=\"example_database\",\n    materialized_view_name=\"example_materialized_view\",\n    privilege=\"SELECT\",\n    role_name=\"example_role\",\n    schema_name=\"example_schema\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Grant SELECT to role example_role to connection example_database.example_schema.example_materialized_view\n    var materializedViewGrantSelect = new Materialize.GrantMaterializedView(\"materializedViewGrantSelect\", new()\n    {\n        DatabaseName = \"example_database\",\n        MaterializedViewName = \"example_materialized_view\",\n        Privilege = \"SELECT\",\n        RoleName = \"example_role\",\n        SchemaName = \"example_schema\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.NewGrantMaterializedView(ctx, \"materializedViewGrantSelect\", \u0026materialize.GrantMaterializedViewArgs{\n\t\t\tDatabaseName:         pulumi.String(\"example_database\"),\n\t\t\tMaterializedViewName: pulumi.String(\"example_materialized_view\"),\n\t\t\tPrivilege:            pulumi.String(\"SELECT\"),\n\t\t\tRoleName:             pulumi.String(\"example_role\"),\n\t\t\tSchemaName:           pulumi.String(\"example_schema\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.GrantMaterializedView;\nimport com.pulumi.materialize.GrantMaterializedViewArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var materializedViewGrantSelect = new GrantMaterializedView(\"materializedViewGrantSelect\", GrantMaterializedViewArgs.builder()        \n            .databaseName(\"example_database\")\n            .materializedViewName(\"example_materialized_view\")\n            .privilege(\"SELECT\")\n            .roleName(\"example_role\")\n            .schemaName(\"example_schema\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Grant SELECT to role example_role to connection example_database.example_schema.example_materialized_view\n  materializedViewGrantSelect:\n    type: materialize:GrantMaterializedView\n    properties:\n      databaseName: example_database\n      materializedViewName: example_materialized_view\n      privilege: SELECT\n      roleName: example_role\n      schemaName: example_schema\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n#Grants can be imported using the concatenation of GRANT, the object type, the id of the object, the id of the role and the privilege\n\n\n\n```sh\n $ pulumi import materialize:index/grantMaterializedView:GrantMaterializedView example \u003cregion\u003e:GRANT|MATERIALIZED VIEW|\u003cmaterialized_view_id\u003e|\u003crole_id\u003e|\u003cprivilege\u003e\n```\n\n The region is the region where the database is located (e.g. aws/us-east-1) ",
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The database that the materialized view belongs to.\n"
                },
                "materializedViewName": {
                    "type": "string",
                    "description": "The materialized view that is being granted on.\n"
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant to the object.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n"
                },
                "roleName": {
                    "type": "string",
                    "description": "The name of the role to grant privilege to.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The schema that the materialized view being to.\n"
                }
            },
            "required": [
                "databaseName",
                "materializedViewName",
                "privilege",
                "region",
                "roleName",
                "schemaName"
            ],
            "inputProperties": {
                "databaseName": {
                    "type": "string",
                    "description": "The database that the materialized view belongs to.\n",
                    "willReplaceOnChanges": true
                },
                "materializedViewName": {
                    "type": "string",
                    "description": "The materialized view that is being granted on.\n",
                    "willReplaceOnChanges": true
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant to the object.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                    "willReplaceOnChanges": true
                },
                "roleName": {
                    "type": "string",
                    "description": "The name of the role to grant privilege to.\n",
                    "willReplaceOnChanges": true
                },
                "schemaName": {
                    "type": "string",
                    "description": "The schema that the materialized view being to.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "databaseName",
                "materializedViewName",
                "privilege",
                "roleName",
                "schemaName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GrantMaterializedView resources.\n",
                "properties": {
                    "databaseName": {
                        "type": "string",
                        "description": "The database that the materialized view belongs to.\n",
                        "willReplaceOnChanges": true
                    },
                    "materializedViewName": {
                        "type": "string",
                        "description": "The materialized view that is being granted on.\n",
                        "willReplaceOnChanges": true
                    },
                    "privilege": {
                        "type": "string",
                        "description": "The privilege to grant to the object.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                        "willReplaceOnChanges": true
                    },
                    "roleName": {
                        "type": "string",
                        "description": "The name of the role to grant privilege to.\n",
                        "willReplaceOnChanges": true
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "The schema that the materialized view being to.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/grantRole:GrantRole": {
            "description": "Manages the system privileges for roles.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\n// Grant role to user\nconst roleGrantUser = new materialize.GrantRole(\"roleGrantUser\", {\n    memberName: \"user\",\n    roleName: \"role\",\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\n# Grant role to user\nrole_grant_user = materialize.GrantRole(\"roleGrantUser\",\n    member_name=\"user\",\n    role_name=\"role\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Grant role to user\n    var roleGrantUser = new Materialize.GrantRole(\"roleGrantUser\", new()\n    {\n        MemberName = \"user\",\n        RoleName = \"role\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.NewGrantRole(ctx, \"roleGrantUser\", \u0026materialize.GrantRoleArgs{\n\t\t\tMemberName: pulumi.String(\"user\"),\n\t\t\tRoleName:   pulumi.String(\"role\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.GrantRole;\nimport com.pulumi.materialize.GrantRoleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var roleGrantUser = new GrantRole(\"roleGrantUser\", GrantRoleArgs.builder()        \n            .memberName(\"user\")\n            .roleName(\"role\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Grant role to user\n  roleGrantUser:\n    type: materialize:GrantRole\n    properties:\n      memberName: user\n      roleName: role\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n#Grants can be imported using the concatenation of ROLE MEMBER, the id of the role and id of the member\n\n\n\n```sh\n $ pulumi import materialize:index/grantRole:GrantRole example \u003cregion\u003e:ROLE MEMBER|\u003crole_id\u003e|\u003cmember_id\u003e\n```\n\n The region is the region where the database is located (e.g. aws/us-east-1) ",
            "properties": {
                "memberName": {
                    "type": "string",
                    "description": "The role name to add to role_name as a member.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n"
                },
                "roleName": {
                    "type": "string",
                    "description": "The role name to add member_name as a member.\n"
                }
            },
            "required": [
                "memberName",
                "region",
                "roleName"
            ],
            "inputProperties": {
                "memberName": {
                    "type": "string",
                    "description": "The role name to add to role_name as a member.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                    "willReplaceOnChanges": true
                },
                "roleName": {
                    "type": "string",
                    "description": "The role name to add member_name as a member.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "memberName",
                "roleName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GrantRole resources.\n",
                "properties": {
                    "memberName": {
                        "type": "string",
                        "description": "The role name to add to role_name as a member.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                        "willReplaceOnChanges": true
                    },
                    "roleName": {
                        "type": "string",
                        "description": "The role name to add member_name as a member.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/grantSchema:GrantSchema": {
            "description": "Manages the privileges on a Materailize schema for roles.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\n// Grant USAGE to role example_role to schema example_database.example_schema\nconst schemaGrantUsage = new materialize.GrantSchema(\"schemaGrantUsage\", {\n    databaseName: \"example_database\",\n    privilege: \"USAGE\",\n    roleName: \"example_role\",\n    schemaName: \"example_schema\",\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\n# Grant USAGE to role example_role to schema example_database.example_schema\nschema_grant_usage = materialize.GrantSchema(\"schemaGrantUsage\",\n    database_name=\"example_database\",\n    privilege=\"USAGE\",\n    role_name=\"example_role\",\n    schema_name=\"example_schema\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Grant USAGE to role example_role to schema example_database.example_schema\n    var schemaGrantUsage = new Materialize.GrantSchema(\"schemaGrantUsage\", new()\n    {\n        DatabaseName = \"example_database\",\n        Privilege = \"USAGE\",\n        RoleName = \"example_role\",\n        SchemaName = \"example_schema\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.NewGrantSchema(ctx, \"schemaGrantUsage\", \u0026materialize.GrantSchemaArgs{\n\t\t\tDatabaseName: pulumi.String(\"example_database\"),\n\t\t\tPrivilege:    pulumi.String(\"USAGE\"),\n\t\t\tRoleName:     pulumi.String(\"example_role\"),\n\t\t\tSchemaName:   pulumi.String(\"example_schema\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.GrantSchema;\nimport com.pulumi.materialize.GrantSchemaArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var schemaGrantUsage = new GrantSchema(\"schemaGrantUsage\", GrantSchemaArgs.builder()        \n            .databaseName(\"example_database\")\n            .privilege(\"USAGE\")\n            .roleName(\"example_role\")\n            .schemaName(\"example_schema\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Grant USAGE to role example_role to schema example_database.example_schema\n  schemaGrantUsage:\n    type: materialize:GrantSchema\n    properties:\n      databaseName: example_database\n      privilege: USAGE\n      roleName: example_role\n      schemaName: example_schema\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n#Grants can be imported using the concatenation of GRANT, the object type, the id of the object, the id of the role and the privilege\n\n\n\n```sh\n $ pulumi import materialize:index/grantSchema:GrantSchema example \u003cregion\u003e:GRANT|SCHEMA|\u003cschema_id\u003e|\u003crole_id\u003e|\u003cprivilege\u003e\n```\n\n The region is the region where the database is located (e.g. aws/us-east-1) ",
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The database that the schema belongs to.\n"
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant to the object.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n"
                },
                "roleName": {
                    "type": "string",
                    "description": "The name of the role to grant privilege to.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The schema that is being granted on.\n"
                }
            },
            "required": [
                "databaseName",
                "privilege",
                "region",
                "roleName",
                "schemaName"
            ],
            "inputProperties": {
                "databaseName": {
                    "type": "string",
                    "description": "The database that the schema belongs to.\n",
                    "willReplaceOnChanges": true
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant to the object.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                    "willReplaceOnChanges": true
                },
                "roleName": {
                    "type": "string",
                    "description": "The name of the role to grant privilege to.\n",
                    "willReplaceOnChanges": true
                },
                "schemaName": {
                    "type": "string",
                    "description": "The schema that is being granted on.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "databaseName",
                "privilege",
                "roleName",
                "schemaName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GrantSchema resources.\n",
                "properties": {
                    "databaseName": {
                        "type": "string",
                        "description": "The database that the schema belongs to.\n",
                        "willReplaceOnChanges": true
                    },
                    "privilege": {
                        "type": "string",
                        "description": "The privilege to grant to the object.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                        "willReplaceOnChanges": true
                    },
                    "roleName": {
                        "type": "string",
                        "description": "The name of the role to grant privilege to.\n",
                        "willReplaceOnChanges": true
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "The schema that is being granted on.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/grantSchemaDefaultPrivilege:GrantSchemaDefaultPrivilege": {
            "description": "Defines default privileges that will be applied to objects created in the future. It does not affect any existing objects.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\n// Grant role the privilege USAGE for objects in the schema database.schema\nconst example = new materialize.GrantSchemaDefaultPrivilege(\"example\", {\n    databaseName: \"database\",\n    granteeName: \"grantee\",\n    privilege: \"USAGE\",\n    targetRoleName: \"target_role\",\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\n# Grant role the privilege USAGE for objects in the schema database.schema\nexample = materialize.GrantSchemaDefaultPrivilege(\"example\",\n    database_name=\"database\",\n    grantee_name=\"grantee\",\n    privilege=\"USAGE\",\n    target_role_name=\"target_role\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Grant role the privilege USAGE for objects in the schema database.schema\n    var example = new Materialize.GrantSchemaDefaultPrivilege(\"example\", new()\n    {\n        DatabaseName = \"database\",\n        GranteeName = \"grantee\",\n        Privilege = \"USAGE\",\n        TargetRoleName = \"target_role\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.NewGrantSchemaDefaultPrivilege(ctx, \"example\", \u0026materialize.GrantSchemaDefaultPrivilegeArgs{\n\t\t\tDatabaseName:   pulumi.String(\"database\"),\n\t\t\tGranteeName:    pulumi.String(\"grantee\"),\n\t\t\tPrivilege:      pulumi.String(\"USAGE\"),\n\t\t\tTargetRoleName: pulumi.String(\"target_role\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.GrantSchemaDefaultPrivilege;\nimport com.pulumi.materialize.GrantSchemaDefaultPrivilegeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new GrantSchemaDefaultPrivilege(\"example\", GrantSchemaDefaultPrivilegeArgs.builder()        \n            .databaseName(\"database\")\n            .granteeName(\"grantee\")\n            .privilege(\"USAGE\")\n            .targetRoleName(\"target_role\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Grant role the privilege USAGE for objects in the schema database.schema\n  example:\n    type: materialize:GrantSchemaDefaultPrivilege\n    properties:\n      databaseName: database\n      granteeName: grantee\n      privilege: USAGE\n      targetRoleName: target_role\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n#Grants can be imported using the concatenation of GRANT DEFAULT, the grantee id of the role #Optionally you can include the target id, database id and schema id. The privilege is required\n\n\n\n```sh\n $ pulumi import materialize:index/grantSchemaDefaultPrivilege:GrantSchemaDefaultPrivilege example \u003cregion\u003e:GRANT DEFAULT|SCHEMA|\u003cgrantee_id\u003e|\u003ctarget_role_id\u003e|\u003cdatabase_id\u003e|\u003cschema_id\u003e|\u003cprivilege\u003e\n```\n\n The region is the region where the database is located (e.g. aws/us-east-1) ",
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The default privilege will apply only to objects created in this database, if specified.\n"
                },
                "granteeName": {
                    "type": "string",
                    "description": "The role name that will gain the default privilege. Use the `PUBLIC` pseudo-role to grant privileges to all roles.\n"
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant to the object.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n"
                },
                "targetRoleName": {
                    "type": "string",
                    "description": "The default privilege will apply to objects created by this role. If this is left blank, then the current role is assumed. Use the `PUBLIC` pseudo-role to target objects created by all roles.\n"
                }
            },
            "required": [
                "granteeName",
                "privilege",
                "region",
                "targetRoleName"
            ],
            "inputProperties": {
                "databaseName": {
                    "type": "string",
                    "description": "The default privilege will apply only to objects created in this database, if specified.\n",
                    "willReplaceOnChanges": true
                },
                "granteeName": {
                    "type": "string",
                    "description": "The role name that will gain the default privilege. Use the `PUBLIC` pseudo-role to grant privileges to all roles.\n",
                    "willReplaceOnChanges": true
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant to the object.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                    "willReplaceOnChanges": true
                },
                "targetRoleName": {
                    "type": "string",
                    "description": "The default privilege will apply to objects created by this role. If this is left blank, then the current role is assumed. Use the `PUBLIC` pseudo-role to target objects created by all roles.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "granteeName",
                "privilege",
                "targetRoleName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GrantSchemaDefaultPrivilege resources.\n",
                "properties": {
                    "databaseName": {
                        "type": "string",
                        "description": "The default privilege will apply only to objects created in this database, if specified.\n",
                        "willReplaceOnChanges": true
                    },
                    "granteeName": {
                        "type": "string",
                        "description": "The role name that will gain the default privilege. Use the `PUBLIC` pseudo-role to grant privileges to all roles.\n",
                        "willReplaceOnChanges": true
                    },
                    "privilege": {
                        "type": "string",
                        "description": "The privilege to grant to the object.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                        "willReplaceOnChanges": true
                    },
                    "targetRoleName": {
                        "type": "string",
                        "description": "The default privilege will apply to objects created by this role. If this is left blank, then the current role is assumed. Use the `PUBLIC` pseudo-role to target objects created by all roles.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/grantSecret:GrantSecret": {
            "description": "Manages the privileges on a Materailize secret for roles.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\n// Grant USAGE to role example_role to secret example_database.example_schema.example_secret\nconst secretGrantUsage = new materialize.GrantSecret(\"secretGrantUsage\", {\n    databaseName: \"example_database\",\n    privilege: \"USAGE\",\n    roleName: \"example_role\",\n    schemaName: \"example_schema\",\n    secretName: \"example_secret\",\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\n# Grant USAGE to role example_role to secret example_database.example_schema.example_secret\nsecret_grant_usage = materialize.GrantSecret(\"secretGrantUsage\",\n    database_name=\"example_database\",\n    privilege=\"USAGE\",\n    role_name=\"example_role\",\n    schema_name=\"example_schema\",\n    secret_name=\"example_secret\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Grant USAGE to role example_role to secret example_database.example_schema.example_secret\n    var secretGrantUsage = new Materialize.GrantSecret(\"secretGrantUsage\", new()\n    {\n        DatabaseName = \"example_database\",\n        Privilege = \"USAGE\",\n        RoleName = \"example_role\",\n        SchemaName = \"example_schema\",\n        SecretName = \"example_secret\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.NewGrantSecret(ctx, \"secretGrantUsage\", \u0026materialize.GrantSecretArgs{\n\t\t\tDatabaseName: pulumi.String(\"example_database\"),\n\t\t\tPrivilege:    pulumi.String(\"USAGE\"),\n\t\t\tRoleName:     pulumi.String(\"example_role\"),\n\t\t\tSchemaName:   pulumi.String(\"example_schema\"),\n\t\t\tSecretName:   pulumi.String(\"example_secret\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.GrantSecret;\nimport com.pulumi.materialize.GrantSecretArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var secretGrantUsage = new GrantSecret(\"secretGrantUsage\", GrantSecretArgs.builder()        \n            .databaseName(\"example_database\")\n            .privilege(\"USAGE\")\n            .roleName(\"example_role\")\n            .schemaName(\"example_schema\")\n            .secretName(\"example_secret\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Grant USAGE to role example_role to secret example_database.example_schema.example_secret\n  secretGrantUsage:\n    type: materialize:GrantSecret\n    properties:\n      databaseName: example_database\n      privilege: USAGE\n      roleName: example_role\n      schemaName: example_schema\n      secretName: example_secret\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n#Grants can be imported using the concatenation of GRANT, the object type, the id of the object, the id of the role and the privilege\n\n\n\n```sh\n $ pulumi import materialize:index/grantSecret:GrantSecret example \u003cregion\u003e:GRANT|SECRET|\u003csecret_id\u003e|\u003crole_id\u003e|\u003cprivilege\u003e\n```\n\n The region is the region where the database is located (e.g. aws/us-east-1) ",
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The database that the secret belongs to.\n"
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant to the object.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n"
                },
                "roleName": {
                    "type": "string",
                    "description": "The name of the role to grant privilege to.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The schema that the secret being to.\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "The secret that is being granted on.\n"
                }
            },
            "required": [
                "databaseName",
                "privilege",
                "region",
                "roleName",
                "schemaName",
                "secretName"
            ],
            "inputProperties": {
                "databaseName": {
                    "type": "string",
                    "description": "The database that the secret belongs to.\n",
                    "willReplaceOnChanges": true
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant to the object.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                    "willReplaceOnChanges": true
                },
                "roleName": {
                    "type": "string",
                    "description": "The name of the role to grant privilege to.\n",
                    "willReplaceOnChanges": true
                },
                "schemaName": {
                    "type": "string",
                    "description": "The schema that the secret being to.\n",
                    "willReplaceOnChanges": true
                },
                "secretName": {
                    "type": "string",
                    "description": "The secret that is being granted on.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "databaseName",
                "privilege",
                "roleName",
                "schemaName",
                "secretName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GrantSecret resources.\n",
                "properties": {
                    "databaseName": {
                        "type": "string",
                        "description": "The database that the secret belongs to.\n",
                        "willReplaceOnChanges": true
                    },
                    "privilege": {
                        "type": "string",
                        "description": "The privilege to grant to the object.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                        "willReplaceOnChanges": true
                    },
                    "roleName": {
                        "type": "string",
                        "description": "The name of the role to grant privilege to.\n",
                        "willReplaceOnChanges": true
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "The schema that the secret being to.\n",
                        "willReplaceOnChanges": true
                    },
                    "secretName": {
                        "type": "string",
                        "description": "The secret that is being granted on.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/grantSecretDefaultPrivilege:GrantSecretDefaultPrivilege": {
            "description": "Defines default privileges that will be applied to objects created in the future. It does not affect any existing objects.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\n// Grant role the privilege USAGE for objects in the schema database.schema\nconst example = new materialize.GrantSecretDefaultPrivilege(\"example\", {\n    databaseName: \"database\",\n    granteeName: \"grantee\",\n    privilege: \"USAGE\",\n    schemaName: \"schema\",\n    targetRoleName: \"target_role\",\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\n# Grant role the privilege USAGE for objects in the schema database.schema\nexample = materialize.GrantSecretDefaultPrivilege(\"example\",\n    database_name=\"database\",\n    grantee_name=\"grantee\",\n    privilege=\"USAGE\",\n    schema_name=\"schema\",\n    target_role_name=\"target_role\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Grant role the privilege USAGE for objects in the schema database.schema\n    var example = new Materialize.GrantSecretDefaultPrivilege(\"example\", new()\n    {\n        DatabaseName = \"database\",\n        GranteeName = \"grantee\",\n        Privilege = \"USAGE\",\n        SchemaName = \"schema\",\n        TargetRoleName = \"target_role\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.NewGrantSecretDefaultPrivilege(ctx, \"example\", \u0026materialize.GrantSecretDefaultPrivilegeArgs{\n\t\t\tDatabaseName:   pulumi.String(\"database\"),\n\t\t\tGranteeName:    pulumi.String(\"grantee\"),\n\t\t\tPrivilege:      pulumi.String(\"USAGE\"),\n\t\t\tSchemaName:     pulumi.String(\"schema\"),\n\t\t\tTargetRoleName: pulumi.String(\"target_role\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.GrantSecretDefaultPrivilege;\nimport com.pulumi.materialize.GrantSecretDefaultPrivilegeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new GrantSecretDefaultPrivilege(\"example\", GrantSecretDefaultPrivilegeArgs.builder()        \n            .databaseName(\"database\")\n            .granteeName(\"grantee\")\n            .privilege(\"USAGE\")\n            .schemaName(\"schema\")\n            .targetRoleName(\"target_role\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Grant role the privilege USAGE for objects in the schema database.schema\n  example:\n    type: materialize:GrantSecretDefaultPrivilege\n    properties:\n      databaseName: database\n      granteeName: grantee\n      privilege: USAGE\n      schemaName: schema\n      targetRoleName: target_role\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n#Grants can be imported using the concatenation of GRANT DEFAULT, the grantee id of the role #Optionally you can include the target id, database id and schema id. The privilege is required\n\n\n\n```sh\n $ pulumi import materialize:index/grantSecretDefaultPrivilege:GrantSecretDefaultPrivilege example \u003cregion\u003e:GRANT DEFAULT|SECRET|\u003cgrantee_id\u003e|\u003ctarget_role_id\u003e|\u003cdatabase_id\u003e|\u003cschema_id\u003e|\u003cprivilege\u003e\n```\n\n The region is the region where the database is located (e.g. aws/us-east-1) ",
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The default privilege will apply only to objects created in this database, if specified.\n"
                },
                "granteeName": {
                    "type": "string",
                    "description": "The role name that will gain the default privilege. Use the `PUBLIC` pseudo-role to grant privileges to all roles.\n"
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant to the object.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The default privilege will apply only to objects created in this schema, if specified.\n"
                },
                "targetRoleName": {
                    "type": "string",
                    "description": "The default privilege will apply to objects created by this role. If this is left blank, then the current role is assumed. Use the `PUBLIC` pseudo-role to target objects created by all roles.\n"
                }
            },
            "required": [
                "granteeName",
                "privilege",
                "region",
                "targetRoleName"
            ],
            "inputProperties": {
                "databaseName": {
                    "type": "string",
                    "description": "The default privilege will apply only to objects created in this database, if specified.\n",
                    "willReplaceOnChanges": true
                },
                "granteeName": {
                    "type": "string",
                    "description": "The role name that will gain the default privilege. Use the `PUBLIC` pseudo-role to grant privileges to all roles.\n",
                    "willReplaceOnChanges": true
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant to the object.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                    "willReplaceOnChanges": true
                },
                "schemaName": {
                    "type": "string",
                    "description": "The default privilege will apply only to objects created in this schema, if specified.\n",
                    "willReplaceOnChanges": true
                },
                "targetRoleName": {
                    "type": "string",
                    "description": "The default privilege will apply to objects created by this role. If this is left blank, then the current role is assumed. Use the `PUBLIC` pseudo-role to target objects created by all roles.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "granteeName",
                "privilege",
                "targetRoleName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GrantSecretDefaultPrivilege resources.\n",
                "properties": {
                    "databaseName": {
                        "type": "string",
                        "description": "The default privilege will apply only to objects created in this database, if specified.\n",
                        "willReplaceOnChanges": true
                    },
                    "granteeName": {
                        "type": "string",
                        "description": "The role name that will gain the default privilege. Use the `PUBLIC` pseudo-role to grant privileges to all roles.\n",
                        "willReplaceOnChanges": true
                    },
                    "privilege": {
                        "type": "string",
                        "description": "The privilege to grant to the object.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                        "willReplaceOnChanges": true
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "The default privilege will apply only to objects created in this schema, if specified.\n",
                        "willReplaceOnChanges": true
                    },
                    "targetRoleName": {
                        "type": "string",
                        "description": "The default privilege will apply to objects created by this role. If this is left blank, then the current role is assumed. Use the `PUBLIC` pseudo-role to target objects created by all roles.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/grantSource:GrantSource": {
            "description": "Manages the privileges on a Materailize source for roles.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\n// Grant SELECT to role example_role to source example_database.example_schema.example_source\nconst sourceGrantSelect = new materialize.GrantSource(\"sourceGrantSelect\", {\n    databaseName: \"example_database\",\n    privilege: \"SELECT\",\n    roleName: \"example_role\",\n    schemaName: \"example_schema\",\n    sourceName: \"example_source\",\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\n# Grant SELECT to role example_role to source example_database.example_schema.example_source\nsource_grant_select = materialize.GrantSource(\"sourceGrantSelect\",\n    database_name=\"example_database\",\n    privilege=\"SELECT\",\n    role_name=\"example_role\",\n    schema_name=\"example_schema\",\n    source_name=\"example_source\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Grant SELECT to role example_role to source example_database.example_schema.example_source\n    var sourceGrantSelect = new Materialize.GrantSource(\"sourceGrantSelect\", new()\n    {\n        DatabaseName = \"example_database\",\n        Privilege = \"SELECT\",\n        RoleName = \"example_role\",\n        SchemaName = \"example_schema\",\n        SourceName = \"example_source\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.NewGrantSource(ctx, \"sourceGrantSelect\", \u0026materialize.GrantSourceArgs{\n\t\t\tDatabaseName: pulumi.String(\"example_database\"),\n\t\t\tPrivilege:    pulumi.String(\"SELECT\"),\n\t\t\tRoleName:     pulumi.String(\"example_role\"),\n\t\t\tSchemaName:   pulumi.String(\"example_schema\"),\n\t\t\tSourceName:   pulumi.String(\"example_source\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.GrantSource;\nimport com.pulumi.materialize.GrantSourceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var sourceGrantSelect = new GrantSource(\"sourceGrantSelect\", GrantSourceArgs.builder()        \n            .databaseName(\"example_database\")\n            .privilege(\"SELECT\")\n            .roleName(\"example_role\")\n            .schemaName(\"example_schema\")\n            .sourceName(\"example_source\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Grant SELECT to role example_role to source example_database.example_schema.example_source\n  sourceGrantSelect:\n    type: materialize:GrantSource\n    properties:\n      databaseName: example_database\n      privilege: SELECT\n      roleName: example_role\n      schemaName: example_schema\n      sourceName: example_source\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n#Grants can be imported using the concatenation of GRANT, the object type, the id of the object, the id of the role and the privilege\n\n\n\n```sh\n $ pulumi import materialize:index/grantSource:GrantSource example \u003cregion\u003e:GRANT|SOURCE|\u003csource_id\u003e|\u003crole_id\u003e|\u003cprivilege\u003e\n```\n\n The region is the region where the database is located (e.g. aws/us-east-1) ",
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The database that the view belongs to.\n"
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant to the object.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n"
                },
                "roleName": {
                    "type": "string",
                    "description": "The name of the role to grant privilege to.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The schema that the view being to.\n"
                },
                "sourceName": {
                    "type": "string",
                    "description": "The source that is being granted on.\n"
                }
            },
            "required": [
                "databaseName",
                "privilege",
                "region",
                "roleName",
                "schemaName",
                "sourceName"
            ],
            "inputProperties": {
                "databaseName": {
                    "type": "string",
                    "description": "The database that the view belongs to.\n",
                    "willReplaceOnChanges": true
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant to the object.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                    "willReplaceOnChanges": true
                },
                "roleName": {
                    "type": "string",
                    "description": "The name of the role to grant privilege to.\n",
                    "willReplaceOnChanges": true
                },
                "schemaName": {
                    "type": "string",
                    "description": "The schema that the view being to.\n",
                    "willReplaceOnChanges": true
                },
                "sourceName": {
                    "type": "string",
                    "description": "The source that is being granted on.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "databaseName",
                "privilege",
                "roleName",
                "schemaName",
                "sourceName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GrantSource resources.\n",
                "properties": {
                    "databaseName": {
                        "type": "string",
                        "description": "The database that the view belongs to.\n",
                        "willReplaceOnChanges": true
                    },
                    "privilege": {
                        "type": "string",
                        "description": "The privilege to grant to the object.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                        "willReplaceOnChanges": true
                    },
                    "roleName": {
                        "type": "string",
                        "description": "The name of the role to grant privilege to.\n",
                        "willReplaceOnChanges": true
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "The schema that the view being to.\n",
                        "willReplaceOnChanges": true
                    },
                    "sourceName": {
                        "type": "string",
                        "description": "The source that is being granted on.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/grantSystemPrivilege:GrantSystemPrivilege": {
            "description": "Manages the system privileges for roles.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\n// Grant role the privilege CREATEDB\nconst roleCreatedb = new materialize.GrantSystemPrivilege(\"roleCreatedb\", {\n    privilege: \"CREATEDB\",\n    roleName: \"role\",\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\n# Grant role the privilege CREATEDB\nrole_createdb = materialize.GrantSystemPrivilege(\"roleCreatedb\",\n    privilege=\"CREATEDB\",\n    role_name=\"role\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Grant role the privilege CREATEDB\n    var roleCreatedb = new Materialize.GrantSystemPrivilege(\"roleCreatedb\", new()\n    {\n        Privilege = \"CREATEDB\",\n        RoleName = \"role\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.NewGrantSystemPrivilege(ctx, \"roleCreatedb\", \u0026materialize.GrantSystemPrivilegeArgs{\n\t\t\tPrivilege: pulumi.String(\"CREATEDB\"),\n\t\t\tRoleName:  pulumi.String(\"role\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.GrantSystemPrivilege;\nimport com.pulumi.materialize.GrantSystemPrivilegeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var roleCreatedb = new GrantSystemPrivilege(\"roleCreatedb\", GrantSystemPrivilegeArgs.builder()        \n            .privilege(\"CREATEDB\")\n            .roleName(\"role\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Grant role the privilege CREATEDB\n  roleCreatedb:\n    type: materialize:GrantSystemPrivilege\n    properties:\n      privilege: CREATEDB\n      roleName: role\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n#Grants can be imported using the concatenation of GRANT SYSTEM, the id of the role and the privilege\n\n\n\n```sh\n $ pulumi import materialize:index/grantSystemPrivilege:GrantSystemPrivilege example \u003cregion\u003e:GRANT SYSTEM|\u003crole_id\u003e|\u003cprivilege\u003e\n```\n\n The region is the region where the database is located (e.g. aws/us-east-1) ",
            "properties": {
                "privilege": {
                    "type": "string",
                    "description": "The system privilege to grant.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n"
                },
                "roleName": {
                    "type": "string",
                    "description": "The name of the role to grant privilege to.\n"
                }
            },
            "required": [
                "privilege",
                "region",
                "roleName"
            ],
            "inputProperties": {
                "privilege": {
                    "type": "string",
                    "description": "The system privilege to grant.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                    "willReplaceOnChanges": true
                },
                "roleName": {
                    "type": "string",
                    "description": "The name of the role to grant privilege to.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "privilege",
                "roleName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GrantSystemPrivilege resources.\n",
                "properties": {
                    "privilege": {
                        "type": "string",
                        "description": "The system privilege to grant.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                        "willReplaceOnChanges": true
                    },
                    "roleName": {
                        "type": "string",
                        "description": "The name of the role to grant privilege to.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/grantTable:GrantTable": {
            "description": "Manages the privileges on a Materailize table for roles.\n\n*Note*: This resource applies to sources, views and materialized views (https://materialize.com/docs/sql/grant-privilege/#compatibility)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\n// Grant USAGE to role example_role to table example_database.example_schema.example_table\nconst tableGrantUsage = new materialize.GrantTable(\"tableGrantUsage\", {\n    databaseName: \"example_database\",\n    privilege: \"USAGE\",\n    roleName: \"example_role\",\n    schemaName: \"example_schema\",\n    tableName: \"example_table\",\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\n# Grant USAGE to role example_role to table example_database.example_schema.example_table\ntable_grant_usage = materialize.GrantTable(\"tableGrantUsage\",\n    database_name=\"example_database\",\n    privilege=\"USAGE\",\n    role_name=\"example_role\",\n    schema_name=\"example_schema\",\n    table_name=\"example_table\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Grant USAGE to role example_role to table example_database.example_schema.example_table\n    var tableGrantUsage = new Materialize.GrantTable(\"tableGrantUsage\", new()\n    {\n        DatabaseName = \"example_database\",\n        Privilege = \"USAGE\",\n        RoleName = \"example_role\",\n        SchemaName = \"example_schema\",\n        TableName = \"example_table\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.NewGrantTable(ctx, \"tableGrantUsage\", \u0026materialize.GrantTableArgs{\n\t\t\tDatabaseName: pulumi.String(\"example_database\"),\n\t\t\tPrivilege:    pulumi.String(\"USAGE\"),\n\t\t\tRoleName:     pulumi.String(\"example_role\"),\n\t\t\tSchemaName:   pulumi.String(\"example_schema\"),\n\t\t\tTableName:    pulumi.String(\"example_table\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.GrantTable;\nimport com.pulumi.materialize.GrantTableArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var tableGrantUsage = new GrantTable(\"tableGrantUsage\", GrantTableArgs.builder()        \n            .databaseName(\"example_database\")\n            .privilege(\"USAGE\")\n            .roleName(\"example_role\")\n            .schemaName(\"example_schema\")\n            .tableName(\"example_table\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Grant USAGE to role example_role to table example_database.example_schema.example_table\n  tableGrantUsage:\n    type: materialize:GrantTable\n    properties:\n      databaseName: example_database\n      privilege: USAGE\n      roleName: example_role\n      schemaName: example_schema\n      tableName: example_table\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n#Grants can be imported using the concatenation of GRANT, the object type, the id of the object, the id of the role and the privilege\n\n\n\n```sh\n $ pulumi import materialize:index/grantTable:GrantTable example \u003cregion\u003e:GRANT|TABLE|\u003ctable_id\u003e|\u003crole_id\u003e|\u003cprivilege\u003e\n```\n\n The region is the region where the database is located (e.g. aws/us-east-1) ",
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The database that the table belongs to.\n"
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant to the object.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n"
                },
                "roleName": {
                    "type": "string",
                    "description": "The name of the role to grant privilege to.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The schema that the table being to.\n"
                },
                "tableName": {
                    "type": "string",
                    "description": "The table that is being granted on.\n"
                }
            },
            "required": [
                "databaseName",
                "privilege",
                "region",
                "roleName",
                "schemaName",
                "tableName"
            ],
            "inputProperties": {
                "databaseName": {
                    "type": "string",
                    "description": "The database that the table belongs to.\n",
                    "willReplaceOnChanges": true
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant to the object.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                    "willReplaceOnChanges": true
                },
                "roleName": {
                    "type": "string",
                    "description": "The name of the role to grant privilege to.\n",
                    "willReplaceOnChanges": true
                },
                "schemaName": {
                    "type": "string",
                    "description": "The schema that the table being to.\n",
                    "willReplaceOnChanges": true
                },
                "tableName": {
                    "type": "string",
                    "description": "The table that is being granted on.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "databaseName",
                "privilege",
                "roleName",
                "schemaName",
                "tableName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GrantTable resources.\n",
                "properties": {
                    "databaseName": {
                        "type": "string",
                        "description": "The database that the table belongs to.\n",
                        "willReplaceOnChanges": true
                    },
                    "privilege": {
                        "type": "string",
                        "description": "The privilege to grant to the object.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                        "willReplaceOnChanges": true
                    },
                    "roleName": {
                        "type": "string",
                        "description": "The name of the role to grant privilege to.\n",
                        "willReplaceOnChanges": true
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "The schema that the table being to.\n",
                        "willReplaceOnChanges": true
                    },
                    "tableName": {
                        "type": "string",
                        "description": "The table that is being granted on.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/grantTableDefaultPrivilege:GrantTableDefaultPrivilege": {
            "description": "Defines default privileges that will be applied to objects created in the future. It does not affect any existing objects.\n\n*Note*: This resource applies to sources, views and materialized views (https://materialize.com/docs/sql/alter-default-privileges/#compatibility)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\n// Grant role the privilege USAGE for objects in the schema database.schema\nconst example = new materialize.GrantTableDefaultPrivilege(\"example\", {\n    databaseName: \"database\",\n    granteeName: \"grantee\",\n    privilege: \"USAGE\",\n    schemaName: \"schema\",\n    targetRoleName: \"target_role\",\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\n# Grant role the privilege USAGE for objects in the schema database.schema\nexample = materialize.GrantTableDefaultPrivilege(\"example\",\n    database_name=\"database\",\n    grantee_name=\"grantee\",\n    privilege=\"USAGE\",\n    schema_name=\"schema\",\n    target_role_name=\"target_role\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Grant role the privilege USAGE for objects in the schema database.schema\n    var example = new Materialize.GrantTableDefaultPrivilege(\"example\", new()\n    {\n        DatabaseName = \"database\",\n        GranteeName = \"grantee\",\n        Privilege = \"USAGE\",\n        SchemaName = \"schema\",\n        TargetRoleName = \"target_role\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.NewGrantTableDefaultPrivilege(ctx, \"example\", \u0026materialize.GrantTableDefaultPrivilegeArgs{\n\t\t\tDatabaseName:   pulumi.String(\"database\"),\n\t\t\tGranteeName:    pulumi.String(\"grantee\"),\n\t\t\tPrivilege:      pulumi.String(\"USAGE\"),\n\t\t\tSchemaName:     pulumi.String(\"schema\"),\n\t\t\tTargetRoleName: pulumi.String(\"target_role\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.GrantTableDefaultPrivilege;\nimport com.pulumi.materialize.GrantTableDefaultPrivilegeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new GrantTableDefaultPrivilege(\"example\", GrantTableDefaultPrivilegeArgs.builder()        \n            .databaseName(\"database\")\n            .granteeName(\"grantee\")\n            .privilege(\"USAGE\")\n            .schemaName(\"schema\")\n            .targetRoleName(\"target_role\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Grant role the privilege USAGE for objects in the schema database.schema\n  example:\n    type: materialize:GrantTableDefaultPrivilege\n    properties:\n      databaseName: database\n      granteeName: grantee\n      privilege: USAGE\n      schemaName: schema\n      targetRoleName: target_role\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n#Grants can be imported using the concatenation of GRANT DEFAULT, the grantee id of the role #Optionally you can include the target id, database id and schema id. The privilege is required\n\n\n\n```sh\n $ pulumi import materialize:index/grantTableDefaultPrivilege:GrantTableDefaultPrivilege example \u003cregion\u003e:GRANT DEFAULT|TABLE|\u003cgrantee_id\u003e|\u003ctarget_role_id\u003e|\u003cdatabase_id\u003e|\u003cschema_id\u003e|\u003cprivilege\u003e\n```\n\n The region is the region where the database is located (e.g. aws/us-east-1) ",
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The default privilege will apply only to objects created in this database, if specified.\n"
                },
                "granteeName": {
                    "type": "string",
                    "description": "The role name that will gain the default privilege. Use the `PUBLIC` pseudo-role to grant privileges to all roles.\n"
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant to the object.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The default privilege will apply only to objects created in this schema, if specified.\n"
                },
                "targetRoleName": {
                    "type": "string",
                    "description": "The default privilege will apply to objects created by this role. If this is left blank, then the current role is assumed. Use the `PUBLIC` pseudo-role to target objects created by all roles.\n"
                }
            },
            "required": [
                "granteeName",
                "privilege",
                "region",
                "targetRoleName"
            ],
            "inputProperties": {
                "databaseName": {
                    "type": "string",
                    "description": "The default privilege will apply only to objects created in this database, if specified.\n",
                    "willReplaceOnChanges": true
                },
                "granteeName": {
                    "type": "string",
                    "description": "The role name that will gain the default privilege. Use the `PUBLIC` pseudo-role to grant privileges to all roles.\n",
                    "willReplaceOnChanges": true
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant to the object.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                    "willReplaceOnChanges": true
                },
                "schemaName": {
                    "type": "string",
                    "description": "The default privilege will apply only to objects created in this schema, if specified.\n",
                    "willReplaceOnChanges": true
                },
                "targetRoleName": {
                    "type": "string",
                    "description": "The default privilege will apply to objects created by this role. If this is left blank, then the current role is assumed. Use the `PUBLIC` pseudo-role to target objects created by all roles.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "granteeName",
                "privilege",
                "targetRoleName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GrantTableDefaultPrivilege resources.\n",
                "properties": {
                    "databaseName": {
                        "type": "string",
                        "description": "The default privilege will apply only to objects created in this database, if specified.\n",
                        "willReplaceOnChanges": true
                    },
                    "granteeName": {
                        "type": "string",
                        "description": "The role name that will gain the default privilege. Use the `PUBLIC` pseudo-role to grant privileges to all roles.\n",
                        "willReplaceOnChanges": true
                    },
                    "privilege": {
                        "type": "string",
                        "description": "The privilege to grant to the object.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                        "willReplaceOnChanges": true
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "The default privilege will apply only to objects created in this schema, if specified.\n",
                        "willReplaceOnChanges": true
                    },
                    "targetRoleName": {
                        "type": "string",
                        "description": "The default privilege will apply to objects created by this role. If this is left blank, then the current role is assumed. Use the `PUBLIC` pseudo-role to target objects created by all roles.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/grantType:GrantType": {
            "description": "Manages the privileges on a Materailize type for roles.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\n// Grant USAGE to role example_role to type example_database.example_schema.example_type\nconst typeGrantUsage = new materialize.GrantType(\"typeGrantUsage\", {\n    databaseName: \"example_database\",\n    privilege: \"USAGE\",\n    roleName: \"example_role\",\n    schemaName: \"example_schema\",\n    typeName: \"example_type\",\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\n# Grant USAGE to role example_role to type example_database.example_schema.example_type\ntype_grant_usage = materialize.GrantType(\"typeGrantUsage\",\n    database_name=\"example_database\",\n    privilege=\"USAGE\",\n    role_name=\"example_role\",\n    schema_name=\"example_schema\",\n    type_name=\"example_type\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Grant USAGE to role example_role to type example_database.example_schema.example_type\n    var typeGrantUsage = new Materialize.GrantType(\"typeGrantUsage\", new()\n    {\n        DatabaseName = \"example_database\",\n        Privilege = \"USAGE\",\n        RoleName = \"example_role\",\n        SchemaName = \"example_schema\",\n        TypeName = \"example_type\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.NewGrantType(ctx, \"typeGrantUsage\", \u0026materialize.GrantTypeArgs{\n\t\t\tDatabaseName: pulumi.String(\"example_database\"),\n\t\t\tPrivilege:    pulumi.String(\"USAGE\"),\n\t\t\tRoleName:     pulumi.String(\"example_role\"),\n\t\t\tSchemaName:   pulumi.String(\"example_schema\"),\n\t\t\tTypeName:     pulumi.String(\"example_type\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.GrantType;\nimport com.pulumi.materialize.GrantTypeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var typeGrantUsage = new GrantType(\"typeGrantUsage\", GrantTypeArgs.builder()        \n            .databaseName(\"example_database\")\n            .privilege(\"USAGE\")\n            .roleName(\"example_role\")\n            .schemaName(\"example_schema\")\n            .typeName(\"example_type\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Grant USAGE to role example_role to type example_database.example_schema.example_type\n  typeGrantUsage:\n    type: materialize:GrantType\n    properties:\n      databaseName: example_database\n      privilege: USAGE\n      roleName: example_role\n      schemaName: example_schema\n      typeName: example_type\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n#Grants can be imported using the concatenation of GRANT, the object type, the id of the object, the id of the role and the privilege\n\n\n\n```sh\n $ pulumi import materialize:index/grantType:GrantType example \u003cregion\u003e:GRANT|TYPE|\u003ctype_id\u003e|\u003crole_id\u003e|\u003cprivilege\u003e\n```\n\n The region is the region where the database is located (e.g. aws/us-east-1) ",
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The database that the type belongs to.\n"
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant to the object.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n"
                },
                "roleName": {
                    "type": "string",
                    "description": "The name of the role to grant privilege to.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The schema that the type being to.\n"
                },
                "typeName": {
                    "type": "string",
                    "description": "The type that is being granted on.\n"
                }
            },
            "required": [
                "databaseName",
                "privilege",
                "region",
                "roleName",
                "schemaName",
                "typeName"
            ],
            "inputProperties": {
                "databaseName": {
                    "type": "string",
                    "description": "The database that the type belongs to.\n",
                    "willReplaceOnChanges": true
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant to the object.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                    "willReplaceOnChanges": true
                },
                "roleName": {
                    "type": "string",
                    "description": "The name of the role to grant privilege to.\n",
                    "willReplaceOnChanges": true
                },
                "schemaName": {
                    "type": "string",
                    "description": "The schema that the type being to.\n",
                    "willReplaceOnChanges": true
                },
                "typeName": {
                    "type": "string",
                    "description": "The type that is being granted on.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "databaseName",
                "privilege",
                "roleName",
                "schemaName",
                "typeName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GrantType resources.\n",
                "properties": {
                    "databaseName": {
                        "type": "string",
                        "description": "The database that the type belongs to.\n",
                        "willReplaceOnChanges": true
                    },
                    "privilege": {
                        "type": "string",
                        "description": "The privilege to grant to the object.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                        "willReplaceOnChanges": true
                    },
                    "roleName": {
                        "type": "string",
                        "description": "The name of the role to grant privilege to.\n",
                        "willReplaceOnChanges": true
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "The schema that the type being to.\n",
                        "willReplaceOnChanges": true
                    },
                    "typeName": {
                        "type": "string",
                        "description": "The type that is being granted on.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/grantTypeDefaultPrivilege:GrantTypeDefaultPrivilege": {
            "description": "Defines default privileges that will be applied to objects created in the future. It does not affect any existing objects.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\n// Grant role the privilege USAGE for objects in the schema database.schema\nconst example = new materialize.GrantTypeDefaultPrivilege(\"example\", {\n    databaseName: \"database\",\n    granteeName: \"grantee\",\n    privilege: \"USAGE\",\n    schemaName: \"schema\",\n    targetRoleName: \"target_role\",\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\n# Grant role the privilege USAGE for objects in the schema database.schema\nexample = materialize.GrantTypeDefaultPrivilege(\"example\",\n    database_name=\"database\",\n    grantee_name=\"grantee\",\n    privilege=\"USAGE\",\n    schema_name=\"schema\",\n    target_role_name=\"target_role\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Grant role the privilege USAGE for objects in the schema database.schema\n    var example = new Materialize.GrantTypeDefaultPrivilege(\"example\", new()\n    {\n        DatabaseName = \"database\",\n        GranteeName = \"grantee\",\n        Privilege = \"USAGE\",\n        SchemaName = \"schema\",\n        TargetRoleName = \"target_role\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.NewGrantTypeDefaultPrivilege(ctx, \"example\", \u0026materialize.GrantTypeDefaultPrivilegeArgs{\n\t\t\tDatabaseName:   pulumi.String(\"database\"),\n\t\t\tGranteeName:    pulumi.String(\"grantee\"),\n\t\t\tPrivilege:      pulumi.String(\"USAGE\"),\n\t\t\tSchemaName:     pulumi.String(\"schema\"),\n\t\t\tTargetRoleName: pulumi.String(\"target_role\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.GrantTypeDefaultPrivilege;\nimport com.pulumi.materialize.GrantTypeDefaultPrivilegeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new GrantTypeDefaultPrivilege(\"example\", GrantTypeDefaultPrivilegeArgs.builder()        \n            .databaseName(\"database\")\n            .granteeName(\"grantee\")\n            .privilege(\"USAGE\")\n            .schemaName(\"schema\")\n            .targetRoleName(\"target_role\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Grant role the privilege USAGE for objects in the schema database.schema\n  example:\n    type: materialize:GrantTypeDefaultPrivilege\n    properties:\n      databaseName: database\n      granteeName: grantee\n      privilege: USAGE\n      schemaName: schema\n      targetRoleName: target_role\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n#Grants can be imported using the concatenation of GRANT DEFAULT, the grantee id of the role #Optionally you can include the target id, database id and schema id. The privilege is required\n\n\n\n```sh\n $ pulumi import materialize:index/grantTypeDefaultPrivilege:GrantTypeDefaultPrivilege example \u003cregion\u003e:GRANT DEFAULT|TYPE|\u003cgrantee_id\u003e|\u003ctarget_role_id\u003e|\u003cdatabase_id\u003e|\u003cschema_id\u003e|\u003cprivilege\u003e\n```\n\n The region is the region where the database is located (e.g. aws/us-east-1) ",
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The default privilege will apply only to objects created in this database, if specified.\n"
                },
                "granteeName": {
                    "type": "string",
                    "description": "The role name that will gain the default privilege. Use the `PUBLIC` pseudo-role to grant privileges to all roles.\n"
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant to the object.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The default privilege will apply only to objects created in this schema, if specified.\n"
                },
                "targetRoleName": {
                    "type": "string",
                    "description": "The default privilege will apply to objects created by this role. If this is left blank, then the current role is assumed. Use the `PUBLIC` pseudo-role to target objects created by all roles.\n"
                }
            },
            "required": [
                "granteeName",
                "privilege",
                "region",
                "targetRoleName"
            ],
            "inputProperties": {
                "databaseName": {
                    "type": "string",
                    "description": "The default privilege will apply only to objects created in this database, if specified.\n",
                    "willReplaceOnChanges": true
                },
                "granteeName": {
                    "type": "string",
                    "description": "The role name that will gain the default privilege. Use the `PUBLIC` pseudo-role to grant privileges to all roles.\n",
                    "willReplaceOnChanges": true
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant to the object.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                    "willReplaceOnChanges": true
                },
                "schemaName": {
                    "type": "string",
                    "description": "The default privilege will apply only to objects created in this schema, if specified.\n",
                    "willReplaceOnChanges": true
                },
                "targetRoleName": {
                    "type": "string",
                    "description": "The default privilege will apply to objects created by this role. If this is left blank, then the current role is assumed. Use the `PUBLIC` pseudo-role to target objects created by all roles.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "granteeName",
                "privilege",
                "targetRoleName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GrantTypeDefaultPrivilege resources.\n",
                "properties": {
                    "databaseName": {
                        "type": "string",
                        "description": "The default privilege will apply only to objects created in this database, if specified.\n",
                        "willReplaceOnChanges": true
                    },
                    "granteeName": {
                        "type": "string",
                        "description": "The role name that will gain the default privilege. Use the `PUBLIC` pseudo-role to grant privileges to all roles.\n",
                        "willReplaceOnChanges": true
                    },
                    "privilege": {
                        "type": "string",
                        "description": "The privilege to grant to the object.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                        "willReplaceOnChanges": true
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "The default privilege will apply only to objects created in this schema, if specified.\n",
                        "willReplaceOnChanges": true
                    },
                    "targetRoleName": {
                        "type": "string",
                        "description": "The default privilege will apply to objects created by this role. If this is left blank, then the current role is assumed. Use the `PUBLIC` pseudo-role to target objects created by all roles.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/grantView:GrantView": {
            "description": "Manages the privileges on a Materailize view for roles.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\n// Grant SELECT to role example_role to view example_database.example_schema.example_view\nconst viewGrantSelect = new materialize.GrantView(\"viewGrantSelect\", {\n    databaseName: \"example_database\",\n    privilege: \"SELECT\",\n    roleName: \"example_role\",\n    schemaName: \"example_schema\",\n    viewName: \"example_view\",\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\n# Grant SELECT to role example_role to view example_database.example_schema.example_view\nview_grant_select = materialize.GrantView(\"viewGrantSelect\",\n    database_name=\"example_database\",\n    privilege=\"SELECT\",\n    role_name=\"example_role\",\n    schema_name=\"example_schema\",\n    view_name=\"example_view\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Grant SELECT to role example_role to view example_database.example_schema.example_view\n    var viewGrantSelect = new Materialize.GrantView(\"viewGrantSelect\", new()\n    {\n        DatabaseName = \"example_database\",\n        Privilege = \"SELECT\",\n        RoleName = \"example_role\",\n        SchemaName = \"example_schema\",\n        ViewName = \"example_view\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.NewGrantView(ctx, \"viewGrantSelect\", \u0026materialize.GrantViewArgs{\n\t\t\tDatabaseName: pulumi.String(\"example_database\"),\n\t\t\tPrivilege:    pulumi.String(\"SELECT\"),\n\t\t\tRoleName:     pulumi.String(\"example_role\"),\n\t\t\tSchemaName:   pulumi.String(\"example_schema\"),\n\t\t\tViewName:     pulumi.String(\"example_view\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.GrantView;\nimport com.pulumi.materialize.GrantViewArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var viewGrantSelect = new GrantView(\"viewGrantSelect\", GrantViewArgs.builder()        \n            .databaseName(\"example_database\")\n            .privilege(\"SELECT\")\n            .roleName(\"example_role\")\n            .schemaName(\"example_schema\")\n            .viewName(\"example_view\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Grant SELECT to role example_role to view example_database.example_schema.example_view\n  viewGrantSelect:\n    type: materialize:GrantView\n    properties:\n      databaseName: example_database\n      privilege: SELECT\n      roleName: example_role\n      schemaName: example_schema\n      viewName: example_view\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n#Grants can be imported using the concatenation of GRANT, the object type, the id of the object, the id of the role and the privilege\n\n\n\n```sh\n $ pulumi import materialize:index/grantView:GrantView example GRANT|VIEW|\u003cview_id\u003e|\u003crole_id\u003e|\u003cprivilege\u003e\n```\n\n ",
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The database that the view belongs to.\n"
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant to the object.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n"
                },
                "roleName": {
                    "type": "string",
                    "description": "The name of the role to grant privilege to.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The schema that the view being to.\n"
                },
                "viewName": {
                    "type": "string",
                    "description": "The view that is being granted on.\n"
                }
            },
            "required": [
                "databaseName",
                "privilege",
                "region",
                "roleName",
                "schemaName",
                "viewName"
            ],
            "inputProperties": {
                "databaseName": {
                    "type": "string",
                    "description": "The database that the view belongs to.\n",
                    "willReplaceOnChanges": true
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant to the object.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                    "willReplaceOnChanges": true
                },
                "roleName": {
                    "type": "string",
                    "description": "The name of the role to grant privilege to.\n",
                    "willReplaceOnChanges": true
                },
                "schemaName": {
                    "type": "string",
                    "description": "The schema that the view being to.\n",
                    "willReplaceOnChanges": true
                },
                "viewName": {
                    "type": "string",
                    "description": "The view that is being granted on.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "databaseName",
                "privilege",
                "roleName",
                "schemaName",
                "viewName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GrantView resources.\n",
                "properties": {
                    "databaseName": {
                        "type": "string",
                        "description": "The database that the view belongs to.\n",
                        "willReplaceOnChanges": true
                    },
                    "privilege": {
                        "type": "string",
                        "description": "The privilege to grant to the object.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                        "willReplaceOnChanges": true
                    },
                    "roleName": {
                        "type": "string",
                        "description": "The name of the role to grant privilege to.\n",
                        "willReplaceOnChanges": true
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "The schema that the view being to.\n",
                        "willReplaceOnChanges": true
                    },
                    "viewName": {
                        "type": "string",
                        "description": "The view that is being granted on.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/index:Index": {
            "description": "Indexes represent query results stored in memory.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\nconst loadgenIndex = new materialize.Index(\"loadgenIndex\", {\n    clusterName: \"cluster\",\n    method: \"ARRANGEMENT\",\n    objName: {\n        databaseName: \"database\",\n        name: \"source\",\n        schemaName: \"schema\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\nloadgen_index = materialize.Index(\"loadgenIndex\",\n    cluster_name=\"cluster\",\n    method=\"ARRANGEMENT\",\n    obj_name=materialize.IndexObjNameArgs(\n        database_name=\"database\",\n        name=\"source\",\n        schema_name=\"schema\",\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var loadgenIndex = new Materialize.Index(\"loadgenIndex\", new()\n    {\n        ClusterName = \"cluster\",\n        Method = \"ARRANGEMENT\",\n        ObjName = new Materialize.Inputs.IndexObjNameArgs\n        {\n            DatabaseName = \"database\",\n            Name = \"source\",\n            SchemaName = \"schema\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.NewIndex(ctx, \"loadgenIndex\", \u0026materialize.IndexArgs{\n\t\t\tClusterName: pulumi.String(\"cluster\"),\n\t\t\tMethod:      pulumi.String(\"ARRANGEMENT\"),\n\t\t\tObjName: \u0026materialize.IndexObjNameArgs{\n\t\t\t\tDatabaseName: pulumi.String(\"database\"),\n\t\t\t\tName:         pulumi.String(\"source\"),\n\t\t\t\tSchemaName:   pulumi.String(\"schema\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.Index;\nimport com.pulumi.materialize.IndexArgs;\nimport com.pulumi.materialize.inputs.IndexObjNameArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var loadgenIndex = new Index(\"loadgenIndex\", IndexArgs.builder()        \n            .clusterName(\"cluster\")\n            .method(\"ARRANGEMENT\")\n            .objName(IndexObjNameArgs.builder()\n                .databaseName(\"database\")\n                .name(\"source\")\n                .schemaName(\"schema\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  loadgenIndex:\n    type: materialize:Index\n    properties:\n      clusterName: cluster\n      method: ARRANGEMENT\n      objName:\n        databaseName: database\n        name: source\n        schemaName: schema\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nIndexes can be imported using the index id\n\n```sh\n $ pulumi import materialize:index/index:Index example_index \u003cregion\u003e:\u003cindex_id\u003e\n```\n\n Index id and information be found in the `mz_catalog.mz_indexes` table The region is the region where the database is located (e.g. aws/us-east-1) ",
            "properties": {
                "clusterName": {
                    "type": "string",
                    "description": "The cluster to maintain this index.\n"
                },
                "colExprs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/materialize:index/IndexColExpr:IndexColExpr"
                    },
                    "description": "The expressions to use as the key for the index.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "**Public Preview** Comment on an object in the database.\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the index database.\n"
                },
                "default": {
                    "type": "boolean",
                    "description": "Creates a default index using all inferred columns are used.\n"
                },
                "method": {
                    "type": "string",
                    "description": "The name of the index method to use.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the index.\n"
                },
                "objName": {
                    "$ref": "#/types/materialize:index/IndexObjName:IndexObjName",
                    "description": "The name of the source, view, or materialized view on which you want to create an index.\n"
                },
                "qualifiedSqlName": {
                    "type": "string",
                    "description": "The fully qualified name of the index.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the index schema.\n"
                }
            },
            "required": [
                "clusterName",
                "colExprs",
                "databaseName",
                "name",
                "objName",
                "qualifiedSqlName",
                "region",
                "schemaName"
            ],
            "inputProperties": {
                "clusterName": {
                    "type": "string",
                    "description": "The cluster to maintain this index.\n",
                    "willReplaceOnChanges": true
                },
                "colExprs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/materialize:index/IndexColExpr:IndexColExpr"
                    },
                    "description": "The expressions to use as the key for the index.\n",
                    "willReplaceOnChanges": true
                },
                "comment": {
                    "type": "string",
                    "description": "**Public Preview** Comment on an object in the database.\n"
                },
                "default": {
                    "type": "boolean",
                    "description": "Creates a default index using all inferred columns are used.\n",
                    "willReplaceOnChanges": true
                },
                "method": {
                    "type": "string",
                    "description": "The name of the index method to use.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the index.\n",
                    "willReplaceOnChanges": true
                },
                "objName": {
                    "$ref": "#/types/materialize:index/IndexObjName:IndexObjName",
                    "description": "The name of the source, view, or materialized view on which you want to create an index.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "clusterName",
                "colExprs",
                "objName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Index resources.\n",
                "properties": {
                    "clusterName": {
                        "type": "string",
                        "description": "The cluster to maintain this index.\n",
                        "willReplaceOnChanges": true
                    },
                    "colExprs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/materialize:index/IndexColExpr:IndexColExpr"
                        },
                        "description": "The expressions to use as the key for the index.\n",
                        "willReplaceOnChanges": true
                    },
                    "comment": {
                        "type": "string",
                        "description": "**Public Preview** Comment on an object in the database.\n"
                    },
                    "databaseName": {
                        "type": "string",
                        "description": "The identifier for the index database.\n"
                    },
                    "default": {
                        "type": "boolean",
                        "description": "Creates a default index using all inferred columns are used.\n",
                        "willReplaceOnChanges": true
                    },
                    "method": {
                        "type": "string",
                        "description": "The name of the index method to use.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The identifier for the index.\n",
                        "willReplaceOnChanges": true
                    },
                    "objName": {
                        "$ref": "#/types/materialize:index/IndexObjName:IndexObjName",
                        "description": "The name of the source, view, or materialized view on which you want to create an index.\n",
                        "willReplaceOnChanges": true
                    },
                    "qualifiedSqlName": {
                        "type": "string",
                        "description": "The fully qualified name of the index.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                        "willReplaceOnChanges": true
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "The identifier for the index schema.\n"
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/materializedView:MaterializedView": {
            "description": "Materialized views represent query results stored durably.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\nconst simpleMaterializedViewMaterializedView = new materialize.MaterializedView(\"simpleMaterializedViewMaterializedView\", {\n    schemaName: materialize_schema.schema.name,\n    databaseName: materialize_database.database.name,\n    statement: `SELECT\n    *\nFROM\n    ${materialize_table.simple_table.qualified_name}\n`,\n}, {\n    dependsOn: [materialize_table.simple_table],\n});\nconst simpleMaterializedViewIndex_materializedViewMaterializedView = new materialize.MaterializedView(\"simpleMaterializedViewIndex/materializedViewMaterializedView\", {\n    schemaName: materialize_schema.schema.name,\n    databaseName: materialize_database.database.name,\n    statement: \"SELECT * FROM materialize.public.simple_table\",\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\nsimple_materialized_view_materialized_view = materialize.MaterializedView(\"simpleMaterializedViewMaterializedView\",\n    schema_name=materialize_schema[\"schema\"][\"name\"],\n    database_name=materialize_database[\"database\"][\"name\"],\n    statement=f\"\"\"SELECT\n    *\nFROM\n    {materialize_table[\"simple_table\"][\"qualified_name\"]}\n\"\"\",\n    opts=pulumi.ResourceOptions(depends_on=[materialize_table[\"simple_table\"]]))\nsimple_materialized_view_index_materialized_view_materialized_view = materialize.MaterializedView(\"simpleMaterializedViewIndex/materializedViewMaterializedView\",\n    schema_name=materialize_schema[\"schema\"][\"name\"],\n    database_name=materialize_database[\"database\"][\"name\"],\n    statement=\"SELECT * FROM materialize.public.simple_table\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var simpleMaterializedViewMaterializedView = new Materialize.MaterializedView(\"simpleMaterializedViewMaterializedView\", new()\n    {\n        SchemaName = materialize_schema.Schema.Name,\n        DatabaseName = materialize_database.Database.Name,\n        Statement = @$\"SELECT\n    *\nFROM\n    {materialize_table.Simple_table.Qualified_name}\n\",\n    }, new CustomResourceOptions\n    {\n        DependsOn = new[]\n        {\n            materialize_table.Simple_table,\n        },\n    });\n\n    var simpleMaterializedViewIndex_materializedViewMaterializedView = new Materialize.MaterializedView(\"simpleMaterializedViewIndex/materializedViewMaterializedView\", new()\n    {\n        SchemaName = materialize_schema.Schema.Name,\n        DatabaseName = materialize_database.Database.Name,\n        Statement = \"SELECT * FROM materialize.public.simple_table\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.NewMaterializedView(ctx, \"simpleMaterializedViewMaterializedView\", \u0026materialize.MaterializedViewArgs{\n\t\t\tSchemaName:   pulumi.Any(materialize_schema.Schema.Name),\n\t\t\tDatabaseName: pulumi.Any(materialize_database.Database.Name),\n\t\t\tStatement:    pulumi.String(fmt.Sprintf(\"SELECT\\n    *\\nFROM\\n    %v\\n\", materialize_table.Simple_table.Qualified_name)),\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\tmaterialize_table.Simple_table,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = materialize.NewMaterializedView(ctx, \"simpleMaterializedViewIndex/materializedViewMaterializedView\", \u0026materialize.MaterializedViewArgs{\n\t\t\tSchemaName:   pulumi.Any(materialize_schema.Schema.Name),\n\t\t\tDatabaseName: pulumi.Any(materialize_database.Database.Name),\n\t\t\tStatement:    pulumi.String(\"SELECT * FROM materialize.public.simple_table\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.MaterializedView;\nimport com.pulumi.materialize.MaterializedViewArgs;\nimport com.pulumi.resources.CustomResourceOptions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var simpleMaterializedViewMaterializedView = new MaterializedView(\"simpleMaterializedViewMaterializedView\", MaterializedViewArgs.builder()        \n            .schemaName(materialize_schema.schema().name())\n            .databaseName(materialize_database.database().name())\n            .statement(\"\"\"\nSELECT\n    *\nFROM\n    %s\n\", materialize_table.simple_table().qualified_name()))\n            .build(), CustomResourceOptions.builder()\n                .dependsOn(materialize_table.simple_table())\n                .build());\n\n        var simpleMaterializedViewIndex_materializedViewMaterializedView = new MaterializedView(\"simpleMaterializedViewIndex/materializedViewMaterializedView\", MaterializedViewArgs.builder()        \n            .schemaName(materialize_schema.schema().name())\n            .databaseName(materialize_database.database().name())\n            .statement(\"SELECT * FROM materialize.public.simple_table\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  simpleMaterializedViewMaterializedView:\n    type: materialize:MaterializedView\n    properties:\n      schemaName: ${materialize_schema.schema.name}\n      databaseName: ${materialize_database.database.name}\n      statement: |\n        SELECT\n            *\n        FROM\n            ${materialize_table.simple_table.qualified_name}\n    options:\n      dependson:\n        - ${materialize_table.simple_table}\n  simpleMaterializedViewIndex/materializedViewMaterializedView:\n    type: materialize:MaterializedView\n    properties:\n      schemaName: ${materialize_schema.schema.name}\n      databaseName: ${materialize_database.database.name}\n      statement: SELECT * FROM materialize.public.simple_table\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nMaterialized views can be imported using the materialized view id\n\n```sh\n $ pulumi import materialize:index/materializedView:MaterializedView example_materialize_view \u003cregion\u003e:\u003cview_id\u003e\n```\n\n Materialized view id and information be found in the `mz_catalog.mz_materialized_views` table The region is the region where the database is located (e.g. aws/us-east-1) ",
            "properties": {
                "clusterName": {
                    "type": "string",
                    "description": "The cluster to maintain the materialized view.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "**Public Preview** Comment on an object in the database.\n"
                },
                "createSql": {
                    "type": "string",
                    "description": "The SQL statement used to create the materialized view.\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the materialized view database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the materialized view.\n"
                },
                "notNullAssertions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "**Private Preview** A list of columns for which to create non-null assertions.\n"
                },
                "ownershipRole": {
                    "type": "string",
                    "description": "The owernship role of the object.\n"
                },
                "qualifiedSqlName": {
                    "type": "string",
                    "description": "The fully qualified name of the materialized view.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the materialized view schema in Materialize. Defaults to `public`.\n"
                },
                "statement": {
                    "type": "string",
                    "description": "The SQL statement for the materialized view.\n"
                }
            },
            "required": [
                "clusterName",
                "createSql",
                "name",
                "ownershipRole",
                "qualifiedSqlName",
                "region",
                "statement"
            ],
            "inputProperties": {
                "clusterName": {
                    "type": "string",
                    "description": "The cluster to maintain the materialized view.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "**Public Preview** Comment on an object in the database.\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the materialized view database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the materialized view.\n"
                },
                "notNullAssertions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "**Private Preview** A list of columns for which to create non-null assertions.\n",
                    "willReplaceOnChanges": true
                },
                "ownershipRole": {
                    "type": "string",
                    "description": "The owernship role of the object.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                    "willReplaceOnChanges": true
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the materialized view schema in Materialize. Defaults to `public`.\n",
                    "willReplaceOnChanges": true
                },
                "statement": {
                    "type": "string",
                    "description": "The SQL statement for the materialized view.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "clusterName",
                "statement"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MaterializedView resources.\n",
                "properties": {
                    "clusterName": {
                        "type": "string",
                        "description": "The cluster to maintain the materialized view.\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "**Public Preview** Comment on an object in the database.\n"
                    },
                    "createSql": {
                        "type": "string",
                        "description": "The SQL statement used to create the materialized view.\n"
                    },
                    "databaseName": {
                        "type": "string",
                        "description": "The identifier for the materialized view database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The identifier for the materialized view.\n"
                    },
                    "notNullAssertions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "**Private Preview** A list of columns for which to create non-null assertions.\n",
                        "willReplaceOnChanges": true
                    },
                    "ownershipRole": {
                        "type": "string",
                        "description": "The owernship role of the object.\n"
                    },
                    "qualifiedSqlName": {
                        "type": "string",
                        "description": "The fully qualified name of the materialized view.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                        "willReplaceOnChanges": true
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "The identifier for the materialized view schema in Materialize. Defaults to `public`.\n",
                        "willReplaceOnChanges": true
                    },
                    "statement": {
                        "type": "string",
                        "description": "The SQL statement for the materialized view.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/role:Role": {
            "description": "A role is a collection of privileges you can apply to users.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\nconst exampleRole = new materialize.Role(\"exampleRole\", {});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\nexample_role = materialize.Role(\"exampleRole\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleRole = new Materialize.Role(\"exampleRole\");\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.NewRole(ctx, \"exampleRole\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.Role;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleRole = new Role(\"exampleRole\");\n\n    }\n}\n```\n```yaml\nresources:\n  exampleRole:\n    type: materialize:Role\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nRoles can be imported using the role id\n\n```sh\n $ pulumi import materialize:index/role:Role example_role \u003cregion\u003e:\u003crole_id\u003e\n```\n\n Role id and information be found in the `mz_catalog.mz_roles` table The region is the region where the database is located (e.g. aws/us-east-1) ",
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "**Public Preview** Comment on an object in the database.\n"
                },
                "inherit": {
                    "type": "boolean",
                    "description": "Grants the role the ability to inheritance of privileges of other roles. Unlike PostgreSQL, Materialize does not currently support `NOINHERIT`\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the role.\n"
                },
                "qualifiedSqlName": {
                    "type": "string",
                    "description": "The fully qualified name of the role.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n"
                }
            },
            "required": [
                "inherit",
                "name",
                "qualifiedSqlName",
                "region"
            ],
            "inputProperties": {
                "comment": {
                    "type": "string",
                    "description": "**Public Preview** Comment on an object in the database.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the role.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Role resources.\n",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "**Public Preview** Comment on an object in the database.\n"
                    },
                    "inherit": {
                        "type": "boolean",
                        "description": "Grants the role the ability to inheritance of privileges of other roles. Unlike PostgreSQL, Materialize does not currently support `NOINHERIT`\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The identifier for the role.\n",
                        "willReplaceOnChanges": true
                    },
                    "qualifiedSqlName": {
                        "type": "string",
                        "description": "The fully qualified name of the role.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/roleParameter:RoleParameter": {
            "description": "Manages a system parameter in Materialize.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\n// ALTER ROLE some_role SET transaction_isolation = 'strict serializable';\nconst exampleRole = new materialize.Role(\"exampleRole\", {});\nconst exampleRoleParameter = new materialize.RoleParameter(\"exampleRoleParameter\", {\n    roleName: exampleRole.name,\n    variableName: \"transaction_isolation\",\n    variableValue: \"strict serializable\",\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\n# ALTER ROLE some_role SET transaction_isolation = 'strict serializable';\nexample_role = materialize.Role(\"exampleRole\")\nexample_role_parameter = materialize.RoleParameter(\"exampleRoleParameter\",\n    role_name=example_role.name,\n    variable_name=\"transaction_isolation\",\n    variable_value=\"strict serializable\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // ALTER ROLE some_role SET transaction_isolation = 'strict serializable';\n    var exampleRole = new Materialize.Role(\"exampleRole\");\n\n    var exampleRoleParameter = new Materialize.RoleParameter(\"exampleRoleParameter\", new()\n    {\n        RoleName = exampleRole.Name,\n        VariableName = \"transaction_isolation\",\n        VariableValue = \"strict serializable\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleRole, err := materialize.NewRole(ctx, \"exampleRole\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = materialize.NewRoleParameter(ctx, \"exampleRoleParameter\", \u0026materialize.RoleParameterArgs{\n\t\t\tRoleName:      exampleRole.Name,\n\t\t\tVariableName:  pulumi.String(\"transaction_isolation\"),\n\t\t\tVariableValue: pulumi.String(\"strict serializable\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.Role;\nimport com.pulumi.materialize.RoleParameter;\nimport com.pulumi.materialize.RoleParameterArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleRole = new Role(\"exampleRole\");\n\n        var exampleRoleParameter = new RoleParameter(\"exampleRoleParameter\", RoleParameterArgs.builder()        \n            .roleName(exampleRole.name())\n            .variableName(\"transaction_isolation\")\n            .variableValue(\"strict serializable\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # ALTER ROLE some_role SET transaction_isolation = 'strict serializable';\n  exampleRole:\n    type: materialize:Role\n  exampleRoleParameter:\n    type: materialize:RoleParameter\n    properties:\n      roleName: ${exampleRole.name}\n      variableName: transaction_isolation\n      variableValue: strict serializable\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n"
                },
                "roleName": {
                    "type": "string",
                    "description": "The name of the role to grant privilege to.\n"
                },
                "variableName": {
                    "type": "string",
                    "description": "The name of the session variable to modify.\n"
                },
                "variableValue": {
                    "type": "string",
                    "description": "The value to assign to the session variable.\n"
                }
            },
            "required": [
                "region",
                "roleName",
                "variableName",
                "variableValue"
            ],
            "inputProperties": {
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                    "willReplaceOnChanges": true
                },
                "roleName": {
                    "type": "string",
                    "description": "The name of the role to grant privilege to.\n",
                    "willReplaceOnChanges": true
                },
                "variableName": {
                    "type": "string",
                    "description": "The name of the session variable to modify.\n"
                },
                "variableValue": {
                    "type": "string",
                    "description": "The value to assign to the session variable.\n"
                }
            },
            "requiredInputs": [
                "roleName",
                "variableName",
                "variableValue"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RoleParameter resources.\n",
                "properties": {
                    "region": {
                        "type": "string",
                        "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                        "willReplaceOnChanges": true
                    },
                    "roleName": {
                        "type": "string",
                        "description": "The name of the role to grant privilege to.\n",
                        "willReplaceOnChanges": true
                    },
                    "variableName": {
                        "type": "string",
                        "description": "The name of the session variable to modify.\n"
                    },
                    "variableValue": {
                        "type": "string",
                        "description": "The value to assign to the session variable.\n"
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/sCIM2Configuration:SCIM2Configuration": {
            "description": "The SCIM 2.0 configurations resource allows you to create, read, and delete the SCIM 2.0 configurations.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\n// Create a SCIM config\nconst exampleScimConfig = new materialize.SCIM2Configuration(\"exampleScimConfig\", {\n    connectionName: \"example_connection\",\n    source: \"okta\",\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\n# Create a SCIM config\nexample_scim_config = materialize.SCIM2Configuration(\"exampleScimConfig\",\n    connection_name=\"example_connection\",\n    source=\"okta\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a SCIM config\n    var exampleScimConfig = new Materialize.SCIM2Configuration(\"exampleScimConfig\", new()\n    {\n        ConnectionName = \"example_connection\",\n        Source = \"okta\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.NewSCIM2Configuration(ctx, \"exampleScimConfig\", \u0026materialize.SCIM2ConfigurationArgs{\n\t\t\tConnectionName: pulumi.String(\"example_connection\"),\n\t\t\tSource:         pulumi.String(\"okta\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.SCIM2Configuration;\nimport com.pulumi.materialize.SCIM2ConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleScimConfig = new SCIM2Configuration(\"exampleScimConfig\", SCIM2ConfigurationArgs.builder()        \n            .connectionName(\"example_connection\")\n            .source(\"okta\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a SCIM config\n  exampleScimConfig:\n    type: materialize:SCIM2Configuration\n    properties:\n      connectionName: example_connection\n      source: okta\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nSCIM Configuration ID can be found using the `materialize_scim_configs` data source\n\n```sh\n $ pulumi import materialize:index/sCIM2Configuration:SCIM2Configuration example_scim_config \u003cscim_config_id\u003e\n```\n\n ",
            "properties": {
                "connectionName": {
                    "type": "string",
                    "description": "The name of the SCIM 2.0 connection. It must be unique.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "The creation timestamp of the SCIM 2.0 configuration.\n"
                },
                "provisioningUrl": {
                    "type": "string",
                    "description": "The provisioning URL of the SCIM 2.0 configuration.\n",
                    "secret": true
                },
                "source": {
                    "type": "string",
                    "description": "The source of the SCIM 2.0 configuration. Supported values are `okta`, `azure-ad`, and `other`.\n"
                },
                "syncToUserManagement": {
                    "type": "boolean",
                    "description": "Indicates whether automatic synchronization of data with the IdP is enabled, ensuring that changes in details or status in the IdP are updated accordingly.\n"
                },
                "tenantId": {
                    "type": "string"
                },
                "token": {
                    "type": "string",
                    "description": "The token of the SCIM 2.0 configuration.\n",
                    "secret": true
                }
            },
            "required": [
                "connectionName",
                "createdAt",
                "provisioningUrl",
                "source",
                "syncToUserManagement",
                "tenantId",
                "token"
            ],
            "inputProperties": {
                "connectionName": {
                    "type": "string",
                    "description": "The name of the SCIM 2.0 connection. It must be unique.\n",
                    "willReplaceOnChanges": true
                },
                "source": {
                    "type": "string",
                    "description": "The source of the SCIM 2.0 configuration. Supported values are `okta`, `azure-ad`, and `other`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "connectionName",
                "source"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SCIM2Configuration resources.\n",
                "properties": {
                    "connectionName": {
                        "type": "string",
                        "description": "The name of the SCIM 2.0 connection. It must be unique.\n",
                        "willReplaceOnChanges": true
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The creation timestamp of the SCIM 2.0 configuration.\n"
                    },
                    "provisioningUrl": {
                        "type": "string",
                        "description": "The provisioning URL of the SCIM 2.0 configuration.\n",
                        "secret": true
                    },
                    "source": {
                        "type": "string",
                        "description": "The source of the SCIM 2.0 configuration. Supported values are `okta`, `azure-ad`, and `other`.\n",
                        "willReplaceOnChanges": true
                    },
                    "syncToUserManagement": {
                        "type": "boolean",
                        "description": "Indicates whether automatic synchronization of data with the IdP is enabled, ensuring that changes in details or status in the IdP are updated accordingly.\n"
                    },
                    "tenantId": {
                        "type": "string"
                    },
                    "token": {
                        "type": "string",
                        "description": "The token of the SCIM 2.0 configuration.\n",
                        "secret": true
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/sCIM2Group:SCIM2Group": {
            "description": "The SCIM group resource allows you to manage user groups in Frontegg.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\n// Create a SCIM group\nconst exampleScimGroup = new materialize.SCIM2Group(\"exampleScimGroup\", {description: \"Example SCIM group\"});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\n# Create a SCIM group\nexample_scim_group = materialize.SCIM2Group(\"exampleScimGroup\", description=\"Example SCIM group\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a SCIM group\n    var exampleScimGroup = new Materialize.SCIM2Group(\"exampleScimGroup\", new()\n    {\n        Description = \"Example SCIM group\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.NewSCIM2Group(ctx, \"exampleScimGroup\", \u0026materialize.SCIM2GroupArgs{\n\t\t\tDescription: pulumi.String(\"Example SCIM group\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.SCIM2Group;\nimport com.pulumi.materialize.SCIM2GroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleScimGroup = new SCIM2Group(\"exampleScimGroup\", SCIM2GroupArgs.builder()        \n            .description(\"Example SCIM group\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a SCIM group\n  exampleScimGroup:\n    type: materialize:SCIM2Group\n    properties:\n      description: Example SCIM group\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nSCIM Group ID can be found using the `materialize_scim_groups` data source\n\n```sh\n $ pulumi import materialize:index/sCIM2Group:SCIM2Group example_scim_group \u003cscim_group_id\u003e\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "A description of the SCIM group.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the SCIM group.\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "A description of the SCIM group.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the SCIM group.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SCIM2Group resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "A description of the SCIM group.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the SCIM group.\n"
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/sCIM2GroupRoles:SCIM2GroupRoles": {
            "description": "The materialize_scim_group_role resource allows managing roles within a SCIM group in Frontegg.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\n// Create a SCIM group role\nconst scimGroupExample = new materialize.SCIM2Group(\"scimGroupExample\", {description: \"scim_group_example\"});\nconst scimGroupRolesExample = new materialize.SCIM2GroupRoles(\"scimGroupRolesExample\", {\n    groupId: scimGroupExample.id,\n    roles: [\n        \"Admin\",\n        \"Member\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\n# Create a SCIM group role\nscim_group_example = materialize.SCIM2Group(\"scimGroupExample\", description=\"scim_group_example\")\nscim_group_roles_example = materialize.SCIM2GroupRoles(\"scimGroupRolesExample\",\n    group_id=scim_group_example.id,\n    roles=[\n        \"Admin\",\n        \"Member\",\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a SCIM group role\n    var scimGroupExample = new Materialize.SCIM2Group(\"scimGroupExample\", new()\n    {\n        Description = \"scim_group_example\",\n    });\n\n    var scimGroupRolesExample = new Materialize.SCIM2GroupRoles(\"scimGroupRolesExample\", new()\n    {\n        GroupId = scimGroupExample.Id,\n        Roles = new[]\n        {\n            \"Admin\",\n            \"Member\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tscimGroupExample, err := materialize.NewSCIM2Group(ctx, \"scimGroupExample\", \u0026materialize.SCIM2GroupArgs{\n\t\t\tDescription: pulumi.String(\"scim_group_example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = materialize.NewSCIM2GroupRoles(ctx, \"scimGroupRolesExample\", \u0026materialize.SCIM2GroupRolesArgs{\n\t\t\tGroupId: scimGroupExample.ID(),\n\t\t\tRoles: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"Admin\"),\n\t\t\t\tpulumi.String(\"Member\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.SCIM2Group;\nimport com.pulumi.materialize.SCIM2GroupArgs;\nimport com.pulumi.materialize.SCIM2GroupRoles;\nimport com.pulumi.materialize.SCIM2GroupRolesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var scimGroupExample = new SCIM2Group(\"scimGroupExample\", SCIM2GroupArgs.builder()        \n            .description(\"scim_group_example\")\n            .build());\n\n        var scimGroupRolesExample = new SCIM2GroupRoles(\"scimGroupRolesExample\", SCIM2GroupRolesArgs.builder()        \n            .groupId(scimGroupExample.id())\n            .roles(            \n                \"Admin\",\n                \"Member\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a SCIM group role\n  scimGroupExample:\n    type: materialize:SCIM2Group\n    properties:\n      description: scim_group_example\n  scimGroupRolesExample:\n    type: materialize:SCIM2GroupRoles\n    properties:\n      groupId: ${scimGroupExample.id}\n      roles:\n        - Admin\n        - Member\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nSCIM Group ID can be found using the `materialize_scim_groups` data source\n\n```sh\n $ pulumi import materialize:index/sCIM2GroupRoles:SCIM2GroupRoles example_scim_group_roles \u003cscim_group_id\u003e\n```\n\n ",
            "properties": {
                "groupId": {
                    "type": "string",
                    "description": "The ID of the SCIM group.\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The set of role names to assign to the SCIM group.\n"
                }
            },
            "required": [
                "groupId"
            ],
            "inputProperties": {
                "groupId": {
                    "type": "string",
                    "description": "The ID of the SCIM group.\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The set of role names to assign to the SCIM group.\n"
                }
            },
            "requiredInputs": [
                "groupId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SCIM2GroupRoles resources.\n",
                "properties": {
                    "groupId": {
                        "type": "string",
                        "description": "The ID of the SCIM group.\n"
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The set of role names to assign to the SCIM group.\n"
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/sCIM2GroupUsers:SCIM2GroupUsers": {
            "description": "The materialize.SCIM2GroupUsers resource allows managing users within a SCIM group in Frontegg.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\n// Create a SCIM group users resource\nconst exampleUsers1 = new materialize.User(\"exampleUsers1\", {\n    email: \"example-user1@example.com\",\n    roles: [\"Member\"],\n});\nconst exampleUsers2 = new materialize.User(\"exampleUsers2\", {\n    email: \"example-user2@example.com\",\n    roles: [\"Member\"],\n});\nconst exampleScimGroupUsers = new materialize.SCIM2GroupUsers(\"exampleScimGroupUsers\", {\n    groupId: materialize_scim_group.example_scim_group.id,\n    users: [\n        exampleUsers1.id,\n        exampleUsers2.id,\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\n# Create a SCIM group users resource\nexample_users1 = materialize.User(\"exampleUsers1\",\n    email=\"example-user1@example.com\",\n    roles=[\"Member\"])\nexample_users2 = materialize.User(\"exampleUsers2\",\n    email=\"example-user2@example.com\",\n    roles=[\"Member\"])\nexample_scim_group_users = materialize.SCIM2GroupUsers(\"exampleScimGroupUsers\",\n    group_id=materialize_scim_group[\"example_scim_group\"][\"id\"],\n    users=[\n        example_users1.id,\n        example_users2.id,\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a SCIM group users resource\n    var exampleUsers1 = new Materialize.User(\"exampleUsers1\", new()\n    {\n        Email = \"example-user1@example.com\",\n        Roles = new[]\n        {\n            \"Member\",\n        },\n    });\n\n    var exampleUsers2 = new Materialize.User(\"exampleUsers2\", new()\n    {\n        Email = \"example-user2@example.com\",\n        Roles = new[]\n        {\n            \"Member\",\n        },\n    });\n\n    var exampleScimGroupUsers = new Materialize.SCIM2GroupUsers(\"exampleScimGroupUsers\", new()\n    {\n        GroupId = materialize_scim_group.Example_scim_group.Id,\n        Users = new[]\n        {\n            exampleUsers1.Id,\n            exampleUsers2.Id,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleUsers1, err := materialize.NewUser(ctx, \"exampleUsers1\", \u0026materialize.UserArgs{\n\t\t\tEmail: pulumi.String(\"example-user1@example.com\"),\n\t\t\tRoles: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"Member\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleUsers2, err := materialize.NewUser(ctx, \"exampleUsers2\", \u0026materialize.UserArgs{\n\t\t\tEmail: pulumi.String(\"example-user2@example.com\"),\n\t\t\tRoles: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"Member\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = materialize.NewSCIM2GroupUsers(ctx, \"exampleScimGroupUsers\", \u0026materialize.SCIM2GroupUsersArgs{\n\t\t\tGroupId: pulumi.Any(materialize_scim_group.Example_scim_group.Id),\n\t\t\tUsers: pulumi.StringArray{\n\t\t\t\texampleUsers1.ID(),\n\t\t\t\texampleUsers2.ID(),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.User;\nimport com.pulumi.materialize.UserArgs;\nimport com.pulumi.materialize.SCIM2GroupUsers;\nimport com.pulumi.materialize.SCIM2GroupUsersArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleUsers1 = new User(\"exampleUsers1\", UserArgs.builder()        \n            .email(\"example-user1@example.com\")\n            .roles(\"Member\")\n            .build());\n\n        var exampleUsers2 = new User(\"exampleUsers2\", UserArgs.builder()        \n            .email(\"example-user2@example.com\")\n            .roles(\"Member\")\n            .build());\n\n        var exampleScimGroupUsers = new SCIM2GroupUsers(\"exampleScimGroupUsers\", SCIM2GroupUsersArgs.builder()        \n            .groupId(materialize_scim_group.example_scim_group().id())\n            .users(            \n                exampleUsers1.id(),\n                exampleUsers2.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a SCIM group users resource\n  exampleUsers1:\n    type: materialize:User\n    properties:\n      email: example-user1@example.com\n      roles:\n        - Member\n  exampleUsers2:\n    type: materialize:User\n    properties:\n      email: example-user2@example.com\n      roles:\n        - Member\n  exampleScimGroupUsers:\n    type: materialize:SCIM2GroupUsers\n    properties:\n      groupId: ${materialize_scim_group.example_scim_group.id}\n      users:\n        - ${exampleUsers1.id}\n        - ${exampleUsers2.id}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nSCIM group ID can be found using the `materialize_scim_groups` data source.\n\n```sh\n $ pulumi import materialize:index/sCIM2GroupUsers:SCIM2GroupUsers example_scim_group_user \u003cscim_group_id\u003e\n```\n\n ",
            "properties": {
                "groupId": {
                    "type": "string",
                    "description": "The ID of the SCIM group.\n"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The set of user IDs to assign to the SCIM group.\n"
                }
            },
            "required": [
                "groupId"
            ],
            "inputProperties": {
                "groupId": {
                    "type": "string",
                    "description": "The ID of the SCIM group.\n"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The set of user IDs to assign to the SCIM group.\n"
                }
            },
            "requiredInputs": [
                "groupId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SCIM2GroupUsers resources.\n",
                "properties": {
                    "groupId": {
                        "type": "string",
                        "description": "The ID of the SCIM group.\n"
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The set of user IDs to assign to the SCIM group.\n"
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/sSOConfig:SSOConfig": {
            "description": "The SSO configuration resource allows you to create, read, update, and delete SSO configurations.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\nconst exampleSsoConfig = new materialize.SSOConfig(\"exampleSsoConfig\", {\n    enabled: true,\n    oidcClientId: \"client-id\",\n    oidcSecret: \"client-secret\",\n    publicCertificate: \"PUBLIC_CERTIFICATE\",\n    signRequest: true,\n    ssoEndpoint: \"https://sso.example2.com\",\n    type: \"saml\",\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\nexample_sso_config = materialize.SSOConfig(\"exampleSsoConfig\",\n    enabled=True,\n    oidc_client_id=\"client-id\",\n    oidc_secret=\"client-secret\",\n    public_certificate=\"PUBLIC_CERTIFICATE\",\n    sign_request=True,\n    sso_endpoint=\"https://sso.example2.com\",\n    type=\"saml\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleSsoConfig = new Materialize.SSOConfig(\"exampleSsoConfig\", new()\n    {\n        Enabled = true,\n        OidcClientId = \"client-id\",\n        OidcSecret = \"client-secret\",\n        PublicCertificate = \"PUBLIC_CERTIFICATE\",\n        SignRequest = true,\n        SsoEndpoint = \"https://sso.example2.com\",\n        Type = \"saml\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.NewSSOConfig(ctx, \"exampleSsoConfig\", \u0026materialize.SSOConfigArgs{\n\t\t\tEnabled:           pulumi.Bool(true),\n\t\t\tOidcClientId:      pulumi.String(\"client-id\"),\n\t\t\tOidcSecret:        pulumi.String(\"client-secret\"),\n\t\t\tPublicCertificate: pulumi.String(\"PUBLIC_CERTIFICATE\"),\n\t\t\tSignRequest:       pulumi.Bool(true),\n\t\t\tSsoEndpoint:       pulumi.String(\"https://sso.example2.com\"),\n\t\t\tType:              pulumi.String(\"saml\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.SSOConfig;\nimport com.pulumi.materialize.SSOConfigArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleSsoConfig = new SSOConfig(\"exampleSsoConfig\", SSOConfigArgs.builder()        \n            .enabled(true)\n            .oidcClientId(\"client-id\")\n            .oidcSecret(\"client-secret\")\n            .publicCertificate(\"PUBLIC_CERTIFICATE\")\n            .signRequest(true)\n            .ssoEndpoint(\"https://sso.example2.com\")\n            .type(\"saml\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleSsoConfig:\n    type: materialize:SSOConfig\n    properties:\n      enabled: true\n      oidcClientId: client-id\n      oidcSecret: client-secret\n      publicCertificate: PUBLIC_CERTIFICATE\n      signRequest: true\n      ssoEndpoint: https://sso.example2.com\n      type: saml\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThe SSO Configuration ID can be found using the `materialize_sso_config` data source\n\n```sh\n $ pulumi import materialize:index/sSOConfig:SSOConfig example \u003csso_config_id\u003e\n```\n\n ",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Whether SSO is enabled or not. If enabled, users will be redirected to the SSO endpoint for authentication. The configuration needs to be valid for SSO to work.\n"
                },
                "oidcClientId": {
                    "type": "string",
                    "description": "The client ID of the OIDC application. This is used to identify the application to the OIDC service. This is required if the type is OIDC.\n"
                },
                "oidcSecret": {
                    "type": "string",
                    "description": "The client secret of the OIDC application. This is used to authenticate the application to the OIDC service. This is required if the type is OIDC.\n"
                },
                "publicCertificate": {
                    "type": "string",
                    "description": "The public certificate of the SSO service. This is used to verify the SSO response. The certificate must be in PEM format. The certificate must be accessible from the browser. If the certificate is not accessible from the browser, you can use the public certificate of the Identity Provider (IdP) instead.\n"
                },
                "signRequest": {
                    "type": "boolean",
                    "description": "Indicates whether the SSO request needs to be digitally signed.\n"
                },
                "ssoEndpoint": {
                    "type": "string",
                    "description": "The URL endpoint for the SSO service. This is the URL that users will be redirected to for authentication. The URL must be accessible from the browser.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Defines the type of SSO protocol being used (e.g., saml, oidc).\n"
                }
            },
            "required": [
                "enabled",
                "publicCertificate",
                "signRequest",
                "ssoEndpoint",
                "type"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Whether SSO is enabled or not. If enabled, users will be redirected to the SSO endpoint for authentication. The configuration needs to be valid for SSO to work.\n"
                },
                "oidcClientId": {
                    "type": "string",
                    "description": "The client ID of the OIDC application. This is used to identify the application to the OIDC service. This is required if the type is OIDC.\n"
                },
                "oidcSecret": {
                    "type": "string",
                    "description": "The client secret of the OIDC application. This is used to authenticate the application to the OIDC service. This is required if the type is OIDC.\n"
                },
                "publicCertificate": {
                    "type": "string",
                    "description": "The public certificate of the SSO service. This is used to verify the SSO response. The certificate must be in PEM format. The certificate must be accessible from the browser. If the certificate is not accessible from the browser, you can use the public certificate of the Identity Provider (IdP) instead.\n"
                },
                "signRequest": {
                    "type": "boolean",
                    "description": "Indicates whether the SSO request needs to be digitally signed.\n"
                },
                "ssoEndpoint": {
                    "type": "string",
                    "description": "The URL endpoint for the SSO service. This is the URL that users will be redirected to for authentication. The URL must be accessible from the browser.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Defines the type of SSO protocol being used (e.g., saml, oidc).\n"
                }
            },
            "requiredInputs": [
                "enabled",
                "publicCertificate",
                "signRequest",
                "ssoEndpoint",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SSOConfig resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether SSO is enabled or not. If enabled, users will be redirected to the SSO endpoint for authentication. The configuration needs to be valid for SSO to work.\n"
                    },
                    "oidcClientId": {
                        "type": "string",
                        "description": "The client ID of the OIDC application. This is used to identify the application to the OIDC service. This is required if the type is OIDC.\n"
                    },
                    "oidcSecret": {
                        "type": "string",
                        "description": "The client secret of the OIDC application. This is used to authenticate the application to the OIDC service. This is required if the type is OIDC.\n"
                    },
                    "publicCertificate": {
                        "type": "string",
                        "description": "The public certificate of the SSO service. This is used to verify the SSO response. The certificate must be in PEM format. The certificate must be accessible from the browser. If the certificate is not accessible from the browser, you can use the public certificate of the Identity Provider (IdP) instead.\n"
                    },
                    "signRequest": {
                        "type": "boolean",
                        "description": "Indicates whether the SSO request needs to be digitally signed.\n"
                    },
                    "ssoEndpoint": {
                        "type": "string",
                        "description": "The URL endpoint for the SSO service. This is the URL that users will be redirected to for authentication. The URL must be accessible from the browser.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Defines the type of SSO protocol being used (e.g., saml, oidc).\n"
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/sSODefaultRoles:SSODefaultRoles": {
            "description": "The SSO default roles resource allows you to set the default roles for an SSO configuration. These roles will be assigned to users who sign in with SSO.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\nconst exampleSsoDefaultRoles = new materialize.SSODefaultRoles(\"exampleSsoDefaultRoles\", {\n    ssoConfigId: materialize_sso_config.example_sso_config.id,\n    roles: [\"Admin\"],\n});\nconst exampleSsoDefaultRoles2 = new materialize.SSODefaultRoles(\"exampleSsoDefaultRoles2\", {\n    ssoConfigId: materialize_sso_config.example_sso_config.id,\n    roles: [\n        \"Admin\",\n        \"Member\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\nexample_sso_default_roles = materialize.SSODefaultRoles(\"exampleSsoDefaultRoles\",\n    sso_config_id=materialize_sso_config[\"example_sso_config\"][\"id\"],\n    roles=[\"Admin\"])\nexample_sso_default_roles2 = materialize.SSODefaultRoles(\"exampleSsoDefaultRoles2\",\n    sso_config_id=materialize_sso_config[\"example_sso_config\"][\"id\"],\n    roles=[\n        \"Admin\",\n        \"Member\",\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleSsoDefaultRoles = new Materialize.SSODefaultRoles(\"exampleSsoDefaultRoles\", new()\n    {\n        SsoConfigId = materialize_sso_config.Example_sso_config.Id,\n        Roles = new[]\n        {\n            \"Admin\",\n        },\n    });\n\n    var exampleSsoDefaultRoles2 = new Materialize.SSODefaultRoles(\"exampleSsoDefaultRoles2\", new()\n    {\n        SsoConfigId = materialize_sso_config.Example_sso_config.Id,\n        Roles = new[]\n        {\n            \"Admin\",\n            \"Member\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.NewSSODefaultRoles(ctx, \"exampleSsoDefaultRoles\", \u0026materialize.SSODefaultRolesArgs{\n\t\t\tSsoConfigId: pulumi.Any(materialize_sso_config.Example_sso_config.Id),\n\t\t\tRoles: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"Admin\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = materialize.NewSSODefaultRoles(ctx, \"exampleSsoDefaultRoles2\", \u0026materialize.SSODefaultRolesArgs{\n\t\t\tSsoConfigId: pulumi.Any(materialize_sso_config.Example_sso_config.Id),\n\t\t\tRoles: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"Admin\"),\n\t\t\t\tpulumi.String(\"Member\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.SSODefaultRoles;\nimport com.pulumi.materialize.SSODefaultRolesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleSsoDefaultRoles = new SSODefaultRoles(\"exampleSsoDefaultRoles\", SSODefaultRolesArgs.builder()        \n            .ssoConfigId(materialize_sso_config.example_sso_config().id())\n            .roles(\"Admin\")\n            .build());\n\n        var exampleSsoDefaultRoles2 = new SSODefaultRoles(\"exampleSsoDefaultRoles2\", SSODefaultRolesArgs.builder()        \n            .ssoConfigId(materialize_sso_config.example_sso_config().id())\n            .roles(            \n                \"Admin\",\n                \"Member\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleSsoDefaultRoles:\n    type: materialize:SSODefaultRoles\n    properties:\n      ssoConfigId: ${materialize_sso_config.example_sso_config.id}\n      roles:\n        - Admin\n  exampleSsoDefaultRoles2:\n    type: materialize:SSODefaultRoles\n    properties:\n      ssoConfigId: ${materialize_sso_config.example_sso_config.id}\n      roles:\n        - Admin\n        - Member\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nDefault roles can be imported using the role id, which can be found using the `materialize_sso_config` data source\n\n```sh\n $ pulumi import materialize:index/sSODefaultRoles:SSODefaultRoles example_role \u003cconfiguration_id\u003e\n```\n\n ",
            "properties": {
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of default role names for the SSO configuration. These roles will be assigned by default to users who sign up via SSO.\n"
                },
                "ssoConfigId": {
                    "type": "string",
                    "description": "The ID of the associated SSO configuration.\n"
                }
            },
            "required": [
                "roles",
                "ssoConfigId"
            ],
            "inputProperties": {
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of default role names for the SSO configuration. These roles will be assigned by default to users who sign up via SSO.\n"
                },
                "ssoConfigId": {
                    "type": "string",
                    "description": "The ID of the associated SSO configuration.\n"
                }
            },
            "requiredInputs": [
                "roles",
                "ssoConfigId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SSODefaultRoles resources.\n",
                "properties": {
                    "roles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Set of default role names for the SSO configuration. These roles will be assigned by default to users who sign up via SSO.\n"
                    },
                    "ssoConfigId": {
                        "type": "string",
                        "description": "The ID of the associated SSO configuration.\n"
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/sSODomain:SSODomain": {
            "description": "The SSO domain resource allows you to set the domain for an SSO configuration. This domain will be used to validate the SSO configuration.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\nconst exampleSsoDomain = new materialize.SSODomain(\"exampleSsoDomain\", {\n    domain: \"example.com\",\n    ssoConfigId: materialize_sso_config.example_sso_config.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\nexample_sso_domain = materialize.SSODomain(\"exampleSsoDomain\",\n    domain=\"example.com\",\n    sso_config_id=materialize_sso_config[\"example_sso_config\"][\"id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleSsoDomain = new Materialize.SSODomain(\"exampleSsoDomain\", new()\n    {\n        Domain = \"example.com\",\n        SsoConfigId = materialize_sso_config.Example_sso_config.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.NewSSODomain(ctx, \"exampleSsoDomain\", \u0026materialize.SSODomainArgs{\n\t\t\tDomain:      pulumi.String(\"example.com\"),\n\t\t\tSsoConfigId: pulumi.Any(materialize_sso_config.Example_sso_config.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.SSODomain;\nimport com.pulumi.materialize.SSODomainArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleSsoDomain = new SSODomain(\"exampleSsoDomain\", SSODomainArgs.builder()        \n            .domain(\"example.com\")\n            .ssoConfigId(materialize_sso_config.example_sso_config().id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleSsoDomain:\n    type: materialize:SSODomain\n    properties:\n      domain: example.com\n      ssoConfigId: ${materialize_sso_config.example_sso_config.id}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThe SSO Configuration ID can be found using the `materialize_sso_config` data source\n\n```sh\n $ pulumi import materialize:index/sSODomain:SSODomain example \u003csso_config_id\u003e:\u003cdomain.com\u003e\n```\n\n ",
            "properties": {
                "domain": {
                    "type": "string",
                    "description": "The domain name for the SSO domain configuration. This domain will be used to validate the SSO configuration and needs to be unique across all SSO configurations.\n"
                },
                "ssoConfigId": {
                    "type": "string",
                    "description": "The ID of the associated SSO configuration.\n"
                },
                "validated": {
                    "type": "boolean",
                    "description": "Indicates whether the domain has been validated.\n"
                }
            },
            "required": [
                "domain",
                "ssoConfigId",
                "validated"
            ],
            "inputProperties": {
                "domain": {
                    "type": "string",
                    "description": "The domain name for the SSO domain configuration. This domain will be used to validate the SSO configuration and needs to be unique across all SSO configurations.\n"
                },
                "ssoConfigId": {
                    "type": "string",
                    "description": "The ID of the associated SSO configuration.\n"
                }
            },
            "requiredInputs": [
                "domain",
                "ssoConfigId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SSODomain resources.\n",
                "properties": {
                    "domain": {
                        "type": "string",
                        "description": "The domain name for the SSO domain configuration. This domain will be used to validate the SSO configuration and needs to be unique across all SSO configurations.\n"
                    },
                    "ssoConfigId": {
                        "type": "string",
                        "description": "The ID of the associated SSO configuration.\n"
                    },
                    "validated": {
                        "type": "boolean",
                        "description": "Indicates whether the domain has been validated.\n"
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/sSORoleGroupMapping:SSORoleGroupMapping": {
            "description": "The SSO group role mapping resource allows you to set the roles for an SSO group. This allows you to automatically assign additional roles according to your identity provider groups\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\nconst exampleSsoGroupMapping = new materialize.SSORoleGroupMapping(\"exampleSsoGroupMapping\", {\n    group: \"admins\",\n    ssoConfigId: materialize_sso_config.example_sso_config.id,\n    roles: [\"Admin\"],\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\nexample_sso_group_mapping = materialize.SSORoleGroupMapping(\"exampleSsoGroupMapping\",\n    group=\"admins\",\n    sso_config_id=materialize_sso_config[\"example_sso_config\"][\"id\"],\n    roles=[\"Admin\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleSsoGroupMapping = new Materialize.SSORoleGroupMapping(\"exampleSsoGroupMapping\", new()\n    {\n        Group = \"admins\",\n        SsoConfigId = materialize_sso_config.Example_sso_config.Id,\n        Roles = new[]\n        {\n            \"Admin\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.NewSSORoleGroupMapping(ctx, \"exampleSsoGroupMapping\", \u0026materialize.SSORoleGroupMappingArgs{\n\t\t\tGroup:       pulumi.String(\"admins\"),\n\t\t\tSsoConfigId: pulumi.Any(materialize_sso_config.Example_sso_config.Id),\n\t\t\tRoles: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"Admin\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.SSORoleGroupMapping;\nimport com.pulumi.materialize.SSORoleGroupMappingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleSsoGroupMapping = new SSORoleGroupMapping(\"exampleSsoGroupMapping\", SSORoleGroupMappingArgs.builder()        \n            .group(\"admins\")\n            .ssoConfigId(materialize_sso_config.example_sso_config().id())\n            .roles(\"Admin\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleSsoGroupMapping:\n    type: materialize:SSORoleGroupMapping\n    properties:\n      group: admins\n      ssoConfigId: ${materialize_sso_config.example_sso_config.id}\n      roles:\n        - Admin\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThe SSO Configuration ID and the Group Mapping ID can be found using the `materialize_sso_config` data source\n\n```sh\n $ pulumi import materialize:index/sSORoleGroupMapping:SSORoleGroupMapping example \u003csso_config_id\u003e:\u003csso_group_mapping_id\u003e\n```\n\n ",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the group mapping is enabled.\n"
                },
                "group": {
                    "type": "string",
                    "description": "The name of the SSO group.\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of role names associated with the group.\n"
                },
                "ssoConfigId": {
                    "type": "string",
                    "description": "The ID of the associated SSO configuration.\n"
                }
            },
            "required": [
                "enabled",
                "group",
                "roles",
                "ssoConfigId"
            ],
            "inputProperties": {
                "group": {
                    "type": "string",
                    "description": "The name of the SSO group.\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of role names associated with the group.\n"
                },
                "ssoConfigId": {
                    "type": "string",
                    "description": "The ID of the associated SSO configuration.\n"
                }
            },
            "requiredInputs": [
                "group",
                "roles",
                "ssoConfigId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SSORoleGroupMapping resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether the group mapping is enabled.\n"
                    },
                    "group": {
                        "type": "string",
                        "description": "The name of the SSO group.\n"
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of role names associated with the group.\n"
                    },
                    "ssoConfigId": {
                        "type": "string",
                        "description": "The ID of the associated SSO configuration.\n"
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/schema:Schema": {
            "description": "The second highest level namespace hierarchy in Materialize.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\nconst exampleSchema = new materialize.Schema(\"exampleSchema\", {databaseName: \"database\"});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\nexample_schema = materialize.Schema(\"exampleSchema\", database_name=\"database\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleSchema = new Materialize.Schema(\"exampleSchema\", new()\n    {\n        DatabaseName = \"database\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.NewSchema(ctx, \"exampleSchema\", \u0026materialize.SchemaArgs{\n\t\t\tDatabaseName: pulumi.String(\"database\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.Schema;\nimport com.pulumi.materialize.SchemaArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleSchema = new Schema(\"exampleSchema\", SchemaArgs.builder()        \n            .databaseName(\"database\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleSchema:\n    type: materialize:Schema\n    properties:\n      databaseName: database\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nSchemas can be imported using the schema id\n\n```sh\n $ pulumi import materialize:index/schema:Schema example_schema \u003cregion\u003e:\u003cschema_id\u003e\n```\n\n Schema id and information be found in the `mz_catalog.mz_schemas` table The role is the role where the database is located (e.g. aws/us-east-1) ",
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "**Public Preview** Comment on an object in the database.\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the schema database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the schema.\n"
                },
                "ownershipRole": {
                    "type": "string",
                    "description": "The owernship role of the object.\n"
                },
                "qualifiedSqlName": {
                    "type": "string",
                    "description": "The fully qualified name of the schema.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n"
                }
            },
            "required": [
                "name",
                "ownershipRole",
                "qualifiedSqlName",
                "region"
            ],
            "inputProperties": {
                "comment": {
                    "type": "string",
                    "description": "**Public Preview** Comment on an object in the database.\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the schema database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the schema.\n"
                },
                "ownershipRole": {
                    "type": "string",
                    "description": "The owernship role of the object.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Schema resources.\n",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "**Public Preview** Comment on an object in the database.\n"
                    },
                    "databaseName": {
                        "type": "string",
                        "description": "The identifier for the schema database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The identifier for the schema.\n"
                    },
                    "ownershipRole": {
                        "type": "string",
                        "description": "The owernship role of the object.\n"
                    },
                    "qualifiedSqlName": {
                        "type": "string",
                        "description": "The fully qualified name of the schema.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/secret:Secret": {
            "description": "A secret securely stores sensitive credentials (like passwords and SSL keys) in Materialize’s secret management system.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\nconst exampleSecret = new materialize.Secret(\"exampleSecret\", {value: \"some-secret-value\"});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\nexample_secret = materialize.Secret(\"exampleSecret\", value=\"some-secret-value\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleSecret = new Materialize.Secret(\"exampleSecret\", new()\n    {\n        Value = \"some-secret-value\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.NewSecret(ctx, \"exampleSecret\", \u0026materialize.SecretArgs{\n\t\t\tValue: pulumi.String(\"some-secret-value\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.Secret;\nimport com.pulumi.materialize.SecretArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleSecret = new Secret(\"exampleSecret\", SecretArgs.builder()        \n            .value(\"some-secret-value\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleSecret:\n    type: materialize:Secret\n    properties:\n      value: some-secret-value\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nSecrets can be imported using the secret id\n\n```sh\n $ pulumi import materialize:index/secret:Secret example_secret \u003cregion\u003e:\u003csecret_id\u003e\n```\n\n Secret id and information be found in the `mz_catalog.mz_secrets` table The region is the region where the database is located (e.g. aws/us-east-1) ",
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "**Public Preview** Comment on an object in the database.\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the secret database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the secret.\n"
                },
                "ownershipRole": {
                    "type": "string",
                    "description": "The owernship role of the object.\n"
                },
                "qualifiedSqlName": {
                    "type": "string",
                    "description": "The fully qualified name of the secret.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the secret schema in Materialize. Defaults to `public`.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value for the secret. The value expression may not reference any relations, and must be a bytea string literal.\n",
                    "secret": true
                }
            },
            "required": [
                "name",
                "ownershipRole",
                "qualifiedSqlName",
                "region",
                "value"
            ],
            "inputProperties": {
                "comment": {
                    "type": "string",
                    "description": "**Public Preview** Comment on an object in the database.\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the secret database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the secret.\n"
                },
                "ownershipRole": {
                    "type": "string",
                    "description": "The owernship role of the object.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                    "willReplaceOnChanges": true
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the secret schema in Materialize. Defaults to `public`.\n",
                    "willReplaceOnChanges": true
                },
                "value": {
                    "type": "string",
                    "description": "The value for the secret. The value expression may not reference any relations, and must be a bytea string literal.\n",
                    "secret": true
                }
            },
            "requiredInputs": [
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Secret resources.\n",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "**Public Preview** Comment on an object in the database.\n"
                    },
                    "databaseName": {
                        "type": "string",
                        "description": "The identifier for the secret database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The identifier for the secret.\n"
                    },
                    "ownershipRole": {
                        "type": "string",
                        "description": "The owernship role of the object.\n"
                    },
                    "qualifiedSqlName": {
                        "type": "string",
                        "description": "The fully qualified name of the secret.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                        "willReplaceOnChanges": true
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "The identifier for the secret schema in Materialize. Defaults to `public`.\n",
                        "willReplaceOnChanges": true
                    },
                    "value": {
                        "type": "string",
                        "description": "The value for the secret. The value expression may not reference any relations, and must be a bytea string literal.\n",
                        "secret": true
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/sinkKafka:SinkKafka": {
            "description": "A Kafka sink establishes a link to a Kafka cluster that you want Materialize to write data to.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\nconst exampleSinkKafka = new materialize.SinkKafka(\"exampleSinkKafka\", {\n    clusterName: \"quickstart\",\n    envelope: {\n        upsert: true,\n    },\n    format: {\n        avro: {\n            schemaRegistryConnection: {\n                databaseName: \"database\",\n                name: \"csr_connection\",\n                schemaName: \"schema\",\n            },\n        },\n    },\n    from: {\n        name: \"table\",\n    },\n    kafkaConnection: {\n        name: \"kafka_connection\",\n    },\n    schemaName: \"schema\",\n    topic: \"test_avro_topic\",\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\nexample_sink_kafka = materialize.SinkKafka(\"exampleSinkKafka\",\n    cluster_name=\"quickstart\",\n    envelope=materialize.SinkKafkaEnvelopeArgs(\n        upsert=True,\n    ),\n    format=materialize.SinkKafkaFormatArgs(\n        avro=materialize.SinkKafkaFormatAvroArgs(\n            schema_registry_connection=materialize.SinkKafkaFormatAvroSchemaRegistryConnectionArgs(\n                database_name=\"database\",\n                name=\"csr_connection\",\n                schema_name=\"schema\",\n            ),\n        ),\n    ),\n    from_=materialize.SinkKafkaFromArgs(\n        name=\"table\",\n    ),\n    kafka_connection=materialize.SinkKafkaKafkaConnectionArgs(\n        name=\"kafka_connection\",\n    ),\n    schema_name=\"schema\",\n    topic=\"test_avro_topic\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleSinkKafka = new Materialize.SinkKafka(\"exampleSinkKafka\", new()\n    {\n        ClusterName = \"quickstart\",\n        Envelope = new Materialize.Inputs.SinkKafkaEnvelopeArgs\n        {\n            Upsert = true,\n        },\n        Format = new Materialize.Inputs.SinkKafkaFormatArgs\n        {\n            Avro = new Materialize.Inputs.SinkKafkaFormatAvroArgs\n            {\n                SchemaRegistryConnection = new Materialize.Inputs.SinkKafkaFormatAvroSchemaRegistryConnectionArgs\n                {\n                    DatabaseName = \"database\",\n                    Name = \"csr_connection\",\n                    SchemaName = \"schema\",\n                },\n            },\n        },\n        From = new Materialize.Inputs.SinkKafkaFromArgs\n        {\n            Name = \"table\",\n        },\n        KafkaConnection = new Materialize.Inputs.SinkKafkaKafkaConnectionArgs\n        {\n            Name = \"kafka_connection\",\n        },\n        SchemaName = \"schema\",\n        Topic = \"test_avro_topic\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.NewSinkKafka(ctx, \"exampleSinkKafka\", \u0026materialize.SinkKafkaArgs{\n\t\t\tClusterName: pulumi.String(\"quickstart\"),\n\t\t\tEnvelope: \u0026materialize.SinkKafkaEnvelopeArgs{\n\t\t\t\tUpsert: pulumi.Bool(true),\n\t\t\t},\n\t\t\tFormat: \u0026materialize.SinkKafkaFormatArgs{\n\t\t\t\tAvro: \u0026materialize.SinkKafkaFormatAvroArgs{\n\t\t\t\t\tSchemaRegistryConnection: \u0026materialize.SinkKafkaFormatAvroSchemaRegistryConnectionArgs{\n\t\t\t\t\t\tDatabaseName: pulumi.String(\"database\"),\n\t\t\t\t\t\tName:         pulumi.String(\"csr_connection\"),\n\t\t\t\t\t\tSchemaName:   pulumi.String(\"schema\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tFrom: \u0026materialize.SinkKafkaFromArgs{\n\t\t\t\tName: pulumi.String(\"table\"),\n\t\t\t},\n\t\t\tKafkaConnection: \u0026materialize.SinkKafkaKafkaConnectionArgs{\n\t\t\t\tName: pulumi.String(\"kafka_connection\"),\n\t\t\t},\n\t\t\tSchemaName: pulumi.String(\"schema\"),\n\t\t\tTopic:      pulumi.String(\"test_avro_topic\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.SinkKafka;\nimport com.pulumi.materialize.SinkKafkaArgs;\nimport com.pulumi.materialize.inputs.SinkKafkaEnvelopeArgs;\nimport com.pulumi.materialize.inputs.SinkKafkaFormatArgs;\nimport com.pulumi.materialize.inputs.SinkKafkaFormatAvroArgs;\nimport com.pulumi.materialize.inputs.SinkKafkaFormatAvroSchemaRegistryConnectionArgs;\nimport com.pulumi.materialize.inputs.SinkKafkaFromArgs;\nimport com.pulumi.materialize.inputs.SinkKafkaKafkaConnectionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleSinkKafka = new SinkKafka(\"exampleSinkKafka\", SinkKafkaArgs.builder()        \n            .clusterName(\"quickstart\")\n            .envelope(SinkKafkaEnvelopeArgs.builder()\n                .upsert(true)\n                .build())\n            .format(SinkKafkaFormatArgs.builder()\n                .avro(SinkKafkaFormatAvroArgs.builder()\n                    .schemaRegistryConnection(SinkKafkaFormatAvroSchemaRegistryConnectionArgs.builder()\n                        .databaseName(\"database\")\n                        .name(\"csr_connection\")\n                        .schemaName(\"schema\")\n                        .build())\n                    .build())\n                .build())\n            .from(SinkKafkaFromArgs.builder()\n                .name(\"table\")\n                .build())\n            .kafkaConnection(SinkKafkaKafkaConnectionArgs.builder()\n                .name(\"kafka_connection\")\n                .build())\n            .schemaName(\"schema\")\n            .topic(\"test_avro_topic\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleSinkKafka:\n    type: materialize:SinkKafka\n    properties:\n      clusterName: quickstart\n      envelope:\n        upsert: true\n      # Optional topic configuration parameters:\n      #     // topic_replication_factor = 1\n      #     // topic_partition_count    = 6\n      #     // topic_config = {\n      #     //   \"cleanup.policy\" = \"compact\"\n      #     //   \"retention.ms\"   = \"86400000\"\n      #     // }\n      format:\n        avro:\n          schemaRegistryConnection:\n            databaseName: database\n            name: csr_connection\n            schemaName: schema\n      from:\n        name: table\n      kafkaConnection:\n        name: kafka_connection\n      schemaName: schema\n      topic: test_avro_topic\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nSinks can be imported using the sink id\n\n```sh\n $ pulumi import materialize:index/sinkKafka:SinkKafka example_sink_kafka \u003cregion\u003e:\u003csink_id\u003e\n```\n\n Sink id and information be found in the `mz_catalog.mz_sinks` table The region is the region where the database is located (e.g. aws/us-east-1) ",
            "properties": {
                "clusterName": {
                    "type": "string",
                    "description": "The cluster to maintain this sink.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "**Public Preview** Comment on an object in the database.\n"
                },
                "compressionType": {
                    "type": "string",
                    "description": "The type of compression to apply to messages before they are sent to Kafka.\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the sink database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "envelope": {
                    "$ref": "#/types/materialize:index/SinkKafkaEnvelope:SinkKafkaEnvelope",
                    "description": "How to interpret records (e.g. Debezium, Upsert).\n"
                },
                "format": {
                    "$ref": "#/types/materialize:index/SinkKafkaFormat:SinkKafkaFormat",
                    "description": "How to decode raw bytes from different formats into data structures it can understand at runtime.\n"
                },
                "from": {
                    "$ref": "#/types/materialize:index/SinkKafkaFrom:SinkKafkaFrom",
                    "description": "The name of the source, table or materialized view you want to send to the sink.\n"
                },
                "headers": {
                    "type": "string",
                    "description": "The name of a column containing additional headers to add to each message emitted by the sink. The column must be of type map[text =\u003e text] or map[text =\u003e bytea].\n"
                },
                "kafkaConnection": {
                    "$ref": "#/types/materialize:index/SinkKafkaKafkaConnection:SinkKafkaKafkaConnection",
                    "description": "The name of the Kafka connection to use in the sink.\n"
                },
                "keyNotEnforced": {
                    "type": "boolean",
                    "description": "Disable Materialize's validation of the key's uniqueness.\n"
                },
                "keys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An optional list of columns to use for the Kafka key. If unspecified, the Kafka key is left unset.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the sink.\n"
                },
                "ownershipRole": {
                    "type": "string",
                    "description": "The owernship role of the object.\n"
                },
                "qualifiedSqlName": {
                    "type": "string",
                    "description": "The fully qualified name of the sink.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the sink schema in Materialize. Defaults to `public`.\n"
                },
                "size": {
                    "type": "string",
                    "description": "The size of the cluster maintaining this sink.\n"
                },
                "snapshot": {
                    "type": "boolean",
                    "description": "Whether to emit the consolidated results of the query before the sink was created at the start of the sink.\n"
                },
                "topic": {
                    "type": "string",
                    "description": "The Kafka topic you want to subscribe to.\n"
                },
                "topicConfig": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Any topic-level configs to use when creating the Kafka topic (if the Kafka topic does not already exist).\n"
                },
                "topicPartitionCount": {
                    "type": "integer",
                    "description": "The partition count to use when creating the Kafka topic (if the Kafka topic does not already exist).\n"
                },
                "topicReplicationFactor": {
                    "type": "integer",
                    "description": "The replication factor to use when creating the Kafka topic (if the Kafka topic does not already exist).\n"
                }
            },
            "required": [
                "clusterName",
                "from",
                "kafkaConnection",
                "name",
                "ownershipRole",
                "qualifiedSqlName",
                "region",
                "size",
                "topic"
            ],
            "inputProperties": {
                "clusterName": {
                    "type": "string",
                    "description": "The cluster to maintain this sink.\n",
                    "willReplaceOnChanges": true
                },
                "comment": {
                    "type": "string",
                    "description": "**Public Preview** Comment on an object in the database.\n"
                },
                "compressionType": {
                    "type": "string",
                    "description": "The type of compression to apply to messages before they are sent to Kafka.\n",
                    "willReplaceOnChanges": true
                },
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the sink database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n",
                    "willReplaceOnChanges": true
                },
                "envelope": {
                    "$ref": "#/types/materialize:index/SinkKafkaEnvelope:SinkKafkaEnvelope",
                    "description": "How to interpret records (e.g. Debezium, Upsert).\n",
                    "willReplaceOnChanges": true
                },
                "format": {
                    "$ref": "#/types/materialize:index/SinkKafkaFormat:SinkKafkaFormat",
                    "description": "How to decode raw bytes from different formats into data structures it can understand at runtime.\n",
                    "willReplaceOnChanges": true
                },
                "from": {
                    "$ref": "#/types/materialize:index/SinkKafkaFrom:SinkKafkaFrom",
                    "description": "The name of the source, table or materialized view you want to send to the sink.\n"
                },
                "headers": {
                    "type": "string",
                    "description": "The name of a column containing additional headers to add to each message emitted by the sink. The column must be of type map[text =\u003e text] or map[text =\u003e bytea].\n",
                    "willReplaceOnChanges": true
                },
                "kafkaConnection": {
                    "$ref": "#/types/materialize:index/SinkKafkaKafkaConnection:SinkKafkaKafkaConnection",
                    "description": "The name of the Kafka connection to use in the sink.\n",
                    "willReplaceOnChanges": true
                },
                "keyNotEnforced": {
                    "type": "boolean",
                    "description": "Disable Materialize's validation of the key's uniqueness.\n",
                    "willReplaceOnChanges": true
                },
                "keys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An optional list of columns to use for the Kafka key. If unspecified, the Kafka key is left unset.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the sink.\n"
                },
                "ownershipRole": {
                    "type": "string",
                    "description": "The owernship role of the object.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                    "willReplaceOnChanges": true
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the sink schema in Materialize. Defaults to `public`.\n",
                    "willReplaceOnChanges": true
                },
                "snapshot": {
                    "type": "boolean",
                    "description": "Whether to emit the consolidated results of the query before the sink was created at the start of the sink.\n",
                    "willReplaceOnChanges": true
                },
                "topic": {
                    "type": "string",
                    "description": "The Kafka topic you want to subscribe to.\n",
                    "willReplaceOnChanges": true
                },
                "topicConfig": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Any topic-level configs to use when creating the Kafka topic (if the Kafka topic does not already exist).\n",
                    "willReplaceOnChanges": true
                },
                "topicPartitionCount": {
                    "type": "integer",
                    "description": "The partition count to use when creating the Kafka topic (if the Kafka topic does not already exist).\n",
                    "willReplaceOnChanges": true
                },
                "topicReplicationFactor": {
                    "type": "integer",
                    "description": "The replication factor to use when creating the Kafka topic (if the Kafka topic does not already exist).\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "from",
                "kafkaConnection",
                "topic"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SinkKafka resources.\n",
                "properties": {
                    "clusterName": {
                        "type": "string",
                        "description": "The cluster to maintain this sink.\n",
                        "willReplaceOnChanges": true
                    },
                    "comment": {
                        "type": "string",
                        "description": "**Public Preview** Comment on an object in the database.\n"
                    },
                    "compressionType": {
                        "type": "string",
                        "description": "The type of compression to apply to messages before they are sent to Kafka.\n",
                        "willReplaceOnChanges": true
                    },
                    "databaseName": {
                        "type": "string",
                        "description": "The identifier for the sink database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n",
                        "willReplaceOnChanges": true
                    },
                    "envelope": {
                        "$ref": "#/types/materialize:index/SinkKafkaEnvelope:SinkKafkaEnvelope",
                        "description": "How to interpret records (e.g. Debezium, Upsert).\n",
                        "willReplaceOnChanges": true
                    },
                    "format": {
                        "$ref": "#/types/materialize:index/SinkKafkaFormat:SinkKafkaFormat",
                        "description": "How to decode raw bytes from different formats into data structures it can understand at runtime.\n",
                        "willReplaceOnChanges": true
                    },
                    "from": {
                        "$ref": "#/types/materialize:index/SinkKafkaFrom:SinkKafkaFrom",
                        "description": "The name of the source, table or materialized view you want to send to the sink.\n"
                    },
                    "headers": {
                        "type": "string",
                        "description": "The name of a column containing additional headers to add to each message emitted by the sink. The column must be of type map[text =\u003e text] or map[text =\u003e bytea].\n",
                        "willReplaceOnChanges": true
                    },
                    "kafkaConnection": {
                        "$ref": "#/types/materialize:index/SinkKafkaKafkaConnection:SinkKafkaKafkaConnection",
                        "description": "The name of the Kafka connection to use in the sink.\n",
                        "willReplaceOnChanges": true
                    },
                    "keyNotEnforced": {
                        "type": "boolean",
                        "description": "Disable Materialize's validation of the key's uniqueness.\n",
                        "willReplaceOnChanges": true
                    },
                    "keys": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An optional list of columns to use for the Kafka key. If unspecified, the Kafka key is left unset.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The identifier for the sink.\n"
                    },
                    "ownershipRole": {
                        "type": "string",
                        "description": "The owernship role of the object.\n"
                    },
                    "qualifiedSqlName": {
                        "type": "string",
                        "description": "The fully qualified name of the sink.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                        "willReplaceOnChanges": true
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "The identifier for the sink schema in Materialize. Defaults to `public`.\n",
                        "willReplaceOnChanges": true
                    },
                    "size": {
                        "type": "string",
                        "description": "The size of the cluster maintaining this sink.\n"
                    },
                    "snapshot": {
                        "type": "boolean",
                        "description": "Whether to emit the consolidated results of the query before the sink was created at the start of the sink.\n",
                        "willReplaceOnChanges": true
                    },
                    "topic": {
                        "type": "string",
                        "description": "The Kafka topic you want to subscribe to.\n",
                        "willReplaceOnChanges": true
                    },
                    "topicConfig": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Any topic-level configs to use when creating the Kafka topic (if the Kafka topic does not already exist).\n",
                        "willReplaceOnChanges": true
                    },
                    "topicPartitionCount": {
                        "type": "integer",
                        "description": "The partition count to use when creating the Kafka topic (if the Kafka topic does not already exist).\n",
                        "willReplaceOnChanges": true
                    },
                    "topicReplicationFactor": {
                        "type": "integer",
                        "description": "The replication factor to use when creating the Kafka topic (if the Kafka topic does not already exist).\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/sourceKafka:SourceKafka": {
            "description": "A Kafka source describes a Kafka cluster you want Materialize to read data from.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\nconst exampleSourceKafka = new materialize.SourceKafka(\"exampleSourceKafka\", {\n    clusterName: \"quickstart\",\n    envelope: {\n        none: true,\n    },\n    format: {\n        avro: {\n            schemaRegistryConnection: {\n                databaseName: \"database\",\n                name: \"csr_connection\",\n                schemaName: \"schema\",\n            },\n        },\n    },\n    kafkaConnection: {\n        databaseName: \"database\",\n        name: \"kafka_connection\",\n        schemaName: \"schema\",\n    },\n    schemaName: \"schema\",\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\nexample_source_kafka = materialize.SourceKafka(\"exampleSourceKafka\",\n    cluster_name=\"quickstart\",\n    envelope=materialize.SourceKafkaEnvelopeArgs(\n        none=True,\n    ),\n    format=materialize.SourceKafkaFormatArgs(\n        avro=materialize.SourceKafkaFormatAvroArgs(\n            schema_registry_connection=materialize.SourceKafkaFormatAvroSchemaRegistryConnectionArgs(\n                database_name=\"database\",\n                name=\"csr_connection\",\n                schema_name=\"schema\",\n            ),\n        ),\n    ),\n    kafka_connection=materialize.SourceKafkaKafkaConnectionArgs(\n        database_name=\"database\",\n        name=\"kafka_connection\",\n        schema_name=\"schema\",\n    ),\n    schema_name=\"schema\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleSourceKafka = new Materialize.SourceKafka(\"exampleSourceKafka\", new()\n    {\n        ClusterName = \"quickstart\",\n        Envelope = new Materialize.Inputs.SourceKafkaEnvelopeArgs\n        {\n            None = true,\n        },\n        Format = new Materialize.Inputs.SourceKafkaFormatArgs\n        {\n            Avro = new Materialize.Inputs.SourceKafkaFormatAvroArgs\n            {\n                SchemaRegistryConnection = new Materialize.Inputs.SourceKafkaFormatAvroSchemaRegistryConnectionArgs\n                {\n                    DatabaseName = \"database\",\n                    Name = \"csr_connection\",\n                    SchemaName = \"schema\",\n                },\n            },\n        },\n        KafkaConnection = new Materialize.Inputs.SourceKafkaKafkaConnectionArgs\n        {\n            DatabaseName = \"database\",\n            Name = \"kafka_connection\",\n            SchemaName = \"schema\",\n        },\n        SchemaName = \"schema\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.NewSourceKafka(ctx, \"exampleSourceKafka\", \u0026materialize.SourceKafkaArgs{\n\t\t\tClusterName: pulumi.String(\"quickstart\"),\n\t\t\tEnvelope: \u0026materialize.SourceKafkaEnvelopeArgs{\n\t\t\t\tNone: pulumi.Bool(true),\n\t\t\t},\n\t\t\tFormat: \u0026materialize.SourceKafkaFormatArgs{\n\t\t\t\tAvro: \u0026materialize.SourceKafkaFormatAvroArgs{\n\t\t\t\t\tSchemaRegistryConnection: \u0026materialize.SourceKafkaFormatAvroSchemaRegistryConnectionArgs{\n\t\t\t\t\t\tDatabaseName: pulumi.String(\"database\"),\n\t\t\t\t\t\tName:         pulumi.String(\"csr_connection\"),\n\t\t\t\t\t\tSchemaName:   pulumi.String(\"schema\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tKafkaConnection: \u0026materialize.SourceKafkaKafkaConnectionArgs{\n\t\t\t\tDatabaseName: pulumi.String(\"database\"),\n\t\t\t\tName:         pulumi.String(\"kafka_connection\"),\n\t\t\t\tSchemaName:   pulumi.String(\"schema\"),\n\t\t\t},\n\t\t\tSchemaName: pulumi.String(\"schema\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.SourceKafka;\nimport com.pulumi.materialize.SourceKafkaArgs;\nimport com.pulumi.materialize.inputs.SourceKafkaEnvelopeArgs;\nimport com.pulumi.materialize.inputs.SourceKafkaFormatArgs;\nimport com.pulumi.materialize.inputs.SourceKafkaFormatAvroArgs;\nimport com.pulumi.materialize.inputs.SourceKafkaFormatAvroSchemaRegistryConnectionArgs;\nimport com.pulumi.materialize.inputs.SourceKafkaKafkaConnectionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleSourceKafka = new SourceKafka(\"exampleSourceKafka\", SourceKafkaArgs.builder()        \n            .clusterName(\"quickstart\")\n            .envelope(SourceKafkaEnvelopeArgs.builder()\n                .none(true)\n                .build())\n            .format(SourceKafkaFormatArgs.builder()\n                .avro(SourceKafkaFormatAvroArgs.builder()\n                    .schemaRegistryConnection(SourceKafkaFormatAvroSchemaRegistryConnectionArgs.builder()\n                        .databaseName(\"database\")\n                        .name(\"csr_connection\")\n                        .schemaName(\"schema\")\n                        .build())\n                    .build())\n                .build())\n            .kafkaConnection(SourceKafkaKafkaConnectionArgs.builder()\n                .databaseName(\"database\")\n                .name(\"kafka_connection\")\n                .schemaName(\"schema\")\n                .build())\n            .schemaName(\"schema\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleSourceKafka:\n    type: materialize:SourceKafka\n    properties:\n      clusterName: quickstart\n      envelope:\n        none: true\n      format:\n        avro:\n          schemaRegistryConnection:\n            databaseName: database\n            name: csr_connection\n            schemaName: schema\n      kafkaConnection:\n        databaseName: database\n        name: kafka_connection\n        schemaName: schema\n      schemaName: schema\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nSources can be imported using the source id\n\n```sh\n $ pulumi import materialize:index/sourceKafka:SourceKafka example_source_kafka \u003cregion\u003e:\u003csource_id\u003e\n```\n\n Source id and information be found in the `mz_catalog.mz_sources` table The region is the region where the database is located (e.g. aws/us-east-1) ",
            "properties": {
                "clusterName": {
                    "type": "string",
                    "description": "The cluster to maintain this source.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "**Public Preview** Comment on an object in the database.\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the source database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "envelope": {
                    "$ref": "#/types/materialize:index/SourceKafkaEnvelope:SourceKafkaEnvelope",
                    "description": "How Materialize should interpret records (e.g. append-only, upsert)..\n"
                },
                "exposeProgress": {
                    "$ref": "#/types/materialize:index/SourceKafkaExposeProgress:SourceKafkaExposeProgress",
                    "description": "The name of the progress collection for the source. If this is not specified, the collection will be named `\u003csrc_name\u003e_progress`.\n"
                },
                "format": {
                    "$ref": "#/types/materialize:index/SourceKafkaFormat:SourceKafkaFormat",
                    "description": "How to decode raw bytes from different formats into data structures Materialize can understand at runtime.\n"
                },
                "includeHeaders": {
                    "type": "boolean",
                    "description": "Include message headers.\n"
                },
                "includeHeadersAlias": {
                    "type": "string",
                    "description": "Provide an alias for the headers column.\n"
                },
                "includeKey": {
                    "type": "boolean",
                    "description": "Include a column containing the Kafka message key.\n"
                },
                "includeKeyAlias": {
                    "type": "string",
                    "description": "Provide an alias for the key column.\n"
                },
                "includeOffset": {
                    "type": "boolean",
                    "description": "Include an offset column containing the Kafka message offset.\n"
                },
                "includeOffsetAlias": {
                    "type": "string",
                    "description": "Provide an alias for the offset column.\n"
                },
                "includePartition": {
                    "type": "boolean",
                    "description": "Include a partition column containing the Kafka message partition\n"
                },
                "includePartitionAlias": {
                    "type": "string",
                    "description": "Provide an alias for the partition column.\n"
                },
                "includeTimestamp": {
                    "type": "boolean",
                    "description": "Include a timestamp column containing the Kafka message timestamp.\n"
                },
                "includeTimestampAlias": {
                    "type": "string",
                    "description": "Provide an alias for the timestamp column.\n"
                },
                "kafkaConnection": {
                    "$ref": "#/types/materialize:index/SourceKafkaKafkaConnection:SourceKafkaKafkaConnection",
                    "description": "The Kafka connection to use in the source.\n"
                },
                "keyFormat": {
                    "$ref": "#/types/materialize:index/SourceKafkaKeyFormat:SourceKafkaKeyFormat",
                    "description": "Set the key format explicitly.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the source.\n"
                },
                "ownershipRole": {
                    "type": "string",
                    "description": "The owernship role of the object.\n"
                },
                "qualifiedSqlName": {
                    "type": "string",
                    "description": "The fully qualified name of the source.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the source schema in Materialize. Defaults to `public`.\n"
                },
                "size": {
                    "type": "string",
                    "description": "The size of the cluster maintaining this source.\n"
                },
                "startOffsets": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Read partitions from the specified offset.\n"
                },
                "startTimestamp": {
                    "type": "integer",
                    "description": "Use the specified value to set `START OFFSET` based on the Kafka timestamp.\n"
                },
                "topic": {
                    "type": "string",
                    "description": "The Kafka topic you want to subscribe to.\n"
                },
                "valueFormat": {
                    "$ref": "#/types/materialize:index/SourceKafkaValueFormat:SourceKafkaValueFormat",
                    "description": "Set the value format explicitly.\n"
                }
            },
            "required": [
                "clusterName",
                "kafkaConnection",
                "name",
                "ownershipRole",
                "qualifiedSqlName",
                "region",
                "size",
                "topic"
            ],
            "inputProperties": {
                "clusterName": {
                    "type": "string",
                    "description": "The cluster to maintain this source.\n",
                    "willReplaceOnChanges": true
                },
                "comment": {
                    "type": "string",
                    "description": "**Public Preview** Comment on an object in the database.\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the source database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n",
                    "willReplaceOnChanges": true
                },
                "envelope": {
                    "$ref": "#/types/materialize:index/SourceKafkaEnvelope:SourceKafkaEnvelope",
                    "description": "How Materialize should interpret records (e.g. append-only, upsert)..\n",
                    "willReplaceOnChanges": true
                },
                "exposeProgress": {
                    "$ref": "#/types/materialize:index/SourceKafkaExposeProgress:SourceKafkaExposeProgress",
                    "description": "The name of the progress collection for the source. If this is not specified, the collection will be named `\u003csrc_name\u003e_progress`.\n",
                    "willReplaceOnChanges": true
                },
                "format": {
                    "$ref": "#/types/materialize:index/SourceKafkaFormat:SourceKafkaFormat",
                    "description": "How to decode raw bytes from different formats into data structures Materialize can understand at runtime.\n",
                    "willReplaceOnChanges": true
                },
                "includeHeaders": {
                    "type": "boolean",
                    "description": "Include message headers.\n",
                    "willReplaceOnChanges": true
                },
                "includeHeadersAlias": {
                    "type": "string",
                    "description": "Provide an alias for the headers column.\n",
                    "willReplaceOnChanges": true
                },
                "includeKey": {
                    "type": "boolean",
                    "description": "Include a column containing the Kafka message key.\n",
                    "willReplaceOnChanges": true
                },
                "includeKeyAlias": {
                    "type": "string",
                    "description": "Provide an alias for the key column.\n",
                    "willReplaceOnChanges": true
                },
                "includeOffset": {
                    "type": "boolean",
                    "description": "Include an offset column containing the Kafka message offset.\n",
                    "willReplaceOnChanges": true
                },
                "includeOffsetAlias": {
                    "type": "string",
                    "description": "Provide an alias for the offset column.\n",
                    "willReplaceOnChanges": true
                },
                "includePartition": {
                    "type": "boolean",
                    "description": "Include a partition column containing the Kafka message partition\n",
                    "willReplaceOnChanges": true
                },
                "includePartitionAlias": {
                    "type": "string",
                    "description": "Provide an alias for the partition column.\n",
                    "willReplaceOnChanges": true
                },
                "includeTimestamp": {
                    "type": "boolean",
                    "description": "Include a timestamp column containing the Kafka message timestamp.\n",
                    "willReplaceOnChanges": true
                },
                "includeTimestampAlias": {
                    "type": "string",
                    "description": "Provide an alias for the timestamp column.\n",
                    "willReplaceOnChanges": true
                },
                "kafkaConnection": {
                    "$ref": "#/types/materialize:index/SourceKafkaKafkaConnection:SourceKafkaKafkaConnection",
                    "description": "The Kafka connection to use in the source.\n",
                    "willReplaceOnChanges": true
                },
                "keyFormat": {
                    "$ref": "#/types/materialize:index/SourceKafkaKeyFormat:SourceKafkaKeyFormat",
                    "description": "Set the key format explicitly.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the source.\n"
                },
                "ownershipRole": {
                    "type": "string",
                    "description": "The owernship role of the object.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                    "willReplaceOnChanges": true
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the source schema in Materialize. Defaults to `public`.\n",
                    "willReplaceOnChanges": true
                },
                "startOffsets": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Read partitions from the specified offset.\n",
                    "willReplaceOnChanges": true
                },
                "startTimestamp": {
                    "type": "integer",
                    "description": "Use the specified value to set `START OFFSET` based on the Kafka timestamp.\n",
                    "willReplaceOnChanges": true
                },
                "topic": {
                    "type": "string",
                    "description": "The Kafka topic you want to subscribe to.\n",
                    "willReplaceOnChanges": true
                },
                "valueFormat": {
                    "$ref": "#/types/materialize:index/SourceKafkaValueFormat:SourceKafkaValueFormat",
                    "description": "Set the value format explicitly.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "kafkaConnection",
                "topic"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceKafka resources.\n",
                "properties": {
                    "clusterName": {
                        "type": "string",
                        "description": "The cluster to maintain this source.\n",
                        "willReplaceOnChanges": true
                    },
                    "comment": {
                        "type": "string",
                        "description": "**Public Preview** Comment on an object in the database.\n"
                    },
                    "databaseName": {
                        "type": "string",
                        "description": "The identifier for the source database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n",
                        "willReplaceOnChanges": true
                    },
                    "envelope": {
                        "$ref": "#/types/materialize:index/SourceKafkaEnvelope:SourceKafkaEnvelope",
                        "description": "How Materialize should interpret records (e.g. append-only, upsert)..\n",
                        "willReplaceOnChanges": true
                    },
                    "exposeProgress": {
                        "$ref": "#/types/materialize:index/SourceKafkaExposeProgress:SourceKafkaExposeProgress",
                        "description": "The name of the progress collection for the source. If this is not specified, the collection will be named `\u003csrc_name\u003e_progress`.\n",
                        "willReplaceOnChanges": true
                    },
                    "format": {
                        "$ref": "#/types/materialize:index/SourceKafkaFormat:SourceKafkaFormat",
                        "description": "How to decode raw bytes from different formats into data structures Materialize can understand at runtime.\n",
                        "willReplaceOnChanges": true
                    },
                    "includeHeaders": {
                        "type": "boolean",
                        "description": "Include message headers.\n",
                        "willReplaceOnChanges": true
                    },
                    "includeHeadersAlias": {
                        "type": "string",
                        "description": "Provide an alias for the headers column.\n",
                        "willReplaceOnChanges": true
                    },
                    "includeKey": {
                        "type": "boolean",
                        "description": "Include a column containing the Kafka message key.\n",
                        "willReplaceOnChanges": true
                    },
                    "includeKeyAlias": {
                        "type": "string",
                        "description": "Provide an alias for the key column.\n",
                        "willReplaceOnChanges": true
                    },
                    "includeOffset": {
                        "type": "boolean",
                        "description": "Include an offset column containing the Kafka message offset.\n",
                        "willReplaceOnChanges": true
                    },
                    "includeOffsetAlias": {
                        "type": "string",
                        "description": "Provide an alias for the offset column.\n",
                        "willReplaceOnChanges": true
                    },
                    "includePartition": {
                        "type": "boolean",
                        "description": "Include a partition column containing the Kafka message partition\n",
                        "willReplaceOnChanges": true
                    },
                    "includePartitionAlias": {
                        "type": "string",
                        "description": "Provide an alias for the partition column.\n",
                        "willReplaceOnChanges": true
                    },
                    "includeTimestamp": {
                        "type": "boolean",
                        "description": "Include a timestamp column containing the Kafka message timestamp.\n",
                        "willReplaceOnChanges": true
                    },
                    "includeTimestampAlias": {
                        "type": "string",
                        "description": "Provide an alias for the timestamp column.\n",
                        "willReplaceOnChanges": true
                    },
                    "kafkaConnection": {
                        "$ref": "#/types/materialize:index/SourceKafkaKafkaConnection:SourceKafkaKafkaConnection",
                        "description": "The Kafka connection to use in the source.\n",
                        "willReplaceOnChanges": true
                    },
                    "keyFormat": {
                        "$ref": "#/types/materialize:index/SourceKafkaKeyFormat:SourceKafkaKeyFormat",
                        "description": "Set the key format explicitly.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The identifier for the source.\n"
                    },
                    "ownershipRole": {
                        "type": "string",
                        "description": "The owernship role of the object.\n"
                    },
                    "qualifiedSqlName": {
                        "type": "string",
                        "description": "The fully qualified name of the source.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                        "willReplaceOnChanges": true
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "The identifier for the source schema in Materialize. Defaults to `public`.\n",
                        "willReplaceOnChanges": true
                    },
                    "size": {
                        "type": "string",
                        "description": "The size of the cluster maintaining this source.\n"
                    },
                    "startOffsets": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Read partitions from the specified offset.\n",
                        "willReplaceOnChanges": true
                    },
                    "startTimestamp": {
                        "type": "integer",
                        "description": "Use the specified value to set `START OFFSET` based on the Kafka timestamp.\n",
                        "willReplaceOnChanges": true
                    },
                    "topic": {
                        "type": "string",
                        "description": "The Kafka topic you want to subscribe to.\n",
                        "willReplaceOnChanges": true
                    },
                    "valueFormat": {
                        "$ref": "#/types/materialize:index/SourceKafkaValueFormat:SourceKafkaValueFormat",
                        "description": "Set the value format explicitly.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/sourceLoadgen:SourceLoadgen": {
            "description": "A load generator source produces synthetic data for use in demos and performance tests.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\nconst exampleSourceLoadGenerator = new materialize.SourceLoadgen(\"exampleSourceLoadGenerator\", {\n    clusterName: \"quickstart\",\n    counterOptions: {\n        tickInterval: \"500ms\",\n    },\n    loadGeneratorType: \"COUNTER\",\n    schemaName: \"schema\",\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\nexample_source_load_generator = materialize.SourceLoadgen(\"exampleSourceLoadGenerator\",\n    cluster_name=\"quickstart\",\n    counter_options=materialize.SourceLoadgenCounterOptionsArgs(\n        tick_interval=\"500ms\",\n    ),\n    load_generator_type=\"COUNTER\",\n    schema_name=\"schema\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleSourceLoadGenerator = new Materialize.SourceLoadgen(\"exampleSourceLoadGenerator\", new()\n    {\n        ClusterName = \"quickstart\",\n        CounterOptions = new Materialize.Inputs.SourceLoadgenCounterOptionsArgs\n        {\n            TickInterval = \"500ms\",\n        },\n        LoadGeneratorType = \"COUNTER\",\n        SchemaName = \"schema\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.NewSourceLoadgen(ctx, \"exampleSourceLoadGenerator\", \u0026materialize.SourceLoadgenArgs{\n\t\t\tClusterName: pulumi.String(\"quickstart\"),\n\t\t\tCounterOptions: \u0026materialize.SourceLoadgenCounterOptionsArgs{\n\t\t\t\tTickInterval: pulumi.String(\"500ms\"),\n\t\t\t},\n\t\t\tLoadGeneratorType: pulumi.String(\"COUNTER\"),\n\t\t\tSchemaName:        pulumi.String(\"schema\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.SourceLoadgen;\nimport com.pulumi.materialize.SourceLoadgenArgs;\nimport com.pulumi.materialize.inputs.SourceLoadgenCounterOptionsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleSourceLoadGenerator = new SourceLoadgen(\"exampleSourceLoadGenerator\", SourceLoadgenArgs.builder()        \n            .clusterName(\"quickstart\")\n            .counterOptions(SourceLoadgenCounterOptionsArgs.builder()\n                .tickInterval(\"500ms\")\n                .build())\n            .loadGeneratorType(\"COUNTER\")\n            .schemaName(\"schema\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleSourceLoadGenerator:\n    type: materialize:SourceLoadgen\n    properties:\n      clusterName: quickstart\n      counterOptions:\n        tickInterval: 500ms\n      loadGeneratorType: COUNTER\n      schemaName: schema\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nSources can be imported using the source id\n\n```sh\n $ pulumi import materialize:index/sourceLoadgen:SourceLoadgen example_source_load_generator \u003cregion\u003e:\u003csource_id\u003e\n```\n\n Source id and information be found in the `mz_catalog.mz_sources` table The region is the region where the database is located (e.g. aws/us-east-1) ",
            "properties": {
                "auctionOptions": {
                    "$ref": "#/types/materialize:index/SourceLoadgenAuctionOptions:SourceLoadgenAuctionOptions",
                    "description": "Auction Options.\n"
                },
                "clusterName": {
                    "type": "string",
                    "description": "The cluster to maintain this source.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "**Public Preview** Comment on an object in the database.\n"
                },
                "counterOptions": {
                    "$ref": "#/types/materialize:index/SourceLoadgenCounterOptions:SourceLoadgenCounterOptions",
                    "description": "Counter Options.\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the source database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "exposeProgress": {
                    "$ref": "#/types/materialize:index/SourceLoadgenExposeProgress:SourceLoadgenExposeProgress",
                    "description": "The name of the progress collection for the source. If this is not specified, the collection will be named `\u003csrc_name\u003e_progress`.\n"
                },
                "keyValueOptions": {
                    "$ref": "#/types/materialize:index/SourceLoadgenKeyValueOptions:SourceLoadgenKeyValueOptions",
                    "description": "KEY VALUE Load Generator Options.\n"
                },
                "loadGeneratorType": {
                    "type": "string",
                    "description": "The load generator types: [AUCTION MARKETING COUNTER TPCH KEY VALUE].\n"
                },
                "marketingOptions": {
                    "$ref": "#/types/materialize:index/SourceLoadgenMarketingOptions:SourceLoadgenMarketingOptions",
                    "description": "Marketing Options.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the source.\n"
                },
                "ownershipRole": {
                    "type": "string",
                    "description": "The owernship role of the object.\n"
                },
                "qualifiedSqlName": {
                    "type": "string",
                    "description": "The fully qualified name of the source.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the source schema in Materialize. Defaults to `public`.\n"
                },
                "size": {
                    "type": "string",
                    "description": "The size of the cluster maintaining this source.\n"
                },
                "tpchOptions": {
                    "$ref": "#/types/materialize:index/SourceLoadgenTpchOptions:SourceLoadgenTpchOptions",
                    "description": "TPCH Options.\n"
                }
            },
            "required": [
                "clusterName",
                "loadGeneratorType",
                "name",
                "ownershipRole",
                "qualifiedSqlName",
                "region",
                "size"
            ],
            "inputProperties": {
                "auctionOptions": {
                    "$ref": "#/types/materialize:index/SourceLoadgenAuctionOptions:SourceLoadgenAuctionOptions",
                    "description": "Auction Options.\n",
                    "willReplaceOnChanges": true
                },
                "clusterName": {
                    "type": "string",
                    "description": "The cluster to maintain this source.\n",
                    "willReplaceOnChanges": true
                },
                "comment": {
                    "type": "string",
                    "description": "**Public Preview** Comment on an object in the database.\n"
                },
                "counterOptions": {
                    "$ref": "#/types/materialize:index/SourceLoadgenCounterOptions:SourceLoadgenCounterOptions",
                    "description": "Counter Options.\n",
                    "willReplaceOnChanges": true
                },
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the source database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n",
                    "willReplaceOnChanges": true
                },
                "exposeProgress": {
                    "$ref": "#/types/materialize:index/SourceLoadgenExposeProgress:SourceLoadgenExposeProgress",
                    "description": "The name of the progress collection for the source. If this is not specified, the collection will be named `\u003csrc_name\u003e_progress`.\n",
                    "willReplaceOnChanges": true
                },
                "keyValueOptions": {
                    "$ref": "#/types/materialize:index/SourceLoadgenKeyValueOptions:SourceLoadgenKeyValueOptions",
                    "description": "KEY VALUE Load Generator Options.\n",
                    "willReplaceOnChanges": true
                },
                "loadGeneratorType": {
                    "type": "string",
                    "description": "The load generator types: [AUCTION MARKETING COUNTER TPCH KEY VALUE].\n",
                    "willReplaceOnChanges": true
                },
                "marketingOptions": {
                    "$ref": "#/types/materialize:index/SourceLoadgenMarketingOptions:SourceLoadgenMarketingOptions",
                    "description": "Marketing Options.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the source.\n"
                },
                "ownershipRole": {
                    "type": "string",
                    "description": "The owernship role of the object.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                    "willReplaceOnChanges": true
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the source schema in Materialize. Defaults to `public`.\n",
                    "willReplaceOnChanges": true
                },
                "tpchOptions": {
                    "$ref": "#/types/materialize:index/SourceLoadgenTpchOptions:SourceLoadgenTpchOptions",
                    "description": "TPCH Options.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "loadGeneratorType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceLoadgen resources.\n",
                "properties": {
                    "auctionOptions": {
                        "$ref": "#/types/materialize:index/SourceLoadgenAuctionOptions:SourceLoadgenAuctionOptions",
                        "description": "Auction Options.\n",
                        "willReplaceOnChanges": true
                    },
                    "clusterName": {
                        "type": "string",
                        "description": "The cluster to maintain this source.\n",
                        "willReplaceOnChanges": true
                    },
                    "comment": {
                        "type": "string",
                        "description": "**Public Preview** Comment on an object in the database.\n"
                    },
                    "counterOptions": {
                        "$ref": "#/types/materialize:index/SourceLoadgenCounterOptions:SourceLoadgenCounterOptions",
                        "description": "Counter Options.\n",
                        "willReplaceOnChanges": true
                    },
                    "databaseName": {
                        "type": "string",
                        "description": "The identifier for the source database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n",
                        "willReplaceOnChanges": true
                    },
                    "exposeProgress": {
                        "$ref": "#/types/materialize:index/SourceLoadgenExposeProgress:SourceLoadgenExposeProgress",
                        "description": "The name of the progress collection for the source. If this is not specified, the collection will be named `\u003csrc_name\u003e_progress`.\n",
                        "willReplaceOnChanges": true
                    },
                    "keyValueOptions": {
                        "$ref": "#/types/materialize:index/SourceLoadgenKeyValueOptions:SourceLoadgenKeyValueOptions",
                        "description": "KEY VALUE Load Generator Options.\n",
                        "willReplaceOnChanges": true
                    },
                    "loadGeneratorType": {
                        "type": "string",
                        "description": "The load generator types: [AUCTION MARKETING COUNTER TPCH KEY VALUE].\n",
                        "willReplaceOnChanges": true
                    },
                    "marketingOptions": {
                        "$ref": "#/types/materialize:index/SourceLoadgenMarketingOptions:SourceLoadgenMarketingOptions",
                        "description": "Marketing Options.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The identifier for the source.\n"
                    },
                    "ownershipRole": {
                        "type": "string",
                        "description": "The owernship role of the object.\n"
                    },
                    "qualifiedSqlName": {
                        "type": "string",
                        "description": "The fully qualified name of the source.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                        "willReplaceOnChanges": true
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "The identifier for the source schema in Materialize. Defaults to `public`.\n",
                        "willReplaceOnChanges": true
                    },
                    "size": {
                        "type": "string",
                        "description": "The size of the cluster maintaining this source.\n"
                    },
                    "tpchOptions": {
                        "$ref": "#/types/materialize:index/SourceLoadgenTpchOptions:SourceLoadgenTpchOptions",
                        "description": "TPCH Options.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/sourceMysql:SourceMysql": {
            "description": "A MySQL source describes a MySQL instance you want Materialize to read data from.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\nconst test = new materialize.SourceMysql(\"test\", {\n    schemaName: materialize_schema.test.name,\n    databaseName: materialize_database.test.name,\n    clusterName: \"quickstart\",\n    mysqlConnection: {\n        name: materialize_connection_mysql.test.name,\n    },\n    tables: [\n        {\n            upstreamName: \"mysql_table1\",\n            upstreamSchemaName: \"shop\",\n            name: \"mysql_table1_local\",\n        },\n        {\n            upstreamName: \"mysql_table2\",\n            upstreamSchemaName: \"shop\",\n            name: \"mysql_table2_local\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\ntest = materialize.SourceMysql(\"test\",\n    schema_name=materialize_schema[\"test\"][\"name\"],\n    database_name=materialize_database[\"test\"][\"name\"],\n    cluster_name=\"quickstart\",\n    mysql_connection=materialize.SourceMysqlMysqlConnectionArgs(\n        name=materialize_connection_mysql[\"test\"][\"name\"],\n    ),\n    tables=[\n        materialize.SourceMysqlTableArgs(\n            upstream_name=\"mysql_table1\",\n            upstream_schema_name=\"shop\",\n            name=\"mysql_table1_local\",\n        ),\n        materialize.SourceMysqlTableArgs(\n            upstream_name=\"mysql_table2\",\n            upstream_schema_name=\"shop\",\n            name=\"mysql_table2_local\",\n        ),\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Materialize.SourceMysql(\"test\", new()\n    {\n        SchemaName = materialize_schema.Test.Name,\n        DatabaseName = materialize_database.Test.Name,\n        ClusterName = \"quickstart\",\n        MysqlConnection = new Materialize.Inputs.SourceMysqlMysqlConnectionArgs\n        {\n            Name = materialize_connection_mysql.Test.Name,\n        },\n        Tables = new[]\n        {\n            new Materialize.Inputs.SourceMysqlTableArgs\n            {\n                UpstreamName = \"mysql_table1\",\n                UpstreamSchemaName = \"shop\",\n                Name = \"mysql_table1_local\",\n            },\n            new Materialize.Inputs.SourceMysqlTableArgs\n            {\n                UpstreamName = \"mysql_table2\",\n                UpstreamSchemaName = \"shop\",\n                Name = \"mysql_table2_local\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.NewSourceMysql(ctx, \"test\", \u0026materialize.SourceMysqlArgs{\n\t\t\tSchemaName:   pulumi.Any(materialize_schema.Test.Name),\n\t\t\tDatabaseName: pulumi.Any(materialize_database.Test.Name),\n\t\t\tClusterName:  pulumi.String(\"quickstart\"),\n\t\t\tMysqlConnection: \u0026materialize.SourceMysqlMysqlConnectionArgs{\n\t\t\t\tName: pulumi.Any(materialize_connection_mysql.Test.Name),\n\t\t\t},\n\t\t\tTables: materialize.SourceMysqlTableArray{\n\t\t\t\t\u0026materialize.SourceMysqlTableArgs{\n\t\t\t\t\tUpstreamName:       pulumi.String(\"mysql_table1\"),\n\t\t\t\t\tUpstreamSchemaName: pulumi.String(\"shop\"),\n\t\t\t\t\tName:               pulumi.String(\"mysql_table1_local\"),\n\t\t\t\t},\n\t\t\t\t\u0026materialize.SourceMysqlTableArgs{\n\t\t\t\t\tUpstreamName:       pulumi.String(\"mysql_table2\"),\n\t\t\t\t\tUpstreamSchemaName: pulumi.String(\"shop\"),\n\t\t\t\t\tName:               pulumi.String(\"mysql_table2_local\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.SourceMysql;\nimport com.pulumi.materialize.SourceMysqlArgs;\nimport com.pulumi.materialize.inputs.SourceMysqlMysqlConnectionArgs;\nimport com.pulumi.materialize.inputs.SourceMysqlTableArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new SourceMysql(\"test\", SourceMysqlArgs.builder()        \n            .schemaName(materialize_schema.test().name())\n            .databaseName(materialize_database.test().name())\n            .clusterName(\"quickstart\")\n            .mysqlConnection(SourceMysqlMysqlConnectionArgs.builder()\n                .name(materialize_connection_mysql.test().name())\n                .build())\n            .tables(            \n                SourceMysqlTableArgs.builder()\n                    .upstreamName(\"mysql_table1\")\n                    .upstreamSchemaName(\"shop\")\n                    .name(\"mysql_table1_local\")\n                    .build(),\n                SourceMysqlTableArgs.builder()\n                    .upstreamName(\"mysql_table2\")\n                    .upstreamSchemaName(\"shop\")\n                    .name(\"mysql_table2_local\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: materialize:SourceMysql\n    properties:\n      schemaName: ${materialize_schema.test.name}\n      databaseName: ${materialize_database.test.name}\n      clusterName: quickstart\n      mysqlConnection:\n        name: ${materialize_connection_mysql.test.name}\n      tables:\n        - upstreamName: mysql_table1\n          upstreamSchemaName: shop\n          name: mysql_table1_local\n        - upstreamName: mysql_table2\n          upstreamSchemaName: shop\n          name: mysql_table2_local\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nSources can be imported using the source id\n\n```sh\n $ pulumi import materialize:index/sourceMysql:SourceMysql example_source_mysql \u003cregion\u003e:\u003csource_id\u003e\n```\n\n Source id and information be found in the `mz_catalog.mz_sources` table The region is the region where the database is located (e.g. aws/us-east-1) ",
            "properties": {
                "clusterName": {
                    "type": "string",
                    "description": "The cluster to maintain this source.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "**Public Preview** Comment on an object in the database.\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the source database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "exposeProgress": {
                    "$ref": "#/types/materialize:index/SourceMysqlExposeProgress:SourceMysqlExposeProgress",
                    "description": "The name of the progress collection for the source. If this is not specified, the collection will be named `\u003csrc_name\u003e_progress`.\n"
                },
                "ignoreColumns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Ignore specific columns when reading data from MySQL. Can only be updated in place when also updating a corresponding `table` attribute.\n"
                },
                "mysqlConnection": {
                    "$ref": "#/types/materialize:index/SourceMysqlMysqlConnection:SourceMysqlMysqlConnection",
                    "description": "The MySQL connection to use in the source.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the source.\n"
                },
                "ownershipRole": {
                    "type": "string",
                    "description": "The owernship role of the object.\n"
                },
                "qualifiedSqlName": {
                    "type": "string",
                    "description": "The fully qualified name of the source.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the source schema in Materialize. Defaults to `public`.\n"
                },
                "size": {
                    "type": "string",
                    "description": "The size of the cluster maintaining this source.\n"
                },
                "tables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/materialize:index/SourceMysqlTable:SourceMysqlTable"
                    },
                    "description": "Specify the tables to be included in the source. If not specified, all tables are included.\n"
                },
                "textColumns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Decode data as text for specific columns that contain MySQL types that are unsupported in Materialize. Can only be updated in place when also updating a corresponding `table` attribute.\n"
                }
            },
            "required": [
                "clusterName",
                "mysqlConnection",
                "name",
                "ownershipRole",
                "qualifiedSqlName",
                "region",
                "size"
            ],
            "inputProperties": {
                "clusterName": {
                    "type": "string",
                    "description": "The cluster to maintain this source.\n",
                    "willReplaceOnChanges": true
                },
                "comment": {
                    "type": "string",
                    "description": "**Public Preview** Comment on an object in the database.\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the source database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n",
                    "willReplaceOnChanges": true
                },
                "exposeProgress": {
                    "$ref": "#/types/materialize:index/SourceMysqlExposeProgress:SourceMysqlExposeProgress",
                    "description": "The name of the progress collection for the source. If this is not specified, the collection will be named `\u003csrc_name\u003e_progress`.\n",
                    "willReplaceOnChanges": true
                },
                "ignoreColumns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Ignore specific columns when reading data from MySQL. Can only be updated in place when also updating a corresponding `table` attribute.\n"
                },
                "mysqlConnection": {
                    "$ref": "#/types/materialize:index/SourceMysqlMysqlConnection:SourceMysqlMysqlConnection",
                    "description": "The MySQL connection to use in the source.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the source.\n"
                },
                "ownershipRole": {
                    "type": "string",
                    "description": "The owernship role of the object.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                    "willReplaceOnChanges": true
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the source schema in Materialize. Defaults to `public`.\n",
                    "willReplaceOnChanges": true
                },
                "tables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/materialize:index/SourceMysqlTable:SourceMysqlTable"
                    },
                    "description": "Specify the tables to be included in the source. If not specified, all tables are included.\n"
                },
                "textColumns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Decode data as text for specific columns that contain MySQL types that are unsupported in Materialize. Can only be updated in place when also updating a corresponding `table` attribute.\n"
                }
            },
            "requiredInputs": [
                "mysqlConnection"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceMysql resources.\n",
                "properties": {
                    "clusterName": {
                        "type": "string",
                        "description": "The cluster to maintain this source.\n",
                        "willReplaceOnChanges": true
                    },
                    "comment": {
                        "type": "string",
                        "description": "**Public Preview** Comment on an object in the database.\n"
                    },
                    "databaseName": {
                        "type": "string",
                        "description": "The identifier for the source database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n",
                        "willReplaceOnChanges": true
                    },
                    "exposeProgress": {
                        "$ref": "#/types/materialize:index/SourceMysqlExposeProgress:SourceMysqlExposeProgress",
                        "description": "The name of the progress collection for the source. If this is not specified, the collection will be named `\u003csrc_name\u003e_progress`.\n",
                        "willReplaceOnChanges": true
                    },
                    "ignoreColumns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Ignore specific columns when reading data from MySQL. Can only be updated in place when also updating a corresponding `table` attribute.\n"
                    },
                    "mysqlConnection": {
                        "$ref": "#/types/materialize:index/SourceMysqlMysqlConnection:SourceMysqlMysqlConnection",
                        "description": "The MySQL connection to use in the source.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The identifier for the source.\n"
                    },
                    "ownershipRole": {
                        "type": "string",
                        "description": "The owernship role of the object.\n"
                    },
                    "qualifiedSqlName": {
                        "type": "string",
                        "description": "The fully qualified name of the source.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                        "willReplaceOnChanges": true
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "The identifier for the source schema in Materialize. Defaults to `public`.\n",
                        "willReplaceOnChanges": true
                    },
                    "size": {
                        "type": "string",
                        "description": "The size of the cluster maintaining this source.\n"
                    },
                    "tables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/materialize:index/SourceMysqlTable:SourceMysqlTable"
                        },
                        "description": "Specify the tables to be included in the source. If not specified, all tables are included.\n"
                    },
                    "textColumns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Decode data as text for specific columns that contain MySQL types that are unsupported in Materialize. Can only be updated in place when also updating a corresponding `table` attribute.\n"
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/sourcePostgres:SourcePostgres": {
            "description": "A Postgres source describes a PostgreSQL instance you want Materialize to read data from.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\nconst exampleSourcePostgres = new materialize.SourcePostgres(\"exampleSourcePostgres\", {\n    clusterName: \"quickstart\",\n    postgresConnection: {\n        name: \"pg_connection\",\n    },\n    publication: \"mz_source\",\n    schemaName: \"schema\",\n    tables: [\n        {\n            name: \"s1_table1\",\n            upstreamName: \"table1\",\n            upstreamSchemaName: \"schema1\",\n        },\n        {\n            name: \"s2_table2\",\n            upstreamName: \"table2\",\n            upstreamSchemaName: \"schema2\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\nexample_source_postgres = materialize.SourcePostgres(\"exampleSourcePostgres\",\n    cluster_name=\"quickstart\",\n    postgres_connection=materialize.SourcePostgresPostgresConnectionArgs(\n        name=\"pg_connection\",\n    ),\n    publication=\"mz_source\",\n    schema_name=\"schema\",\n    tables=[\n        materialize.SourcePostgresTableArgs(\n            name=\"s1_table1\",\n            upstream_name=\"table1\",\n            upstream_schema_name=\"schema1\",\n        ),\n        materialize.SourcePostgresTableArgs(\n            name=\"s2_table2\",\n            upstream_name=\"table2\",\n            upstream_schema_name=\"schema2\",\n        ),\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleSourcePostgres = new Materialize.SourcePostgres(\"exampleSourcePostgres\", new()\n    {\n        ClusterName = \"quickstart\",\n        PostgresConnection = new Materialize.Inputs.SourcePostgresPostgresConnectionArgs\n        {\n            Name = \"pg_connection\",\n        },\n        Publication = \"mz_source\",\n        SchemaName = \"schema\",\n        Tables = new[]\n        {\n            new Materialize.Inputs.SourcePostgresTableArgs\n            {\n                Name = \"s1_table1\",\n                UpstreamName = \"table1\",\n                UpstreamSchemaName = \"schema1\",\n            },\n            new Materialize.Inputs.SourcePostgresTableArgs\n            {\n                Name = \"s2_table2\",\n                UpstreamName = \"table2\",\n                UpstreamSchemaName = \"schema2\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.NewSourcePostgres(ctx, \"exampleSourcePostgres\", \u0026materialize.SourcePostgresArgs{\n\t\t\tClusterName: pulumi.String(\"quickstart\"),\n\t\t\tPostgresConnection: \u0026materialize.SourcePostgresPostgresConnectionArgs{\n\t\t\t\tName: pulumi.String(\"pg_connection\"),\n\t\t\t},\n\t\t\tPublication: pulumi.String(\"mz_source\"),\n\t\t\tSchemaName:  pulumi.String(\"schema\"),\n\t\t\tTables: materialize.SourcePostgresTableArray{\n\t\t\t\t\u0026materialize.SourcePostgresTableArgs{\n\t\t\t\t\tName:               pulumi.String(\"s1_table1\"),\n\t\t\t\t\tUpstreamName:       pulumi.String(\"table1\"),\n\t\t\t\t\tUpstreamSchemaName: pulumi.String(\"schema1\"),\n\t\t\t\t},\n\t\t\t\t\u0026materialize.SourcePostgresTableArgs{\n\t\t\t\t\tName:               pulumi.String(\"s2_table2\"),\n\t\t\t\t\tUpstreamName:       pulumi.String(\"table2\"),\n\t\t\t\t\tUpstreamSchemaName: pulumi.String(\"schema2\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.SourcePostgres;\nimport com.pulumi.materialize.SourcePostgresArgs;\nimport com.pulumi.materialize.inputs.SourcePostgresPostgresConnectionArgs;\nimport com.pulumi.materialize.inputs.SourcePostgresTableArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleSourcePostgres = new SourcePostgres(\"exampleSourcePostgres\", SourcePostgresArgs.builder()        \n            .clusterName(\"quickstart\")\n            .postgresConnection(SourcePostgresPostgresConnectionArgs.builder()\n                .name(\"pg_connection\")\n                .build())\n            .publication(\"mz_source\")\n            .schemaName(\"schema\")\n            .tables(            \n                SourcePostgresTableArgs.builder()\n                    .name(\"s1_table1\")\n                    .upstreamName(\"table1\")\n                    .upstreamSchemaName(\"schema1\")\n                    .build(),\n                SourcePostgresTableArgs.builder()\n                    .name(\"s2_table2\")\n                    .upstreamName(\"table2\")\n                    .upstreamSchemaName(\"schema2\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleSourcePostgres:\n    type: materialize:SourcePostgres\n    properties:\n      clusterName: quickstart\n      postgresConnection:\n        name: pg_connection\n      publication: mz_source\n      schemaName: schema\n      tables:\n        - name: s1_table1\n          upstreamName: table1\n          upstreamSchemaName: schema1\n        - name: s2_table2\n          upstreamName: table2\n          upstreamSchemaName: schema2\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nSources can be imported using the source id\n\n```sh\n $ pulumi import materialize:index/sourcePostgres:SourcePostgres example_source_postgres \u003cregion\u003e:\u003csource_id\u003e\n```\n\n Source id and information be found in the `mz_catalog.mz_sources` table The region is the region where the database is located (e.g. aws/us-east-1) ",
            "properties": {
                "clusterName": {
                    "type": "string",
                    "description": "The cluster to maintain this source.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "**Public Preview** Comment on an object in the database.\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the source database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "exposeProgress": {
                    "$ref": "#/types/materialize:index/SourcePostgresExposeProgress:SourcePostgresExposeProgress",
                    "description": "The name of the progress collection for the source. If this is not specified, the collection will be named `\u003csrc_name\u003e_progress`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the source.\n"
                },
                "ownershipRole": {
                    "type": "string",
                    "description": "The owernship role of the object.\n"
                },
                "postgresConnection": {
                    "$ref": "#/types/materialize:index/SourcePostgresPostgresConnection:SourcePostgresPostgresConnection",
                    "description": "The PostgreSQL connection to use in the source.\n"
                },
                "publication": {
                    "type": "string",
                    "description": "The PostgreSQL publication (the replication data set containing the tables to be streamed to Materialize).\n"
                },
                "qualifiedSqlName": {
                    "type": "string",
                    "description": "The fully qualified name of the source.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the source schema in Materialize. Defaults to `public`.\n"
                },
                "size": {
                    "type": "string",
                    "description": "The size of the cluster maintaining this source.\n"
                },
                "tables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/materialize:index/SourcePostgresTable:SourcePostgresTable"
                    },
                    "description": "Creates subsources for specific tables in the Postgres connection.\n"
                },
                "textColumns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Decode data as text for specific columns that contain PostgreSQL types that are unsupported in Materialize. Can only be updated in place when also updating a corresponding `table` attribute.\n"
                }
            },
            "required": [
                "clusterName",
                "name",
                "ownershipRole",
                "postgresConnection",
                "publication",
                "qualifiedSqlName",
                "region",
                "size",
                "tables"
            ],
            "inputProperties": {
                "clusterName": {
                    "type": "string",
                    "description": "The cluster to maintain this source.\n",
                    "willReplaceOnChanges": true
                },
                "comment": {
                    "type": "string",
                    "description": "**Public Preview** Comment on an object in the database.\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the source database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n",
                    "willReplaceOnChanges": true
                },
                "exposeProgress": {
                    "$ref": "#/types/materialize:index/SourcePostgresExposeProgress:SourcePostgresExposeProgress",
                    "description": "The name of the progress collection for the source. If this is not specified, the collection will be named `\u003csrc_name\u003e_progress`.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the source.\n"
                },
                "ownershipRole": {
                    "type": "string",
                    "description": "The owernship role of the object.\n"
                },
                "postgresConnection": {
                    "$ref": "#/types/materialize:index/SourcePostgresPostgresConnection:SourcePostgresPostgresConnection",
                    "description": "The PostgreSQL connection to use in the source.\n",
                    "willReplaceOnChanges": true
                },
                "publication": {
                    "type": "string",
                    "description": "The PostgreSQL publication (the replication data set containing the tables to be streamed to Materialize).\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                    "willReplaceOnChanges": true
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the source schema in Materialize. Defaults to `public`.\n",
                    "willReplaceOnChanges": true
                },
                "tables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/materialize:index/SourcePostgresTable:SourcePostgresTable"
                    },
                    "description": "Creates subsources for specific tables in the Postgres connection.\n"
                },
                "textColumns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Decode data as text for specific columns that contain PostgreSQL types that are unsupported in Materialize. Can only be updated in place when also updating a corresponding `table` attribute.\n"
                }
            },
            "requiredInputs": [
                "postgresConnection",
                "publication",
                "tables"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourcePostgres resources.\n",
                "properties": {
                    "clusterName": {
                        "type": "string",
                        "description": "The cluster to maintain this source.\n",
                        "willReplaceOnChanges": true
                    },
                    "comment": {
                        "type": "string",
                        "description": "**Public Preview** Comment on an object in the database.\n"
                    },
                    "databaseName": {
                        "type": "string",
                        "description": "The identifier for the source database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n",
                        "willReplaceOnChanges": true
                    },
                    "exposeProgress": {
                        "$ref": "#/types/materialize:index/SourcePostgresExposeProgress:SourcePostgresExposeProgress",
                        "description": "The name of the progress collection for the source. If this is not specified, the collection will be named `\u003csrc_name\u003e_progress`.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The identifier for the source.\n"
                    },
                    "ownershipRole": {
                        "type": "string",
                        "description": "The owernship role of the object.\n"
                    },
                    "postgresConnection": {
                        "$ref": "#/types/materialize:index/SourcePostgresPostgresConnection:SourcePostgresPostgresConnection",
                        "description": "The PostgreSQL connection to use in the source.\n",
                        "willReplaceOnChanges": true
                    },
                    "publication": {
                        "type": "string",
                        "description": "The PostgreSQL publication (the replication data set containing the tables to be streamed to Materialize).\n",
                        "willReplaceOnChanges": true
                    },
                    "qualifiedSqlName": {
                        "type": "string",
                        "description": "The fully qualified name of the source.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                        "willReplaceOnChanges": true
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "The identifier for the source schema in Materialize. Defaults to `public`.\n",
                        "willReplaceOnChanges": true
                    },
                    "size": {
                        "type": "string",
                        "description": "The size of the cluster maintaining this source.\n"
                    },
                    "tables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/materialize:index/SourcePostgresTable:SourcePostgresTable"
                        },
                        "description": "Creates subsources for specific tables in the Postgres connection.\n"
                    },
                    "textColumns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Decode data as text for specific columns that contain PostgreSQL types that are unsupported in Materialize. Can only be updated in place when also updating a corresponding `table` attribute.\n"
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/sourceWebhook:SourceWebhook": {
            "description": "**Private Preview** A webhook source describes a webhook you want Materialize to read data from.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\nconst exampleWebhook = new materialize.SourceWebhook(\"exampleWebhook\", {\n    clusterName: materialize_cluster.cluster.name,\n    bodyFormat: \"json\",\n    checkExpression: \"headers-\u003e'x-mz-api-key' = secret\",\n    includeHeaders: {\n        nots: [\"x-mz-api-key\"],\n    },\n    checkOptions: [\n        {\n            field: {\n                headers: true,\n            },\n        },\n        {\n            field: {\n                secret: {\n                    name: materialize_secret.password.name,\n                    databaseName: materialize_secret.password.database_name,\n                    schemaName: materialize_secret.password.schema_name,\n                },\n            },\n            alias: \"secret\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\nexample_webhook = materialize.SourceWebhook(\"exampleWebhook\",\n    cluster_name=materialize_cluster[\"cluster\"][\"name\"],\n    body_format=\"json\",\n    check_expression=\"headers-\u003e'x-mz-api-key' = secret\",\n    include_headers=materialize.SourceWebhookIncludeHeadersArgs(\n        nots=[\"x-mz-api-key\"],\n    ),\n    check_options=[\n        materialize.SourceWebhookCheckOptionArgs(\n            field=materialize.SourceWebhookCheckOptionFieldArgs(\n                headers=True,\n            ),\n        ),\n        materialize.SourceWebhookCheckOptionArgs(\n            field=materialize.SourceWebhookCheckOptionFieldArgs(\n                secret=materialize.SourceWebhookCheckOptionFieldSecretArgs(\n                    name=materialize_secret[\"password\"][\"name\"],\n                    database_name=materialize_secret[\"password\"][\"database_name\"],\n                    schema_name=materialize_secret[\"password\"][\"schema_name\"],\n                ),\n            ),\n            alias=\"secret\",\n        ),\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleWebhook = new Materialize.SourceWebhook(\"exampleWebhook\", new()\n    {\n        ClusterName = materialize_cluster.Cluster.Name,\n        BodyFormat = \"json\",\n        CheckExpression = \"headers-\u003e'x-mz-api-key' = secret\",\n        IncludeHeaders = new Materialize.Inputs.SourceWebhookIncludeHeadersArgs\n        {\n            Nots = new[]\n            {\n                \"x-mz-api-key\",\n            },\n        },\n        CheckOptions = new[]\n        {\n            new Materialize.Inputs.SourceWebhookCheckOptionArgs\n            {\n                Field = new Materialize.Inputs.SourceWebhookCheckOptionFieldArgs\n                {\n                    Headers = true,\n                },\n            },\n            new Materialize.Inputs.SourceWebhookCheckOptionArgs\n            {\n                Field = new Materialize.Inputs.SourceWebhookCheckOptionFieldArgs\n                {\n                    Secret = new Materialize.Inputs.SourceWebhookCheckOptionFieldSecretArgs\n                    {\n                        Name = materialize_secret.Password.Name,\n                        DatabaseName = materialize_secret.Password.Database_name,\n                        SchemaName = materialize_secret.Password.Schema_name,\n                    },\n                },\n                Alias = \"secret\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.NewSourceWebhook(ctx, \"exampleWebhook\", \u0026materialize.SourceWebhookArgs{\n\t\t\tClusterName:     pulumi.Any(materialize_cluster.Cluster.Name),\n\t\t\tBodyFormat:      pulumi.String(\"json\"),\n\t\t\tCheckExpression: pulumi.String(\"headers-\u003e'x-mz-api-key' = secret\"),\n\t\t\tIncludeHeaders: \u0026materialize.SourceWebhookIncludeHeadersArgs{\n\t\t\t\tNots: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"x-mz-api-key\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tCheckOptions: materialize.SourceWebhookCheckOptionArray{\n\t\t\t\t\u0026materialize.SourceWebhookCheckOptionArgs{\n\t\t\t\t\tField: \u0026materialize.SourceWebhookCheckOptionFieldArgs{\n\t\t\t\t\t\tHeaders: pulumi.Bool(true),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\u0026materialize.SourceWebhookCheckOptionArgs{\n\t\t\t\t\tField: \u0026materialize.SourceWebhookCheckOptionFieldArgs{\n\t\t\t\t\t\tSecret: \u0026materialize.SourceWebhookCheckOptionFieldSecretArgs{\n\t\t\t\t\t\t\tName:         pulumi.Any(materialize_secret.Password.Name),\n\t\t\t\t\t\t\tDatabaseName: pulumi.Any(materialize_secret.Password.Database_name),\n\t\t\t\t\t\t\tSchemaName:   pulumi.Any(materialize_secret.Password.Schema_name),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tAlias: pulumi.String(\"secret\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.SourceWebhook;\nimport com.pulumi.materialize.SourceWebhookArgs;\nimport com.pulumi.materialize.inputs.SourceWebhookIncludeHeadersArgs;\nimport com.pulumi.materialize.inputs.SourceWebhookCheckOptionArgs;\nimport com.pulumi.materialize.inputs.SourceWebhookCheckOptionFieldArgs;\nimport com.pulumi.materialize.inputs.SourceWebhookCheckOptionFieldSecretArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleWebhook = new SourceWebhook(\"exampleWebhook\", SourceWebhookArgs.builder()        \n            .clusterName(materialize_cluster.cluster().name())\n            .bodyFormat(\"json\")\n            .checkExpression(\"headers-\u003e'x-mz-api-key' = secret\")\n            .includeHeaders(SourceWebhookIncludeHeadersArgs.builder()\n                .nots(\"x-mz-api-key\")\n                .build())\n            .checkOptions(            \n                SourceWebhookCheckOptionArgs.builder()\n                    .field(SourceWebhookCheckOptionFieldArgs.builder()\n                        .headers(true)\n                        .build())\n                    .build(),\n                SourceWebhookCheckOptionArgs.builder()\n                    .field(SourceWebhookCheckOptionFieldArgs.builder()\n                        .secret(SourceWebhookCheckOptionFieldSecretArgs.builder()\n                            .name(materialize_secret.password().name())\n                            .databaseName(materialize_secret.password().database_name())\n                            .schemaName(materialize_secret.password().schema_name())\n                            .build())\n                        .build())\n                    .alias(\"secret\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleWebhook:\n    type: materialize:SourceWebhook\n    properties:\n      clusterName: ${materialize_cluster.cluster.name}\n      bodyFormat: json\n      checkExpression: headers-\u003e'x-mz-api-key' = secret\n      includeHeaders:\n        nots:\n          - x-mz-api-key\n      checkOptions:\n        - field:\n            headers: true\n        - field:\n            secret:\n              name: ${materialize_secret.password.name}\n              databaseName: ${materialize_secret.password.database_name}\n              schemaName: ${materialize_secret.password.schema_name}\n          alias: secret\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nSources can be imported using the source id\n\n```sh\n $ pulumi import materialize:index/sourceWebhook:SourceWebhook example_source_webhook \u003cregion\u003e:\u003csource_id\u003e\n```\n\n Source id and information be found in the `mz_catalog.mz_sources` table The region is the region where the database is located (e.g. aws/us-east-1) ",
            "properties": {
                "bodyFormat": {
                    "type": "string",
                    "description": "The body format of the webhook.\n"
                },
                "checkExpression": {
                    "type": "string",
                    "description": "The check expression for the webhook.\n"
                },
                "checkOptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/materialize:index/SourceWebhookCheckOption:SourceWebhookCheckOption"
                    },
                    "description": "The check options for the webhook.\n"
                },
                "clusterName": {
                    "type": "string",
                    "description": "The cluster to maintain this source.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "**Public Preview** Comment on an object in the database.\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the source database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "includeHeader": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/materialize:index/SourceWebhookIncludeHeader:SourceWebhookIncludeHeader"
                    },
                    "description": "Map a header value from a request into a column.\n"
                },
                "includeHeaders": {
                    "$ref": "#/types/materialize:index/SourceWebhookIncludeHeaders:SourceWebhookIncludeHeaders",
                    "description": "Include headers in the webhook.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the source.\n"
                },
                "ownershipRole": {
                    "type": "string",
                    "description": "The owernship role of the object.\n"
                },
                "qualifiedSqlName": {
                    "type": "string",
                    "description": "The fully qualified name of the source.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the source schema in Materialize. Defaults to `public`.\n"
                },
                "size": {
                    "type": "string",
                    "description": "The size of the cluster maintaining this source.\n"
                }
            },
            "required": [
                "bodyFormat",
                "name",
                "ownershipRole",
                "qualifiedSqlName",
                "region",
                "size"
            ],
            "inputProperties": {
                "bodyFormat": {
                    "type": "string",
                    "description": "The body format of the webhook.\n",
                    "willReplaceOnChanges": true
                },
                "checkExpression": {
                    "type": "string",
                    "description": "The check expression for the webhook.\n",
                    "willReplaceOnChanges": true
                },
                "checkOptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/materialize:index/SourceWebhookCheckOption:SourceWebhookCheckOption"
                    },
                    "description": "The check options for the webhook.\n",
                    "willReplaceOnChanges": true
                },
                "clusterName": {
                    "type": "string",
                    "description": "The cluster to maintain this source.\n",
                    "willReplaceOnChanges": true
                },
                "comment": {
                    "type": "string",
                    "description": "**Public Preview** Comment on an object in the database.\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the source database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n",
                    "willReplaceOnChanges": true
                },
                "includeHeader": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/materialize:index/SourceWebhookIncludeHeader:SourceWebhookIncludeHeader"
                    },
                    "description": "Map a header value from a request into a column.\n",
                    "willReplaceOnChanges": true
                },
                "includeHeaders": {
                    "$ref": "#/types/materialize:index/SourceWebhookIncludeHeaders:SourceWebhookIncludeHeaders",
                    "description": "Include headers in the webhook.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the source.\n"
                },
                "ownershipRole": {
                    "type": "string",
                    "description": "The owernship role of the object.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                    "willReplaceOnChanges": true
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the source schema in Materialize. Defaults to `public`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "bodyFormat"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceWebhook resources.\n",
                "properties": {
                    "bodyFormat": {
                        "type": "string",
                        "description": "The body format of the webhook.\n",
                        "willReplaceOnChanges": true
                    },
                    "checkExpression": {
                        "type": "string",
                        "description": "The check expression for the webhook.\n",
                        "willReplaceOnChanges": true
                    },
                    "checkOptions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/materialize:index/SourceWebhookCheckOption:SourceWebhookCheckOption"
                        },
                        "description": "The check options for the webhook.\n",
                        "willReplaceOnChanges": true
                    },
                    "clusterName": {
                        "type": "string",
                        "description": "The cluster to maintain this source.\n",
                        "willReplaceOnChanges": true
                    },
                    "comment": {
                        "type": "string",
                        "description": "**Public Preview** Comment on an object in the database.\n"
                    },
                    "databaseName": {
                        "type": "string",
                        "description": "The identifier for the source database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n",
                        "willReplaceOnChanges": true
                    },
                    "includeHeader": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/materialize:index/SourceWebhookIncludeHeader:SourceWebhookIncludeHeader"
                        },
                        "description": "Map a header value from a request into a column.\n",
                        "willReplaceOnChanges": true
                    },
                    "includeHeaders": {
                        "$ref": "#/types/materialize:index/SourceWebhookIncludeHeaders:SourceWebhookIncludeHeaders",
                        "description": "Include headers in the webhook.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The identifier for the source.\n"
                    },
                    "ownershipRole": {
                        "type": "string",
                        "description": "The owernship role of the object.\n"
                    },
                    "qualifiedSqlName": {
                        "type": "string",
                        "description": "The fully qualified name of the source.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                        "willReplaceOnChanges": true
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "The identifier for the source schema in Materialize. Defaults to `public`.\n",
                        "willReplaceOnChanges": true
                    },
                    "size": {
                        "type": "string",
                        "description": "The size of the cluster maintaining this source.\n"
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/systemParameter:SystemParameter": {
            "description": "Manages a system parameter in Materialize.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\n// ALTER SYSTEM SET cluster TO 'cluster_name';\nconst exampleSystemParameter = new materialize.SystemParameter(\"exampleSystemParameter\", {value: \"cluster_name\"});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\n# ALTER SYSTEM SET cluster TO 'cluster_name';\nexample_system_parameter = materialize.SystemParameter(\"exampleSystemParameter\", value=\"cluster_name\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // ALTER SYSTEM SET cluster TO 'cluster_name';\n    var exampleSystemParameter = new Materialize.SystemParameter(\"exampleSystemParameter\", new()\n    {\n        Value = \"cluster_name\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.NewSystemParameter(ctx, \"exampleSystemParameter\", \u0026materialize.SystemParameterArgs{\n\t\t\tValue: pulumi.String(\"cluster_name\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.SystemParameter;\nimport com.pulumi.materialize.SystemParameterArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleSystemParameter = new SystemParameter(\"exampleSystemParameter\", SystemParameterArgs.builder()        \n            .value(\"cluster_name\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # ALTER SYSTEM SET cluster TO 'cluster_name';\n  exampleSystemParameter:\n    type: materialize:SystemParameter\n    properties:\n      value: cluster_name\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the system parameter.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value to set for the system parameter.\n"
                }
            },
            "required": [
                "name",
                "region",
                "value"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of the system parameter.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                    "willReplaceOnChanges": true
                },
                "value": {
                    "type": "string",
                    "description": "The value to set for the system parameter.\n"
                }
            },
            "requiredInputs": [
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SystemParameter resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the system parameter.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                        "willReplaceOnChanges": true
                    },
                    "value": {
                        "type": "string",
                        "description": "The value to set for the system parameter.\n"
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/table:Table": {
            "description": "A table persists durable storage that can be written to, updated and seamlessly joined with other tables, views or sources\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\nconst simpleTable = new materialize.Table(\"simpleTable\", {\n    schemaName: materialize_schema.schema.name,\n    databaseName: materialize_database.database.name,\n    columns: [\n        {\n            name: \"column_1\",\n            type: \"text\",\n        },\n        {\n            name: \"column_2\",\n            type: \"int\",\n        },\n        {\n            name: \"column_3\",\n            type: \"text\",\n            nullable: true,\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\nsimple_table = materialize.Table(\"simpleTable\",\n    schema_name=materialize_schema[\"schema\"][\"name\"],\n    database_name=materialize_database[\"database\"][\"name\"],\n    columns=[\n        materialize.TableColumnArgs(\n            name=\"column_1\",\n            type=\"text\",\n        ),\n        materialize.TableColumnArgs(\n            name=\"column_2\",\n            type=\"int\",\n        ),\n        materialize.TableColumnArgs(\n            name=\"column_3\",\n            type=\"text\",\n            nullable=True,\n        ),\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var simpleTable = new Materialize.Table(\"simpleTable\", new()\n    {\n        SchemaName = materialize_schema.Schema.Name,\n        DatabaseName = materialize_database.Database.Name,\n        Columns = new[]\n        {\n            new Materialize.Inputs.TableColumnArgs\n            {\n                Name = \"column_1\",\n                Type = \"text\",\n            },\n            new Materialize.Inputs.TableColumnArgs\n            {\n                Name = \"column_2\",\n                Type = \"int\",\n            },\n            new Materialize.Inputs.TableColumnArgs\n            {\n                Name = \"column_3\",\n                Type = \"text\",\n                Nullable = true,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.NewTable(ctx, \"simpleTable\", \u0026materialize.TableArgs{\n\t\t\tSchemaName:   pulumi.Any(materialize_schema.Schema.Name),\n\t\t\tDatabaseName: pulumi.Any(materialize_database.Database.Name),\n\t\t\tColumns: materialize.TableColumnArray{\n\t\t\t\t\u0026materialize.TableColumnArgs{\n\t\t\t\t\tName: pulumi.String(\"column_1\"),\n\t\t\t\t\tType: pulumi.String(\"text\"),\n\t\t\t\t},\n\t\t\t\t\u0026materialize.TableColumnArgs{\n\t\t\t\t\tName: pulumi.String(\"column_2\"),\n\t\t\t\t\tType: pulumi.String(\"int\"),\n\t\t\t\t},\n\t\t\t\t\u0026materialize.TableColumnArgs{\n\t\t\t\t\tName:     pulumi.String(\"column_3\"),\n\t\t\t\t\tType:     pulumi.String(\"text\"),\n\t\t\t\t\tNullable: pulumi.Bool(true),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.Table;\nimport com.pulumi.materialize.TableArgs;\nimport com.pulumi.materialize.inputs.TableColumnArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var simpleTable = new Table(\"simpleTable\", TableArgs.builder()        \n            .schemaName(materialize_schema.schema().name())\n            .databaseName(materialize_database.database().name())\n            .columns(            \n                TableColumnArgs.builder()\n                    .name(\"column_1\")\n                    .type(\"text\")\n                    .build(),\n                TableColumnArgs.builder()\n                    .name(\"column_2\")\n                    .type(\"int\")\n                    .build(),\n                TableColumnArgs.builder()\n                    .name(\"column_3\")\n                    .type(\"text\")\n                    .nullable(true)\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  simpleTable:\n    type: materialize:Table\n    properties:\n      schemaName: ${materialize_schema.schema.name}\n      databaseName: ${materialize_database.database.name}\n      columns:\n        - name: column_1\n          type: text\n        - name: column_2\n          type: int\n        - name: column_3\n          type: text\n          nullable: true\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nTables can be imported using the table id\n\n```sh\n $ pulumi import materialize:index/table:Table example_table \u003cregion\u003e:\u003ctable_id\u003e\n```\n\n Table id and information be found in the `mz_catalog.mz_tables` table The region is the region where the database is located (e.g. aws/us-east-1) ",
            "properties": {
                "columns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/materialize:index/TableColumn:TableColumn"
                    },
                    "description": "Column of the table.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "**Public Preview** Comment on an object in the database.\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the table database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the table.\n"
                },
                "ownershipRole": {
                    "type": "string",
                    "description": "The owernship role of the object.\n"
                },
                "qualifiedSqlName": {
                    "type": "string",
                    "description": "The fully qualified name of the table.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the table schema in Materialize. Defaults to `public`.\n"
                }
            },
            "required": [
                "columns",
                "name",
                "ownershipRole",
                "qualifiedSqlName",
                "region"
            ],
            "inputProperties": {
                "columns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/materialize:index/TableColumn:TableColumn"
                    },
                    "description": "Column of the table.\n",
                    "willReplaceOnChanges": true
                },
                "comment": {
                    "type": "string",
                    "description": "**Public Preview** Comment on an object in the database.\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the table database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the table.\n"
                },
                "ownershipRole": {
                    "type": "string",
                    "description": "The owernship role of the object.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                    "willReplaceOnChanges": true
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the table schema in Materialize. Defaults to `public`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "columns"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Table resources.\n",
                "properties": {
                    "columns": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/materialize:index/TableColumn:TableColumn"
                        },
                        "description": "Column of the table.\n",
                        "willReplaceOnChanges": true
                    },
                    "comment": {
                        "type": "string",
                        "description": "**Public Preview** Comment on an object in the database.\n"
                    },
                    "databaseName": {
                        "type": "string",
                        "description": "The identifier for the table database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The identifier for the table.\n"
                    },
                    "ownershipRole": {
                        "type": "string",
                        "description": "The owernship role of the object.\n"
                    },
                    "qualifiedSqlName": {
                        "type": "string",
                        "description": "The fully qualified name of the table.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                        "willReplaceOnChanges": true
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "The identifier for the table schema in Materialize. Defaults to `public`.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/type:Type": {
            "description": "A custom types, which let you create named versions of anonymous types.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\nconst listType = new materialize.Type(\"listType\", {\n    schemaName: materialize_schema.schema.name,\n    databaseName: materialize_database.database.name,\n    listProperties: {\n        elementType: \"int4\",\n    },\n});\nconst mapType = new materialize.Type(\"mapType\", {\n    schemaName: materialize_schema.schema.name,\n    databaseName: materialize_database.database.name,\n    mapProperties: {\n        keyType: \"text\",\n        valueType: \"int4\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\nlist_type = materialize.Type(\"listType\",\n    schema_name=materialize_schema[\"schema\"][\"name\"],\n    database_name=materialize_database[\"database\"][\"name\"],\n    list_properties=materialize.TypeListPropertiesArgs(\n        element_type=\"int4\",\n    ))\nmap_type = materialize.Type(\"mapType\",\n    schema_name=materialize_schema[\"schema\"][\"name\"],\n    database_name=materialize_database[\"database\"][\"name\"],\n    map_properties=materialize.TypeMapPropertiesArgs(\n        key_type=\"text\",\n        value_type=\"int4\",\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var listType = new Materialize.Type(\"listType\", new()\n    {\n        SchemaName = materialize_schema.Schema.Name,\n        DatabaseName = materialize_database.Database.Name,\n        ListProperties = new Materialize.Inputs.TypeListPropertiesArgs\n        {\n            ElementType = \"int4\",\n        },\n    });\n\n    var mapType = new Materialize.Type(\"mapType\", new()\n    {\n        SchemaName = materialize_schema.Schema.Name,\n        DatabaseName = materialize_database.Database.Name,\n        MapProperties = new Materialize.Inputs.TypeMapPropertiesArgs\n        {\n            KeyType = \"text\",\n            ValueType = \"int4\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.NewType(ctx, \"listType\", \u0026materialize.TypeArgs{\n\t\t\tSchemaName:   pulumi.Any(materialize_schema.Schema.Name),\n\t\t\tDatabaseName: pulumi.Any(materialize_database.Database.Name),\n\t\t\tListProperties: \u0026materialize.TypeListPropertiesArgs{\n\t\t\t\tElementType: pulumi.String(\"int4\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = materialize.NewType(ctx, \"mapType\", \u0026materialize.TypeArgs{\n\t\t\tSchemaName:   pulumi.Any(materialize_schema.Schema.Name),\n\t\t\tDatabaseName: pulumi.Any(materialize_database.Database.Name),\n\t\t\tMapProperties: \u0026materialize.TypeMapPropertiesArgs{\n\t\t\t\tKeyType:   pulumi.String(\"text\"),\n\t\t\t\tValueType: pulumi.String(\"int4\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.Type;\nimport com.pulumi.materialize.TypeArgs;\nimport com.pulumi.materialize.inputs.TypeListPropertiesArgs;\nimport com.pulumi.materialize.inputs.TypeMapPropertiesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var listType = new Type(\"listType\", TypeArgs.builder()        \n            .schemaName(materialize_schema.schema().name())\n            .databaseName(materialize_database.database().name())\n            .listProperties(TypeListPropertiesArgs.builder()\n                .elementType(\"int4\")\n                .build())\n            .build());\n\n        var mapType = new Type(\"mapType\", TypeArgs.builder()        \n            .schemaName(materialize_schema.schema().name())\n            .databaseName(materialize_database.database().name())\n            .mapProperties(TypeMapPropertiesArgs.builder()\n                .keyType(\"text\")\n                .valueType(\"int4\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  listType:\n    type: materialize:Type\n    properties:\n      schemaName: ${materialize_schema.schema.name}\n      databaseName: ${materialize_database.database.name}\n      listProperties:\n        elementType: int4\n  mapType:\n    type: materialize:Type\n    properties:\n      schemaName: ${materialize_schema.schema.name}\n      databaseName: ${materialize_database.database.name}\n      mapProperties:\n        keyType: text\n        valueType: int4\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nTypes can be imported using the type id\n\n```sh\n $ pulumi import materialize:index/type:Type example_type \u003cregion\u003e:\u003ctype_id\u003e\n```\n\n Type id and information be found in the `mz_catalog.mz_types` table The region is the region where the database is located (e.g. aws/us-east-1) ",
            "properties": {
                "category": {
                    "type": "string",
                    "description": "Type category.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "**Public Preview** Comment on an object in the database.\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the type database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "listProperties": {
                    "$ref": "#/types/materialize:index/TypeListProperties:TypeListProperties",
                    "description": "List properties.\n"
                },
                "mapProperties": {
                    "$ref": "#/types/materialize:index/TypeMapProperties:TypeMapProperties",
                    "description": "Map properties.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the type.\n"
                },
                "ownershipRole": {
                    "type": "string",
                    "description": "The owernship role of the object.\n"
                },
                "qualifiedSqlName": {
                    "type": "string",
                    "description": "The fully qualified name of the type.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n"
                },
                "rowProperties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/materialize:index/TypeRowProperty:TypeRowProperty"
                    },
                    "description": "Row properties.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the type schema in Materialize. Defaults to `public`.\n"
                }
            },
            "required": [
                "category",
                "name",
                "ownershipRole",
                "qualifiedSqlName",
                "region"
            ],
            "inputProperties": {
                "comment": {
                    "type": "string",
                    "description": "**Public Preview** Comment on an object in the database.\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the type database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n",
                    "willReplaceOnChanges": true
                },
                "listProperties": {
                    "$ref": "#/types/materialize:index/TypeListProperties:TypeListProperties",
                    "description": "List properties.\n",
                    "willReplaceOnChanges": true
                },
                "mapProperties": {
                    "$ref": "#/types/materialize:index/TypeMapProperties:TypeMapProperties",
                    "description": "Map properties.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the type.\n",
                    "willReplaceOnChanges": true
                },
                "ownershipRole": {
                    "type": "string",
                    "description": "The owernship role of the object.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                    "willReplaceOnChanges": true
                },
                "rowProperties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/materialize:index/TypeRowProperty:TypeRowProperty"
                    },
                    "description": "Row properties.\n",
                    "willReplaceOnChanges": true
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the type schema in Materialize. Defaults to `public`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Type resources.\n",
                "properties": {
                    "category": {
                        "type": "string",
                        "description": "Type category.\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "**Public Preview** Comment on an object in the database.\n"
                    },
                    "databaseName": {
                        "type": "string",
                        "description": "The identifier for the type database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n",
                        "willReplaceOnChanges": true
                    },
                    "listProperties": {
                        "$ref": "#/types/materialize:index/TypeListProperties:TypeListProperties",
                        "description": "List properties.\n",
                        "willReplaceOnChanges": true
                    },
                    "mapProperties": {
                        "$ref": "#/types/materialize:index/TypeMapProperties:TypeMapProperties",
                        "description": "Map properties.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The identifier for the type.\n",
                        "willReplaceOnChanges": true
                    },
                    "ownershipRole": {
                        "type": "string",
                        "description": "The owernship role of the object.\n"
                    },
                    "qualifiedSqlName": {
                        "type": "string",
                        "description": "The fully qualified name of the type.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                        "willReplaceOnChanges": true
                    },
                    "rowProperties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/materialize:index/TypeRowProperty:TypeRowProperty"
                        },
                        "description": "Row properties.\n",
                        "willReplaceOnChanges": true
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "The identifier for the type schema in Materialize. Defaults to `public`.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/user:User": {
            "description": "The user resource allows you to invite and delete users in your Materialize organization.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\nconst exampleUser = new materialize.User(\"exampleUser\", {\n    email: \"example-user@example.com\",\n    roles: [\n        \"Member\",\n        \"Admin\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\nexample_user = materialize.User(\"exampleUser\",\n    email=\"example-user@example.com\",\n    roles=[\n        \"Member\",\n        \"Admin\",\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleUser = new Materialize.User(\"exampleUser\", new()\n    {\n        Email = \"example-user@example.com\",\n        Roles = new[]\n        {\n            \"Member\",\n            \"Admin\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.NewUser(ctx, \"exampleUser\", \u0026materialize.UserArgs{\n\t\t\tEmail: pulumi.String(\"example-user@example.com\"),\n\t\t\tRoles: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"Member\"),\n\t\t\t\tpulumi.String(\"Admin\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.User;\nimport com.pulumi.materialize.UserArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleUser = new User(\"exampleUser\", UserArgs.builder()        \n            .email(\"example-user@example.com\")\n            .roles(            \n                \"Member\",\n                \"Admin\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleUser:\n    type: materialize:User\n    properties:\n      email: example-user@example.com\n      roles:\n        - Member\n        - Admin\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nUsers can be imported using the user id. The user id can be retrieved by using the `materialize_user` data source.\n\n```sh\n $ pulumi import materialize:index/user:User example_user \u003cuser_id\u003e\n```\n\n ",
            "properties": {
                "authProvider": {
                    "type": "string",
                    "description": "The authentication provider for the user.\n"
                },
                "email": {
                    "type": "string",
                    "description": "The email address of the user. This must be unique across all users in the organization.\n"
                },
                "metadata": {
                    "type": "string"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The roles to assign to the user. Allowed values are 'Member' and 'Admin'.\n"
                },
                "sendActivationEmail": {
                    "type": "boolean",
                    "description": "Whether to send an email either inviting the user to activate their account, if the user is new, or inviting the user to join the organization, if the user already exists in another organization. Changing this property after the resource is created has no effect.\n"
                },
                "verified": {
                    "type": "boolean"
                }
            },
            "required": [
                "authProvider",
                "email",
                "metadata",
                "roles",
                "verified"
            ],
            "inputProperties": {
                "email": {
                    "type": "string",
                    "description": "The email address of the user. This must be unique across all users in the organization.\n",
                    "willReplaceOnChanges": true
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The roles to assign to the user. Allowed values are 'Member' and 'Admin'.\n"
                },
                "sendActivationEmail": {
                    "type": "boolean",
                    "description": "Whether to send an email either inviting the user to activate their account, if the user is new, or inviting the user to join the organization, if the user already exists in another organization. Changing this property after the resource is created has no effect.\n"
                }
            },
            "requiredInputs": [
                "email",
                "roles"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering User resources.\n",
                "properties": {
                    "authProvider": {
                        "type": "string",
                        "description": "The authentication provider for the user.\n"
                    },
                    "email": {
                        "type": "string",
                        "description": "The email address of the user. This must be unique across all users in the organization.\n",
                        "willReplaceOnChanges": true
                    },
                    "metadata": {
                        "type": "string"
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The roles to assign to the user. Allowed values are 'Member' and 'Admin'.\n"
                    },
                    "sendActivationEmail": {
                        "type": "boolean",
                        "description": "Whether to send an email either inviting the user to activate their account, if the user is new, or inviting the user to join the organization, if the user already exists in another organization. Changing this property after the resource is created has no effect.\n"
                    },
                    "verified": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/view:View": {
            "description": "Views represent queries of sources and other views that you want to save for repeated execution.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\nconst simpleViewView = new materialize.View(\"simpleViewView\", {\n    schemaName: materialize_schema.schema.name,\n    databaseName: materialize_database.database.name,\n    statement: `SELECT\n    *\nFROM\n    ${materialize_table.simple_table.qualified_name}\n`,\n}, {\n    dependsOn: [materialize_table.simple_table],\n});\nconst simpleViewIndex_viewView = new materialize.View(\"simpleViewIndex/viewView\", {\n    schemaName: materialize_schema.schema.name,\n    databaseName: materialize_database.database.name,\n    statement: \"SELECT * FROM materialize.public.simple_table\",\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\nsimple_view_view = materialize.View(\"simpleViewView\",\n    schema_name=materialize_schema[\"schema\"][\"name\"],\n    database_name=materialize_database[\"database\"][\"name\"],\n    statement=f\"\"\"SELECT\n    *\nFROM\n    {materialize_table[\"simple_table\"][\"qualified_name\"]}\n\"\"\",\n    opts=pulumi.ResourceOptions(depends_on=[materialize_table[\"simple_table\"]]))\nsimple_view_index_view_view = materialize.View(\"simpleViewIndex/viewView\",\n    schema_name=materialize_schema[\"schema\"][\"name\"],\n    database_name=materialize_database[\"database\"][\"name\"],\n    statement=\"SELECT * FROM materialize.public.simple_table\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var simpleViewView = new Materialize.View(\"simpleViewView\", new()\n    {\n        SchemaName = materialize_schema.Schema.Name,\n        DatabaseName = materialize_database.Database.Name,\n        Statement = @$\"SELECT\n    *\nFROM\n    {materialize_table.Simple_table.Qualified_name}\n\",\n    }, new CustomResourceOptions\n    {\n        DependsOn = new[]\n        {\n            materialize_table.Simple_table,\n        },\n    });\n\n    var simpleViewIndex_viewView = new Materialize.View(\"simpleViewIndex/viewView\", new()\n    {\n        SchemaName = materialize_schema.Schema.Name,\n        DatabaseName = materialize_database.Database.Name,\n        Statement = \"SELECT * FROM materialize.public.simple_table\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.NewView(ctx, \"simpleViewView\", \u0026materialize.ViewArgs{\n\t\t\tSchemaName:   pulumi.Any(materialize_schema.Schema.Name),\n\t\t\tDatabaseName: pulumi.Any(materialize_database.Database.Name),\n\t\t\tStatement:    pulumi.String(fmt.Sprintf(\"SELECT\\n    *\\nFROM\\n    %v\\n\", materialize_table.Simple_table.Qualified_name)),\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\tmaterialize_table.Simple_table,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = materialize.NewView(ctx, \"simpleViewIndex/viewView\", \u0026materialize.ViewArgs{\n\t\t\tSchemaName:   pulumi.Any(materialize_schema.Schema.Name),\n\t\t\tDatabaseName: pulumi.Any(materialize_database.Database.Name),\n\t\t\tStatement:    pulumi.String(\"SELECT * FROM materialize.public.simple_table\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.View;\nimport com.pulumi.materialize.ViewArgs;\nimport com.pulumi.resources.CustomResourceOptions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var simpleViewView = new View(\"simpleViewView\", ViewArgs.builder()        \n            .schemaName(materialize_schema.schema().name())\n            .databaseName(materialize_database.database().name())\n            .statement(\"\"\"\nSELECT\n    *\nFROM\n    %s\n\", materialize_table.simple_table().qualified_name()))\n            .build(), CustomResourceOptions.builder()\n                .dependsOn(materialize_table.simple_table())\n                .build());\n\n        var simpleViewIndex_viewView = new View(\"simpleViewIndex/viewView\", ViewArgs.builder()        \n            .schemaName(materialize_schema.schema().name())\n            .databaseName(materialize_database.database().name())\n            .statement(\"SELECT * FROM materialize.public.simple_table\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  simpleViewView:\n    type: materialize:View\n    properties:\n      schemaName: ${materialize_schema.schema.name}\n      databaseName: ${materialize_database.database.name}\n      statement: |\n        SELECT\n            *\n        FROM\n            ${materialize_table.simple_table.qualified_name}\n    options:\n      dependson:\n        - ${materialize_table.simple_table}\n  simpleViewIndex/viewView:\n    type: materialize:View\n    properties:\n      schemaName: ${materialize_schema.schema.name}\n      databaseName: ${materialize_database.database.name}\n      statement: SELECT * FROM materialize.public.simple_table\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nViews can be imported using the view id\n\n```sh\n $ pulumi import materialize:index/view:View example_view \u003cregion\u003e:\u003cview_id\u003e\n```\n\n View id and information be found in the `mz_catalog.mz_views` The region is the region where the database is located (e.g. aws/us-east-1) ",
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "**Public Preview** Comment on an object in the database.\n"
                },
                "createSql": {
                    "type": "string",
                    "description": "The SQL statement used to create the view.\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the view database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the view.\n"
                },
                "ownershipRole": {
                    "type": "string",
                    "description": "The owernship role of the object.\n"
                },
                "qualifiedSqlName": {
                    "type": "string",
                    "description": "The fully qualified name of the view.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the view schema in Materialize. Defaults to `public`.\n"
                },
                "statement": {
                    "type": "string",
                    "description": "The SQL statement for the view.\n"
                }
            },
            "required": [
                "createSql",
                "name",
                "ownershipRole",
                "qualifiedSqlName",
                "region",
                "statement"
            ],
            "inputProperties": {
                "comment": {
                    "type": "string",
                    "description": "**Public Preview** Comment on an object in the database.\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the view database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the view.\n"
                },
                "ownershipRole": {
                    "type": "string",
                    "description": "The owernship role of the object.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                    "willReplaceOnChanges": true
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the view schema in Materialize. Defaults to `public`.\n",
                    "willReplaceOnChanges": true
                },
                "statement": {
                    "type": "string",
                    "description": "The SQL statement for the view.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "statement"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering View resources.\n",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "**Public Preview** Comment on an object in the database.\n"
                    },
                    "createSql": {
                        "type": "string",
                        "description": "The SQL statement used to create the view.\n"
                    },
                    "databaseName": {
                        "type": "string",
                        "description": "The identifier for the view database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The identifier for the view.\n"
                    },
                    "ownershipRole": {
                        "type": "string",
                        "description": "The owernship role of the object.\n"
                    },
                    "qualifiedSqlName": {
                        "type": "string",
                        "description": "The fully qualified name of the view.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                        "willReplaceOnChanges": true
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "The identifier for the view schema in Materialize. Defaults to `public`.\n",
                        "willReplaceOnChanges": true
                    },
                    "statement": {
                        "type": "string",
                        "description": "The SQL statement for the view.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "materialize:index/getClusterReplicas:GetClusterReplicas": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\nconst all = materialize.GetClusterReplicas({});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\nall = materialize.get_cluster_replicas()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var all = Materialize.GetClusterReplicas.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.GetClusterReplicas(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.MaterializeFunctions;\nimport com.pulumi.materialize.inputs.GetClusterReplicasArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var all = MaterializeFunctions.GetClusterReplicas();\n\n    }\n}\n```\n```yaml\nvariables:\n  all:\n    fn::invoke:\n      Function: materialize:GetClusterReplicas\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking GetClusterReplicas.\n",
                "properties": {
                    "region": {
                        "type": "string",
                        "description": "The region in which the resource is located.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by GetClusterReplicas.\n",
                "properties": {
                    "clusterReplicas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/materialize:index/GetClusterReplicasClusterReplica:GetClusterReplicasClusterReplica"
                        },
                        "description": "The cluster replicas in the account\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region in which the resource is located.\n"
                    }
                },
                "type": "object",
                "required": [
                    "clusterReplicas",
                    "region",
                    "id"
                ]
            }
        },
        "materialize:index/getClusters:GetClusters": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\nconst all = materialize.GetClusters({});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\nall = materialize.get_clusters()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var all = Materialize.GetClusters.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.GetClusters(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.MaterializeFunctions;\nimport com.pulumi.materialize.inputs.GetClustersArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var all = MaterializeFunctions.GetClusters();\n\n    }\n}\n```\n```yaml\nvariables:\n  all:\n    fn::invoke:\n      Function: materialize:GetClusters\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking GetClusters.\n",
                "properties": {
                    "region": {
                        "type": "string",
                        "description": "The region in which the resource is located.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by GetClusters.\n",
                "properties": {
                    "clusters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/materialize:index/GetClustersCluster:GetClustersCluster"
                        },
                        "description": "The clusters in the account\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region in which the resource is located.\n"
                    }
                },
                "type": "object",
                "required": [
                    "clusters",
                    "region",
                    "id"
                ]
            }
        },
        "materialize:index/getConnections:GetConnections": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\nconst all = materialize.GetConnections({});\nconst materialize = materialize.GetConnections({\n    databaseName: \"materialize\",\n});\nconst materializeSchema = materialize.GetConnections({\n    databaseName: \"materialize\",\n    schemaName: \"schema\",\n});\nconst byId = materialize.GetConnections({\n    connectionId: \"u1234\",\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\nall = materialize.get_connections()\nmaterialize = materialize.get_connections(database_name=\"materialize\")\nmaterialize_schema = materialize.get_connections(database_name=\"materialize\",\n    schema_name=\"schema\")\nby_id = materialize.get_connections(connection_id=\"u1234\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var all = Materialize.GetConnections.Invoke();\n\n    var materialize = Materialize.GetConnections.Invoke(new()\n    {\n        DatabaseName = \"materialize\",\n    });\n\n    var materializeSchema = Materialize.GetConnections.Invoke(new()\n    {\n        DatabaseName = \"materialize\",\n        SchemaName = \"schema\",\n    });\n\n    var byId = Materialize.GetConnections.Invoke(new()\n    {\n        ConnectionId = \"u1234\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.GetConnections(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = materialize.GetConnections(ctx, \u0026materialize.GetConnectionsArgs{\n\t\t\tDatabaseName: pulumi.StringRef(\"materialize\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = materialize.GetConnections(ctx, \u0026materialize.GetConnectionsArgs{\n\t\t\tDatabaseName: pulumi.StringRef(\"materialize\"),\n\t\t\tSchemaName:   pulumi.StringRef(\"schema\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = materialize.GetConnections(ctx, \u0026materialize.GetConnectionsArgs{\n\t\t\tConnectionId: pulumi.StringRef(\"u1234\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.MaterializeFunctions;\nimport com.pulumi.materialize.inputs.GetConnectionsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var all = MaterializeFunctions.GetConnections();\n\n        final var materialize = MaterializeFunctions.GetConnections(GetConnectionsArgs.builder()\n            .databaseName(\"materialize\")\n            .build());\n\n        final var materializeSchema = MaterializeFunctions.GetConnections(GetConnectionsArgs.builder()\n            .databaseName(\"materialize\")\n            .schemaName(\"schema\")\n            .build());\n\n        final var byId = MaterializeFunctions.GetConnections(GetConnectionsArgs.builder()\n            .connectionId(\"u1234\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  all:\n    fn::invoke:\n      Function: materialize:GetConnections\n      Arguments: {}\n  materialize:\n    fn::invoke:\n      Function: materialize:GetConnections\n      Arguments:\n        databaseName: materialize\n  materializeSchema:\n    fn::invoke:\n      Function: materialize:GetConnections\n      Arguments:\n        databaseName: materialize\n        schemaName: schema\n  byId:\n    fn::invoke:\n      Function: materialize:GetConnections\n      Arguments:\n        connectionId: u1234\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking GetConnections.\n",
                "properties": {
                    "connectionId": {
                        "type": "string",
                        "description": "Limit connections to a specific connection ID\n"
                    },
                    "databaseName": {
                        "type": "string",
                        "description": "Limit connections to a specific database\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region in which the resource is located.\n"
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "Limit connections to a specific schema within a specific database\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by GetConnections.\n",
                "properties": {
                    "connectionId": {
                        "type": "string",
                        "description": "Limit connections to a specific connection ID\n"
                    },
                    "connections": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/materialize:index/GetConnectionsConnection:GetConnectionsConnection"
                        },
                        "description": "The connections in the account\n"
                    },
                    "databaseName": {
                        "type": "string",
                        "description": "Limit connections to a specific database\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region in which the resource is located.\n"
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "Limit connections to a specific schema within a specific database\n"
                    }
                },
                "type": "object",
                "required": [
                    "connections",
                    "region",
                    "id"
                ]
            }
        },
        "materialize:index/getCurrentCluster:GetCurrentCluster": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\nconst current = materialize.GetCurrentCluster({});\nexport const clusterName = current.then(current =\u003e current.name);\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\ncurrent = materialize.get_current_cluster()\npulumi.export(\"clusterName\", current.name)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var current = Materialize.GetCurrentCluster.Invoke();\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"clusterName\"] = current.Apply(getCurrentClusterResult =\u003e getCurrentClusterResult.Name),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcurrent, err := materialize.GetCurrentCluster(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"clusterName\", current.Name)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.MaterializeFunctions;\nimport com.pulumi.materialize.inputs.GetCurrentClusterArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var current = MaterializeFunctions.GetCurrentCluster();\n\n        ctx.export(\"clusterName\", current.applyValue(getCurrentClusterResult -\u003e getCurrentClusterResult.name()));\n    }\n}\n```\n```yaml\nvariables:\n  current:\n    fn::invoke:\n      Function: materialize:GetCurrentCluster\n      Arguments: {}\noutputs:\n  clusterName: ${current.name}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking GetCurrentCluster.\n",
                "properties": {
                    "region": {
                        "type": "string",
                        "description": "The region in which the resource is located.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by GetCurrentCluster.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region in which the resource is located.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "region",
                    "id"
                ]
            }
        },
        "materialize:index/getCurrentDatabase:GetCurrentDatabase": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\nconst current = materialize.GetCurrentDatabase({});\nexport const databaseName = current.then(current =\u003e current.name);\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\ncurrent = materialize.get_current_database()\npulumi.export(\"databaseName\", current.name)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var current = Materialize.GetCurrentDatabase.Invoke();\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"databaseName\"] = current.Apply(getCurrentDatabaseResult =\u003e getCurrentDatabaseResult.Name),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcurrent, err := materialize.GetCurrentDatabase(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"databaseName\", current.Name)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.MaterializeFunctions;\nimport com.pulumi.materialize.inputs.GetCurrentDatabaseArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var current = MaterializeFunctions.GetCurrentDatabase();\n\n        ctx.export(\"databaseName\", current.applyValue(getCurrentDatabaseResult -\u003e getCurrentDatabaseResult.name()));\n    }\n}\n```\n```yaml\nvariables:\n  current:\n    fn::invoke:\n      Function: materialize:GetCurrentDatabase\n      Arguments: {}\noutputs:\n  databaseName: ${current.name}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking GetCurrentDatabase.\n",
                "properties": {
                    "region": {
                        "type": "string",
                        "description": "The region in which the resource is located.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by GetCurrentDatabase.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region in which the resource is located.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "region",
                    "id"
                ]
            }
        },
        "materialize:index/getDatabases:GetDatabases": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\nconst all = materialize.GetDatabases({});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\nall = materialize.get_databases()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var all = Materialize.GetDatabases.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.GetDatabases(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.MaterializeFunctions;\nimport com.pulumi.materialize.inputs.GetDatabasesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var all = MaterializeFunctions.GetDatabases();\n\n    }\n}\n```\n```yaml\nvariables:\n  all:\n    fn::invoke:\n      Function: materialize:GetDatabases\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking GetDatabases.\n",
                "properties": {
                    "region": {
                        "type": "string",
                        "description": "The region in which the resource is located.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by GetDatabases.\n",
                "properties": {
                    "databases": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/materialize:index/GetDatabasesDatabase:GetDatabasesDatabase"
                        },
                        "description": "The databases in the account\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region in which the resource is located.\n"
                    }
                },
                "type": "object",
                "required": [
                    "databases",
                    "region",
                    "id"
                ]
            }
        },
        "materialize:index/getEgressIps:GetEgressIps": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\nconst all = materialize.GetEgressIps({});\nexport const ips = all.then(all =\u003e all.egressIps);\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\nall = materialize.get_egress_ips()\npulumi.export(\"ips\", all.egress_ips)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var all = Materialize.GetEgressIps.Invoke();\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"ips\"] = all.Apply(getEgressIpsResult =\u003e getEgressIpsResult.EgressIps),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tall, err := materialize.GetEgressIps(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"ips\", all.EgressIps)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.MaterializeFunctions;\nimport com.pulumi.materialize.inputs.GetEgressIpsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var all = MaterializeFunctions.GetEgressIps();\n\n        ctx.export(\"ips\", all.applyValue(getEgressIpsResult -\u003e getEgressIpsResult.egressIps()));\n    }\n}\n```\n```yaml\nvariables:\n  all:\n    fn::invoke:\n      Function: materialize:GetEgressIps\n      Arguments: {}\noutputs:\n  ips: ${all.egressIps}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking GetEgressIps.\n",
                "properties": {
                    "region": {
                        "type": "string",
                        "description": "The region in which the resource is located.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by GetEgressIps.\n",
                "properties": {
                    "egressIps": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The egress IPs in the account\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region in which the resource is located.\n"
                    }
                },
                "type": "object",
                "required": [
                    "egressIps",
                    "region",
                    "id"
                ]
            }
        },
        "materialize:index/getIndexes:GetIndexes": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\nconst all = materialize.GetIndexes({});\nconst materialize = materialize.GetIndexes({\n    databaseName: \"materialize\",\n});\nconst materializeSchema = materialize.GetIndexes({\n    databaseName: \"materialize\",\n    schemaName: \"schema\",\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\nall = materialize.get_indexes()\nmaterialize = materialize.get_indexes(database_name=\"materialize\")\nmaterialize_schema = materialize.get_indexes(database_name=\"materialize\",\n    schema_name=\"schema\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var all = Materialize.GetIndexes.Invoke();\n\n    var materialize = Materialize.GetIndexes.Invoke(new()\n    {\n        DatabaseName = \"materialize\",\n    });\n\n    var materializeSchema = Materialize.GetIndexes.Invoke(new()\n    {\n        DatabaseName = \"materialize\",\n        SchemaName = \"schema\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.GetIndexes(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = materialize.GetIndexes(ctx, \u0026materialize.GetIndexesArgs{\n\t\t\tDatabaseName: pulumi.StringRef(\"materialize\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = materialize.GetIndexes(ctx, \u0026materialize.GetIndexesArgs{\n\t\t\tDatabaseName: pulumi.StringRef(\"materialize\"),\n\t\t\tSchemaName:   pulumi.StringRef(\"schema\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.MaterializeFunctions;\nimport com.pulumi.materialize.inputs.GetIndexesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var all = MaterializeFunctions.GetIndexes();\n\n        final var materialize = MaterializeFunctions.GetIndexes(GetIndexesArgs.builder()\n            .databaseName(\"materialize\")\n            .build());\n\n        final var materializeSchema = MaterializeFunctions.GetIndexes(GetIndexesArgs.builder()\n            .databaseName(\"materialize\")\n            .schemaName(\"schema\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  all:\n    fn::invoke:\n      Function: materialize:GetIndexes\n      Arguments: {}\n  materialize:\n    fn::invoke:\n      Function: materialize:GetIndexes\n      Arguments:\n        databaseName: materialize\n  materializeSchema:\n    fn::invoke:\n      Function: materialize:GetIndexes\n      Arguments:\n        databaseName: materialize\n        schemaName: schema\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking GetIndexes.\n",
                "properties": {
                    "databaseName": {
                        "type": "string",
                        "description": "Limit indexes to a specific database\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region in which the resource is located.\n"
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "Limit indexes to a specific schema within a specific database\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by GetIndexes.\n",
                "properties": {
                    "databaseName": {
                        "type": "string",
                        "description": "Limit indexes to a specific database\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "indexes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/materialize:index/GetIndexesIndex:GetIndexesIndex"
                        },
                        "description": "The indexes in the account\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region in which the resource is located.\n"
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "Limit indexes to a specific schema within a specific database\n"
                    }
                },
                "type": "object",
                "required": [
                    "indexes",
                    "region",
                    "id"
                ]
            }
        },
        "materialize:index/getMaterializedViews:GetMaterializedViews": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\nconst all = materialize.GetMaterializedViews({});\nconst materialize = materialize.GetMaterializedViews({\n    databaseName: \"materialize\",\n});\nconst materializeSchema = materialize.GetMaterializedViews({\n    databaseName: \"materialize\",\n    schemaName: \"schema\",\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\nall = materialize.get_materialized_views()\nmaterialize = materialize.get_materialized_views(database_name=\"materialize\")\nmaterialize_schema = materialize.get_materialized_views(database_name=\"materialize\",\n    schema_name=\"schema\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var all = Materialize.GetMaterializedViews.Invoke();\n\n    var materialize = Materialize.GetMaterializedViews.Invoke(new()\n    {\n        DatabaseName = \"materialize\",\n    });\n\n    var materializeSchema = Materialize.GetMaterializedViews.Invoke(new()\n    {\n        DatabaseName = \"materialize\",\n        SchemaName = \"schema\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.GetMaterializedViews(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = materialize.GetMaterializedViews(ctx, \u0026materialize.GetMaterializedViewsArgs{\n\t\t\tDatabaseName: pulumi.StringRef(\"materialize\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = materialize.GetMaterializedViews(ctx, \u0026materialize.GetMaterializedViewsArgs{\n\t\t\tDatabaseName: pulumi.StringRef(\"materialize\"),\n\t\t\tSchemaName:   pulumi.StringRef(\"schema\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.MaterializeFunctions;\nimport com.pulumi.materialize.inputs.GetMaterializedViewsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var all = MaterializeFunctions.GetMaterializedViews();\n\n        final var materialize = MaterializeFunctions.GetMaterializedViews(GetMaterializedViewsArgs.builder()\n            .databaseName(\"materialize\")\n            .build());\n\n        final var materializeSchema = MaterializeFunctions.GetMaterializedViews(GetMaterializedViewsArgs.builder()\n            .databaseName(\"materialize\")\n            .schemaName(\"schema\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  all:\n    fn::invoke:\n      Function: materialize:GetMaterializedViews\n      Arguments: {}\n  materialize:\n    fn::invoke:\n      Function: materialize:GetMaterializedViews\n      Arguments:\n        databaseName: materialize\n  materializeSchema:\n    fn::invoke:\n      Function: materialize:GetMaterializedViews\n      Arguments:\n        databaseName: materialize\n        schemaName: schema\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking GetMaterializedViews.\n",
                "properties": {
                    "databaseName": {
                        "type": "string",
                        "description": "Limit materialized views to a specific database\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region in which the resource is located.\n"
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "Limit materialized views to a specific schema within a specific database\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by GetMaterializedViews.\n",
                "properties": {
                    "databaseName": {
                        "type": "string",
                        "description": "Limit materialized views to a specific database\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "materializedViews": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/materialize:index/GetMaterializedViewsMaterializedView:GetMaterializedViewsMaterializedView"
                        },
                        "description": "The materialized views in the account\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region in which the resource is located.\n"
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "Limit materialized views to a specific schema within a specific database\n"
                    }
                },
                "type": "object",
                "required": [
                    "materializedViews",
                    "region",
                    "id"
                ]
            }
        },
        "materialize:index/getRoles:GetRoles": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\nconst all = materialize.GetRoles({});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\nall = materialize.get_roles()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var all = Materialize.GetRoles.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.GetRoles(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.MaterializeFunctions;\nimport com.pulumi.materialize.inputs.GetRolesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var all = MaterializeFunctions.GetRoles();\n\n    }\n}\n```\n```yaml\nvariables:\n  all:\n    fn::invoke:\n      Function: materialize:GetRoles\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking GetRoles.\n",
                "properties": {
                    "region": {
                        "type": "string",
                        "description": "The region in which the resource is located.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by GetRoles.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region in which the resource is located.\n"
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/materialize:index/GetRolesRole:GetRolesRole"
                        },
                        "description": "The roles in the account\n"
                    }
                },
                "type": "object",
                "required": [
                    "region",
                    "roles",
                    "id"
                ]
            }
        },
        "materialize:index/getSCIMConfigs:GetSCIMConfigs": {
            "description": "The SCIM 2.0 configurations data source allows you to fetch the SCIM 2.0 configurations.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\nconst all = materialize.GetSCIMConfigs({});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\nall = materialize.get_scim_configs()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var all = Materialize.GetSCIMConfigs.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.GetSCIMConfigs(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.MaterializeFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var all = MaterializeFunctions.GetSCIMConfigs();\n\n    }\n}\n```\n```yaml\nvariables:\n  all:\n    fn::invoke:\n      Function: materialize:GetSCIMConfigs\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by GetSCIMConfigs.\n",
                "properties": {
                    "configurations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/materialize:index/GetSCIMConfigsConfiguration:GetSCIMConfigsConfiguration"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "configurations",
                    "id"
                ]
            }
        },
        "materialize:index/getSCIMGroups:GetSCIMGroups": {
            "description": "The SCIM groups data source allows you to fetch the available groups.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\nconst all = materialize.GetSCIMGroups({});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\nall = materialize.get_scim_groups()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var all = Materialize.GetSCIMGroups.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.GetSCIMGroups(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.MaterializeFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var all = MaterializeFunctions.GetSCIMGroups();\n\n    }\n}\n```\n```yaml\nvariables:\n  all:\n    fn::invoke:\n      Function: materialize:GetSCIMGroups\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by GetSCIMGroups.\n",
                "properties": {
                    "groups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/materialize:index/GetSCIMGroupsGroup:GetSCIMGroupsGroup"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "groups",
                    "id"
                ]
            }
        },
        "materialize:index/getSSOConfig:GetSSOConfig": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\nconst all = materialize.GetSSOConfig({});\nexport const ssoConfigs = all.then(all =\u003e all.ssoConfigs);\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\nall = materialize.get_sso_config()\npulumi.export(\"ssoConfigs\", all.sso_configs)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var all = Materialize.GetSSOConfig.Invoke();\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"ssoConfigs\"] = all.Apply(getSSOConfigResult =\u003e getSSOConfigResult.SsoConfigs),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tall, err := materialize.GetSSOConfig(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"ssoConfigs\", all.SsoConfigs)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.MaterializeFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var all = MaterializeFunctions.GetSSOConfig();\n\n        ctx.export(\"ssoConfigs\", all.applyValue(getSSOConfigResult -\u003e getSSOConfigResult.ssoConfigs()));\n    }\n}\n```\n```yaml\nvariables:\n  all:\n    fn::invoke:\n      Function: materialize:GetSSOConfig\n      Arguments: {}\noutputs:\n  ssoConfigs: ${all.ssoConfigs}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by GetSSOConfig.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ssoConfigs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/materialize:index/GetSSOConfigSsoConfig:GetSSOConfigSsoConfig"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "ssoConfigs",
                    "id"
                ]
            }
        },
        "materialize:index/getSchemas:GetSchemas": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\nconst all = materialize.GetSchemas({});\nconst materialize = materialize.GetSchemas({\n    databaseName: \"materialize\",\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\nall = materialize.get_schemas()\nmaterialize = materialize.get_schemas(database_name=\"materialize\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var all = Materialize.GetSchemas.Invoke();\n\n    var materialize = Materialize.GetSchemas.Invoke(new()\n    {\n        DatabaseName = \"materialize\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.GetSchemas(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = materialize.GetSchemas(ctx, \u0026materialize.GetSchemasArgs{\n\t\t\tDatabaseName: pulumi.StringRef(\"materialize\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.MaterializeFunctions;\nimport com.pulumi.materialize.inputs.GetSchemasArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var all = MaterializeFunctions.GetSchemas();\n\n        final var materialize = MaterializeFunctions.GetSchemas(GetSchemasArgs.builder()\n            .databaseName(\"materialize\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  all:\n    fn::invoke:\n      Function: materialize:GetSchemas\n      Arguments: {}\n  materialize:\n    fn::invoke:\n      Function: materialize:GetSchemas\n      Arguments:\n        databaseName: materialize\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking GetSchemas.\n",
                "properties": {
                    "databaseName": {
                        "type": "string",
                        "description": "Limit schemas to a specific database\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region in which the resource is located.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by GetSchemas.\n",
                "properties": {
                    "databaseName": {
                        "type": "string",
                        "description": "Limit schemas to a specific database\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region in which the resource is located.\n"
                    },
                    "schemas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/materialize:index/GetSchemasSchema:GetSchemasSchema"
                        },
                        "description": "The schemas in the account\n"
                    }
                },
                "type": "object",
                "required": [
                    "region",
                    "schemas",
                    "id"
                ]
            }
        },
        "materialize:index/getSecrets:GetSecrets": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\nconst all = materialize.GetSecrets({});\nconst materialize = materialize.GetSecrets({\n    databaseName: \"materialize\",\n});\nconst materializeSchema = materialize.GetSecrets({\n    databaseName: \"materialize\",\n    schemaName: \"schema\",\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\nall = materialize.get_secrets()\nmaterialize = materialize.get_secrets(database_name=\"materialize\")\nmaterialize_schema = materialize.get_secrets(database_name=\"materialize\",\n    schema_name=\"schema\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var all = Materialize.GetSecrets.Invoke();\n\n    var materialize = Materialize.GetSecrets.Invoke(new()\n    {\n        DatabaseName = \"materialize\",\n    });\n\n    var materializeSchema = Materialize.GetSecrets.Invoke(new()\n    {\n        DatabaseName = \"materialize\",\n        SchemaName = \"schema\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.GetSecrets(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = materialize.GetSecrets(ctx, \u0026materialize.GetSecretsArgs{\n\t\t\tDatabaseName: pulumi.StringRef(\"materialize\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = materialize.GetSecrets(ctx, \u0026materialize.GetSecretsArgs{\n\t\t\tDatabaseName: pulumi.StringRef(\"materialize\"),\n\t\t\tSchemaName:   pulumi.StringRef(\"schema\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.MaterializeFunctions;\nimport com.pulumi.materialize.inputs.GetSecretsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var all = MaterializeFunctions.GetSecrets();\n\n        final var materialize = MaterializeFunctions.GetSecrets(GetSecretsArgs.builder()\n            .databaseName(\"materialize\")\n            .build());\n\n        final var materializeSchema = MaterializeFunctions.GetSecrets(GetSecretsArgs.builder()\n            .databaseName(\"materialize\")\n            .schemaName(\"schema\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  all:\n    fn::invoke:\n      Function: materialize:GetSecrets\n      Arguments: {}\n  materialize:\n    fn::invoke:\n      Function: materialize:GetSecrets\n      Arguments:\n        databaseName: materialize\n  materializeSchema:\n    fn::invoke:\n      Function: materialize:GetSecrets\n      Arguments:\n        databaseName: materialize\n        schemaName: schema\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking GetSecrets.\n",
                "properties": {
                    "databaseName": {
                        "type": "string",
                        "description": "Limit secrets to a specific database\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region in which the resource is located.\n"
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "Limit secrets to a specific schema within a specific database\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by GetSecrets.\n",
                "properties": {
                    "databaseName": {
                        "type": "string",
                        "description": "Limit secrets to a specific database\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region in which the resource is located.\n"
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "Limit secrets to a specific schema within a specific database\n"
                    },
                    "secrets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/materialize:index/GetSecretsSecret:GetSecretsSecret"
                        },
                        "description": "The secrets in the account\n"
                    }
                },
                "type": "object",
                "required": [
                    "region",
                    "secrets",
                    "id"
                ]
            }
        },
        "materialize:index/getSinks:GetSinks": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\nconst all = materialize.GetSinks({});\nconst materialize = materialize.GetSinks({\n    databaseName: \"materialize\",\n});\nconst materializeSchema = materialize.GetSinks({\n    databaseName: \"materialize\",\n    schemaName: \"schema\",\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\nall = materialize.get_sinks()\nmaterialize = materialize.get_sinks(database_name=\"materialize\")\nmaterialize_schema = materialize.get_sinks(database_name=\"materialize\",\n    schema_name=\"schema\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var all = Materialize.GetSinks.Invoke();\n\n    var materialize = Materialize.GetSinks.Invoke(new()\n    {\n        DatabaseName = \"materialize\",\n    });\n\n    var materializeSchema = Materialize.GetSinks.Invoke(new()\n    {\n        DatabaseName = \"materialize\",\n        SchemaName = \"schema\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.GetSinks(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = materialize.GetSinks(ctx, \u0026materialize.GetSinksArgs{\n\t\t\tDatabaseName: pulumi.StringRef(\"materialize\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = materialize.GetSinks(ctx, \u0026materialize.GetSinksArgs{\n\t\t\tDatabaseName: pulumi.StringRef(\"materialize\"),\n\t\t\tSchemaName:   pulumi.StringRef(\"schema\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.MaterializeFunctions;\nimport com.pulumi.materialize.inputs.GetSinksArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var all = MaterializeFunctions.GetSinks();\n\n        final var materialize = MaterializeFunctions.GetSinks(GetSinksArgs.builder()\n            .databaseName(\"materialize\")\n            .build());\n\n        final var materializeSchema = MaterializeFunctions.GetSinks(GetSinksArgs.builder()\n            .databaseName(\"materialize\")\n            .schemaName(\"schema\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  all:\n    fn::invoke:\n      Function: materialize:GetSinks\n      Arguments: {}\n  materialize:\n    fn::invoke:\n      Function: materialize:GetSinks\n      Arguments:\n        databaseName: materialize\n  materializeSchema:\n    fn::invoke:\n      Function: materialize:GetSinks\n      Arguments:\n        databaseName: materialize\n        schemaName: schema\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking GetSinks.\n",
                "properties": {
                    "databaseName": {
                        "type": "string",
                        "description": "Limit sinks to a specific database\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region in which the resource is located.\n"
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "Limit sinks to a specific schema within a specific database\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by GetSinks.\n",
                "properties": {
                    "databaseName": {
                        "type": "string",
                        "description": "Limit sinks to a specific database\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region in which the resource is located.\n"
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "Limit sinks to a specific schema within a specific database\n"
                    },
                    "sinks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/materialize:index/GetSinksSink:GetSinksSink"
                        },
                        "description": "The sinks in the account\n"
                    }
                },
                "type": "object",
                "required": [
                    "region",
                    "sinks",
                    "id"
                ]
            }
        },
        "materialize:index/getSources:GetSources": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\nconst all = materialize.GetSources({});\nconst materialize = materialize.GetSources({\n    databaseName: \"materialize\",\n});\nconst materializeSchema = materialize.GetSources({\n    databaseName: \"materialize\",\n    schemaName: \"schema\",\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\nall = materialize.get_sources()\nmaterialize = materialize.get_sources(database_name=\"materialize\")\nmaterialize_schema = materialize.get_sources(database_name=\"materialize\",\n    schema_name=\"schema\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var all = Materialize.GetSources.Invoke();\n\n    var materialize = Materialize.GetSources.Invoke(new()\n    {\n        DatabaseName = \"materialize\",\n    });\n\n    var materializeSchema = Materialize.GetSources.Invoke(new()\n    {\n        DatabaseName = \"materialize\",\n        SchemaName = \"schema\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.GetSources(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = materialize.GetSources(ctx, \u0026materialize.GetSourcesArgs{\n\t\t\tDatabaseName: pulumi.StringRef(\"materialize\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = materialize.GetSources(ctx, \u0026materialize.GetSourcesArgs{\n\t\t\tDatabaseName: pulumi.StringRef(\"materialize\"),\n\t\t\tSchemaName:   pulumi.StringRef(\"schema\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.MaterializeFunctions;\nimport com.pulumi.materialize.inputs.GetSourcesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var all = MaterializeFunctions.GetSources();\n\n        final var materialize = MaterializeFunctions.GetSources(GetSourcesArgs.builder()\n            .databaseName(\"materialize\")\n            .build());\n\n        final var materializeSchema = MaterializeFunctions.GetSources(GetSourcesArgs.builder()\n            .databaseName(\"materialize\")\n            .schemaName(\"schema\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  all:\n    fn::invoke:\n      Function: materialize:GetSources\n      Arguments: {}\n  materialize:\n    fn::invoke:\n      Function: materialize:GetSources\n      Arguments:\n        databaseName: materialize\n  materializeSchema:\n    fn::invoke:\n      Function: materialize:GetSources\n      Arguments:\n        databaseName: materialize\n        schemaName: schema\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking GetSources.\n",
                "properties": {
                    "databaseName": {
                        "type": "string",
                        "description": "Limit sources to a specific database\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region in which the resource is located.\n"
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "Limit sources to a specific schema within a specific database\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by GetSources.\n",
                "properties": {
                    "databaseName": {
                        "type": "string",
                        "description": "Limit sources to a specific database\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region in which the resource is located.\n"
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "Limit sources to a specific schema within a specific database\n"
                    },
                    "sources": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/materialize:index/GetSourcesSource:GetSourcesSource"
                        },
                        "description": "The sources in the account\n"
                    }
                },
                "type": "object",
                "required": [
                    "region",
                    "sources",
                    "id"
                ]
            }
        },
        "materialize:index/getSystemParameters:GetSystemParameters": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\nconst all = materialize.GetSystemParameters({});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\nall = materialize.get_system_parameters()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var all = Materialize.GetSystemParameters.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.GetSystemParameters(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.MaterializeFunctions;\nimport com.pulumi.materialize.inputs.GetSystemParametersArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var all = MaterializeFunctions.GetSystemParameters();\n\n    }\n}\n```\n```yaml\nvariables:\n  all:\n    fn::invoke:\n      Function: materialize:GetSystemParameters\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking GetSystemParameters.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the specific system parameter to fetch.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region in which the resource is located.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by GetSystemParameters.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the specific system parameter to fetch.\n"
                    },
                    "parameters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/materialize:index/GetSystemParametersParameter:GetSystemParametersParameter"
                        }
                    },
                    "region": {
                        "type": "string",
                        "description": "The region in which the resource is located.\n"
                    }
                },
                "type": "object",
                "required": [
                    "parameters",
                    "region",
                    "id"
                ]
            }
        },
        "materialize:index/getTables:GetTables": {
            "inputs": {
                "description": "A collection of arguments for invoking GetTables.\n",
                "properties": {
                    "databaseName": {
                        "type": "string",
                        "description": "Limit tables to a specific database\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region in which the resource is located.\n"
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "Limit tables to a specific schema within a specific database\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by GetTables.\n",
                "properties": {
                    "databaseName": {
                        "type": "string",
                        "description": "Limit tables to a specific database\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region in which the resource is located.\n"
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "Limit tables to a specific schema within a specific database\n"
                    },
                    "tables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/materialize:index/GetTablesTable:GetTablesTable"
                        },
                        "description": "The tables in the account\n"
                    }
                },
                "type": "object",
                "required": [
                    "region",
                    "tables",
                    "id"
                ]
            }
        },
        "materialize:index/getTypes:GetTypes": {
            "inputs": {
                "description": "A collection of arguments for invoking GetTypes.\n",
                "properties": {
                    "databaseName": {
                        "type": "string",
                        "description": "Limit types to a specific database\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region in which the resource is located.\n"
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "Limit types to a specific schema within a specific database\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by GetTypes.\n",
                "properties": {
                    "databaseName": {
                        "type": "string",
                        "description": "Limit types to a specific database\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region in which the resource is located.\n"
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "Limit types to a specific schema within a specific database\n"
                    },
                    "types": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/materialize:index/GetTypesType:GetTypesType"
                        },
                        "description": "The types in the account\n"
                    }
                },
                "type": "object",
                "required": [
                    "region",
                    "types",
                    "id"
                ]
            }
        },
        "materialize:index/getUsers:GetUsers": {
            "description": "The user data source allows you to retrieve information about a user in your Materialize organization.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\nconst exampleUser = materialize.GetUsers({\n    email: \"example@example.com\",\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\nexample_user = materialize.get_users(email=\"example@example.com\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleUser = Materialize.GetUsers.Invoke(new()\n    {\n        Email = \"example@example.com\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.GetUsers(ctx, \u0026materialize.GetUsersArgs{\n\t\t\tEmail: \"example@example.com\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.MaterializeFunctions;\nimport com.pulumi.materialize.inputs.GetUsersArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleUser = MaterializeFunctions.GetUsers(GetUsersArgs.builder()\n            .email(\"example@example.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  exampleUser:\n    fn::invoke:\n      Function: materialize:GetUsers\n      Arguments:\n        email: example@example.com\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking GetUsers.\n",
                "properties": {
                    "email": {
                        "type": "string",
                        "description": "The email address of the user to retrieve.\n"
                    }
                },
                "type": "object",
                "required": [
                    "email"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by GetUsers.\n",
                "properties": {
                    "email": {
                        "type": "string",
                        "description": "The email address of the user to retrieve.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The unique (UUID) identifier of the user.\n"
                    },
                    "verified": {
                        "type": "boolean",
                        "description": "Whether the user's email address has been verified.\n"
                    }
                },
                "type": "object",
                "required": [
                    "email",
                    "id",
                    "verified"
                ]
            }
        },
        "materialize:index/getViews:GetViews": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\nconst all = materialize.GetViews({});\nconst materialize = materialize.GetViews({\n    databaseName: \"materialize\",\n});\nconst materializeSchema = materialize.GetViews({\n    databaseName: \"materialize\",\n    schemaName: \"schema\",\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\nall = materialize.get_views()\nmaterialize = materialize.get_views(database_name=\"materialize\")\nmaterialize_schema = materialize.get_views(database_name=\"materialize\",\n    schema_name=\"schema\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var all = Materialize.GetViews.Invoke();\n\n    var materialize = Materialize.GetViews.Invoke(new()\n    {\n        DatabaseName = \"materialize\",\n    });\n\n    var materializeSchema = Materialize.GetViews.Invoke(new()\n    {\n        DatabaseName = \"materialize\",\n        SchemaName = \"schema\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.GetViews(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = materialize.GetViews(ctx, \u0026materialize.GetViewsArgs{\n\t\t\tDatabaseName: pulumi.StringRef(\"materialize\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = materialize.GetViews(ctx, \u0026materialize.GetViewsArgs{\n\t\t\tDatabaseName: pulumi.StringRef(\"materialize\"),\n\t\t\tSchemaName:   pulumi.StringRef(\"schema\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.MaterializeFunctions;\nimport com.pulumi.materialize.inputs.GetViewsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var all = MaterializeFunctions.GetViews();\n\n        final var materialize = MaterializeFunctions.GetViews(GetViewsArgs.builder()\n            .databaseName(\"materialize\")\n            .build());\n\n        final var materializeSchema = MaterializeFunctions.GetViews(GetViewsArgs.builder()\n            .databaseName(\"materialize\")\n            .schemaName(\"schema\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  all:\n    fn::invoke:\n      Function: materialize:GetViews\n      Arguments: {}\n  materialize:\n    fn::invoke:\n      Function: materialize:GetViews\n      Arguments:\n        databaseName: materialize\n  materializeSchema:\n    fn::invoke:\n      Function: materialize:GetViews\n      Arguments:\n        databaseName: materialize\n        schemaName: schema\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking GetViews.\n",
                "properties": {
                    "databaseName": {
                        "type": "string",
                        "description": "Limit views to a specific database\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region in which the resource is located.\n"
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "Limit views to a specific schema within a specific database\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by GetViews.\n",
                "properties": {
                    "databaseName": {
                        "type": "string",
                        "description": "Limit views to a specific database\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region in which the resource is located.\n"
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "Limit views to a specific schema within a specific database\n"
                    },
                    "views": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/materialize:index/GetViewsView:GetViewsView"
                        },
                        "description": "The views in the account\n"
                    }
                },
                "type": "object",
                "required": [
                    "region",
                    "views",
                    "id"
                ]
            }
        },
        "materialize:index/region:Region": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\nconst all = materialize.Region({});\nexport const region = all;\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\nall = materialize.region()\npulumi.export(\"region\", all)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var all = Materialize.Region.Invoke();\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"region\"] = all,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tall, err := materialize.Region(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"region\", all)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.MaterializeFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var all = MaterializeFunctions.Region();\n\n        ctx.export(\"region\", all.applyValue(regionResult -\u003e regionResult));\n    }\n}\n```\n```yaml\nvariables:\n  all:\n    fn::invoke:\n      Function: materialize:Region\n      Arguments: {}\noutputs:\n  region: ${all}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by Region.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "regions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/materialize:index/RegionRegion:RegionRegion"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "regions",
                    "id"
                ]
            }
        }
    }
}