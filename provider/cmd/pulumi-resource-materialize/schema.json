{
    "name": "materialize",
    "displayName": "Materialize",
    "description": "A Pulumi package for creating and managing materialize cloud resources.",
    "keywords": [
        "pulumi",
        "materialize",
        "category/cloud"
    ],
    "homepage": "https://github.com/MaterializeInc/terraform-provider-materialize",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`materialize` Terraform Provider](https://github.com/MaterializeInc/terraform-provider-materialize).",
    "repository": "https://github.com/MaterializeInc/terraform-provider-materialize",
    "logoUrl": "https://github.com/MaterializeInc/pulumi-materialize/assets/7467658/77df931a-b571-461f-a279-dac62fbbc236",
    "pluginDownloadURL": "github://api.github.com/MaterializeInc/pulumi-materialize",
    "publisher": "Materialize Inc",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "compatibility": "tfbridge20"
        },
        "go": {
            "importBasePath": "github.com/pulumi/pulumi-materialize/sdk/go/materialize",
            "generateResourceContainerTypes": true,
            "generateExtraInputTypes": true
        },
        "nodejs": {
            "packageDescription": "A Pulumi package for creating and managing materialize cloud resources.",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/MaterializeInc/terraform-provider-materialize)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-materialize` repo](https://github.com/MaterializeInc/terraform-provider-materialize/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-materialize` repo](https://github.com/MaterializeInc/terraform-provider-materialize/issues).",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "compatibility": "tfbridge20",
            "disableUnionOutputTypes": true
        },
        "python": {
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            },
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/MaterializeInc/terraform-provider-materialize)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-materialize` repo](https://github.com/MaterializeInc/terraform-provider-materialize/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-materialize` repo](https://github.com/MaterializeInc/terraform-provider-materialize/issues).",
            "compatibility": "tfbridge20",
            "pyproject": {}
        }
    },
    "config": {
        "variables": {
            "cloudEndpoint": {
                "type": "string",
                "description": "The endpoint for the Materialize Cloud API.\n",
                "defaultInfo": {
                    "environment": [
                        "MZ_CLOUD_ENDPOINT"
                    ]
                }
            },
            "database": {
                "type": "string",
                "description": "The Materialize database. Can also come from the `MZ_DATABASE` environment variable. Defaults to `materialize`.\n",
                "defaultInfo": {
                    "environment": [
                        "MZ_DATABASE"
                    ]
                }
            },
            "defaultRegion": {
                "type": "string",
                "description": "The default region if not specified in the resource\n",
                "defaultInfo": {
                    "environment": [
                        "MZ_DEFAULT_REGION"
                    ]
                }
            },
            "endpoint": {
                "type": "string",
                "description": "The endpoint for the Materialize API.\n",
                "defaultInfo": {
                    "environment": [
                        "MZ_ENDPOINT"
                    ]
                }
            },
            "password": {
                "type": "string",
                "description": "Materialize host. Can also come from the `MZ_PASSWORD` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "MZ_PASSWORD"
                    ]
                },
                "secret": true
            },
            "sslmode": {
                "type": "string",
                "description": "For testing purposes, the SSL mode to use.\n",
                "defaultInfo": {
                    "environment": [
                        "MZ_SSLMODE"
                    ]
                }
            }
        }
    },
    "types": {
        "materialize:index/ConnectionConfluentSchemaRegistryAwsPrivatelink:ConnectionConfluentSchemaRegistryAwsPrivatelink": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The aws_privatelink database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The aws_privatelink name.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The aws_privatelink schema name. Defaults to `public`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/ConnectionConfluentSchemaRegistryPassword:ConnectionConfluentSchemaRegistryPassword": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The password database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The password name.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The password schema name. Defaults to `public`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/ConnectionConfluentSchemaRegistrySshTunnel:ConnectionConfluentSchemaRegistrySshTunnel": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The ssh_tunnel database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The ssh_tunnel name.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The ssh_tunnel schema name. Defaults to `public`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/ConnectionConfluentSchemaRegistrySslCertificate:ConnectionConfluentSchemaRegistrySslCertificate": {
            "properties": {
                "secret": {
                    "$ref": "#/types/materialize:index/ConnectionConfluentSchemaRegistrySslCertificateSecret:ConnectionConfluentSchemaRegistrySslCertificateSecret",
                    "description": "The `ssl_certificate` secret value. Conflicts with `text` within this block.\n",
                    "willReplaceOnChanges": true
                },
                "text": {
                    "type": "string",
                    "description": "The `ssl_certificate` text value. Conflicts with `secret` within this block\n",
                    "secret": true
                }
            },
            "type": "object"
        },
        "materialize:index/ConnectionConfluentSchemaRegistrySslCertificateAuthority:ConnectionConfluentSchemaRegistrySslCertificateAuthority": {
            "properties": {
                "secret": {
                    "$ref": "#/types/materialize:index/ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecret:ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecret",
                    "description": "The `ssl_certificate_authority` secret value. Conflicts with `text` within this block.\n",
                    "willReplaceOnChanges": true
                },
                "text": {
                    "type": "string",
                    "description": "The `ssl_certificate_authority` text value. Conflicts with `secret` within this block\n",
                    "secret": true
                }
            },
            "type": "object"
        },
        "materialize:index/ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecret:ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecret": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the connection database. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the connection.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the connection schema. Defaults to `public`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/ConnectionConfluentSchemaRegistrySslCertificateSecret:ConnectionConfluentSchemaRegistrySslCertificateSecret": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the connection database. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the connection.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the connection schema. Defaults to `public`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/ConnectionConfluentSchemaRegistrySslKey:ConnectionConfluentSchemaRegistrySslKey": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The ssl_key database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The ssl_key name.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The ssl_key schema name. Defaults to `public`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/ConnectionConfluentSchemaRegistryUsername:ConnectionConfluentSchemaRegistryUsername": {
            "properties": {
                "secret": {
                    "$ref": "#/types/materialize:index/ConnectionConfluentSchemaRegistryUsernameSecret:ConnectionConfluentSchemaRegistryUsernameSecret",
                    "description": "The `username` secret value. Conflicts with `text` within this block.\n",
                    "willReplaceOnChanges": true
                },
                "text": {
                    "type": "string",
                    "description": "The `username` text value. Conflicts with `secret` within this block\n",
                    "secret": true
                }
            },
            "type": "object"
        },
        "materialize:index/ConnectionConfluentSchemaRegistryUsernameSecret:ConnectionConfluentSchemaRegistryUsernameSecret": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the connection database. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the connection.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the connection schema. Defaults to `public`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/ConnectionKafkaKafkaBroker:ConnectionKafkaKafkaBroker": {
            "properties": {
                "availabilityZone": {
                    "type": "string",
                    "description": "The availability zone of the Kafka broker.\n"
                },
                "broker": {
                    "type": "string",
                    "description": "The Kafka broker, in the form of `host:port`.\n"
                },
                "privatelinkConnection": {
                    "$ref": "#/types/materialize:index/ConnectionKafkaKafkaBrokerPrivatelinkConnection:ConnectionKafkaKafkaBrokerPrivatelinkConnection",
                    "description": "The AWS PrivateLink connection name in Materialize.\n",
                    "willReplaceOnChanges": true
                },
                "sshTunnel": {
                    "$ref": "#/types/materialize:index/ConnectionKafkaKafkaBrokerSshTunnel:ConnectionKafkaKafkaBrokerSshTunnel",
                    "description": "The name of an SSH tunnel connection to route network traffic through by default.\n",
                    "willReplaceOnChanges": true
                },
                "targetGroupPort": {
                    "type": "integer",
                    "description": "The port of the target group associated with the Kafka broker.\n"
                }
            },
            "type": "object",
            "required": [
                "broker"
            ]
        },
        "materialize:index/ConnectionKafkaKafkaBrokerPrivatelinkConnection:ConnectionKafkaKafkaBrokerPrivatelinkConnection": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the connection database. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the connection.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the connection schema. Defaults to `public`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/ConnectionKafkaKafkaBrokerSshTunnel:ConnectionKafkaKafkaBrokerSshTunnel": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The ssh_tunnel database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The ssh_tunnel name.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The ssh_tunnel schema name. Defaults to `public`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/ConnectionKafkaSaslPassword:ConnectionKafkaSaslPassword": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The sasl_password database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The sasl_password name.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The sasl_password schema name. Defaults to `public`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/ConnectionKafkaSaslUsername:ConnectionKafkaSaslUsername": {
            "properties": {
                "secret": {
                    "$ref": "#/types/materialize:index/ConnectionKafkaSaslUsernameSecret:ConnectionKafkaSaslUsernameSecret",
                    "description": "The `sasl_username` secret value. Conflicts with `text` within this block.\n",
                    "willReplaceOnChanges": true
                },
                "text": {
                    "type": "string",
                    "description": "The `sasl_username` text value. Conflicts with `secret` within this block\n",
                    "secret": true
                }
            },
            "type": "object"
        },
        "materialize:index/ConnectionKafkaSaslUsernameSecret:ConnectionKafkaSaslUsernameSecret": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the connection database. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the connection.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the connection schema. Defaults to `public`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/ConnectionKafkaSshTunnel:ConnectionKafkaSshTunnel": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The ssh_tunnel database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The ssh_tunnel name.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The ssh_tunnel schema name. Defaults to `public`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/ConnectionKafkaSslCertificate:ConnectionKafkaSslCertificate": {
            "properties": {
                "secret": {
                    "$ref": "#/types/materialize:index/ConnectionKafkaSslCertificateSecret:ConnectionKafkaSslCertificateSecret",
                    "description": "The `ssl_certificate` secret value. Conflicts with `text` within this block.\n",
                    "willReplaceOnChanges": true
                },
                "text": {
                    "type": "string",
                    "description": "The `ssl_certificate` text value. Conflicts with `secret` within this block\n",
                    "secret": true
                }
            },
            "type": "object"
        },
        "materialize:index/ConnectionKafkaSslCertificateAuthority:ConnectionKafkaSslCertificateAuthority": {
            "properties": {
                "secret": {
                    "$ref": "#/types/materialize:index/ConnectionKafkaSslCertificateAuthoritySecret:ConnectionKafkaSslCertificateAuthoritySecret",
                    "description": "The `ssl_certificate_authority` secret value. Conflicts with `text` within this block.\n",
                    "willReplaceOnChanges": true
                },
                "text": {
                    "type": "string",
                    "description": "The `ssl_certificate_authority` text value. Conflicts with `secret` within this block\n",
                    "secret": true
                }
            },
            "type": "object"
        },
        "materialize:index/ConnectionKafkaSslCertificateAuthoritySecret:ConnectionKafkaSslCertificateAuthoritySecret": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the connection database. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the connection.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the connection schema. Defaults to `public`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/ConnectionKafkaSslCertificateSecret:ConnectionKafkaSslCertificateSecret": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the connection database. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the connection.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the connection schema. Defaults to `public`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/ConnectionKafkaSslKey:ConnectionKafkaSslKey": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The ssl_key database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The ssl_key name.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The ssl_key schema name. Defaults to `public`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/ConnectionPostgresAwsPrivatelink:ConnectionPostgresAwsPrivatelink": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The aws_privatelink database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The aws_privatelink name.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The aws_privatelink schema name. Defaults to `public`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/ConnectionPostgresPassword:ConnectionPostgresPassword": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The password database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The password name.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The password schema name. Defaults to `public`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/ConnectionPostgresSshTunnel:ConnectionPostgresSshTunnel": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The ssh_tunnel database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The ssh_tunnel name.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The ssh_tunnel schema name. Defaults to `public`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/ConnectionPostgresSslCertificate:ConnectionPostgresSslCertificate": {
            "properties": {
                "secret": {
                    "$ref": "#/types/materialize:index/ConnectionPostgresSslCertificateSecret:ConnectionPostgresSslCertificateSecret",
                    "description": "The `ssl_certificate` secret value. Conflicts with `text` within this block.\n",
                    "willReplaceOnChanges": true
                },
                "text": {
                    "type": "string",
                    "description": "The `ssl_certificate` text value. Conflicts with `secret` within this block\n",
                    "secret": true
                }
            },
            "type": "object"
        },
        "materialize:index/ConnectionPostgresSslCertificateAuthority:ConnectionPostgresSslCertificateAuthority": {
            "properties": {
                "secret": {
                    "$ref": "#/types/materialize:index/ConnectionPostgresSslCertificateAuthoritySecret:ConnectionPostgresSslCertificateAuthoritySecret",
                    "description": "The `ssl_certificate_authority` secret value. Conflicts with `text` within this block.\n",
                    "willReplaceOnChanges": true
                },
                "text": {
                    "type": "string",
                    "description": "The `ssl_certificate_authority` text value. Conflicts with `secret` within this block\n",
                    "secret": true
                }
            },
            "type": "object"
        },
        "materialize:index/ConnectionPostgresSslCertificateAuthoritySecret:ConnectionPostgresSslCertificateAuthoritySecret": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the connection database. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the connection.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the connection schema. Defaults to `public`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/ConnectionPostgresSslCertificateSecret:ConnectionPostgresSslCertificateSecret": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the connection database. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the connection.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the connection schema. Defaults to `public`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/ConnectionPostgresSslKey:ConnectionPostgresSslKey": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The ssl_key database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The ssl_key name.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The ssl_key schema name. Defaults to `public`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/ConnectionPostgresUser:ConnectionPostgresUser": {
            "properties": {
                "secret": {
                    "$ref": "#/types/materialize:index/ConnectionPostgresUserSecret:ConnectionPostgresUserSecret",
                    "description": "The `user` secret value. Conflicts with `text` within this block.\n",
                    "willReplaceOnChanges": true
                },
                "text": {
                    "type": "string",
                    "description": "The `user` text value. Conflicts with `secret` within this block\n",
                    "secret": true
                }
            },
            "type": "object"
        },
        "materialize:index/ConnectionPostgresUserSecret:ConnectionPostgresUserSecret": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the connection database. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the connection.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the connection schema. Defaults to `public`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/GetClusterReplicasClusterReplica:GetClusterReplicasClusterReplica": {
            "properties": {
                "availabilityZone": {
                    "type": "string"
                },
                "cluster": {
                    "type": "string"
                },
                "disk": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of this resource.\n"
                },
                "name": {
                    "type": "string"
                },
                "size": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "availabilityZone",
                "cluster",
                "disk",
                "id",
                "name",
                "size"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "materialize:index/GetClustersCluster:GetClustersCluster": {
            "properties": {
                "disk": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of this resource.\n"
                },
                "managed": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "replicationFactor": {
                    "type": "integer"
                },
                "size": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "disk",
                "id",
                "managed",
                "name",
                "replicationFactor",
                "size"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "materialize:index/GetConnectionsConnection:GetConnectionsConnection": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "Limit connections to a specific database\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of this resource.\n"
                },
                "name": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string",
                    "description": "Limit connections to a specific schema within a specific database\n"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "databaseName",
                "id",
                "name",
                "schemaName",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "materialize:index/GetDatabasesDatabase:GetDatabasesDatabase": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of this resource.\n"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "materialize:index/GetIndexesIndex:GetIndexesIndex": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of this resource.\n"
                },
                "name": {
                    "type": "string"
                },
                "objDatabase": {
                    "type": "string"
                },
                "objName": {
                    "type": "string"
                },
                "objSchema": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name",
                "objDatabase",
                "objName",
                "objSchema"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "materialize:index/GetMaterializedViewsMaterializedView:GetMaterializedViewsMaterializedView": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "Limit materialized views to a specific database\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of this resource.\n"
                },
                "name": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string",
                    "description": "Limit materialized views to a specific schema within a specific database\n"
                }
            },
            "type": "object",
            "required": [
                "databaseName",
                "id",
                "name",
                "schemaName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "materialize:index/GetRolesRole:GetRolesRole": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of this resource.\n"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "materialize:index/GetSCIMConfigsConfiguration:GetSCIMConfigsConfiguration": {
            "properties": {
                "connectionName": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of this resource.\n"
                },
                "source": {
                    "type": "string"
                },
                "syncToUserManagement": {
                    "type": "boolean"
                },
                "tenantId": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "connectionName",
                "createdAt",
                "id",
                "source",
                "syncToUserManagement",
                "tenantId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "materialize:index/GetSCIMGroupsGroup:GetSCIMGroupsGroup": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of this resource.\n"
                },
                "managedBy": {
                    "type": "string"
                },
                "metadata": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/materialize:index/GetSCIMGroupsGroupRole:GetSCIMGroupsGroupRole"
                    }
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/materialize:index/GetSCIMGroupsGroupUser:GetSCIMGroupsGroupUser"
                    }
                }
            },
            "type": "object",
            "required": [
                "description",
                "id",
                "managedBy",
                "metadata",
                "name",
                "roles",
                "users"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "materialize:index/GetSCIMGroupsGroupRole:GetSCIMGroupsGroupRole": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of this resource.\n"
                },
                "isDefault": {
                    "type": "boolean"
                },
                "key": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "description",
                "id",
                "isDefault",
                "key",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "materialize:index/GetSCIMGroupsGroupUser:GetSCIMGroupsGroupUser": {
            "properties": {
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of this resource.\n"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "email",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "materialize:index/GetSSOConfigSsoConfig:GetSSOConfigSsoConfig": {
            "properties": {
                "domains": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/materialize:index/GetSSOConfigSsoConfigDomain:GetSSOConfigSsoConfigDomain"
                    }
                },
                "enabled": {
                    "type": "boolean"
                },
                "groups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/materialize:index/GetSSOConfigSsoConfigGroup:GetSSOConfigSsoConfigGroup"
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of this resource.\n"
                },
                "oidcClientId": {
                    "type": "string"
                },
                "oidcSecret": {
                    "type": "string"
                },
                "publicCertificate": {
                    "type": "string"
                },
                "roleIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "signRequest": {
                    "type": "boolean"
                },
                "ssoEndpoint": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "domains",
                "enabled",
                "groups",
                "id",
                "oidcClientId",
                "oidcSecret",
                "publicCertificate",
                "roleIds",
                "signRequest",
                "ssoEndpoint",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "materialize:index/GetSSOConfigSsoConfigDomain:GetSSOConfigSsoConfigDomain": {
            "properties": {
                "domain": {
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of this resource.\n"
                },
                "validated": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "domain",
                "id",
                "validated"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "materialize:index/GetSSOConfigSsoConfigGroup:GetSSOConfigSsoConfigGroup": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "group": {
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of this resource.\n"
                },
                "roleIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "group",
                "id",
                "roleIds"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "materialize:index/GetSchemasSchema:GetSchemasSchema": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "Limit schemas to a specific database\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of this resource.\n"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "databaseName",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "materialize:index/GetSecretsSecret:GetSecretsSecret": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "Limit secrets to a specific database\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of this resource.\n"
                },
                "name": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string",
                    "description": "Limit secrets to a specific schema within a specific database\n"
                }
            },
            "type": "object",
            "required": [
                "databaseName",
                "id",
                "name",
                "schemaName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "materialize:index/GetSinksSink:GetSinksSink": {
            "properties": {
                "clusterName": {
                    "type": "string"
                },
                "connectionName": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string",
                    "description": "Limit sinks to a specific database\n"
                },
                "envelopeType": {
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of this resource.\n"
                },
                "name": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string",
                    "description": "Limit sinks to a specific schema within a specific database\n"
                },
                "size": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "clusterName",
                "connectionName",
                "databaseName",
                "envelopeType",
                "id",
                "name",
                "schemaName",
                "size",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "materialize:index/GetSourcesSource:GetSourcesSource": {
            "properties": {
                "clusterName": {
                    "type": "string"
                },
                "connectionName": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string",
                    "description": "Limit sources to a specific database\n"
                },
                "envelopeType": {
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of this resource.\n"
                },
                "name": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string",
                    "description": "Limit sources to a specific schema within a specific database\n"
                },
                "size": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "clusterName",
                "connectionName",
                "databaseName",
                "envelopeType",
                "id",
                "name",
                "schemaName",
                "size",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "materialize:index/GetTablesTable:GetTablesTable": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "Limit tables to a specific database\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of this resource.\n"
                },
                "name": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string",
                    "description": "Limit tables to a specific schema within a specific database\n"
                }
            },
            "type": "object",
            "required": [
                "databaseName",
                "id",
                "name",
                "schemaName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "materialize:index/GetTypesType:GetTypesType": {
            "properties": {
                "category": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string",
                    "description": "Limit types to a specific database\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of this resource.\n"
                },
                "name": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string",
                    "description": "Limit types to a specific schema within a specific database\n"
                }
            },
            "type": "object",
            "required": [
                "category",
                "databaseName",
                "id",
                "name",
                "schemaName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "materialize:index/GetViewsView:GetViewsView": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "Limit views to a specific database\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of this resource.\n"
                },
                "name": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string",
                    "description": "Limit views to a specific schema within a specific database\n"
                }
            },
            "type": "object",
            "required": [
                "databaseName",
                "id",
                "name",
                "schemaName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "materialize:index/IndexColExpr:IndexColExpr": {
            "properties": {
                "field": {
                    "type": "string",
                    "description": "The name of the option you want to set.\n"
                }
            },
            "type": "object",
            "required": [
                "field"
            ]
        },
        "materialize:index/IndexObjName:IndexObjName": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The obj_name database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The obj_name name.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The obj_name schema name. Defaults to `public`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/RegionRegion:RegionRegion": {
            "properties": {
                "cloudProvider": {
                    "type": "string"
                },
                "host": {
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of this resource.\n"
                },
                "name": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "cloudProvider",
                "host",
                "id",
                "name",
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "materialize:index/SinkKafkaEnvelope:SinkKafkaEnvelope": {
            "properties": {
                "debezium": {
                    "type": "boolean",
                    "description": "The generated schemas have a Debezium-style diff envelope to capture changes in the input view or source.\n",
                    "willReplaceOnChanges": true
                },
                "upsert": {
                    "type": "boolean",
                    "description": "The sink emits data with upsert semantics: updates and inserts for the given key are expressed as a value, and deletes are expressed as a null value payload in Kafka.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "materialize:index/SinkKafkaFormat:SinkKafkaFormat": {
            "properties": {
                "avro": {
                    "$ref": "#/types/materialize:index/SinkKafkaFormatAvro:SinkKafkaFormatAvro",
                    "description": "Avro format.\n",
                    "willReplaceOnChanges": true
                },
                "json": {
                    "type": "boolean",
                    "description": "JSON format.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "materialize:index/SinkKafkaFormatAvro:SinkKafkaFormatAvro": {
            "properties": {
                "avroDocColumns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/materialize:index/SinkKafkaFormatAvroAvroDocColumn:SinkKafkaFormatAvroAvroDocColumn"
                    },
                    "willReplaceOnChanges": true
                },
                "avroDocType": {
                    "$ref": "#/types/materialize:index/SinkKafkaFormatAvroAvroDocType:SinkKafkaFormatAvroAvroDocType",
                    "willReplaceOnChanges": true
                },
                "avroKeyFullname": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "avroValueFullname": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "schemaRegistryConnection": {
                    "$ref": "#/types/materialize:index/SinkKafkaFormatAvroSchemaRegistryConnection:SinkKafkaFormatAvroSchemaRegistryConnection",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "schemaRegistryConnection"
            ]
        },
        "materialize:index/SinkKafkaFormatAvroAvroDocColumn:SinkKafkaFormatAvroAvroDocColumn": {
            "properties": {
                "column": {
                    "type": "string"
                },
                "doc": {
                    "type": "string"
                },
                "key": {
                    "type": "boolean",
                    "description": "An optional list of columns to use for the Kafka key. If unspecified, the Kafka key is left unset.\n"
                },
                "object": {
                    "$ref": "#/types/materialize:index/SinkKafkaFormatAvroAvroDocColumnObject:SinkKafkaFormatAvroAvroDocColumnObject",
                    "willReplaceOnChanges": true
                },
                "value": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "column",
                "doc",
                "object"
            ]
        },
        "materialize:index/SinkKafkaFormatAvroAvroDocColumnObject:SinkKafkaFormatAvroAvroDocColumnObject": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the sink database. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the sink.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the sink schema. Defaults to `public`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/SinkKafkaFormatAvroAvroDocType:SinkKafkaFormatAvroAvroDocType": {
            "properties": {
                "doc": {
                    "type": "string"
                },
                "key": {
                    "type": "boolean",
                    "description": "An optional list of columns to use for the Kafka key. If unspecified, the Kafka key is left unset.\n"
                },
                "object": {
                    "$ref": "#/types/materialize:index/SinkKafkaFormatAvroAvroDocTypeObject:SinkKafkaFormatAvroAvroDocTypeObject",
                    "willReplaceOnChanges": true
                },
                "value": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "doc",
                "object"
            ]
        },
        "materialize:index/SinkKafkaFormatAvroAvroDocTypeObject:SinkKafkaFormatAvroAvroDocTypeObject": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the sink database. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the sink.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the sink schema. Defaults to `public`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/SinkKafkaFormatAvroSchemaRegistryConnection:SinkKafkaFormatAvroSchemaRegistryConnection": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the sink database. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the sink.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the sink schema. Defaults to `public`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/SinkKafkaFrom:SinkKafkaFrom": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The from database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The from name.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The from schema name. Defaults to `public`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/SinkKafkaKafkaConnection:SinkKafkaKafkaConnection": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The kafka_connection database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The kafka_connection name.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The kafka_connection schema name. Defaults to `public`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/SourceKafkaEnvelope:SourceKafkaEnvelope": {
            "properties": {
                "debezium": {
                    "type": "boolean",
                    "description": "Use the Debezium envelope, which uses a diff envelope to handle CRUD operations.\n",
                    "willReplaceOnChanges": true
                },
                "none": {
                    "type": "boolean",
                    "description": "Use an append-only envelope. This means that records will only be appended and cannot be updated or deleted.\n",
                    "willReplaceOnChanges": true
                },
                "upsert": {
                    "type": "boolean",
                    "description": "Use the upsert envelope, which uses message keys to handle CRUD operations.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "materialize:index/SourceKafkaExposeProgress:SourceKafkaExposeProgress": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The expose_progress database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The expose_progress name.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The expose_progress schema name. Defaults to `public`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/SourceKafkaFormat:SourceKafkaFormat": {
            "properties": {
                "avro": {
                    "$ref": "#/types/materialize:index/SourceKafkaFormatAvro:SourceKafkaFormatAvro",
                    "description": "Avro format.\n",
                    "willReplaceOnChanges": true
                },
                "bytes": {
                    "type": "boolean",
                    "description": "BYTES format.\n",
                    "willReplaceOnChanges": true
                },
                "csvs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/materialize:index/SourceKafkaFormatCsv:SourceKafkaFormatCsv"
                    },
                    "description": "CSV format.\n",
                    "willReplaceOnChanges": true
                },
                "json": {
                    "type": "boolean",
                    "description": "JSON format.\n",
                    "willReplaceOnChanges": true
                },
                "protobuf": {
                    "$ref": "#/types/materialize:index/SourceKafkaFormatProtobuf:SourceKafkaFormatProtobuf",
                    "description": "Protobuf format.\n",
                    "willReplaceOnChanges": true
                },
                "text": {
                    "type": "boolean",
                    "description": "Text format.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "materialize:index/SourceKafkaFormatAvro:SourceKafkaFormatAvro": {
            "properties": {
                "keyStrategy": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "schemaRegistryConnection": {
                    "$ref": "#/types/materialize:index/SourceKafkaFormatAvroSchemaRegistryConnection:SourceKafkaFormatAvroSchemaRegistryConnection",
                    "willReplaceOnChanges": true
                },
                "valueStrategy": {
                    "type": "string",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "schemaRegistryConnection"
            ]
        },
        "materialize:index/SourceKafkaFormatAvroSchemaRegistryConnection:SourceKafkaFormatAvroSchemaRegistryConnection": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the source database. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the source.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the source schema. Defaults to `public`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/SourceKafkaFormatCsv:SourceKafkaFormatCsv": {
            "properties": {
                "column": {
                    "type": "integer",
                    "willReplaceOnChanges": true
                },
                "delimitedBy": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "headers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "materialize:index/SourceKafkaFormatProtobuf:SourceKafkaFormatProtobuf": {
            "properties": {
                "message": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "schemaRegistryConnection": {
                    "$ref": "#/types/materialize:index/SourceKafkaFormatProtobufSchemaRegistryConnection:SourceKafkaFormatProtobufSchemaRegistryConnection",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "message",
                "schemaRegistryConnection"
            ]
        },
        "materialize:index/SourceKafkaFormatProtobufSchemaRegistryConnection:SourceKafkaFormatProtobufSchemaRegistryConnection": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the source database. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the source.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the source schema. Defaults to `public`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/SourceKafkaKafkaConnection:SourceKafkaKafkaConnection": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The kafka_connection database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The kafka_connection name.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The kafka_connection schema name. Defaults to `public`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/SourceKafkaKeyFormat:SourceKafkaKeyFormat": {
            "properties": {
                "avro": {
                    "$ref": "#/types/materialize:index/SourceKafkaKeyFormatAvro:SourceKafkaKeyFormatAvro",
                    "description": "Avro format.\n",
                    "willReplaceOnChanges": true
                },
                "bytes": {
                    "type": "boolean",
                    "description": "BYTES format.\n",
                    "willReplaceOnChanges": true
                },
                "csvs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/materialize:index/SourceKafkaKeyFormatCsv:SourceKafkaKeyFormatCsv"
                    },
                    "description": "CSV format.\n",
                    "willReplaceOnChanges": true
                },
                "json": {
                    "type": "boolean",
                    "description": "JSON format.\n",
                    "willReplaceOnChanges": true
                },
                "protobuf": {
                    "$ref": "#/types/materialize:index/SourceKafkaKeyFormatProtobuf:SourceKafkaKeyFormatProtobuf",
                    "description": "Protobuf format.\n",
                    "willReplaceOnChanges": true
                },
                "text": {
                    "type": "boolean",
                    "description": "Text format.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "materialize:index/SourceKafkaKeyFormatAvro:SourceKafkaKeyFormatAvro": {
            "properties": {
                "keyStrategy": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "schemaRegistryConnection": {
                    "$ref": "#/types/materialize:index/SourceKafkaKeyFormatAvroSchemaRegistryConnection:SourceKafkaKeyFormatAvroSchemaRegistryConnection",
                    "willReplaceOnChanges": true
                },
                "valueStrategy": {
                    "type": "string",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "schemaRegistryConnection"
            ]
        },
        "materialize:index/SourceKafkaKeyFormatAvroSchemaRegistryConnection:SourceKafkaKeyFormatAvroSchemaRegistryConnection": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the source database. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the source.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the source schema. Defaults to `public`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/SourceKafkaKeyFormatCsv:SourceKafkaKeyFormatCsv": {
            "properties": {
                "column": {
                    "type": "integer",
                    "willReplaceOnChanges": true
                },
                "delimitedBy": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "headers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "materialize:index/SourceKafkaKeyFormatProtobuf:SourceKafkaKeyFormatProtobuf": {
            "properties": {
                "message": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "schemaRegistryConnection": {
                    "$ref": "#/types/materialize:index/SourceKafkaKeyFormatProtobufSchemaRegistryConnection:SourceKafkaKeyFormatProtobufSchemaRegistryConnection",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "message",
                "schemaRegistryConnection"
            ]
        },
        "materialize:index/SourceKafkaKeyFormatProtobufSchemaRegistryConnection:SourceKafkaKeyFormatProtobufSchemaRegistryConnection": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the source database. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the source.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the source schema. Defaults to `public`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/SourceKafkaSubsource:SourceKafkaSubsource": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the source database. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the source.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the source schema. Defaults to `public`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/SourceKafkaValueFormat:SourceKafkaValueFormat": {
            "properties": {
                "avro": {
                    "$ref": "#/types/materialize:index/SourceKafkaValueFormatAvro:SourceKafkaValueFormatAvro",
                    "description": "Avro format.\n",
                    "willReplaceOnChanges": true
                },
                "bytes": {
                    "type": "boolean",
                    "description": "BYTES format.\n",
                    "willReplaceOnChanges": true
                },
                "csvs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/materialize:index/SourceKafkaValueFormatCsv:SourceKafkaValueFormatCsv"
                    },
                    "description": "CSV format.\n",
                    "willReplaceOnChanges": true
                },
                "json": {
                    "type": "boolean",
                    "description": "JSON format.\n",
                    "willReplaceOnChanges": true
                },
                "protobuf": {
                    "$ref": "#/types/materialize:index/SourceKafkaValueFormatProtobuf:SourceKafkaValueFormatProtobuf",
                    "description": "Protobuf format.\n",
                    "willReplaceOnChanges": true
                },
                "text": {
                    "type": "boolean",
                    "description": "Text format.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "materialize:index/SourceKafkaValueFormatAvro:SourceKafkaValueFormatAvro": {
            "properties": {
                "keyStrategy": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "schemaRegistryConnection": {
                    "$ref": "#/types/materialize:index/SourceKafkaValueFormatAvroSchemaRegistryConnection:SourceKafkaValueFormatAvroSchemaRegistryConnection",
                    "willReplaceOnChanges": true
                },
                "valueStrategy": {
                    "type": "string",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "schemaRegistryConnection"
            ]
        },
        "materialize:index/SourceKafkaValueFormatAvroSchemaRegistryConnection:SourceKafkaValueFormatAvroSchemaRegistryConnection": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the source database. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the source.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the source schema. Defaults to `public`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/SourceKafkaValueFormatCsv:SourceKafkaValueFormatCsv": {
            "properties": {
                "column": {
                    "type": "integer",
                    "willReplaceOnChanges": true
                },
                "delimitedBy": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "headers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "materialize:index/SourceKafkaValueFormatProtobuf:SourceKafkaValueFormatProtobuf": {
            "properties": {
                "message": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "schemaRegistryConnection": {
                    "$ref": "#/types/materialize:index/SourceKafkaValueFormatProtobufSchemaRegistryConnection:SourceKafkaValueFormatProtobufSchemaRegistryConnection",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "message",
                "schemaRegistryConnection"
            ]
        },
        "materialize:index/SourceKafkaValueFormatProtobufSchemaRegistryConnection:SourceKafkaValueFormatProtobufSchemaRegistryConnection": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the source database. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the source.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the source schema. Defaults to `public`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/SourceLoadgenAuctionOptions:SourceLoadgenAuctionOptions": {
            "properties": {
                "scaleFactor": {
                    "type": "number",
                    "description": "The scale factor for the generator. Defaults to 0.01 (~ 10MB).\n",
                    "willReplaceOnChanges": true
                },
                "tickInterval": {
                    "type": "string",
                    "description": "The interval at which the next datum should be emitted. Defaults to one second.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "materialize:index/SourceLoadgenCounterOptions:SourceLoadgenCounterOptions": {
            "properties": {
                "maxCardinality": {
                    "type": "integer",
                    "description": "Causes the generator to delete old values to keep the collection at most a given size. Defaults to unlimited.\n",
                    "willReplaceOnChanges": true
                },
                "scaleFactor": {
                    "type": "number",
                    "description": "The scale factor for the generator. Defaults to 0.01 (~ 10MB).\n",
                    "willReplaceOnChanges": true
                },
                "tickInterval": {
                    "type": "string",
                    "description": "The interval at which the next datum should be emitted. Defaults to one second.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "materialize:index/SourceLoadgenExposeProgress:SourceLoadgenExposeProgress": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The expose_progress database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The expose_progress name.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The expose_progress schema name. Defaults to `public`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/SourceLoadgenMarketingOptions:SourceLoadgenMarketingOptions": {
            "properties": {
                "scaleFactor": {
                    "type": "number",
                    "description": "The scale factor for the generator. Defaults to 0.01 (~ 10MB).\n",
                    "willReplaceOnChanges": true
                },
                "tickInterval": {
                    "type": "string",
                    "description": "The interval at which the next datum should be emitted. Defaults to one second.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "materialize:index/SourceLoadgenSubsource:SourceLoadgenSubsource": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the source database. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the source.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the source schema. Defaults to `public`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/SourceLoadgenTpchOptions:SourceLoadgenTpchOptions": {
            "properties": {
                "scaleFactor": {
                    "type": "number",
                    "description": "The scale factor for the generator. Defaults to 0.01 (~ 10MB).\n",
                    "willReplaceOnChanges": true
                },
                "tickInterval": {
                    "type": "string",
                    "description": "The interval at which the next datum should be emitted. Defaults to one second.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "materialize:index/SourcePostgresExposeProgress:SourcePostgresExposeProgress": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The expose_progress database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The expose_progress name.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The expose_progress schema name. Defaults to `public`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/SourcePostgresPostgresConnection:SourcePostgresPostgresConnection": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The postgres_connection database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The postgres_connection name.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The postgres_connection schema name. Defaults to `public`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/SourcePostgresSubsource:SourcePostgresSubsource": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the source database. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the source.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the source schema. Defaults to `public`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/SourcePostgresTable:SourcePostgresTable": {
            "properties": {
                "alias": {
                    "type": "string",
                    "description": "The alias of the table.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the table.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/SourceWebhookCheckOption:SourceWebhookCheckOption": {
            "properties": {
                "alias": {
                    "type": "string",
                    "description": "The alias for the check options.\n"
                },
                "bytes": {
                    "type": "boolean",
                    "description": "Change type to `bytea`.\n"
                },
                "field": {
                    "$ref": "#/types/materialize:index/SourceWebhookCheckOptionField:SourceWebhookCheckOptionField",
                    "description": "The field for the check options.\n"
                }
            },
            "type": "object",
            "required": [
                "field"
            ]
        },
        "materialize:index/SourceWebhookCheckOptionField:SourceWebhookCheckOptionField": {
            "properties": {
                "body": {
                    "type": "boolean"
                },
                "headers": {
                    "type": "boolean"
                },
                "secret": {
                    "$ref": "#/types/materialize:index/SourceWebhookCheckOptionFieldSecret:SourceWebhookCheckOptionFieldSecret",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "materialize:index/SourceWebhookCheckOptionFieldSecret:SourceWebhookCheckOptionFieldSecret": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the source database. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the source.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the source schema. Defaults to `public`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/SourceWebhookIncludeHeader:SourceWebhookIncludeHeader": {
            "properties": {
                "alias": {
                    "type": "string",
                    "description": "The alias for the header.\n"
                },
                "bytes": {
                    "type": "boolean",
                    "description": "Change type to `bytea`.\n"
                },
                "header": {
                    "type": "string",
                    "description": "The name for the header.\n"
                }
            },
            "type": "object",
            "required": [
                "header"
            ]
        },
        "materialize:index/SourceWebhookIncludeHeaders:SourceWebhookIncludeHeaders": {
            "properties": {
                "all": {
                    "type": "boolean",
                    "description": "Include all headers.\n"
                },
                "nots": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Headers that should be excluded.\n"
                },
                "onlies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Headers that should be included.\n"
                }
            },
            "type": "object"
        },
        "materialize:index/SourceWebhookSubsource:SourceWebhookSubsource": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the source database. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the source.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the source schema. Defaults to `public`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "materialize:index/TableColumn:TableColumn": {
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "**Public Preview** Comment on an object in the database.\n"
                },
                "default": {
                    "type": "string",
                    "description": "A default value to use for the column in an INSERT statement if an explicit value is not provided. If not specified, `NULL` is assumed..\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The name of the column to be created in the table.\n",
                    "willReplaceOnChanges": true
                },
                "nullable": {
                    "type": "boolean",
                    "description": "Do not allow the column to contain `NULL` values. Columns without this constraint can contain `NULL` values.\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "The data type of the column indicated by name.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "name",
                "type"
            ]
        },
        "materialize:index/TypeListProperties:TypeListProperties": {
            "properties": {
                "elementType": {
                    "type": "string",
                    "description": "Creates a custom list whose elements are of `ELEMENT TYPE`\n"
                }
            },
            "type": "object",
            "required": [
                "elementType"
            ]
        },
        "materialize:index/TypeMapProperties:TypeMapProperties": {
            "properties": {
                "keyType": {
                    "type": "string",
                    "description": "Creates a custom map whose keys are of `KEY TYPE`. `KEY TYPE` must resolve to text.\n"
                },
                "valueType": {
                    "type": "string",
                    "description": "Creates a custom map whose values are of `VALUE TYPE`.\n"
                }
            },
            "type": "object",
            "required": [
                "keyType",
                "valueType"
            ]
        },
        "materialize:index/TypeRowProperty:TypeRowProperty": {
            "properties": {
                "fieldName": {
                    "type": "string",
                    "description": "The name of a field in a row type.\n"
                },
                "fieldType": {
                    "type": "string",
                    "description": "The data type of a field indicated by `FIELD NAME`.\n"
                }
            },
            "type": "object",
            "required": [
                "fieldName",
                "fieldType"
            ]
        }
    },
    "provider": {
        "description": "The provider type for the materialize package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "cloudEndpoint": {
                "type": "string",
                "description": "The endpoint for the Materialize Cloud API.\n"
            },
            "database": {
                "type": "string",
                "description": "The Materialize database. Can also come from the `MZ_DATABASE` environment variable. Defaults to `materialize`.\n"
            },
            "defaultRegion": {
                "type": "string",
                "description": "The default region if not specified in the resource\n"
            },
            "endpoint": {
                "type": "string",
                "description": "The endpoint for the Materialize API.\n"
            },
            "password": {
                "type": "string",
                "description": "Materialize host. Can also come from the `MZ_PASSWORD` environment variable.\n",
                "secret": true
            },
            "sslmode": {
                "type": "string",
                "description": "For testing purposes, the SSL mode to use.\n"
            }
        },
        "inputProperties": {
            "cloudEndpoint": {
                "type": "string",
                "description": "The endpoint for the Materialize Cloud API.\n",
                "defaultInfo": {
                    "environment": [
                        "MZ_CLOUD_ENDPOINT"
                    ]
                }
            },
            "database": {
                "type": "string",
                "description": "The Materialize database. Can also come from the `MZ_DATABASE` environment variable. Defaults to `materialize`.\n",
                "defaultInfo": {
                    "environment": [
                        "MZ_DATABASE"
                    ]
                }
            },
            "defaultRegion": {
                "type": "string",
                "description": "The default region if not specified in the resource\n",
                "defaultInfo": {
                    "environment": [
                        "MZ_DEFAULT_REGION"
                    ]
                }
            },
            "endpoint": {
                "type": "string",
                "description": "The endpoint for the Materialize API.\n",
                "defaultInfo": {
                    "environment": [
                        "MZ_ENDPOINT"
                    ]
                }
            },
            "password": {
                "type": "string",
                "description": "Materialize host. Can also come from the `MZ_PASSWORD` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "MZ_PASSWORD"
                    ]
                },
                "secret": true
            },
            "sslmode": {
                "type": "string",
                "description": "For testing purposes, the SSL mode to use.\n",
                "defaultInfo": {
                    "environment": [
                        "MZ_SSLMODE"
                    ]
                }
            }
        }
    },
    "resources": {
        "materialize:index/appPassword:AppPassword": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\nconst exampleAppPassword = new materialize.AppPassword(\"exampleAppPassword\", {});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\nexample_app_password = materialize.AppPassword(\"exampleAppPassword\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleAppPassword = new Materialize.AppPassword(\"exampleAppPassword\");\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.NewAppPassword(ctx, \"exampleAppPassword\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.AppPassword;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleAppPassword = new AppPassword(\"exampleAppPassword\");\n\n    }\n}\n```\n```yaml\nresources:\n  exampleAppPassword:\n    type: materialize:AppPassword\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nApp passwords can be imported using the app password id\n\n```sh\n $ pulumi import materialize:index/appPassword:AppPassword example_app_password \u003capp_password_id\u003e\n```\n\n ",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "secret": true
                },
                "secret": {
                    "type": "string",
                    "secret": true
                }
            },
            "required": [
                "createdAt",
                "name",
                "owner",
                "password",
                "secret"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AppPassword resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "owner": {
                        "type": "string"
                    },
                    "password": {
                        "type": "string",
                        "secret": true
                    },
                    "secret": {
                        "type": "string",
                        "secret": true
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/cluster:Cluster": {
            "description": "Clusters describe logical compute resources that can be used by sources, sinks, indexes, and materialized views. Managed clusters are created by setting the `size` attribute\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\nconst exampleCluster = new materialize.Cluster(\"exampleCluster\", {});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\nexample_cluster = materialize.Cluster(\"exampleCluster\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleCluster = new Materialize.Cluster(\"exampleCluster\");\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.NewCluster(ctx, \"exampleCluster\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.Cluster;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleCluster = new Cluster(\"exampleCluster\");\n\n    }\n}\n```\n```yaml\nresources:\n  exampleCluster:\n    type: materialize:Cluster\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nClusters can be imported using the cluster id\n\n```sh\n $ pulumi import materialize:index/cluster:Cluster example_cluster \u003cregion\u003e:\u003ccluster_id\u003e\n```\n\n Cluster id and information be found in the `mz_catalog.mz_clusters` table The region is the region where the database is located (e.g. aws/us-east-1) ",
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "**Public Preview** Comment on an object in the database.\n"
                },
                "disk": {
                    "type": "boolean",
                    "description": "**Private Preview**. Whether or not the replica is a *disk-backed replica*.\n"
                },
                "idleArrangementMergeEffort": {
                    "type": "integer",
                    "description": "The amount of effort to exert compacting arrangements during idle periods. This is an unstable option! It may be changed or removed at any time.\n"
                },
                "introspectionDebugging": {
                    "type": "boolean",
                    "description": "Whether to introspect the gathering of the introspection data.\n"
                },
                "introspectionInterval": {
                    "type": "string",
                    "description": "The interval at which to collect introspection data.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the cluster.\n"
                },
                "ownershipRole": {
                    "type": "string",
                    "description": "The owernship role of the object.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n"
                },
                "replicationFactor": {
                    "type": "integer",
                    "description": "The number of replicas of each dataflow-powered object to maintain.\n"
                },
                "size": {
                    "type": "string",
                    "description": "The size of the managed cluster.\n"
                }
            },
            "required": [
                "name",
                "ownershipRole",
                "replicationFactor"
            ],
            "inputProperties": {
                "comment": {
                    "type": "string",
                    "description": "**Public Preview** Comment on an object in the database.\n"
                },
                "disk": {
                    "type": "boolean",
                    "description": "**Private Preview**. Whether or not the replica is a *disk-backed replica*.\n"
                },
                "idleArrangementMergeEffort": {
                    "type": "integer",
                    "description": "The amount of effort to exert compacting arrangements during idle periods. This is an unstable option! It may be changed or removed at any time.\n"
                },
                "introspectionDebugging": {
                    "type": "boolean",
                    "description": "Whether to introspect the gathering of the introspection data.\n"
                },
                "introspectionInterval": {
                    "type": "string",
                    "description": "The interval at which to collect introspection data.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the cluster.\n",
                    "willReplaceOnChanges": true
                },
                "ownershipRole": {
                    "type": "string",
                    "description": "The owernship role of the object.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                    "willReplaceOnChanges": true
                },
                "replicationFactor": {
                    "type": "integer",
                    "description": "The number of replicas of each dataflow-powered object to maintain.\n"
                },
                "size": {
                    "type": "string",
                    "description": "The size of the managed cluster.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Cluster resources.\n",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "**Public Preview** Comment on an object in the database.\n"
                    },
                    "disk": {
                        "type": "boolean",
                        "description": "**Private Preview**. Whether or not the replica is a *disk-backed replica*.\n"
                    },
                    "idleArrangementMergeEffort": {
                        "type": "integer",
                        "description": "The amount of effort to exert compacting arrangements during idle periods. This is an unstable option! It may be changed or removed at any time.\n"
                    },
                    "introspectionDebugging": {
                        "type": "boolean",
                        "description": "Whether to introspect the gathering of the introspection data.\n"
                    },
                    "introspectionInterval": {
                        "type": "string",
                        "description": "The interval at which to collect introspection data.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The identifier for the cluster.\n",
                        "willReplaceOnChanges": true
                    },
                    "ownershipRole": {
                        "type": "string",
                        "description": "The owernship role of the object.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                        "willReplaceOnChanges": true
                    },
                    "replicationFactor": {
                        "type": "integer",
                        "description": "The number of replicas of each dataflow-powered object to maintain.\n"
                    },
                    "size": {
                        "type": "string",
                        "description": "The size of the managed cluster.\n"
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/clusterReplica:ClusterReplica": {
            "description": "Cluster replicas allocate physical compute resources for a cluster.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\nconst exampleClusterReplica = new materialize.ClusterReplica(\"exampleClusterReplica\", {\n    clusterName: \"cluster\",\n    size: \"2xsmall\",\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\nexample_cluster_replica = materialize.ClusterReplica(\"exampleClusterReplica\",\n    cluster_name=\"cluster\",\n    size=\"2xsmall\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleClusterReplica = new Materialize.ClusterReplica(\"exampleClusterReplica\", new()\n    {\n        ClusterName = \"cluster\",\n        Size = \"2xsmall\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.NewClusterReplica(ctx, \"exampleClusterReplica\", \u0026materialize.ClusterReplicaArgs{\n\t\t\tClusterName: pulumi.String(\"cluster\"),\n\t\t\tSize:        pulumi.String(\"2xsmall\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.ClusterReplica;\nimport com.pulumi.materialize.ClusterReplicaArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleClusterReplica = new ClusterReplica(\"exampleClusterReplica\", ClusterReplicaArgs.builder()        \n            .clusterName(\"cluster\")\n            .size(\"2xsmall\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleClusterReplica:\n    type: materialize:ClusterReplica\n    properties:\n      clusterName: cluster\n      size: 2xsmall\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nCluster replicas can be imported using the cluster replica id\n\n```sh\n $ pulumi import materialize:index/clusterReplica:ClusterReplica example_1_cluster_replica \u003cregion\u003e:\u003ccluster_replica_id\u003e\n```\n\n Cluster replica id and information be found in the `mz_catalog.mz_cluster_replicas` table The region is the region where the database is located (e.g. aws/us-east-1) ",
            "properties": {
                "availabilityZone": {
                    "type": "string",
                    "description": "The specific availability zone of the replica.\n"
                },
                "clusterName": {
                    "type": "string",
                    "description": "The cluster whose resources you want to create an additional computation of.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "**Public Preview** Comment on an object in the database.\n"
                },
                "disk": {
                    "type": "boolean",
                    "description": "**Private Preview**. Whether or not the replica is a *disk-backed replica*.\n"
                },
                "idleArrangementMergeEffort": {
                    "type": "integer",
                    "description": "The amount of effort to exert compacting arrangements during idle periods. This is an unstable option! It may be changed or removed at any time.\n"
                },
                "introspectionDebugging": {
                    "type": "boolean",
                    "description": "Whether to introspect the gathering of the introspection data.\n"
                },
                "introspectionInterval": {
                    "type": "string",
                    "description": "The interval at which to collect introspection data.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the replica.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n"
                },
                "size": {
                    "type": "string",
                    "description": "The size of the replica.\n"
                }
            },
            "required": [
                "availabilityZone",
                "clusterName",
                "name",
                "size"
            ],
            "inputProperties": {
                "availabilityZone": {
                    "type": "string",
                    "description": "The specific availability zone of the replica.\n",
                    "willReplaceOnChanges": true
                },
                "clusterName": {
                    "type": "string",
                    "description": "The cluster whose resources you want to create an additional computation of.\n",
                    "willReplaceOnChanges": true
                },
                "comment": {
                    "type": "string",
                    "description": "**Public Preview** Comment on an object in the database.\n"
                },
                "disk": {
                    "type": "boolean",
                    "description": "**Private Preview**. Whether or not the replica is a *disk-backed replica*.\n",
                    "willReplaceOnChanges": true
                },
                "idleArrangementMergeEffort": {
                    "type": "integer",
                    "description": "The amount of effort to exert compacting arrangements during idle periods. This is an unstable option! It may be changed or removed at any time.\n",
                    "willReplaceOnChanges": true
                },
                "introspectionDebugging": {
                    "type": "boolean",
                    "description": "Whether to introspect the gathering of the introspection data.\n",
                    "willReplaceOnChanges": true
                },
                "introspectionInterval": {
                    "type": "string",
                    "description": "The interval at which to collect introspection data.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the replica.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                    "willReplaceOnChanges": true
                },
                "size": {
                    "type": "string",
                    "description": "The size of the replica.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "clusterName",
                "size"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ClusterReplica resources.\n",
                "properties": {
                    "availabilityZone": {
                        "type": "string",
                        "description": "The specific availability zone of the replica.\n",
                        "willReplaceOnChanges": true
                    },
                    "clusterName": {
                        "type": "string",
                        "description": "The cluster whose resources you want to create an additional computation of.\n",
                        "willReplaceOnChanges": true
                    },
                    "comment": {
                        "type": "string",
                        "description": "**Public Preview** Comment on an object in the database.\n"
                    },
                    "disk": {
                        "type": "boolean",
                        "description": "**Private Preview**. Whether or not the replica is a *disk-backed replica*.\n",
                        "willReplaceOnChanges": true
                    },
                    "idleArrangementMergeEffort": {
                        "type": "integer",
                        "description": "The amount of effort to exert compacting arrangements during idle periods. This is an unstable option! It may be changed or removed at any time.\n",
                        "willReplaceOnChanges": true
                    },
                    "introspectionDebugging": {
                        "type": "boolean",
                        "description": "Whether to introspect the gathering of the introspection data.\n",
                        "willReplaceOnChanges": true
                    },
                    "introspectionInterval": {
                        "type": "string",
                        "description": "The interval at which to collect introspection data.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The identifier for the replica.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                        "willReplaceOnChanges": true
                    },
                    "size": {
                        "type": "string",
                        "description": "The size of the replica.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/connectionAwsPrivatelink:ConnectionAwsPrivatelink": {
            "description": "An AWS PrivateLink connection establishes a link to an AWS PrivateLink service.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\n// # Create a AWS Private Connection\n// Note: you need the max_aws_privatelink_connections increased for this to work:\n// show max_aws_privatelink_connections;\nconst examplePrivatelinkConnection = new materialize.ConnectionAwsPrivatelink(\"examplePrivatelinkConnection\", {\n    availabilityZones: [\n        \"use1-az2\",\n        \"use1-az6\",\n    ],\n    schemaName: \"public\",\n    serviceName: \"com.amazonaws.us-east-1.materialize.example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\n# # Create a AWS Private Connection\n# Note: you need the max_aws_privatelink_connections increased for this to work:\n# show max_aws_privatelink_connections;\nexample_privatelink_connection = materialize.ConnectionAwsPrivatelink(\"examplePrivatelinkConnection\",\n    availability_zones=[\n        \"use1-az2\",\n        \"use1-az6\",\n    ],\n    schema_name=\"public\",\n    service_name=\"com.amazonaws.us-east-1.materialize.example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // # Create a AWS Private Connection\n    // Note: you need the max_aws_privatelink_connections increased for this to work:\n    // show max_aws_privatelink_connections;\n    var examplePrivatelinkConnection = new Materialize.ConnectionAwsPrivatelink(\"examplePrivatelinkConnection\", new()\n    {\n        AvailabilityZones = new[]\n        {\n            \"use1-az2\",\n            \"use1-az6\",\n        },\n        SchemaName = \"public\",\n        ServiceName = \"com.amazonaws.us-east-1.materialize.example\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.NewConnectionAwsPrivatelink(ctx, \"examplePrivatelinkConnection\", \u0026materialize.ConnectionAwsPrivatelinkArgs{\n\t\t\tAvailabilityZones: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"use1-az2\"),\n\t\t\t\tpulumi.String(\"use1-az6\"),\n\t\t\t},\n\t\t\tSchemaName:  pulumi.String(\"public\"),\n\t\t\tServiceName: pulumi.String(\"com.amazonaws.us-east-1.materialize.example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.ConnectionAwsPrivatelink;\nimport com.pulumi.materialize.ConnectionAwsPrivatelinkArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var examplePrivatelinkConnection = new ConnectionAwsPrivatelink(\"examplePrivatelinkConnection\", ConnectionAwsPrivatelinkArgs.builder()        \n            .availabilityZones(            \n                \"use1-az2\",\n                \"use1-az6\")\n            .schemaName(\"public\")\n            .serviceName(\"com.amazonaws.us-east-1.materialize.example\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a AWS Private Connection\n  # // Note: you need the max_aws_privatelink_connections increased for this to work:\n  # // show max_aws_privatelink_connections;\n  examplePrivatelinkConnection:\n    type: materialize:ConnectionAwsPrivatelink\n    properties:\n      availabilityZones:\n        - use1-az2\n        - use1-az6\n      schemaName: public\n      serviceName: com.amazonaws.us-east-1.materialize.example\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n#Connections can be imported using the connection id\n\n```sh\n $ pulumi import materialize:index/connectionAwsPrivatelink:ConnectionAwsPrivatelink example \u003cregion\u003e:\u003cconnection_id\u003e\n```\n\n Connection id and information be found in the `mz_catalog.mz_connections` table The region is the region where the database is located (e.g. aws/us-east-1) ",
            "properties": {
                "availabilityZones": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The availability zones of the AWS PrivateLink service.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "**Public Preview** Comment on an object in the database.\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the connection database. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the connection.\n"
                },
                "ownershipRole": {
                    "type": "string",
                    "description": "The owernship role of the object.\n"
                },
                "principal": {
                    "type": "string",
                    "description": "The principal of the AWS PrivateLink service.\n",
                    "secret": true
                },
                "qualifiedSqlName": {
                    "type": "string",
                    "description": "The fully qualified name of the connection.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the connection schema. Defaults to `public`.\n"
                },
                "serviceName": {
                    "type": "string",
                    "description": "The name of the AWS PrivateLink service.\n"
                }
            },
            "required": [
                "availabilityZones",
                "name",
                "ownershipRole",
                "principal",
                "qualifiedSqlName",
                "serviceName"
            ],
            "inputProperties": {
                "availabilityZones": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The availability zones of the AWS PrivateLink service.\n",
                    "willReplaceOnChanges": true
                },
                "comment": {
                    "type": "string",
                    "description": "**Public Preview** Comment on an object in the database.\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the connection database. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the connection.\n"
                },
                "ownershipRole": {
                    "type": "string",
                    "description": "The owernship role of the object.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                    "willReplaceOnChanges": true
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the connection schema. Defaults to `public`.\n",
                    "willReplaceOnChanges": true
                },
                "serviceName": {
                    "type": "string",
                    "description": "The name of the AWS PrivateLink service.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "availabilityZones",
                "serviceName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ConnectionAwsPrivatelink resources.\n",
                "properties": {
                    "availabilityZones": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The availability zones of the AWS PrivateLink service.\n",
                        "willReplaceOnChanges": true
                    },
                    "comment": {
                        "type": "string",
                        "description": "**Public Preview** Comment on an object in the database.\n"
                    },
                    "databaseName": {
                        "type": "string",
                        "description": "The identifier for the connection database. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The identifier for the connection.\n"
                    },
                    "ownershipRole": {
                        "type": "string",
                        "description": "The owernship role of the object.\n"
                    },
                    "principal": {
                        "type": "string",
                        "description": "The principal of the AWS PrivateLink service.\n",
                        "secret": true
                    },
                    "qualifiedSqlName": {
                        "type": "string",
                        "description": "The fully qualified name of the connection.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                        "willReplaceOnChanges": true
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "The identifier for the connection schema. Defaults to `public`.\n",
                        "willReplaceOnChanges": true
                    },
                    "serviceName": {
                        "type": "string",
                        "description": "The name of the AWS PrivateLink service.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/connectionConfluentSchemaRegistry:ConnectionConfluentSchemaRegistry": {
            "description": "A Confluent Schema Registry connection establishes a link to a Confluent Schema Registry server.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\n// Create a Confluent Schema Registry Connection\nconst exampleConfluentSchemaRegistryConnection = new materialize.ConnectionConfluentSchemaRegistry(\"exampleConfluentSchemaRegistryConnection\", {\n    password: {\n        databaseName: \"database\",\n        name: \"example\",\n        schemaName: \"schema\",\n    },\n    url: \"https://rp-f00000bar.data.vectorized.cloud:30993\",\n    username: {\n        text: \"example\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\n# Create a Confluent Schema Registry Connection\nexample_confluent_schema_registry_connection = materialize.ConnectionConfluentSchemaRegistry(\"exampleConfluentSchemaRegistryConnection\",\n    password=materialize.ConnectionConfluentSchemaRegistryPasswordArgs(\n        database_name=\"database\",\n        name=\"example\",\n        schema_name=\"schema\",\n    ),\n    url=\"https://rp-f00000bar.data.vectorized.cloud:30993\",\n    username=materialize.ConnectionConfluentSchemaRegistryUsernameArgs(\n        text=\"example\",\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a Confluent Schema Registry Connection\n    var exampleConfluentSchemaRegistryConnection = new Materialize.ConnectionConfluentSchemaRegistry(\"exampleConfluentSchemaRegistryConnection\", new()\n    {\n        Password = new Materialize.Inputs.ConnectionConfluentSchemaRegistryPasswordArgs\n        {\n            DatabaseName = \"database\",\n            Name = \"example\",\n            SchemaName = \"schema\",\n        },\n        Url = \"https://rp-f00000bar.data.vectorized.cloud:30993\",\n        Username = new Materialize.Inputs.ConnectionConfluentSchemaRegistryUsernameArgs\n        {\n            Text = \"example\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.NewConnectionConfluentSchemaRegistry(ctx, \"exampleConfluentSchemaRegistryConnection\", \u0026materialize.ConnectionConfluentSchemaRegistryArgs{\n\t\t\tPassword: \u0026materialize.ConnectionConfluentSchemaRegistryPasswordArgs{\n\t\t\t\tDatabaseName: pulumi.String(\"database\"),\n\t\t\t\tName:         pulumi.String(\"example\"),\n\t\t\t\tSchemaName:   pulumi.String(\"schema\"),\n\t\t\t},\n\t\t\tUrl: pulumi.String(\"https://rp-f00000bar.data.vectorized.cloud:30993\"),\n\t\t\tUsername: \u0026materialize.ConnectionConfluentSchemaRegistryUsernameArgs{\n\t\t\t\tText: pulumi.String(\"example\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.ConnectionConfluentSchemaRegistry;\nimport com.pulumi.materialize.ConnectionConfluentSchemaRegistryArgs;\nimport com.pulumi.materialize.inputs.ConnectionConfluentSchemaRegistryPasswordArgs;\nimport com.pulumi.materialize.inputs.ConnectionConfluentSchemaRegistryUsernameArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleConfluentSchemaRegistryConnection = new ConnectionConfluentSchemaRegistry(\"exampleConfluentSchemaRegistryConnection\", ConnectionConfluentSchemaRegistryArgs.builder()        \n            .password(ConnectionConfluentSchemaRegistryPasswordArgs.builder()\n                .databaseName(\"database\")\n                .name(\"example\")\n                .schemaName(\"schema\")\n                .build())\n            .url(\"https://rp-f00000bar.data.vectorized.cloud:30993\")\n            .username(ConnectionConfluentSchemaRegistryUsernameArgs.builder()\n                .text(\"example\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a Confluent Schema Registry Connection\n  exampleConfluentSchemaRegistryConnection:\n    type: materialize:ConnectionConfluentSchemaRegistry\n    properties:\n      password:\n        databaseName: database\n        name: example\n        schemaName: schema\n      url: https://rp-f00000bar.data.vectorized.cloud:30993\n      username:\n        text: example\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n#Connections can be imported using the connection id\n\n```sh\n $ pulumi import materialize:index/connectionConfluentSchemaRegistry:ConnectionConfluentSchemaRegistry example \u003cregion\u003e:\u003cconnection_id\u003e\n```\n\n Connection id and information be found in the `mz_catalog.mz_connections` table The region is the region where the database is located (e.g. aws/us-east-1) ",
            "properties": {
                "awsPrivatelink": {
                    "$ref": "#/types/materialize:index/ConnectionConfluentSchemaRegistryAwsPrivatelink:ConnectionConfluentSchemaRegistryAwsPrivatelink",
                    "description": "The AWS PrivateLink configuration for the Confluent Schema Registry.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "**Public Preview** Comment on an object in the database.\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the connection database. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the connection.\n"
                },
                "ownershipRole": {
                    "type": "string",
                    "description": "The owernship role of the object.\n"
                },
                "password": {
                    "$ref": "#/types/materialize:index/ConnectionConfluentSchemaRegistryPassword:ConnectionConfluentSchemaRegistryPassword",
                    "description": "The password for the Confluent Schema Registry.\n"
                },
                "qualifiedSqlName": {
                    "type": "string",
                    "description": "The fully qualified name of the connection.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the connection schema. Defaults to `public`.\n"
                },
                "sshTunnel": {
                    "$ref": "#/types/materialize:index/ConnectionConfluentSchemaRegistrySshTunnel:ConnectionConfluentSchemaRegistrySshTunnel",
                    "description": "The SSH tunnel configuration for the Confluent Schema Registry.\n"
                },
                "sslCertificate": {
                    "$ref": "#/types/materialize:index/ConnectionConfluentSchemaRegistrySslCertificate:ConnectionConfluentSchemaRegistrySslCertificate",
                    "description": "The client certificate for the Confluent Schema Registry.. Can be supplied as either free text using `text` or reference to a secret object using `secret`.\n"
                },
                "sslCertificateAuthority": {
                    "$ref": "#/types/materialize:index/ConnectionConfluentSchemaRegistrySslCertificateAuthority:ConnectionConfluentSchemaRegistrySslCertificateAuthority",
                    "description": "The CA certificate for the Confluent Schema Registry.. Can be supplied as either free text using `text` or reference to a secret object using `secret`.\n"
                },
                "sslKey": {
                    "$ref": "#/types/materialize:index/ConnectionConfluentSchemaRegistrySslKey:ConnectionConfluentSchemaRegistrySslKey",
                    "description": "The client key for the Confluent Schema Registry.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL of the Confluent Schema Registry.\n"
                },
                "username": {
                    "$ref": "#/types/materialize:index/ConnectionConfluentSchemaRegistryUsername:ConnectionConfluentSchemaRegistryUsername",
                    "description": "The username for the Confluent Schema Registry.. Can be supplied as either free text using `text` or reference to a secret object using `secret`.\n"
                },
                "validate": {
                    "type": "boolean",
                    "description": "**Private Preview** If the connection should wait for validation.\n"
                }
            },
            "required": [
                "name",
                "ownershipRole",
                "qualifiedSqlName",
                "url"
            ],
            "inputProperties": {
                "awsPrivatelink": {
                    "$ref": "#/types/materialize:index/ConnectionConfluentSchemaRegistryAwsPrivatelink:ConnectionConfluentSchemaRegistryAwsPrivatelink",
                    "description": "The AWS PrivateLink configuration for the Confluent Schema Registry.\n",
                    "willReplaceOnChanges": true
                },
                "comment": {
                    "type": "string",
                    "description": "**Public Preview** Comment on an object in the database.\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the connection database. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the connection.\n"
                },
                "ownershipRole": {
                    "type": "string",
                    "description": "The owernship role of the object.\n"
                },
                "password": {
                    "$ref": "#/types/materialize:index/ConnectionConfluentSchemaRegistryPassword:ConnectionConfluentSchemaRegistryPassword",
                    "description": "The password for the Confluent Schema Registry.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                    "willReplaceOnChanges": true
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the connection schema. Defaults to `public`.\n",
                    "willReplaceOnChanges": true
                },
                "sshTunnel": {
                    "$ref": "#/types/materialize:index/ConnectionConfluentSchemaRegistrySshTunnel:ConnectionConfluentSchemaRegistrySshTunnel",
                    "description": "The SSH tunnel configuration for the Confluent Schema Registry.\n",
                    "willReplaceOnChanges": true
                },
                "sslCertificate": {
                    "$ref": "#/types/materialize:index/ConnectionConfluentSchemaRegistrySslCertificate:ConnectionConfluentSchemaRegistrySslCertificate",
                    "description": "The client certificate for the Confluent Schema Registry.. Can be supplied as either free text using `text` or reference to a secret object using `secret`.\n",
                    "willReplaceOnChanges": true
                },
                "sslCertificateAuthority": {
                    "$ref": "#/types/materialize:index/ConnectionConfluentSchemaRegistrySslCertificateAuthority:ConnectionConfluentSchemaRegistrySslCertificateAuthority",
                    "description": "The CA certificate for the Confluent Schema Registry.. Can be supplied as either free text using `text` or reference to a secret object using `secret`.\n",
                    "willReplaceOnChanges": true
                },
                "sslKey": {
                    "$ref": "#/types/materialize:index/ConnectionConfluentSchemaRegistrySslKey:ConnectionConfluentSchemaRegistrySslKey",
                    "description": "The client key for the Confluent Schema Registry.\n",
                    "willReplaceOnChanges": true
                },
                "url": {
                    "type": "string",
                    "description": "The URL of the Confluent Schema Registry.\n"
                },
                "username": {
                    "$ref": "#/types/materialize:index/ConnectionConfluentSchemaRegistryUsername:ConnectionConfluentSchemaRegistryUsername",
                    "description": "The username for the Confluent Schema Registry.. Can be supplied as either free text using `text` or reference to a secret object using `secret`.\n",
                    "willReplaceOnChanges": true
                },
                "validate": {
                    "type": "boolean",
                    "description": "**Private Preview** If the connection should wait for validation.\n"
                }
            },
            "requiredInputs": [
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ConnectionConfluentSchemaRegistry resources.\n",
                "properties": {
                    "awsPrivatelink": {
                        "$ref": "#/types/materialize:index/ConnectionConfluentSchemaRegistryAwsPrivatelink:ConnectionConfluentSchemaRegistryAwsPrivatelink",
                        "description": "The AWS PrivateLink configuration for the Confluent Schema Registry.\n",
                        "willReplaceOnChanges": true
                    },
                    "comment": {
                        "type": "string",
                        "description": "**Public Preview** Comment on an object in the database.\n"
                    },
                    "databaseName": {
                        "type": "string",
                        "description": "The identifier for the connection database. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The identifier for the connection.\n"
                    },
                    "ownershipRole": {
                        "type": "string",
                        "description": "The owernship role of the object.\n"
                    },
                    "password": {
                        "$ref": "#/types/materialize:index/ConnectionConfluentSchemaRegistryPassword:ConnectionConfluentSchemaRegistryPassword",
                        "description": "The password for the Confluent Schema Registry.\n",
                        "willReplaceOnChanges": true
                    },
                    "qualifiedSqlName": {
                        "type": "string",
                        "description": "The fully qualified name of the connection.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                        "willReplaceOnChanges": true
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "The identifier for the connection schema. Defaults to `public`.\n",
                        "willReplaceOnChanges": true
                    },
                    "sshTunnel": {
                        "$ref": "#/types/materialize:index/ConnectionConfluentSchemaRegistrySshTunnel:ConnectionConfluentSchemaRegistrySshTunnel",
                        "description": "The SSH tunnel configuration for the Confluent Schema Registry.\n",
                        "willReplaceOnChanges": true
                    },
                    "sslCertificate": {
                        "$ref": "#/types/materialize:index/ConnectionConfluentSchemaRegistrySslCertificate:ConnectionConfluentSchemaRegistrySslCertificate",
                        "description": "The client certificate for the Confluent Schema Registry.. Can be supplied as either free text using `text` or reference to a secret object using `secret`.\n",
                        "willReplaceOnChanges": true
                    },
                    "sslCertificateAuthority": {
                        "$ref": "#/types/materialize:index/ConnectionConfluentSchemaRegistrySslCertificateAuthority:ConnectionConfluentSchemaRegistrySslCertificateAuthority",
                        "description": "The CA certificate for the Confluent Schema Registry.. Can be supplied as either free text using `text` or reference to a secret object using `secret`.\n",
                        "willReplaceOnChanges": true
                    },
                    "sslKey": {
                        "$ref": "#/types/materialize:index/ConnectionConfluentSchemaRegistrySslKey:ConnectionConfluentSchemaRegistrySslKey",
                        "description": "The client key for the Confluent Schema Registry.\n",
                        "willReplaceOnChanges": true
                    },
                    "url": {
                        "type": "string",
                        "description": "The URL of the Confluent Schema Registry.\n"
                    },
                    "username": {
                        "$ref": "#/types/materialize:index/ConnectionConfluentSchemaRegistryUsername:ConnectionConfluentSchemaRegistryUsername",
                        "description": "The username for the Confluent Schema Registry.. Can be supplied as either free text using `text` or reference to a secret object using `secret`.\n",
                        "willReplaceOnChanges": true
                    },
                    "validate": {
                        "type": "boolean",
                        "description": "**Private Preview** If the connection should wait for validation.\n"
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/connectionKafka:ConnectionKafka": {
            "description": "A Kafka connection establishes a link to a Kafka cluster.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\n// Create a Kafka Connection\nconst exampleKafkaConnection = new materialize.ConnectionKafka(\"exampleKafkaConnection\", {\n    kafkaBrokers: [{\n        broker: \"b-1.hostname-1:9096\",\n    }],\n    progressTopic: \"example\",\n    saslMechanisms: \"SCRAM-SHA-256\",\n    saslPassword: {\n        databaseName: \"materialize\",\n        name: \"kafka_password\",\n        schemaName: \"public\",\n    },\n    saslUsername: {\n        text: \"user\",\n    },\n});\nconst exampleKafkaConnectionMultipleBrokers = new materialize.ConnectionKafka(\"exampleKafkaConnectionMultipleBrokers\", {kafkaBrokers: [\n    {\n        availabilityZone: \"use1-az1\",\n        broker: \"b-1.hostname-1:9096\",\n        privatelinkConnection: {\n            databaseName: \"materialize\",\n            name: \"example_aws_privatelink_conn\",\n            schemaName: \"public\",\n        },\n        targetGroupPort: 9001,\n    },\n    {\n        availabilityZone: \"use1-az2\",\n        broker: \"b-2.hostname-2:9096\",\n        privatelinkConnection: {\n            databaseName: \"materialize\",\n            name: \"example_aws_privatelink_conn\",\n            schemaName: \"public\",\n        },\n        targetGroupPort: 9002,\n    },\n]});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\n# Create a Kafka Connection\nexample_kafka_connection = materialize.ConnectionKafka(\"exampleKafkaConnection\",\n    kafka_brokers=[materialize.ConnectionKafkaKafkaBrokerArgs(\n        broker=\"b-1.hostname-1:9096\",\n    )],\n    progress_topic=\"example\",\n    sasl_mechanisms=\"SCRAM-SHA-256\",\n    sasl_password=materialize.ConnectionKafkaSaslPasswordArgs(\n        database_name=\"materialize\",\n        name=\"kafka_password\",\n        schema_name=\"public\",\n    ),\n    sasl_username=materialize.ConnectionKafkaSaslUsernameArgs(\n        text=\"user\",\n    ))\nexample_kafka_connection_multiple_brokers = materialize.ConnectionKafka(\"exampleKafkaConnectionMultipleBrokers\", kafka_brokers=[\n    materialize.ConnectionKafkaKafkaBrokerArgs(\n        availability_zone=\"use1-az1\",\n        broker=\"b-1.hostname-1:9096\",\n        privatelink_connection=materialize.ConnectionKafkaKafkaBrokerPrivatelinkConnectionArgs(\n            database_name=\"materialize\",\n            name=\"example_aws_privatelink_conn\",\n            schema_name=\"public\",\n        ),\n        target_group_port=9001,\n    ),\n    materialize.ConnectionKafkaKafkaBrokerArgs(\n        availability_zone=\"use1-az2\",\n        broker=\"b-2.hostname-2:9096\",\n        privatelink_connection=materialize.ConnectionKafkaKafkaBrokerPrivatelinkConnectionArgs(\n            database_name=\"materialize\",\n            name=\"example_aws_privatelink_conn\",\n            schema_name=\"public\",\n        ),\n        target_group_port=9002,\n    ),\n])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a Kafka Connection\n    var exampleKafkaConnection = new Materialize.ConnectionKafka(\"exampleKafkaConnection\", new()\n    {\n        KafkaBrokers = new[]\n        {\n            new Materialize.Inputs.ConnectionKafkaKafkaBrokerArgs\n            {\n                Broker = \"b-1.hostname-1:9096\",\n            },\n        },\n        ProgressTopic = \"example\",\n        SaslMechanisms = \"SCRAM-SHA-256\",\n        SaslPassword = new Materialize.Inputs.ConnectionKafkaSaslPasswordArgs\n        {\n            DatabaseName = \"materialize\",\n            Name = \"kafka_password\",\n            SchemaName = \"public\",\n        },\n        SaslUsername = new Materialize.Inputs.ConnectionKafkaSaslUsernameArgs\n        {\n            Text = \"user\",\n        },\n    });\n\n    var exampleKafkaConnectionMultipleBrokers = new Materialize.ConnectionKafka(\"exampleKafkaConnectionMultipleBrokers\", new()\n    {\n        KafkaBrokers = new[]\n        {\n            new Materialize.Inputs.ConnectionKafkaKafkaBrokerArgs\n            {\n                AvailabilityZone = \"use1-az1\",\n                Broker = \"b-1.hostname-1:9096\",\n                PrivatelinkConnection = new Materialize.Inputs.ConnectionKafkaKafkaBrokerPrivatelinkConnectionArgs\n                {\n                    DatabaseName = \"materialize\",\n                    Name = \"example_aws_privatelink_conn\",\n                    SchemaName = \"public\",\n                },\n                TargetGroupPort = 9001,\n            },\n            new Materialize.Inputs.ConnectionKafkaKafkaBrokerArgs\n            {\n                AvailabilityZone = \"use1-az2\",\n                Broker = \"b-2.hostname-2:9096\",\n                PrivatelinkConnection = new Materialize.Inputs.ConnectionKafkaKafkaBrokerPrivatelinkConnectionArgs\n                {\n                    DatabaseName = \"materialize\",\n                    Name = \"example_aws_privatelink_conn\",\n                    SchemaName = \"public\",\n                },\n                TargetGroupPort = 9002,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.NewConnectionKafka(ctx, \"exampleKafkaConnection\", \u0026materialize.ConnectionKafkaArgs{\n\t\t\tKafkaBrokers: materialize.ConnectionKafkaKafkaBrokerArray{\n\t\t\t\t\u0026materialize.ConnectionKafkaKafkaBrokerArgs{\n\t\t\t\t\tBroker: pulumi.String(\"b-1.hostname-1:9096\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tProgressTopic:  pulumi.String(\"example\"),\n\t\t\tSaslMechanisms: pulumi.String(\"SCRAM-SHA-256\"),\n\t\t\tSaslPassword: \u0026materialize.ConnectionKafkaSaslPasswordArgs{\n\t\t\t\tDatabaseName: pulumi.String(\"materialize\"),\n\t\t\t\tName:         pulumi.String(\"kafka_password\"),\n\t\t\t\tSchemaName:   pulumi.String(\"public\"),\n\t\t\t},\n\t\t\tSaslUsername: \u0026materialize.ConnectionKafkaSaslUsernameArgs{\n\t\t\t\tText: pulumi.String(\"user\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = materialize.NewConnectionKafka(ctx, \"exampleKafkaConnectionMultipleBrokers\", \u0026materialize.ConnectionKafkaArgs{\n\t\t\tKafkaBrokers: materialize.ConnectionKafkaKafkaBrokerArray{\n\t\t\t\t\u0026materialize.ConnectionKafkaKafkaBrokerArgs{\n\t\t\t\t\tAvailabilityZone: pulumi.String(\"use1-az1\"),\n\t\t\t\t\tBroker:           pulumi.String(\"b-1.hostname-1:9096\"),\n\t\t\t\t\tPrivatelinkConnection: \u0026materialize.ConnectionKafkaKafkaBrokerPrivatelinkConnectionArgs{\n\t\t\t\t\t\tDatabaseName: pulumi.String(\"materialize\"),\n\t\t\t\t\t\tName:         pulumi.String(\"example_aws_privatelink_conn\"),\n\t\t\t\t\t\tSchemaName:   pulumi.String(\"public\"),\n\t\t\t\t\t},\n\t\t\t\t\tTargetGroupPort: pulumi.Int(9001),\n\t\t\t\t},\n\t\t\t\t\u0026materialize.ConnectionKafkaKafkaBrokerArgs{\n\t\t\t\t\tAvailabilityZone: pulumi.String(\"use1-az2\"),\n\t\t\t\t\tBroker:           pulumi.String(\"b-2.hostname-2:9096\"),\n\t\t\t\t\tPrivatelinkConnection: \u0026materialize.ConnectionKafkaKafkaBrokerPrivatelinkConnectionArgs{\n\t\t\t\t\t\tDatabaseName: pulumi.String(\"materialize\"),\n\t\t\t\t\t\tName:         pulumi.String(\"example_aws_privatelink_conn\"),\n\t\t\t\t\t\tSchemaName:   pulumi.String(\"public\"),\n\t\t\t\t\t},\n\t\t\t\t\tTargetGroupPort: pulumi.Int(9002),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.ConnectionKafka;\nimport com.pulumi.materialize.ConnectionKafkaArgs;\nimport com.pulumi.materialize.inputs.ConnectionKafkaKafkaBrokerArgs;\nimport com.pulumi.materialize.inputs.ConnectionKafkaSaslPasswordArgs;\nimport com.pulumi.materialize.inputs.ConnectionKafkaSaslUsernameArgs;\nimport com.pulumi.materialize.inputs.ConnectionKafkaKafkaBrokerPrivatelinkConnectionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleKafkaConnection = new ConnectionKafka(\"exampleKafkaConnection\", ConnectionKafkaArgs.builder()        \n            .kafkaBrokers(ConnectionKafkaKafkaBrokerArgs.builder()\n                .broker(\"b-1.hostname-1:9096\")\n                .build())\n            .progressTopic(\"example\")\n            .saslMechanisms(\"SCRAM-SHA-256\")\n            .saslPassword(ConnectionKafkaSaslPasswordArgs.builder()\n                .databaseName(\"materialize\")\n                .name(\"kafka_password\")\n                .schemaName(\"public\")\n                .build())\n            .saslUsername(ConnectionKafkaSaslUsernameArgs.builder()\n                .text(\"user\")\n                .build())\n            .build());\n\n        var exampleKafkaConnectionMultipleBrokers = new ConnectionKafka(\"exampleKafkaConnectionMultipleBrokers\", ConnectionKafkaArgs.builder()        \n            .kafkaBrokers(            \n                ConnectionKafkaKafkaBrokerArgs.builder()\n                    .availabilityZone(\"use1-az1\")\n                    .broker(\"b-1.hostname-1:9096\")\n                    .privatelinkConnection(ConnectionKafkaKafkaBrokerPrivatelinkConnectionArgs.builder()\n                        .databaseName(\"materialize\")\n                        .name(\"example_aws_privatelink_conn\")\n                        .schemaName(\"public\")\n                        .build())\n                    .targetGroupPort(\"9001\")\n                    .build(),\n                ConnectionKafkaKafkaBrokerArgs.builder()\n                    .availabilityZone(\"use1-az2\")\n                    .broker(\"b-2.hostname-2:9096\")\n                    .privatelinkConnection(ConnectionKafkaKafkaBrokerPrivatelinkConnectionArgs.builder()\n                        .databaseName(\"materialize\")\n                        .name(\"example_aws_privatelink_conn\")\n                        .schemaName(\"public\")\n                        .build())\n                    .targetGroupPort(\"9002\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a Kafka Connection\n  exampleKafkaConnection:\n    type: materialize:ConnectionKafka\n    properties:\n      kafkaBrokers:\n        - broker: b-1.hostname-1:9096\n      progressTopic: example\n      saslMechanisms: SCRAM-SHA-256\n      saslPassword:\n        databaseName: materialize\n        name: kafka_password\n        schemaName: public\n      saslUsername:\n        text: user\n  exampleKafkaConnectionMultipleBrokers:\n    type: materialize:ConnectionKafka\n    properties:\n      kafkaBrokers:\n        - availabilityZone: use1-az1\n          broker: b-1.hostname-1:9096\n          privatelinkConnection:\n            databaseName: materialize\n            name: example_aws_privatelink_conn\n            schemaName: public\n          targetGroupPort: '9001'\n        - availabilityZone: use1-az2\n          broker: b-2.hostname-2:9096\n          privatelinkConnection:\n            databaseName: materialize\n            name: example_aws_privatelink_conn\n            schemaName: public\n          targetGroupPort: '9002'\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nConnections can be imported using the connection id\n\n```sh\n $ pulumi import materialize:index/connectionKafka:ConnectionKafka example \u003cregion\u003e:\u003cconnection_id\u003e\n```\n\n Connection id and information be found in the `mz_catalog.mz_connections` table The region is the region where the database is located (e.g. aws/us-east-1) ",
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "**Public Preview** Comment on an object in the database.\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the connection database. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "kafkaBrokers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/materialize:index/ConnectionKafkaKafkaBroker:ConnectionKafkaKafkaBroker"
                    },
                    "description": "The Kafka brokers configuration.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the connection.\n"
                },
                "ownershipRole": {
                    "type": "string",
                    "description": "The owernship role of the object.\n"
                },
                "progressTopic": {
                    "type": "string",
                    "description": "The name of a topic that Kafka sinks can use to track internal consistency metadata.\n"
                },
                "qualifiedSqlName": {
                    "type": "string",
                    "description": "The fully qualified name of the connection.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n"
                },
                "saslMechanisms": {
                    "type": "string",
                    "description": "The SASL mechanism for the Kafka broker.\n"
                },
                "saslPassword": {
                    "$ref": "#/types/materialize:index/ConnectionKafkaSaslPassword:ConnectionKafkaSaslPassword",
                    "description": "The SASL password for the Kafka broker.\n"
                },
                "saslUsername": {
                    "$ref": "#/types/materialize:index/ConnectionKafkaSaslUsername:ConnectionKafkaSaslUsername",
                    "description": "The SASL username for the Kafka broker.. Can be supplied as either free text using `text` or reference to a secret object using `secret`.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the connection schema. Defaults to `public`.\n"
                },
                "securityProtocol": {
                    "type": "string",
                    "description": "The security protocol to use: `PLAINTEXT`, `SSL`, `SASL_PLAINTEXT`, or `SASL_SSL`.\n"
                },
                "sshTunnel": {
                    "$ref": "#/types/materialize:index/ConnectionKafkaSshTunnel:ConnectionKafkaSshTunnel",
                    "description": "The default SSH tunnel configuration for the Kafka brokers.\n"
                },
                "sslCertificate": {
                    "$ref": "#/types/materialize:index/ConnectionKafkaSslCertificate:ConnectionKafkaSslCertificate",
                    "description": "The client certificate for the Kafka broker.. Can be supplied as either free text using `text` or reference to a secret object using `secret`.\n"
                },
                "sslCertificateAuthority": {
                    "$ref": "#/types/materialize:index/ConnectionKafkaSslCertificateAuthority:ConnectionKafkaSslCertificateAuthority",
                    "description": "The CA certificate for the Kafka broker.. Can be supplied as either free text using `text` or reference to a secret object using `secret`.\n"
                },
                "sslKey": {
                    "$ref": "#/types/materialize:index/ConnectionKafkaSslKey:ConnectionKafkaSslKey",
                    "description": "The client key for the Kafka broker.\n"
                },
                "validate": {
                    "type": "boolean",
                    "description": "**Private Preview** If the connection should wait for validation.\n"
                }
            },
            "required": [
                "kafkaBrokers",
                "name",
                "ownershipRole",
                "qualifiedSqlName"
            ],
            "inputProperties": {
                "comment": {
                    "type": "string",
                    "description": "**Public Preview** Comment on an object in the database.\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the connection database. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n",
                    "willReplaceOnChanges": true
                },
                "kafkaBrokers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/materialize:index/ConnectionKafkaKafkaBroker:ConnectionKafkaKafkaBroker"
                    },
                    "description": "The Kafka brokers configuration.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the connection.\n"
                },
                "ownershipRole": {
                    "type": "string",
                    "description": "The owernship role of the object.\n"
                },
                "progressTopic": {
                    "type": "string",
                    "description": "The name of a topic that Kafka sinks can use to track internal consistency metadata.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                    "willReplaceOnChanges": true
                },
                "saslMechanisms": {
                    "type": "string",
                    "description": "The SASL mechanism for the Kafka broker.\n",
                    "willReplaceOnChanges": true
                },
                "saslPassword": {
                    "$ref": "#/types/materialize:index/ConnectionKafkaSaslPassword:ConnectionKafkaSaslPassword",
                    "description": "The SASL password for the Kafka broker.\n",
                    "willReplaceOnChanges": true
                },
                "saslUsername": {
                    "$ref": "#/types/materialize:index/ConnectionKafkaSaslUsername:ConnectionKafkaSaslUsername",
                    "description": "The SASL username for the Kafka broker.. Can be supplied as either free text using `text` or reference to a secret object using `secret`.\n",
                    "willReplaceOnChanges": true
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the connection schema. Defaults to `public`.\n",
                    "willReplaceOnChanges": true
                },
                "securityProtocol": {
                    "type": "string",
                    "description": "The security protocol to use: `PLAINTEXT`, `SSL`, `SASL_PLAINTEXT`, or `SASL_SSL`.\n",
                    "willReplaceOnChanges": true
                },
                "sshTunnel": {
                    "$ref": "#/types/materialize:index/ConnectionKafkaSshTunnel:ConnectionKafkaSshTunnel",
                    "description": "The default SSH tunnel configuration for the Kafka brokers.\n",
                    "willReplaceOnChanges": true
                },
                "sslCertificate": {
                    "$ref": "#/types/materialize:index/ConnectionKafkaSslCertificate:ConnectionKafkaSslCertificate",
                    "description": "The client certificate for the Kafka broker.. Can be supplied as either free text using `text` or reference to a secret object using `secret`.\n",
                    "willReplaceOnChanges": true
                },
                "sslCertificateAuthority": {
                    "$ref": "#/types/materialize:index/ConnectionKafkaSslCertificateAuthority:ConnectionKafkaSslCertificateAuthority",
                    "description": "The CA certificate for the Kafka broker.. Can be supplied as either free text using `text` or reference to a secret object using `secret`.\n",
                    "willReplaceOnChanges": true
                },
                "sslKey": {
                    "$ref": "#/types/materialize:index/ConnectionKafkaSslKey:ConnectionKafkaSslKey",
                    "description": "The client key for the Kafka broker.\n",
                    "willReplaceOnChanges": true
                },
                "validate": {
                    "type": "boolean",
                    "description": "**Private Preview** If the connection should wait for validation.\n"
                }
            },
            "requiredInputs": [
                "kafkaBrokers"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ConnectionKafka resources.\n",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "**Public Preview** Comment on an object in the database.\n"
                    },
                    "databaseName": {
                        "type": "string",
                        "description": "The identifier for the connection database. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n",
                        "willReplaceOnChanges": true
                    },
                    "kafkaBrokers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/materialize:index/ConnectionKafkaKafkaBroker:ConnectionKafkaKafkaBroker"
                        },
                        "description": "The Kafka brokers configuration.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The identifier for the connection.\n"
                    },
                    "ownershipRole": {
                        "type": "string",
                        "description": "The owernship role of the object.\n"
                    },
                    "progressTopic": {
                        "type": "string",
                        "description": "The name of a topic that Kafka sinks can use to track internal consistency metadata.\n",
                        "willReplaceOnChanges": true
                    },
                    "qualifiedSqlName": {
                        "type": "string",
                        "description": "The fully qualified name of the connection.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                        "willReplaceOnChanges": true
                    },
                    "saslMechanisms": {
                        "type": "string",
                        "description": "The SASL mechanism for the Kafka broker.\n",
                        "willReplaceOnChanges": true
                    },
                    "saslPassword": {
                        "$ref": "#/types/materialize:index/ConnectionKafkaSaslPassword:ConnectionKafkaSaslPassword",
                        "description": "The SASL password for the Kafka broker.\n",
                        "willReplaceOnChanges": true
                    },
                    "saslUsername": {
                        "$ref": "#/types/materialize:index/ConnectionKafkaSaslUsername:ConnectionKafkaSaslUsername",
                        "description": "The SASL username for the Kafka broker.. Can be supplied as either free text using `text` or reference to a secret object using `secret`.\n",
                        "willReplaceOnChanges": true
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "The identifier for the connection schema. Defaults to `public`.\n",
                        "willReplaceOnChanges": true
                    },
                    "securityProtocol": {
                        "type": "string",
                        "description": "The security protocol to use: `PLAINTEXT`, `SSL`, `SASL_PLAINTEXT`, or `SASL_SSL`.\n",
                        "willReplaceOnChanges": true
                    },
                    "sshTunnel": {
                        "$ref": "#/types/materialize:index/ConnectionKafkaSshTunnel:ConnectionKafkaSshTunnel",
                        "description": "The default SSH tunnel configuration for the Kafka brokers.\n",
                        "willReplaceOnChanges": true
                    },
                    "sslCertificate": {
                        "$ref": "#/types/materialize:index/ConnectionKafkaSslCertificate:ConnectionKafkaSslCertificate",
                        "description": "The client certificate for the Kafka broker.. Can be supplied as either free text using `text` or reference to a secret object using `secret`.\n",
                        "willReplaceOnChanges": true
                    },
                    "sslCertificateAuthority": {
                        "$ref": "#/types/materialize:index/ConnectionKafkaSslCertificateAuthority:ConnectionKafkaSslCertificateAuthority",
                        "description": "The CA certificate for the Kafka broker.. Can be supplied as either free text using `text` or reference to a secret object using `secret`.\n",
                        "willReplaceOnChanges": true
                    },
                    "sslKey": {
                        "$ref": "#/types/materialize:index/ConnectionKafkaSslKey:ConnectionKafkaSslKey",
                        "description": "The client key for the Kafka broker.\n",
                        "willReplaceOnChanges": true
                    },
                    "validate": {
                        "type": "boolean",
                        "description": "**Private Preview** If the connection should wait for validation.\n"
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/connectionPostgres:ConnectionPostgres": {
            "description": "A Postgres connection establishes a link to a single database of a PostgreSQL server.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\n// Create a Postgres Connection with SSH tunnel \u0026 plain text user\nconst examplePostgresConnection = new materialize.ConnectionPostgres(\"examplePostgresConnection\", {\n    database: \"example\",\n    host: \"instance.foo000.us-west-1.rds.amazonaws.com\",\n    password: {\n        databaseName: \"database\",\n        name: \"example\",\n        schemaName: \"schema\",\n    },\n    port: 5432,\n    sshTunnel: {\n        name: \"example\",\n    },\n    user: {\n        text: \"my_user\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\n# Create a Postgres Connection with SSH tunnel \u0026 plain text user\nexample_postgres_connection = materialize.ConnectionPostgres(\"examplePostgresConnection\",\n    database=\"example\",\n    host=\"instance.foo000.us-west-1.rds.amazonaws.com\",\n    password=materialize.ConnectionPostgresPasswordArgs(\n        database_name=\"database\",\n        name=\"example\",\n        schema_name=\"schema\",\n    ),\n    port=5432,\n    ssh_tunnel=materialize.ConnectionPostgresSshTunnelArgs(\n        name=\"example\",\n    ),\n    user=materialize.ConnectionPostgresUserArgs(\n        text=\"my_user\",\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a Postgres Connection with SSH tunnel \u0026 plain text user\n    var examplePostgresConnection = new Materialize.ConnectionPostgres(\"examplePostgresConnection\", new()\n    {\n        Database = \"example\",\n        Host = \"instance.foo000.us-west-1.rds.amazonaws.com\",\n        Password = new Materialize.Inputs.ConnectionPostgresPasswordArgs\n        {\n            DatabaseName = \"database\",\n            Name = \"example\",\n            SchemaName = \"schema\",\n        },\n        Port = 5432,\n        SshTunnel = new Materialize.Inputs.ConnectionPostgresSshTunnelArgs\n        {\n            Name = \"example\",\n        },\n        User = new Materialize.Inputs.ConnectionPostgresUserArgs\n        {\n            Text = \"my_user\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.NewConnectionPostgres(ctx, \"examplePostgresConnection\", \u0026materialize.ConnectionPostgresArgs{\n\t\t\tDatabase: pulumi.String(\"example\"),\n\t\t\tHost:     pulumi.String(\"instance.foo000.us-west-1.rds.amazonaws.com\"),\n\t\t\tPassword: \u0026materialize.ConnectionPostgresPasswordArgs{\n\t\t\t\tDatabaseName: pulumi.String(\"database\"),\n\t\t\t\tName:         pulumi.String(\"example\"),\n\t\t\t\tSchemaName:   pulumi.String(\"schema\"),\n\t\t\t},\n\t\t\tPort: pulumi.Int(5432),\n\t\t\tSshTunnel: \u0026materialize.ConnectionPostgresSshTunnelArgs{\n\t\t\t\tName: pulumi.String(\"example\"),\n\t\t\t},\n\t\t\tUser: \u0026materialize.ConnectionPostgresUserArgs{\n\t\t\t\tText: pulumi.String(\"my_user\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.ConnectionPostgres;\nimport com.pulumi.materialize.ConnectionPostgresArgs;\nimport com.pulumi.materialize.inputs.ConnectionPostgresPasswordArgs;\nimport com.pulumi.materialize.inputs.ConnectionPostgresSshTunnelArgs;\nimport com.pulumi.materialize.inputs.ConnectionPostgresUserArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var examplePostgresConnection = new ConnectionPostgres(\"examplePostgresConnection\", ConnectionPostgresArgs.builder()        \n            .database(\"example\")\n            .host(\"instance.foo000.us-west-1.rds.amazonaws.com\")\n            .password(ConnectionPostgresPasswordArgs.builder()\n                .databaseName(\"database\")\n                .name(\"example\")\n                .schemaName(\"schema\")\n                .build())\n            .port(5432)\n            .sshTunnel(ConnectionPostgresSshTunnelArgs.builder()\n                .name(\"example\")\n                .build())\n            .user(ConnectionPostgresUserArgs.builder()\n                .text(\"my_user\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a Postgres Connection with SSH tunnel \u0026 plain text user\n  examplePostgresConnection:\n    type: materialize:ConnectionPostgres\n    properties:\n      database: example\n      host: instance.foo000.us-west-1.rds.amazonaws.com\n      password:\n        databaseName: database\n        name: example\n        schemaName: schema\n      port: 5432\n      sshTunnel:\n        name: example\n      user:\n        text: my_user\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nConnections can be imported using the connection id\n\n```sh\n $ pulumi import materialize:index/connectionPostgres:ConnectionPostgres example \u003cregion\u003e:\u003cconnection_id\u003e\n```\n\n Connection id and information be found in the `mz_catalog.mz_connections` table The region is the region where the database is located (e.g. aws/us-east-1) ",
            "properties": {
                "awsPrivatelink": {
                    "$ref": "#/types/materialize:index/ConnectionPostgresAwsPrivatelink:ConnectionPostgresAwsPrivatelink",
                    "description": "The AWS PrivateLink configuration for the Postgres database.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "**Public Preview** Comment on an object in the database.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The target Postgres database.\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the connection database. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "host": {
                    "type": "string",
                    "description": "The Postgres database hostname.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the connection.\n"
                },
                "ownershipRole": {
                    "type": "string",
                    "description": "The owernship role of the object.\n"
                },
                "password": {
                    "$ref": "#/types/materialize:index/ConnectionPostgresPassword:ConnectionPostgresPassword",
                    "description": "The Postgres database password.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The Postgres database port.\n"
                },
                "qualifiedSqlName": {
                    "type": "string",
                    "description": "The fully qualified name of the connection.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the connection schema. Defaults to `public`.\n"
                },
                "sshTunnel": {
                    "$ref": "#/types/materialize:index/ConnectionPostgresSshTunnel:ConnectionPostgresSshTunnel",
                    "description": "The SSH tunnel configuration for the Postgres database.\n"
                },
                "sslCertificate": {
                    "$ref": "#/types/materialize:index/ConnectionPostgresSslCertificate:ConnectionPostgresSslCertificate",
                    "description": "The client certificate for the Postgres database.. Can be supplied as either free text using `text` or reference to a secret object using `secret`.\n"
                },
                "sslCertificateAuthority": {
                    "$ref": "#/types/materialize:index/ConnectionPostgresSslCertificateAuthority:ConnectionPostgresSslCertificateAuthority",
                    "description": "The CA certificate for the Postgres database.. Can be supplied as either free text using `text` or reference to a secret object using `secret`.\n"
                },
                "sslKey": {
                    "$ref": "#/types/materialize:index/ConnectionPostgresSslKey:ConnectionPostgresSslKey",
                    "description": "The client key for the Postgres database.\n"
                },
                "sslMode": {
                    "type": "string",
                    "description": "The SSL mode for the Postgres database.\n"
                },
                "user": {
                    "$ref": "#/types/materialize:index/ConnectionPostgresUser:ConnectionPostgresUser",
                    "description": "The Postgres database username.. Can be supplied as either free text using `text` or reference to a secret object using `secret`.\n"
                },
                "validate": {
                    "type": "boolean",
                    "description": "**Private Preview** If the connection should wait for validation.\n"
                }
            },
            "required": [
                "database",
                "host",
                "name",
                "ownershipRole",
                "qualifiedSqlName",
                "user"
            ],
            "inputProperties": {
                "awsPrivatelink": {
                    "$ref": "#/types/materialize:index/ConnectionPostgresAwsPrivatelink:ConnectionPostgresAwsPrivatelink",
                    "description": "The AWS PrivateLink configuration for the Postgres database.\n",
                    "willReplaceOnChanges": true
                },
                "comment": {
                    "type": "string",
                    "description": "**Public Preview** Comment on an object in the database.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The target Postgres database.\n",
                    "willReplaceOnChanges": true
                },
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the connection database. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n",
                    "willReplaceOnChanges": true
                },
                "host": {
                    "type": "string",
                    "description": "The Postgres database hostname.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the connection.\n"
                },
                "ownershipRole": {
                    "type": "string",
                    "description": "The owernship role of the object.\n"
                },
                "password": {
                    "$ref": "#/types/materialize:index/ConnectionPostgresPassword:ConnectionPostgresPassword",
                    "description": "The Postgres database password.\n",
                    "willReplaceOnChanges": true
                },
                "port": {
                    "type": "integer",
                    "description": "The Postgres database port.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                    "willReplaceOnChanges": true
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the connection schema. Defaults to `public`.\n",
                    "willReplaceOnChanges": true
                },
                "sshTunnel": {
                    "$ref": "#/types/materialize:index/ConnectionPostgresSshTunnel:ConnectionPostgresSshTunnel",
                    "description": "The SSH tunnel configuration for the Postgres database.\n",
                    "willReplaceOnChanges": true
                },
                "sslCertificate": {
                    "$ref": "#/types/materialize:index/ConnectionPostgresSslCertificate:ConnectionPostgresSslCertificate",
                    "description": "The client certificate for the Postgres database.. Can be supplied as either free text using `text` or reference to a secret object using `secret`.\n",
                    "willReplaceOnChanges": true
                },
                "sslCertificateAuthority": {
                    "$ref": "#/types/materialize:index/ConnectionPostgresSslCertificateAuthority:ConnectionPostgresSslCertificateAuthority",
                    "description": "The CA certificate for the Postgres database.. Can be supplied as either free text using `text` or reference to a secret object using `secret`.\n",
                    "willReplaceOnChanges": true
                },
                "sslKey": {
                    "$ref": "#/types/materialize:index/ConnectionPostgresSslKey:ConnectionPostgresSslKey",
                    "description": "The client key for the Postgres database.\n",
                    "willReplaceOnChanges": true
                },
                "sslMode": {
                    "type": "string",
                    "description": "The SSL mode for the Postgres database.\n",
                    "willReplaceOnChanges": true
                },
                "user": {
                    "$ref": "#/types/materialize:index/ConnectionPostgresUser:ConnectionPostgresUser",
                    "description": "The Postgres database username.. Can be supplied as either free text using `text` or reference to a secret object using `secret`.\n",
                    "willReplaceOnChanges": true
                },
                "validate": {
                    "type": "boolean",
                    "description": "**Private Preview** If the connection should wait for validation.\n"
                }
            },
            "requiredInputs": [
                "database",
                "host",
                "user"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ConnectionPostgres resources.\n",
                "properties": {
                    "awsPrivatelink": {
                        "$ref": "#/types/materialize:index/ConnectionPostgresAwsPrivatelink:ConnectionPostgresAwsPrivatelink",
                        "description": "The AWS PrivateLink configuration for the Postgres database.\n",
                        "willReplaceOnChanges": true
                    },
                    "comment": {
                        "type": "string",
                        "description": "**Public Preview** Comment on an object in the database.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The target Postgres database.\n",
                        "willReplaceOnChanges": true
                    },
                    "databaseName": {
                        "type": "string",
                        "description": "The identifier for the connection database. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n",
                        "willReplaceOnChanges": true
                    },
                    "host": {
                        "type": "string",
                        "description": "The Postgres database hostname.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The identifier for the connection.\n"
                    },
                    "ownershipRole": {
                        "type": "string",
                        "description": "The owernship role of the object.\n"
                    },
                    "password": {
                        "$ref": "#/types/materialize:index/ConnectionPostgresPassword:ConnectionPostgresPassword",
                        "description": "The Postgres database password.\n",
                        "willReplaceOnChanges": true
                    },
                    "port": {
                        "type": "integer",
                        "description": "The Postgres database port.\n",
                        "willReplaceOnChanges": true
                    },
                    "qualifiedSqlName": {
                        "type": "string",
                        "description": "The fully qualified name of the connection.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                        "willReplaceOnChanges": true
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "The identifier for the connection schema. Defaults to `public`.\n",
                        "willReplaceOnChanges": true
                    },
                    "sshTunnel": {
                        "$ref": "#/types/materialize:index/ConnectionPostgresSshTunnel:ConnectionPostgresSshTunnel",
                        "description": "The SSH tunnel configuration for the Postgres database.\n",
                        "willReplaceOnChanges": true
                    },
                    "sslCertificate": {
                        "$ref": "#/types/materialize:index/ConnectionPostgresSslCertificate:ConnectionPostgresSslCertificate",
                        "description": "The client certificate for the Postgres database.. Can be supplied as either free text using `text` or reference to a secret object using `secret`.\n",
                        "willReplaceOnChanges": true
                    },
                    "sslCertificateAuthority": {
                        "$ref": "#/types/materialize:index/ConnectionPostgresSslCertificateAuthority:ConnectionPostgresSslCertificateAuthority",
                        "description": "The CA certificate for the Postgres database.. Can be supplied as either free text using `text` or reference to a secret object using `secret`.\n",
                        "willReplaceOnChanges": true
                    },
                    "sslKey": {
                        "$ref": "#/types/materialize:index/ConnectionPostgresSslKey:ConnectionPostgresSslKey",
                        "description": "The client key for the Postgres database.\n",
                        "willReplaceOnChanges": true
                    },
                    "sslMode": {
                        "type": "string",
                        "description": "The SSL mode for the Postgres database.\n",
                        "willReplaceOnChanges": true
                    },
                    "user": {
                        "$ref": "#/types/materialize:index/ConnectionPostgresUser:ConnectionPostgresUser",
                        "description": "The Postgres database username.. Can be supplied as either free text using `text` or reference to a secret object using `secret`.\n",
                        "willReplaceOnChanges": true
                    },
                    "validate": {
                        "type": "boolean",
                        "description": "**Private Preview** If the connection should wait for validation.\n"
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/connectionSshTunnel:ConnectionSshTunnel": {
            "description": "An SSH tunnel connection establishes a link to an SSH bastion server.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\n// Create SSH Connection\nconst exampleSshConnection = new materialize.ConnectionSshTunnel(\"exampleSshConnection\", {\n    host: \"example.com\",\n    port: 22,\n    schemaName: \"public\",\n    user: \"example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\n# Create SSH Connection\nexample_ssh_connection = materialize.ConnectionSshTunnel(\"exampleSshConnection\",\n    host=\"example.com\",\n    port=22,\n    schema_name=\"public\",\n    user=\"example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create SSH Connection\n    var exampleSshConnection = new Materialize.ConnectionSshTunnel(\"exampleSshConnection\", new()\n    {\n        Host = \"example.com\",\n        Port = 22,\n        SchemaName = \"public\",\n        User = \"example\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.NewConnectionSshTunnel(ctx, \"exampleSshConnection\", \u0026materialize.ConnectionSshTunnelArgs{\n\t\t\tHost:       pulumi.String(\"example.com\"),\n\t\t\tPort:       pulumi.Int(22),\n\t\t\tSchemaName: pulumi.String(\"public\"),\n\t\t\tUser:       pulumi.String(\"example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.ConnectionSshTunnel;\nimport com.pulumi.materialize.ConnectionSshTunnelArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleSshConnection = new ConnectionSshTunnel(\"exampleSshConnection\", ConnectionSshTunnelArgs.builder()        \n            .host(\"example.com\")\n            .port(22)\n            .schemaName(\"public\")\n            .user(\"example\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create SSH Connection\n  exampleSshConnection:\n    type: materialize:ConnectionSshTunnel\n    properties:\n      host: example.com\n      port: 22\n      schemaName: public\n      user: example\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n#Connections can be imported using the connection id\n\n```sh\n $ pulumi import materialize:index/connectionSshTunnel:ConnectionSshTunnel example \u003cregion\u003e:\u003cconnection_id\u003e\n```\n\n Connection id and information be found in the `mz_catalog.mz_connections` table The region is the region where the database is located (e.g. aws/us-east-1) ",
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "**Public Preview** Comment on an object in the database.\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the connection database. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "host": {
                    "type": "string",
                    "description": "The host of the SSH tunnel.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the connection.\n"
                },
                "ownershipRole": {
                    "type": "string",
                    "description": "The owernship role of the object.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port of the SSH tunnel.\n"
                },
                "publicKey1": {
                    "type": "string",
                    "description": "The first public key associated with the SSH tunnel.\n"
                },
                "publicKey2": {
                    "type": "string",
                    "description": "The second public key associated with the SSH tunnel.\n"
                },
                "qualifiedSqlName": {
                    "type": "string",
                    "description": "The fully qualified name of the connection.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the connection schema. Defaults to `public`.\n"
                },
                "user": {
                    "type": "string",
                    "description": "The user of the SSH tunnel.\n"
                }
            },
            "required": [
                "host",
                "name",
                "ownershipRole",
                "port",
                "publicKey1",
                "publicKey2",
                "qualifiedSqlName",
                "user"
            ],
            "inputProperties": {
                "comment": {
                    "type": "string",
                    "description": "**Public Preview** Comment on an object in the database.\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the connection database. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n",
                    "willReplaceOnChanges": true
                },
                "host": {
                    "type": "string",
                    "description": "The host of the SSH tunnel.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the connection.\n"
                },
                "ownershipRole": {
                    "type": "string",
                    "description": "The owernship role of the object.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port of the SSH tunnel.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                    "willReplaceOnChanges": true
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the connection schema. Defaults to `public`.\n",
                    "willReplaceOnChanges": true
                },
                "user": {
                    "type": "string",
                    "description": "The user of the SSH tunnel.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "host",
                "port",
                "user"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ConnectionSshTunnel resources.\n",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "**Public Preview** Comment on an object in the database.\n"
                    },
                    "databaseName": {
                        "type": "string",
                        "description": "The identifier for the connection database. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n",
                        "willReplaceOnChanges": true
                    },
                    "host": {
                        "type": "string",
                        "description": "The host of the SSH tunnel.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The identifier for the connection.\n"
                    },
                    "ownershipRole": {
                        "type": "string",
                        "description": "The owernship role of the object.\n"
                    },
                    "port": {
                        "type": "integer",
                        "description": "The port of the SSH tunnel.\n",
                        "willReplaceOnChanges": true
                    },
                    "publicKey1": {
                        "type": "string",
                        "description": "The first public key associated with the SSH tunnel.\n"
                    },
                    "publicKey2": {
                        "type": "string",
                        "description": "The second public key associated with the SSH tunnel.\n"
                    },
                    "qualifiedSqlName": {
                        "type": "string",
                        "description": "The fully qualified name of the connection.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                        "willReplaceOnChanges": true
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "The identifier for the connection schema. Defaults to `public`.\n",
                        "willReplaceOnChanges": true
                    },
                    "user": {
                        "type": "string",
                        "description": "The user of the SSH tunnel.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/database:Database": {
            "description": "The highest level namespace hierarchy in Materialize.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\nconst exampleDatabase = new materialize.Database(\"exampleDatabase\", {});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\nexample_database = materialize.Database(\"exampleDatabase\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleDatabase = new Materialize.Database(\"exampleDatabase\");\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.NewDatabase(ctx, \"exampleDatabase\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.Database;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleDatabase = new Database(\"exampleDatabase\");\n\n    }\n}\n```\n```yaml\nresources:\n  exampleDatabase:\n    type: materialize:Database\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nDatabases can be imported using the database id\n\n```sh\n $ pulumi import materialize:index/database:Database example_database \u003cregion\u003e:\u003cdatabase_id\u003e\n```\n\n Database id and information be found in the `mz_catalog.mz_databases` table The region is the region where the database is located (e.g. aws/us-east-1) ",
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "**Public Preview** Comment on an object in the database.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the database.\n"
                },
                "ownershipRole": {
                    "type": "string",
                    "description": "The owernship role of the object.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n"
                }
            },
            "required": [
                "name",
                "ownershipRole"
            ],
            "inputProperties": {
                "comment": {
                    "type": "string",
                    "description": "**Public Preview** Comment on an object in the database.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the database.\n",
                    "willReplaceOnChanges": true
                },
                "ownershipRole": {
                    "type": "string",
                    "description": "The owernship role of the object.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Database resources.\n",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "**Public Preview** Comment on an object in the database.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The identifier for the database.\n",
                        "willReplaceOnChanges": true
                    },
                    "ownershipRole": {
                        "type": "string",
                        "description": "The owernship role of the object.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/grantCluster:GrantCluster": {
            "description": "Manages the privileges on a Materailize cluster for roles.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\n// Grant USAGE to role example_role to cluster example_cluster\nconst clusterGrantUsage = new materialize.GrantCluster(\"clusterGrantUsage\", {\n    clusterName: \"example_cluster\",\n    privilege: \"USAGE\",\n    roleName: \"example_role\",\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\n# Grant USAGE to role example_role to cluster example_cluster\ncluster_grant_usage = materialize.GrantCluster(\"clusterGrantUsage\",\n    cluster_name=\"example_cluster\",\n    privilege=\"USAGE\",\n    role_name=\"example_role\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Grant USAGE to role example_role to cluster example_cluster\n    var clusterGrantUsage = new Materialize.GrantCluster(\"clusterGrantUsage\", new()\n    {\n        ClusterName = \"example_cluster\",\n        Privilege = \"USAGE\",\n        RoleName = \"example_role\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.NewGrantCluster(ctx, \"clusterGrantUsage\", \u0026materialize.GrantClusterArgs{\n\t\t\tClusterName: pulumi.String(\"example_cluster\"),\n\t\t\tPrivilege:   pulumi.String(\"USAGE\"),\n\t\t\tRoleName:    pulumi.String(\"example_role\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.GrantCluster;\nimport com.pulumi.materialize.GrantClusterArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var clusterGrantUsage = new GrantCluster(\"clusterGrantUsage\", GrantClusterArgs.builder()        \n            .clusterName(\"example_cluster\")\n            .privilege(\"USAGE\")\n            .roleName(\"example_role\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Grant USAGE to role example_role to cluster example_cluster\n  clusterGrantUsage:\n    type: materialize:GrantCluster\n    properties:\n      clusterName: example_cluster\n      privilege: USAGE\n      roleName: example_role\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n#Grants can be imported using the concatenation of GRANT, the object type, the id of the object, the id of the role and the privilege\n\n\n\n```sh\n $ pulumi import materialize:index/grantCluster:GrantCluster example \u003cregion\u003e:GRANT|CLUSTER|\u003ccluster_id\u003e|\u003crole_id\u003e|\u003cprivilege\u003e\n```\n\n The region is the region where the database is located (e.g. aws/us-east-1) ",
            "properties": {
                "clusterName": {
                    "type": "string",
                    "description": "The cluster that is being granted on.\n"
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant to the object.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n"
                },
                "roleName": {
                    "type": "string",
                    "description": "The name of the role to grant privilege to.\n"
                }
            },
            "required": [
                "clusterName",
                "privilege",
                "roleName"
            ],
            "inputProperties": {
                "clusterName": {
                    "type": "string",
                    "description": "The cluster that is being granted on.\n",
                    "willReplaceOnChanges": true
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant to the object.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                    "willReplaceOnChanges": true
                },
                "roleName": {
                    "type": "string",
                    "description": "The name of the role to grant privilege to.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "clusterName",
                "privilege",
                "roleName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GrantCluster resources.\n",
                "properties": {
                    "clusterName": {
                        "type": "string",
                        "description": "The cluster that is being granted on.\n",
                        "willReplaceOnChanges": true
                    },
                    "privilege": {
                        "type": "string",
                        "description": "The privilege to grant to the object.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                        "willReplaceOnChanges": true
                    },
                    "roleName": {
                        "type": "string",
                        "description": "The name of the role to grant privilege to.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/grantClusterDefaultPrivilege:GrantClusterDefaultPrivilege": {
            "description": "Defines default privileges that will be applied to objects created in the future. It does not affect any existing objects.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\n// Grant role the privilege USAGE for objects\nconst example = new materialize.GrantClusterDefaultPrivilege(\"example\", {\n    granteeName: \"grantee\",\n    privilege: \"USAGE\",\n    targetRoleName: \"target_role\",\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\n# Grant role the privilege USAGE for objects\nexample = materialize.GrantClusterDefaultPrivilege(\"example\",\n    grantee_name=\"grantee\",\n    privilege=\"USAGE\",\n    target_role_name=\"target_role\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Grant role the privilege USAGE for objects\n    var example = new Materialize.GrantClusterDefaultPrivilege(\"example\", new()\n    {\n        GranteeName = \"grantee\",\n        Privilege = \"USAGE\",\n        TargetRoleName = \"target_role\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.NewGrantClusterDefaultPrivilege(ctx, \"example\", \u0026materialize.GrantClusterDefaultPrivilegeArgs{\n\t\t\tGranteeName:    pulumi.String(\"grantee\"),\n\t\t\tPrivilege:      pulumi.String(\"USAGE\"),\n\t\t\tTargetRoleName: pulumi.String(\"target_role\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.GrantClusterDefaultPrivilege;\nimport com.pulumi.materialize.GrantClusterDefaultPrivilegeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new GrantClusterDefaultPrivilege(\"example\", GrantClusterDefaultPrivilegeArgs.builder()        \n            .granteeName(\"grantee\")\n            .privilege(\"USAGE\")\n            .targetRoleName(\"target_role\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Grant role the privilege USAGE for objects\n  example:\n    type: materialize:GrantClusterDefaultPrivilege\n    properties:\n      granteeName: grantee\n      privilege: USAGE\n      targetRoleName: target_role\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n#Grants can be imported using the concatenation of GRANT DEFAULT, the grantee id of the role #Optionally you can include the target id. The privilege is required\n\n\n\n```sh\n $ pulumi import materialize:index/grantClusterDefaultPrivilege:GrantClusterDefaultPrivilege example \u003cregion\u003e:GRANT DEFAULT|CLUSTER|\u003cgrantee_id\u003e|\u003ctarget_role_id\u003e|||\u003cprivilege\u003e\n```\n\n The region is the region where the database is located (e.g. aws/us-east-1) ",
            "properties": {
                "granteeName": {
                    "type": "string",
                    "description": "The role name that will gain the default privilege. Use the `PUBLIC` pseudo-role to grant privileges to all roles.\n"
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant to the object.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n"
                },
                "targetRoleName": {
                    "type": "string",
                    "description": "The default privilege will apply to objects created by this role. If this is left blank, then the current role is assumed. Use the `PUBLIC` pseudo-role to target objects created by all roles.\n"
                }
            },
            "required": [
                "granteeName",
                "privilege",
                "targetRoleName"
            ],
            "inputProperties": {
                "granteeName": {
                    "type": "string",
                    "description": "The role name that will gain the default privilege. Use the `PUBLIC` pseudo-role to grant privileges to all roles.\n",
                    "willReplaceOnChanges": true
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant to the object.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                    "willReplaceOnChanges": true
                },
                "targetRoleName": {
                    "type": "string",
                    "description": "The default privilege will apply to objects created by this role. If this is left blank, then the current role is assumed. Use the `PUBLIC` pseudo-role to target objects created by all roles.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "granteeName",
                "privilege",
                "targetRoleName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GrantClusterDefaultPrivilege resources.\n",
                "properties": {
                    "granteeName": {
                        "type": "string",
                        "description": "The role name that will gain the default privilege. Use the `PUBLIC` pseudo-role to grant privileges to all roles.\n",
                        "willReplaceOnChanges": true
                    },
                    "privilege": {
                        "type": "string",
                        "description": "The privilege to grant to the object.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                        "willReplaceOnChanges": true
                    },
                    "targetRoleName": {
                        "type": "string",
                        "description": "The default privilege will apply to objects created by this role. If this is left blank, then the current role is assumed. Use the `PUBLIC` pseudo-role to target objects created by all roles.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/grantConnection:GrantConnection": {
            "description": "Manages the privileges on a Materailize connection for roles.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\n// Grant USAGE to role example_role to connection example_database.example_schema.example_connection\nconst connectionGrantUsage = new materialize.GrantConnection(\"connectionGrantUsage\", {\n    connectionName: \"example_connection\",\n    databaseName: \"example_database\",\n    privilege: \"USAGE\",\n    roleName: \"example_role\",\n    schemaName: \"example_schema\",\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\n# Grant USAGE to role example_role to connection example_database.example_schema.example_connection\nconnection_grant_usage = materialize.GrantConnection(\"connectionGrantUsage\",\n    connection_name=\"example_connection\",\n    database_name=\"example_database\",\n    privilege=\"USAGE\",\n    role_name=\"example_role\",\n    schema_name=\"example_schema\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Grant USAGE to role example_role to connection example_database.example_schema.example_connection\n    var connectionGrantUsage = new Materialize.GrantConnection(\"connectionGrantUsage\", new()\n    {\n        ConnectionName = \"example_connection\",\n        DatabaseName = \"example_database\",\n        Privilege = \"USAGE\",\n        RoleName = \"example_role\",\n        SchemaName = \"example_schema\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.NewGrantConnection(ctx, \"connectionGrantUsage\", \u0026materialize.GrantConnectionArgs{\n\t\t\tConnectionName: pulumi.String(\"example_connection\"),\n\t\t\tDatabaseName:   pulumi.String(\"example_database\"),\n\t\t\tPrivilege:      pulumi.String(\"USAGE\"),\n\t\t\tRoleName:       pulumi.String(\"example_role\"),\n\t\t\tSchemaName:     pulumi.String(\"example_schema\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.GrantConnection;\nimport com.pulumi.materialize.GrantConnectionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var connectionGrantUsage = new GrantConnection(\"connectionGrantUsage\", GrantConnectionArgs.builder()        \n            .connectionName(\"example_connection\")\n            .databaseName(\"example_database\")\n            .privilege(\"USAGE\")\n            .roleName(\"example_role\")\n            .schemaName(\"example_schema\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Grant USAGE to role example_role to connection example_database.example_schema.example_connection\n  connectionGrantUsage:\n    type: materialize:GrantConnection\n    properties:\n      connectionName: example_connection\n      databaseName: example_database\n      privilege: USAGE\n      roleName: example_role\n      schemaName: example_schema\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n#Grants can be imported using the concatenation of GRANT, the object type, the id of the object, the id of the role and the privilege\n\n\n\n```sh\n $ pulumi import materialize:index/grantConnection:GrantConnection example \u003cregion\u003e:GRANT|CONNECTION|\u003cconnection_id\u003e|\u003crole_id\u003e|\u003cprivilege\u003e\n```\n\n The region is the region where the database is located (e.g. aws/us-east-1) ",
            "properties": {
                "connectionName": {
                    "type": "string",
                    "description": "The connection that is being granted on.\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "The database that the connection belongs to.\n"
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant to the object.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n"
                },
                "roleName": {
                    "type": "string",
                    "description": "The name of the role to grant privilege to.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The schema that the connection being to.\n"
                }
            },
            "required": [
                "connectionName",
                "databaseName",
                "privilege",
                "roleName",
                "schemaName"
            ],
            "inputProperties": {
                "connectionName": {
                    "type": "string",
                    "description": "The connection that is being granted on.\n",
                    "willReplaceOnChanges": true
                },
                "databaseName": {
                    "type": "string",
                    "description": "The database that the connection belongs to.\n",
                    "willReplaceOnChanges": true
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant to the object.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                    "willReplaceOnChanges": true
                },
                "roleName": {
                    "type": "string",
                    "description": "The name of the role to grant privilege to.\n",
                    "willReplaceOnChanges": true
                },
                "schemaName": {
                    "type": "string",
                    "description": "The schema that the connection being to.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "connectionName",
                "databaseName",
                "privilege",
                "roleName",
                "schemaName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GrantConnection resources.\n",
                "properties": {
                    "connectionName": {
                        "type": "string",
                        "description": "The connection that is being granted on.\n",
                        "willReplaceOnChanges": true
                    },
                    "databaseName": {
                        "type": "string",
                        "description": "The database that the connection belongs to.\n",
                        "willReplaceOnChanges": true
                    },
                    "privilege": {
                        "type": "string",
                        "description": "The privilege to grant to the object.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                        "willReplaceOnChanges": true
                    },
                    "roleName": {
                        "type": "string",
                        "description": "The name of the role to grant privilege to.\n",
                        "willReplaceOnChanges": true
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "The schema that the connection being to.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/grantConnectionDefaultPrivilege:GrantConnectionDefaultPrivilege": {
            "description": "Defines default privileges that will be applied to objects created in the future. It does not affect any existing objects.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\n// Grant role the privilege USAGE for objects in the schema database.schema\nconst example = new materialize.GrantConnectionDefaultPrivilege(\"example\", {\n    databaseName: \"database\",\n    granteeName: \"grantee\",\n    privilege: \"USAGE\",\n    schemaName: \"schema\",\n    targetRoleName: \"target_role\",\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\n# Grant role the privilege USAGE for objects in the schema database.schema\nexample = materialize.GrantConnectionDefaultPrivilege(\"example\",\n    database_name=\"database\",\n    grantee_name=\"grantee\",\n    privilege=\"USAGE\",\n    schema_name=\"schema\",\n    target_role_name=\"target_role\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Grant role the privilege USAGE for objects in the schema database.schema\n    var example = new Materialize.GrantConnectionDefaultPrivilege(\"example\", new()\n    {\n        DatabaseName = \"database\",\n        GranteeName = \"grantee\",\n        Privilege = \"USAGE\",\n        SchemaName = \"schema\",\n        TargetRoleName = \"target_role\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.NewGrantConnectionDefaultPrivilege(ctx, \"example\", \u0026materialize.GrantConnectionDefaultPrivilegeArgs{\n\t\t\tDatabaseName:   pulumi.String(\"database\"),\n\t\t\tGranteeName:    pulumi.String(\"grantee\"),\n\t\t\tPrivilege:      pulumi.String(\"USAGE\"),\n\t\t\tSchemaName:     pulumi.String(\"schema\"),\n\t\t\tTargetRoleName: pulumi.String(\"target_role\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.GrantConnectionDefaultPrivilege;\nimport com.pulumi.materialize.GrantConnectionDefaultPrivilegeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new GrantConnectionDefaultPrivilege(\"example\", GrantConnectionDefaultPrivilegeArgs.builder()        \n            .databaseName(\"database\")\n            .granteeName(\"grantee\")\n            .privilege(\"USAGE\")\n            .schemaName(\"schema\")\n            .targetRoleName(\"target_role\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Grant role the privilege USAGE for objects in the schema database.schema\n  example:\n    type: materialize:GrantConnectionDefaultPrivilege\n    properties:\n      databaseName: database\n      granteeName: grantee\n      privilege: USAGE\n      schemaName: schema\n      targetRoleName: target_role\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n#Grants can be imported using the concatenation of GRANT DEFAULT, the grantee id of the role #Optionally you can include the target id, database id and schema id. The privilege is required\n\n\n\n```sh\n $ pulumi import materialize:index/grantConnectionDefaultPrivilege:GrantConnectionDefaultPrivilege example \u003cregion\u003e:GRANT DEFAULT|CONNECTION|\u003cgrantee_id\u003e|\u003ctarget_role_id\u003e|\u003cdatabase_id\u003e|\u003cschema_id\u003e|\u003cprivilege\u003e\n```\n\n The region is the region where the database is located (e.g. aws/us-east-1) ",
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The default privilege will apply only to objects created in this database, if specified.\n"
                },
                "granteeName": {
                    "type": "string",
                    "description": "The role name that will gain the default privilege. Use the `PUBLIC` pseudo-role to grant privileges to all roles.\n"
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant to the object.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The default privilege will apply only to objects created in this schema, if specified.\n"
                },
                "targetRoleName": {
                    "type": "string",
                    "description": "The default privilege will apply to objects created by this role. If this is left blank, then the current role is assumed. Use the `PUBLIC` pseudo-role to target objects created by all roles.\n"
                }
            },
            "required": [
                "granteeName",
                "privilege",
                "targetRoleName"
            ],
            "inputProperties": {
                "databaseName": {
                    "type": "string",
                    "description": "The default privilege will apply only to objects created in this database, if specified.\n",
                    "willReplaceOnChanges": true
                },
                "granteeName": {
                    "type": "string",
                    "description": "The role name that will gain the default privilege. Use the `PUBLIC` pseudo-role to grant privileges to all roles.\n",
                    "willReplaceOnChanges": true
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant to the object.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                    "willReplaceOnChanges": true
                },
                "schemaName": {
                    "type": "string",
                    "description": "The default privilege will apply only to objects created in this schema, if specified.\n",
                    "willReplaceOnChanges": true
                },
                "targetRoleName": {
                    "type": "string",
                    "description": "The default privilege will apply to objects created by this role. If this is left blank, then the current role is assumed. Use the `PUBLIC` pseudo-role to target objects created by all roles.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "granteeName",
                "privilege",
                "targetRoleName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GrantConnectionDefaultPrivilege resources.\n",
                "properties": {
                    "databaseName": {
                        "type": "string",
                        "description": "The default privilege will apply only to objects created in this database, if specified.\n",
                        "willReplaceOnChanges": true
                    },
                    "granteeName": {
                        "type": "string",
                        "description": "The role name that will gain the default privilege. Use the `PUBLIC` pseudo-role to grant privileges to all roles.\n",
                        "willReplaceOnChanges": true
                    },
                    "privilege": {
                        "type": "string",
                        "description": "The privilege to grant to the object.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                        "willReplaceOnChanges": true
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "The default privilege will apply only to objects created in this schema, if specified.\n",
                        "willReplaceOnChanges": true
                    },
                    "targetRoleName": {
                        "type": "string",
                        "description": "The default privilege will apply to objects created by this role. If this is left blank, then the current role is assumed. Use the `PUBLIC` pseudo-role to target objects created by all roles.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/grantDatabase:GrantDatabase": {
            "description": "Manages the privileges on a Materailize database for roles.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\n// Grant USAGE to role example_role to database example_database\nconst databaseGrantUsage = new materialize.GrantDatabase(\"databaseGrantUsage\", {\n    databaseName: \"example_database\",\n    privilege: \"USAGE\",\n    roleName: \"example_role\",\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\n# Grant USAGE to role example_role to database example_database\ndatabase_grant_usage = materialize.GrantDatabase(\"databaseGrantUsage\",\n    database_name=\"example_database\",\n    privilege=\"USAGE\",\n    role_name=\"example_role\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Grant USAGE to role example_role to database example_database\n    var databaseGrantUsage = new Materialize.GrantDatabase(\"databaseGrantUsage\", new()\n    {\n        DatabaseName = \"example_database\",\n        Privilege = \"USAGE\",\n        RoleName = \"example_role\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.NewGrantDatabase(ctx, \"databaseGrantUsage\", \u0026materialize.GrantDatabaseArgs{\n\t\t\tDatabaseName: pulumi.String(\"example_database\"),\n\t\t\tPrivilege:    pulumi.String(\"USAGE\"),\n\t\t\tRoleName:     pulumi.String(\"example_role\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.GrantDatabase;\nimport com.pulumi.materialize.GrantDatabaseArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var databaseGrantUsage = new GrantDatabase(\"databaseGrantUsage\", GrantDatabaseArgs.builder()        \n            .databaseName(\"example_database\")\n            .privilege(\"USAGE\")\n            .roleName(\"example_role\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Grant USAGE to role example_role to database example_database\n  databaseGrantUsage:\n    type: materialize:GrantDatabase\n    properties:\n      databaseName: example_database\n      privilege: USAGE\n      roleName: example_role\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n#Grants can be imported using the concatenation of GRANT, the object type, the id of the object, the id of the role and the privilege\n\n\n\n```sh\n $ pulumi import materialize:index/grantDatabase:GrantDatabase example \u003cregion\u003e:GRANT|DATABASE|\u003cdatabase_id\u003e|\u003crole_id\u003e|\u003cprivilege\u003e\n```\n\n The region is the region where the database is located (e.g. aws/us-east-1) ",
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The database that is being granted on.\n"
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant to the object.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n"
                },
                "roleName": {
                    "type": "string",
                    "description": "The name of the role to grant privilege to.\n"
                }
            },
            "required": [
                "databaseName",
                "privilege",
                "roleName"
            ],
            "inputProperties": {
                "databaseName": {
                    "type": "string",
                    "description": "The database that is being granted on.\n",
                    "willReplaceOnChanges": true
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant to the object.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                    "willReplaceOnChanges": true
                },
                "roleName": {
                    "type": "string",
                    "description": "The name of the role to grant privilege to.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "databaseName",
                "privilege",
                "roleName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GrantDatabase resources.\n",
                "properties": {
                    "databaseName": {
                        "type": "string",
                        "description": "The database that is being granted on.\n",
                        "willReplaceOnChanges": true
                    },
                    "privilege": {
                        "type": "string",
                        "description": "The privilege to grant to the object.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                        "willReplaceOnChanges": true
                    },
                    "roleName": {
                        "type": "string",
                        "description": "The name of the role to grant privilege to.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/grantDatabaseDefaultPrivilege:GrantDatabaseDefaultPrivilege": {
            "description": "Defines default privileges that will be applied to objects created in the future. It does not affect any existing objects.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\n// Grant role the privilege USAGE for objects in the database database\nconst example = new materialize.GrantDatabaseDefaultPrivilege(\"example\", {\n    granteeName: \"grantee\",\n    privilege: \"USAGE\",\n    targetRoleName: \"target_role\",\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\n# Grant role the privilege USAGE for objects in the database database\nexample = materialize.GrantDatabaseDefaultPrivilege(\"example\",\n    grantee_name=\"grantee\",\n    privilege=\"USAGE\",\n    target_role_name=\"target_role\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Grant role the privilege USAGE for objects in the database database\n    var example = new Materialize.GrantDatabaseDefaultPrivilege(\"example\", new()\n    {\n        GranteeName = \"grantee\",\n        Privilege = \"USAGE\",\n        TargetRoleName = \"target_role\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.NewGrantDatabaseDefaultPrivilege(ctx, \"example\", \u0026materialize.GrantDatabaseDefaultPrivilegeArgs{\n\t\t\tGranteeName:    pulumi.String(\"grantee\"),\n\t\t\tPrivilege:      pulumi.String(\"USAGE\"),\n\t\t\tTargetRoleName: pulumi.String(\"target_role\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.GrantDatabaseDefaultPrivilege;\nimport com.pulumi.materialize.GrantDatabaseDefaultPrivilegeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new GrantDatabaseDefaultPrivilege(\"example\", GrantDatabaseDefaultPrivilegeArgs.builder()        \n            .granteeName(\"grantee\")\n            .privilege(\"USAGE\")\n            .targetRoleName(\"target_role\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Grant role the privilege USAGE for objects in the database database\n  example:\n    type: materialize:GrantDatabaseDefaultPrivilege\n    properties:\n      granteeName: grantee\n      privilege: USAGE\n      targetRoleName: target_role\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n#Grants can be imported using the concatenation of GRANT DEFAULT, the grantee id of the role #Optionally you can include the target id, database id. The privilege is required\n\n\n\n```sh\n $ pulumi import materialize:index/grantDatabaseDefaultPrivilege:GrantDatabaseDefaultPrivilege example \u003cregion\u003e:GRANT DEFAULT|CONNECTION|\u003cgrantee_id\u003e|\u003ctarget_role_id\u003e|\u003cdatabase_id\u003e||\u003cprivilege\u003e\n```\n\n The region is the region where the database is located (e.g. aws/us-east-1) ",
            "properties": {
                "granteeName": {
                    "type": "string",
                    "description": "The role name that will gain the default privilege. Use the `PUBLIC` pseudo-role to grant privileges to all roles.\n"
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant to the object.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n"
                },
                "targetRoleName": {
                    "type": "string",
                    "description": "The default privilege will apply to objects created by this role. If this is left blank, then the current role is assumed. Use the `PUBLIC` pseudo-role to target objects created by all roles.\n"
                }
            },
            "required": [
                "granteeName",
                "privilege",
                "targetRoleName"
            ],
            "inputProperties": {
                "granteeName": {
                    "type": "string",
                    "description": "The role name that will gain the default privilege. Use the `PUBLIC` pseudo-role to grant privileges to all roles.\n",
                    "willReplaceOnChanges": true
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant to the object.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                    "willReplaceOnChanges": true
                },
                "targetRoleName": {
                    "type": "string",
                    "description": "The default privilege will apply to objects created by this role. If this is left blank, then the current role is assumed. Use the `PUBLIC` pseudo-role to target objects created by all roles.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "granteeName",
                "privilege",
                "targetRoleName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GrantDatabaseDefaultPrivilege resources.\n",
                "properties": {
                    "granteeName": {
                        "type": "string",
                        "description": "The role name that will gain the default privilege. Use the `PUBLIC` pseudo-role to grant privileges to all roles.\n",
                        "willReplaceOnChanges": true
                    },
                    "privilege": {
                        "type": "string",
                        "description": "The privilege to grant to the object.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                        "willReplaceOnChanges": true
                    },
                    "targetRoleName": {
                        "type": "string",
                        "description": "The default privilege will apply to objects created by this role. If this is left blank, then the current role is assumed. Use the `PUBLIC` pseudo-role to target objects created by all roles.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/grantMaterializedView:GrantMaterializedView": {
            "description": "Manages the privileges on a Materailize materialized view for roles.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\n// Grant SELECT to role example_role to connection example_database.example_schema.example_materialized_view\nconst materializedViewGrantSelect = new materialize.GrantMaterializedView(\"materializedViewGrantSelect\", {\n    databaseName: \"example_database\",\n    materializedViewName: \"example_materialized_view\",\n    privilege: \"SELECT\",\n    roleName: \"example_role\",\n    schemaName: \"example_schema\",\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\n# Grant SELECT to role example_role to connection example_database.example_schema.example_materialized_view\nmaterialized_view_grant_select = materialize.GrantMaterializedView(\"materializedViewGrantSelect\",\n    database_name=\"example_database\",\n    materialized_view_name=\"example_materialized_view\",\n    privilege=\"SELECT\",\n    role_name=\"example_role\",\n    schema_name=\"example_schema\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Grant SELECT to role example_role to connection example_database.example_schema.example_materialized_view\n    var materializedViewGrantSelect = new Materialize.GrantMaterializedView(\"materializedViewGrantSelect\", new()\n    {\n        DatabaseName = \"example_database\",\n        MaterializedViewName = \"example_materialized_view\",\n        Privilege = \"SELECT\",\n        RoleName = \"example_role\",\n        SchemaName = \"example_schema\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.NewGrantMaterializedView(ctx, \"materializedViewGrantSelect\", \u0026materialize.GrantMaterializedViewArgs{\n\t\t\tDatabaseName:         pulumi.String(\"example_database\"),\n\t\t\tMaterializedViewName: pulumi.String(\"example_materialized_view\"),\n\t\t\tPrivilege:            pulumi.String(\"SELECT\"),\n\t\t\tRoleName:             pulumi.String(\"example_role\"),\n\t\t\tSchemaName:           pulumi.String(\"example_schema\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.GrantMaterializedView;\nimport com.pulumi.materialize.GrantMaterializedViewArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var materializedViewGrantSelect = new GrantMaterializedView(\"materializedViewGrantSelect\", GrantMaterializedViewArgs.builder()        \n            .databaseName(\"example_database\")\n            .materializedViewName(\"example_materialized_view\")\n            .privilege(\"SELECT\")\n            .roleName(\"example_role\")\n            .schemaName(\"example_schema\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Grant SELECT to role example_role to connection example_database.example_schema.example_materialized_view\n  materializedViewGrantSelect:\n    type: materialize:GrantMaterializedView\n    properties:\n      databaseName: example_database\n      materializedViewName: example_materialized_view\n      privilege: SELECT\n      roleName: example_role\n      schemaName: example_schema\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n#Grants can be imported using the concatenation of GRANT, the object type, the id of the object, the id of the role and the privilege\n\n\n\n```sh\n $ pulumi import materialize:index/grantMaterializedView:GrantMaterializedView example \u003cregion\u003e:GRANT|MATERIALIZED VIEW|\u003cmaterialized_view_id\u003e|\u003crole_id\u003e|\u003cprivilege\u003e\n```\n\n The region is the region where the database is located (e.g. aws/us-east-1) ",
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The database that the materialized view belongs to.\n"
                },
                "materializedViewName": {
                    "type": "string",
                    "description": "The materialized view that is being granted on.\n"
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant to the object.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n"
                },
                "roleName": {
                    "type": "string",
                    "description": "The name of the role to grant privilege to.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The schema that the materialized view being to.\n"
                }
            },
            "required": [
                "databaseName",
                "materializedViewName",
                "privilege",
                "roleName",
                "schemaName"
            ],
            "inputProperties": {
                "databaseName": {
                    "type": "string",
                    "description": "The database that the materialized view belongs to.\n",
                    "willReplaceOnChanges": true
                },
                "materializedViewName": {
                    "type": "string",
                    "description": "The materialized view that is being granted on.\n",
                    "willReplaceOnChanges": true
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant to the object.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                    "willReplaceOnChanges": true
                },
                "roleName": {
                    "type": "string",
                    "description": "The name of the role to grant privilege to.\n",
                    "willReplaceOnChanges": true
                },
                "schemaName": {
                    "type": "string",
                    "description": "The schema that the materialized view being to.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "databaseName",
                "materializedViewName",
                "privilege",
                "roleName",
                "schemaName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GrantMaterializedView resources.\n",
                "properties": {
                    "databaseName": {
                        "type": "string",
                        "description": "The database that the materialized view belongs to.\n",
                        "willReplaceOnChanges": true
                    },
                    "materializedViewName": {
                        "type": "string",
                        "description": "The materialized view that is being granted on.\n",
                        "willReplaceOnChanges": true
                    },
                    "privilege": {
                        "type": "string",
                        "description": "The privilege to grant to the object.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                        "willReplaceOnChanges": true
                    },
                    "roleName": {
                        "type": "string",
                        "description": "The name of the role to grant privilege to.\n",
                        "willReplaceOnChanges": true
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "The schema that the materialized view being to.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/grantRole:GrantRole": {
            "description": "Manages the system privileges for roles.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\n// Grant role to user\nconst roleGrantUser = new materialize.GrantRole(\"roleGrantUser\", {\n    memberName: \"user\",\n    roleName: \"role\",\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\n# Grant role to user\nrole_grant_user = materialize.GrantRole(\"roleGrantUser\",\n    member_name=\"user\",\n    role_name=\"role\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Grant role to user\n    var roleGrantUser = new Materialize.GrantRole(\"roleGrantUser\", new()\n    {\n        MemberName = \"user\",\n        RoleName = \"role\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.NewGrantRole(ctx, \"roleGrantUser\", \u0026materialize.GrantRoleArgs{\n\t\t\tMemberName: pulumi.String(\"user\"),\n\t\t\tRoleName:   pulumi.String(\"role\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.GrantRole;\nimport com.pulumi.materialize.GrantRoleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var roleGrantUser = new GrantRole(\"roleGrantUser\", GrantRoleArgs.builder()        \n            .memberName(\"user\")\n            .roleName(\"role\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Grant role to user\n  roleGrantUser:\n    type: materialize:GrantRole\n    properties:\n      memberName: user\n      roleName: role\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n#Grants can be imported using the concatenation of ROLE MEMBER, the id of the role and id of the member\n\n\n\n```sh\n $ pulumi import materialize:index/grantRole:GrantRole example \u003cregion\u003e:ROLE MEMBER|\u003crole_id\u003e|\u003cmember_id\u003e\n```\n\n The region is the region where the database is located (e.g. aws/us-east-1) ",
            "properties": {
                "memberName": {
                    "type": "string",
                    "description": "The role name to add to role_name as a member.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n"
                },
                "roleName": {
                    "type": "string",
                    "description": "The role name to add member_name as a member.\n"
                }
            },
            "required": [
                "memberName",
                "roleName"
            ],
            "inputProperties": {
                "memberName": {
                    "type": "string",
                    "description": "The role name to add to role_name as a member.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                    "willReplaceOnChanges": true
                },
                "roleName": {
                    "type": "string",
                    "description": "The role name to add member_name as a member.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "memberName",
                "roleName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GrantRole resources.\n",
                "properties": {
                    "memberName": {
                        "type": "string",
                        "description": "The role name to add to role_name as a member.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                        "willReplaceOnChanges": true
                    },
                    "roleName": {
                        "type": "string",
                        "description": "The role name to add member_name as a member.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/grantSchema:GrantSchema": {
            "description": "Manages the privileges on a Materailize schema for roles.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\n// Grant USAGE to role example_role to schema example_database.example_schema\nconst schemaGrantUsage = new materialize.GrantSchema(\"schemaGrantUsage\", {\n    databaseName: \"example_database\",\n    privilege: \"USAGE\",\n    roleName: \"example_role\",\n    schemaName: \"example_schema\",\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\n# Grant USAGE to role example_role to schema example_database.example_schema\nschema_grant_usage = materialize.GrantSchema(\"schemaGrantUsage\",\n    database_name=\"example_database\",\n    privilege=\"USAGE\",\n    role_name=\"example_role\",\n    schema_name=\"example_schema\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Grant USAGE to role example_role to schema example_database.example_schema\n    var schemaGrantUsage = new Materialize.GrantSchema(\"schemaGrantUsage\", new()\n    {\n        DatabaseName = \"example_database\",\n        Privilege = \"USAGE\",\n        RoleName = \"example_role\",\n        SchemaName = \"example_schema\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.NewGrantSchema(ctx, \"schemaGrantUsage\", \u0026materialize.GrantSchemaArgs{\n\t\t\tDatabaseName: pulumi.String(\"example_database\"),\n\t\t\tPrivilege:    pulumi.String(\"USAGE\"),\n\t\t\tRoleName:     pulumi.String(\"example_role\"),\n\t\t\tSchemaName:   pulumi.String(\"example_schema\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.GrantSchema;\nimport com.pulumi.materialize.GrantSchemaArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var schemaGrantUsage = new GrantSchema(\"schemaGrantUsage\", GrantSchemaArgs.builder()        \n            .databaseName(\"example_database\")\n            .privilege(\"USAGE\")\n            .roleName(\"example_role\")\n            .schemaName(\"example_schema\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Grant USAGE to role example_role to schema example_database.example_schema\n  schemaGrantUsage:\n    type: materialize:GrantSchema\n    properties:\n      databaseName: example_database\n      privilege: USAGE\n      roleName: example_role\n      schemaName: example_schema\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n#Grants can be imported using the concatenation of GRANT, the object type, the id of the object, the id of the role and the privilege\n\n\n\n```sh\n $ pulumi import materialize:index/grantSchema:GrantSchema example \u003cregion\u003e:GRANT|SCHEMA|\u003cschema_id\u003e|\u003crole_id\u003e|\u003cprivilege\u003e\n```\n\n The region is the region where the database is located (e.g. aws/us-east-1) ",
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The database that the schema belongs to.\n"
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant to the object.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n"
                },
                "roleName": {
                    "type": "string",
                    "description": "The name of the role to grant privilege to.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The schema that is being granted on.\n"
                }
            },
            "required": [
                "databaseName",
                "privilege",
                "roleName",
                "schemaName"
            ],
            "inputProperties": {
                "databaseName": {
                    "type": "string",
                    "description": "The database that the schema belongs to.\n",
                    "willReplaceOnChanges": true
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant to the object.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                    "willReplaceOnChanges": true
                },
                "roleName": {
                    "type": "string",
                    "description": "The name of the role to grant privilege to.\n",
                    "willReplaceOnChanges": true
                },
                "schemaName": {
                    "type": "string",
                    "description": "The schema that is being granted on.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "databaseName",
                "privilege",
                "roleName",
                "schemaName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GrantSchema resources.\n",
                "properties": {
                    "databaseName": {
                        "type": "string",
                        "description": "The database that the schema belongs to.\n",
                        "willReplaceOnChanges": true
                    },
                    "privilege": {
                        "type": "string",
                        "description": "The privilege to grant to the object.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                        "willReplaceOnChanges": true
                    },
                    "roleName": {
                        "type": "string",
                        "description": "The name of the role to grant privilege to.\n",
                        "willReplaceOnChanges": true
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "The schema that is being granted on.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/grantSchemaDefaultPrivilege:GrantSchemaDefaultPrivilege": {
            "description": "Defines default privileges that will be applied to objects created in the future. It does not affect any existing objects.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\n// Grant role the privilege USAGE for objects in the schema database.schema\nconst example = new materialize.GrantSchemaDefaultPrivilege(\"example\", {\n    databaseName: \"database\",\n    granteeName: \"grantee\",\n    privilege: \"USAGE\",\n    targetRoleName: \"target_role\",\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\n# Grant role the privilege USAGE for objects in the schema database.schema\nexample = materialize.GrantSchemaDefaultPrivilege(\"example\",\n    database_name=\"database\",\n    grantee_name=\"grantee\",\n    privilege=\"USAGE\",\n    target_role_name=\"target_role\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Grant role the privilege USAGE for objects in the schema database.schema\n    var example = new Materialize.GrantSchemaDefaultPrivilege(\"example\", new()\n    {\n        DatabaseName = \"database\",\n        GranteeName = \"grantee\",\n        Privilege = \"USAGE\",\n        TargetRoleName = \"target_role\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.NewGrantSchemaDefaultPrivilege(ctx, \"example\", \u0026materialize.GrantSchemaDefaultPrivilegeArgs{\n\t\t\tDatabaseName:   pulumi.String(\"database\"),\n\t\t\tGranteeName:    pulumi.String(\"grantee\"),\n\t\t\tPrivilege:      pulumi.String(\"USAGE\"),\n\t\t\tTargetRoleName: pulumi.String(\"target_role\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.GrantSchemaDefaultPrivilege;\nimport com.pulumi.materialize.GrantSchemaDefaultPrivilegeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new GrantSchemaDefaultPrivilege(\"example\", GrantSchemaDefaultPrivilegeArgs.builder()        \n            .databaseName(\"database\")\n            .granteeName(\"grantee\")\n            .privilege(\"USAGE\")\n            .targetRoleName(\"target_role\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Grant role the privilege USAGE for objects in the schema database.schema\n  example:\n    type: materialize:GrantSchemaDefaultPrivilege\n    properties:\n      databaseName: database\n      granteeName: grantee\n      privilege: USAGE\n      targetRoleName: target_role\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n#Grants can be imported using the concatenation of GRANT DEFAULT, the grantee id of the role #Optionally you can include the target id, database id and schema id. The privilege is required\n\n\n\n```sh\n $ pulumi import materialize:index/grantSchemaDefaultPrivilege:GrantSchemaDefaultPrivilege example \u003cregion\u003e:GRANT DEFAULT|SCHEMA|\u003cgrantee_id\u003e|\u003ctarget_role_id\u003e|\u003cdatabase_id\u003e|\u003cschema_id\u003e|\u003cprivilege\u003e\n```\n\n The region is the region where the database is located (e.g. aws/us-east-1) ",
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The default privilege will apply only to objects created in this database, if specified.\n"
                },
                "granteeName": {
                    "type": "string",
                    "description": "The role name that will gain the default privilege. Use the `PUBLIC` pseudo-role to grant privileges to all roles.\n"
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant to the object.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n"
                },
                "targetRoleName": {
                    "type": "string",
                    "description": "The default privilege will apply to objects created by this role. If this is left blank, then the current role is assumed. Use the `PUBLIC` pseudo-role to target objects created by all roles.\n"
                }
            },
            "required": [
                "granteeName",
                "privilege",
                "targetRoleName"
            ],
            "inputProperties": {
                "databaseName": {
                    "type": "string",
                    "description": "The default privilege will apply only to objects created in this database, if specified.\n",
                    "willReplaceOnChanges": true
                },
                "granteeName": {
                    "type": "string",
                    "description": "The role name that will gain the default privilege. Use the `PUBLIC` pseudo-role to grant privileges to all roles.\n",
                    "willReplaceOnChanges": true
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant to the object.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                    "willReplaceOnChanges": true
                },
                "targetRoleName": {
                    "type": "string",
                    "description": "The default privilege will apply to objects created by this role. If this is left blank, then the current role is assumed. Use the `PUBLIC` pseudo-role to target objects created by all roles.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "granteeName",
                "privilege",
                "targetRoleName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GrantSchemaDefaultPrivilege resources.\n",
                "properties": {
                    "databaseName": {
                        "type": "string",
                        "description": "The default privilege will apply only to objects created in this database, if specified.\n",
                        "willReplaceOnChanges": true
                    },
                    "granteeName": {
                        "type": "string",
                        "description": "The role name that will gain the default privilege. Use the `PUBLIC` pseudo-role to grant privileges to all roles.\n",
                        "willReplaceOnChanges": true
                    },
                    "privilege": {
                        "type": "string",
                        "description": "The privilege to grant to the object.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                        "willReplaceOnChanges": true
                    },
                    "targetRoleName": {
                        "type": "string",
                        "description": "The default privilege will apply to objects created by this role. If this is left blank, then the current role is assumed. Use the `PUBLIC` pseudo-role to target objects created by all roles.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/grantSecret:GrantSecret": {
            "description": "Manages the privileges on a Materailize secret for roles.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\n// Grant USAGE to role example_role to secret example_database.example_schema.example_secret\nconst secretGrantUsage = new materialize.GrantSecret(\"secretGrantUsage\", {\n    databaseName: \"example_database\",\n    privilege: \"USAGE\",\n    roleName: \"example_role\",\n    schemaName: \"example_schema\",\n    secretName: \"example_secret\",\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\n# Grant USAGE to role example_role to secret example_database.example_schema.example_secret\nsecret_grant_usage = materialize.GrantSecret(\"secretGrantUsage\",\n    database_name=\"example_database\",\n    privilege=\"USAGE\",\n    role_name=\"example_role\",\n    schema_name=\"example_schema\",\n    secret_name=\"example_secret\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Grant USAGE to role example_role to secret example_database.example_schema.example_secret\n    var secretGrantUsage = new Materialize.GrantSecret(\"secretGrantUsage\", new()\n    {\n        DatabaseName = \"example_database\",\n        Privilege = \"USAGE\",\n        RoleName = \"example_role\",\n        SchemaName = \"example_schema\",\n        SecretName = \"example_secret\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.NewGrantSecret(ctx, \"secretGrantUsage\", \u0026materialize.GrantSecretArgs{\n\t\t\tDatabaseName: pulumi.String(\"example_database\"),\n\t\t\tPrivilege:    pulumi.String(\"USAGE\"),\n\t\t\tRoleName:     pulumi.String(\"example_role\"),\n\t\t\tSchemaName:   pulumi.String(\"example_schema\"),\n\t\t\tSecretName:   pulumi.String(\"example_secret\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.GrantSecret;\nimport com.pulumi.materialize.GrantSecretArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var secretGrantUsage = new GrantSecret(\"secretGrantUsage\", GrantSecretArgs.builder()        \n            .databaseName(\"example_database\")\n            .privilege(\"USAGE\")\n            .roleName(\"example_role\")\n            .schemaName(\"example_schema\")\n            .secretName(\"example_secret\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Grant USAGE to role example_role to secret example_database.example_schema.example_secret\n  secretGrantUsage:\n    type: materialize:GrantSecret\n    properties:\n      databaseName: example_database\n      privilege: USAGE\n      roleName: example_role\n      schemaName: example_schema\n      secretName: example_secret\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n#Grants can be imported using the concatenation of GRANT, the object type, the id of the object, the id of the role and the privilege\n\n\n\n```sh\n $ pulumi import materialize:index/grantSecret:GrantSecret example \u003cregion\u003e:GRANT|SECRET|\u003csecret_id\u003e|\u003crole_id\u003e|\u003cprivilege\u003e\n```\n\n The region is the region where the database is located (e.g. aws/us-east-1) ",
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The database that the secret belongs to.\n"
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant to the object.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n"
                },
                "roleName": {
                    "type": "string",
                    "description": "The name of the role to grant privilege to.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The schema that the secret being to.\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "The secret that is being granted on.\n"
                }
            },
            "required": [
                "databaseName",
                "privilege",
                "roleName",
                "schemaName",
                "secretName"
            ],
            "inputProperties": {
                "databaseName": {
                    "type": "string",
                    "description": "The database that the secret belongs to.\n",
                    "willReplaceOnChanges": true
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant to the object.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                    "willReplaceOnChanges": true
                },
                "roleName": {
                    "type": "string",
                    "description": "The name of the role to grant privilege to.\n",
                    "willReplaceOnChanges": true
                },
                "schemaName": {
                    "type": "string",
                    "description": "The schema that the secret being to.\n",
                    "willReplaceOnChanges": true
                },
                "secretName": {
                    "type": "string",
                    "description": "The secret that is being granted on.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "databaseName",
                "privilege",
                "roleName",
                "schemaName",
                "secretName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GrantSecret resources.\n",
                "properties": {
                    "databaseName": {
                        "type": "string",
                        "description": "The database that the secret belongs to.\n",
                        "willReplaceOnChanges": true
                    },
                    "privilege": {
                        "type": "string",
                        "description": "The privilege to grant to the object.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                        "willReplaceOnChanges": true
                    },
                    "roleName": {
                        "type": "string",
                        "description": "The name of the role to grant privilege to.\n",
                        "willReplaceOnChanges": true
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "The schema that the secret being to.\n",
                        "willReplaceOnChanges": true
                    },
                    "secretName": {
                        "type": "string",
                        "description": "The secret that is being granted on.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/grantSecretDefaultPrivilege:GrantSecretDefaultPrivilege": {
            "description": "Defines default privileges that will be applied to objects created in the future. It does not affect any existing objects.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\n// Grant role the privilege USAGE for objects in the schema database.schema\nconst example = new materialize.GrantSecretDefaultPrivilege(\"example\", {\n    databaseName: \"database\",\n    granteeName: \"grantee\",\n    privilege: \"USAGE\",\n    schemaName: \"schema\",\n    targetRoleName: \"target_role\",\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\n# Grant role the privilege USAGE for objects in the schema database.schema\nexample = materialize.GrantSecretDefaultPrivilege(\"example\",\n    database_name=\"database\",\n    grantee_name=\"grantee\",\n    privilege=\"USAGE\",\n    schema_name=\"schema\",\n    target_role_name=\"target_role\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Grant role the privilege USAGE for objects in the schema database.schema\n    var example = new Materialize.GrantSecretDefaultPrivilege(\"example\", new()\n    {\n        DatabaseName = \"database\",\n        GranteeName = \"grantee\",\n        Privilege = \"USAGE\",\n        SchemaName = \"schema\",\n        TargetRoleName = \"target_role\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.NewGrantSecretDefaultPrivilege(ctx, \"example\", \u0026materialize.GrantSecretDefaultPrivilegeArgs{\n\t\t\tDatabaseName:   pulumi.String(\"database\"),\n\t\t\tGranteeName:    pulumi.String(\"grantee\"),\n\t\t\tPrivilege:      pulumi.String(\"USAGE\"),\n\t\t\tSchemaName:     pulumi.String(\"schema\"),\n\t\t\tTargetRoleName: pulumi.String(\"target_role\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.GrantSecretDefaultPrivilege;\nimport com.pulumi.materialize.GrantSecretDefaultPrivilegeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new GrantSecretDefaultPrivilege(\"example\", GrantSecretDefaultPrivilegeArgs.builder()        \n            .databaseName(\"database\")\n            .granteeName(\"grantee\")\n            .privilege(\"USAGE\")\n            .schemaName(\"schema\")\n            .targetRoleName(\"target_role\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Grant role the privilege USAGE for objects in the schema database.schema\n  example:\n    type: materialize:GrantSecretDefaultPrivilege\n    properties:\n      databaseName: database\n      granteeName: grantee\n      privilege: USAGE\n      schemaName: schema\n      targetRoleName: target_role\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n#Grants can be imported using the concatenation of GRANT DEFAULT, the grantee id of the role #Optionally you can include the target id, database id and schema id. The privilege is required\n\n\n\n```sh\n $ pulumi import materialize:index/grantSecretDefaultPrivilege:GrantSecretDefaultPrivilege example \u003cregion\u003e:GRANT DEFAULT|SECRET|\u003cgrantee_id\u003e|\u003ctarget_role_id\u003e|\u003cdatabase_id\u003e|\u003cschema_id\u003e|\u003cprivilege\u003e\n```\n\n The region is the region where the database is located (e.g. aws/us-east-1) ",
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The default privilege will apply only to objects created in this database, if specified.\n"
                },
                "granteeName": {
                    "type": "string",
                    "description": "The role name that will gain the default privilege. Use the `PUBLIC` pseudo-role to grant privileges to all roles.\n"
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant to the object.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The default privilege will apply only to objects created in this schema, if specified.\n"
                },
                "targetRoleName": {
                    "type": "string",
                    "description": "The default privilege will apply to objects created by this role. If this is left blank, then the current role is assumed. Use the `PUBLIC` pseudo-role to target objects created by all roles.\n"
                }
            },
            "required": [
                "granteeName",
                "privilege",
                "targetRoleName"
            ],
            "inputProperties": {
                "databaseName": {
                    "type": "string",
                    "description": "The default privilege will apply only to objects created in this database, if specified.\n",
                    "willReplaceOnChanges": true
                },
                "granteeName": {
                    "type": "string",
                    "description": "The role name that will gain the default privilege. Use the `PUBLIC` pseudo-role to grant privileges to all roles.\n",
                    "willReplaceOnChanges": true
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant to the object.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                    "willReplaceOnChanges": true
                },
                "schemaName": {
                    "type": "string",
                    "description": "The default privilege will apply only to objects created in this schema, if specified.\n",
                    "willReplaceOnChanges": true
                },
                "targetRoleName": {
                    "type": "string",
                    "description": "The default privilege will apply to objects created by this role. If this is left blank, then the current role is assumed. Use the `PUBLIC` pseudo-role to target objects created by all roles.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "granteeName",
                "privilege",
                "targetRoleName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GrantSecretDefaultPrivilege resources.\n",
                "properties": {
                    "databaseName": {
                        "type": "string",
                        "description": "The default privilege will apply only to objects created in this database, if specified.\n",
                        "willReplaceOnChanges": true
                    },
                    "granteeName": {
                        "type": "string",
                        "description": "The role name that will gain the default privilege. Use the `PUBLIC` pseudo-role to grant privileges to all roles.\n",
                        "willReplaceOnChanges": true
                    },
                    "privilege": {
                        "type": "string",
                        "description": "The privilege to grant to the object.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                        "willReplaceOnChanges": true
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "The default privilege will apply only to objects created in this schema, if specified.\n",
                        "willReplaceOnChanges": true
                    },
                    "targetRoleName": {
                        "type": "string",
                        "description": "The default privilege will apply to objects created by this role. If this is left blank, then the current role is assumed. Use the `PUBLIC` pseudo-role to target objects created by all roles.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/grantSource:GrantSource": {
            "description": "Manages the privileges on a Materailize source for roles.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\n// Grant SELECT to role example_role to source example_database.example_schema.example_source\nconst sourceGrantSelect = new materialize.GrantSource(\"sourceGrantSelect\", {\n    databaseName: \"example_database\",\n    privilege: \"SELECT\",\n    roleName: \"example_role\",\n    schemaName: \"example_schema\",\n    sourceName: \"example_source\",\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\n# Grant SELECT to role example_role to source example_database.example_schema.example_source\nsource_grant_select = materialize.GrantSource(\"sourceGrantSelect\",\n    database_name=\"example_database\",\n    privilege=\"SELECT\",\n    role_name=\"example_role\",\n    schema_name=\"example_schema\",\n    source_name=\"example_source\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Grant SELECT to role example_role to source example_database.example_schema.example_source\n    var sourceGrantSelect = new Materialize.GrantSource(\"sourceGrantSelect\", new()\n    {\n        DatabaseName = \"example_database\",\n        Privilege = \"SELECT\",\n        RoleName = \"example_role\",\n        SchemaName = \"example_schema\",\n        SourceName = \"example_source\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.NewGrantSource(ctx, \"sourceGrantSelect\", \u0026materialize.GrantSourceArgs{\n\t\t\tDatabaseName: pulumi.String(\"example_database\"),\n\t\t\tPrivilege:    pulumi.String(\"SELECT\"),\n\t\t\tRoleName:     pulumi.String(\"example_role\"),\n\t\t\tSchemaName:   pulumi.String(\"example_schema\"),\n\t\t\tSourceName:   pulumi.String(\"example_source\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.GrantSource;\nimport com.pulumi.materialize.GrantSourceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var sourceGrantSelect = new GrantSource(\"sourceGrantSelect\", GrantSourceArgs.builder()        \n            .databaseName(\"example_database\")\n            .privilege(\"SELECT\")\n            .roleName(\"example_role\")\n            .schemaName(\"example_schema\")\n            .sourceName(\"example_source\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Grant SELECT to role example_role to source example_database.example_schema.example_source\n  sourceGrantSelect:\n    type: materialize:GrantSource\n    properties:\n      databaseName: example_database\n      privilege: SELECT\n      roleName: example_role\n      schemaName: example_schema\n      sourceName: example_source\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n#Grants can be imported using the concatenation of GRANT, the object type, the id of the object, the id of the role and the privilege\n\n\n\n```sh\n $ pulumi import materialize:index/grantSource:GrantSource example \u003cregion\u003e:GRANT|SOURCE|\u003csource_id\u003e|\u003crole_id\u003e|\u003cprivilege\u003e\n```\n\n The region is the region where the database is located (e.g. aws/us-east-1) ",
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The database that the view belongs to.\n"
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant to the object.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n"
                },
                "roleName": {
                    "type": "string",
                    "description": "The name of the role to grant privilege to.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The schema that the view being to.\n"
                },
                "sourceName": {
                    "type": "string",
                    "description": "The source that is being granted on.\n"
                }
            },
            "required": [
                "databaseName",
                "privilege",
                "roleName",
                "schemaName",
                "sourceName"
            ],
            "inputProperties": {
                "databaseName": {
                    "type": "string",
                    "description": "The database that the view belongs to.\n",
                    "willReplaceOnChanges": true
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant to the object.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                    "willReplaceOnChanges": true
                },
                "roleName": {
                    "type": "string",
                    "description": "The name of the role to grant privilege to.\n",
                    "willReplaceOnChanges": true
                },
                "schemaName": {
                    "type": "string",
                    "description": "The schema that the view being to.\n",
                    "willReplaceOnChanges": true
                },
                "sourceName": {
                    "type": "string",
                    "description": "The source that is being granted on.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "databaseName",
                "privilege",
                "roleName",
                "schemaName",
                "sourceName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GrantSource resources.\n",
                "properties": {
                    "databaseName": {
                        "type": "string",
                        "description": "The database that the view belongs to.\n",
                        "willReplaceOnChanges": true
                    },
                    "privilege": {
                        "type": "string",
                        "description": "The privilege to grant to the object.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                        "willReplaceOnChanges": true
                    },
                    "roleName": {
                        "type": "string",
                        "description": "The name of the role to grant privilege to.\n",
                        "willReplaceOnChanges": true
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "The schema that the view being to.\n",
                        "willReplaceOnChanges": true
                    },
                    "sourceName": {
                        "type": "string",
                        "description": "The source that is being granted on.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/grantSystemPrivilege:GrantSystemPrivilege": {
            "description": "Manages the system privileges for roles.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\n// Grant role the privilege CREATEDB\nconst roleCreatedb = new materialize.GrantSystemPrivilege(\"roleCreatedb\", {\n    privilege: \"CREATEDB\",\n    roleName: \"role\",\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\n# Grant role the privilege CREATEDB\nrole_createdb = materialize.GrantSystemPrivilege(\"roleCreatedb\",\n    privilege=\"CREATEDB\",\n    role_name=\"role\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Grant role the privilege CREATEDB\n    var roleCreatedb = new Materialize.GrantSystemPrivilege(\"roleCreatedb\", new()\n    {\n        Privilege = \"CREATEDB\",\n        RoleName = \"role\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.NewGrantSystemPrivilege(ctx, \"roleCreatedb\", \u0026materialize.GrantSystemPrivilegeArgs{\n\t\t\tPrivilege: pulumi.String(\"CREATEDB\"),\n\t\t\tRoleName:  pulumi.String(\"role\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.GrantSystemPrivilege;\nimport com.pulumi.materialize.GrantSystemPrivilegeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var roleCreatedb = new GrantSystemPrivilege(\"roleCreatedb\", GrantSystemPrivilegeArgs.builder()        \n            .privilege(\"CREATEDB\")\n            .roleName(\"role\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Grant role the privilege CREATEDB\n  roleCreatedb:\n    type: materialize:GrantSystemPrivilege\n    properties:\n      privilege: CREATEDB\n      roleName: role\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n#Grants can be imported using the concatenation of GRANT SYSTEM, the id of the role and the privilege\n\n\n\n```sh\n $ pulumi import materialize:index/grantSystemPrivilege:GrantSystemPrivilege example \u003cregion\u003e:GRANT SYSTEM|\u003crole_id\u003e|\u003cprivilege\u003e\n```\n\n The region is the region where the database is located (e.g. aws/us-east-1) ",
            "properties": {
                "privilege": {
                    "type": "string",
                    "description": "The system privilege to grant.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n"
                },
                "roleName": {
                    "type": "string",
                    "description": "The name of the role to grant privilege to.\n"
                }
            },
            "required": [
                "privilege",
                "roleName"
            ],
            "inputProperties": {
                "privilege": {
                    "type": "string",
                    "description": "The system privilege to grant.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                    "willReplaceOnChanges": true
                },
                "roleName": {
                    "type": "string",
                    "description": "The name of the role to grant privilege to.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "privilege",
                "roleName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GrantSystemPrivilege resources.\n",
                "properties": {
                    "privilege": {
                        "type": "string",
                        "description": "The system privilege to grant.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                        "willReplaceOnChanges": true
                    },
                    "roleName": {
                        "type": "string",
                        "description": "The name of the role to grant privilege to.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/grantTable:GrantTable": {
            "description": "Manages the privileges on a Materailize table for roles.\n\n*Note*: This resource applies to sources, views and materialized views (https://materialize.com/docs/sql/grant-privilege/#compatibility)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\n// Grant USAGE to role example_role to table example_database.example_schema.example_table\nconst tableGrantUsage = new materialize.GrantTable(\"tableGrantUsage\", {\n    databaseName: \"example_database\",\n    privilege: \"USAGE\",\n    roleName: \"example_role\",\n    schemaName: \"example_schema\",\n    tableName: \"example_table\",\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\n# Grant USAGE to role example_role to table example_database.example_schema.example_table\ntable_grant_usage = materialize.GrantTable(\"tableGrantUsage\",\n    database_name=\"example_database\",\n    privilege=\"USAGE\",\n    role_name=\"example_role\",\n    schema_name=\"example_schema\",\n    table_name=\"example_table\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Grant USAGE to role example_role to table example_database.example_schema.example_table\n    var tableGrantUsage = new Materialize.GrantTable(\"tableGrantUsage\", new()\n    {\n        DatabaseName = \"example_database\",\n        Privilege = \"USAGE\",\n        RoleName = \"example_role\",\n        SchemaName = \"example_schema\",\n        TableName = \"example_table\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.NewGrantTable(ctx, \"tableGrantUsage\", \u0026materialize.GrantTableArgs{\n\t\t\tDatabaseName: pulumi.String(\"example_database\"),\n\t\t\tPrivilege:    pulumi.String(\"USAGE\"),\n\t\t\tRoleName:     pulumi.String(\"example_role\"),\n\t\t\tSchemaName:   pulumi.String(\"example_schema\"),\n\t\t\tTableName:    pulumi.String(\"example_table\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.GrantTable;\nimport com.pulumi.materialize.GrantTableArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var tableGrantUsage = new GrantTable(\"tableGrantUsage\", GrantTableArgs.builder()        \n            .databaseName(\"example_database\")\n            .privilege(\"USAGE\")\n            .roleName(\"example_role\")\n            .schemaName(\"example_schema\")\n            .tableName(\"example_table\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Grant USAGE to role example_role to table example_database.example_schema.example_table\n  tableGrantUsage:\n    type: materialize:GrantTable\n    properties:\n      databaseName: example_database\n      privilege: USAGE\n      roleName: example_role\n      schemaName: example_schema\n      tableName: example_table\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n#Grants can be imported using the concatenation of GRANT, the object type, the id of the object, the id of the role and the privilege\n\n\n\n```sh\n $ pulumi import materialize:index/grantTable:GrantTable example \u003cregion\u003e:GRANT|TABLE|\u003ctable_id\u003e|\u003crole_id\u003e|\u003cprivilege\u003e\n```\n\n The region is the region where the database is located (e.g. aws/us-east-1) ",
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The database that the table belongs to.\n"
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant to the object.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n"
                },
                "roleName": {
                    "type": "string",
                    "description": "The name of the role to grant privilege to.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The schema that the table being to.\n"
                },
                "tableName": {
                    "type": "string",
                    "description": "The table that is being granted on.\n"
                }
            },
            "required": [
                "databaseName",
                "privilege",
                "roleName",
                "schemaName",
                "tableName"
            ],
            "inputProperties": {
                "databaseName": {
                    "type": "string",
                    "description": "The database that the table belongs to.\n",
                    "willReplaceOnChanges": true
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant to the object.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                    "willReplaceOnChanges": true
                },
                "roleName": {
                    "type": "string",
                    "description": "The name of the role to grant privilege to.\n",
                    "willReplaceOnChanges": true
                },
                "schemaName": {
                    "type": "string",
                    "description": "The schema that the table being to.\n",
                    "willReplaceOnChanges": true
                },
                "tableName": {
                    "type": "string",
                    "description": "The table that is being granted on.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "databaseName",
                "privilege",
                "roleName",
                "schemaName",
                "tableName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GrantTable resources.\n",
                "properties": {
                    "databaseName": {
                        "type": "string",
                        "description": "The database that the table belongs to.\n",
                        "willReplaceOnChanges": true
                    },
                    "privilege": {
                        "type": "string",
                        "description": "The privilege to grant to the object.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                        "willReplaceOnChanges": true
                    },
                    "roleName": {
                        "type": "string",
                        "description": "The name of the role to grant privilege to.\n",
                        "willReplaceOnChanges": true
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "The schema that the table being to.\n",
                        "willReplaceOnChanges": true
                    },
                    "tableName": {
                        "type": "string",
                        "description": "The table that is being granted on.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/grantTableDefaultPrivilege:GrantTableDefaultPrivilege": {
            "description": "Defines default privileges that will be applied to objects created in the future. It does not affect any existing objects.\n\n*Note*: This resource applies to sources, views and materialized views (https://materialize.com/docs/sql/alter-default-privileges/#compatibility)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\n// Grant role the privilege USAGE for objects in the schema database.schema\nconst example = new materialize.GrantTableDefaultPrivilege(\"example\", {\n    databaseName: \"database\",\n    granteeName: \"grantee\",\n    privilege: \"USAGE\",\n    schemaName: \"schema\",\n    targetRoleName: \"target_role\",\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\n# Grant role the privilege USAGE for objects in the schema database.schema\nexample = materialize.GrantTableDefaultPrivilege(\"example\",\n    database_name=\"database\",\n    grantee_name=\"grantee\",\n    privilege=\"USAGE\",\n    schema_name=\"schema\",\n    target_role_name=\"target_role\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Grant role the privilege USAGE for objects in the schema database.schema\n    var example = new Materialize.GrantTableDefaultPrivilege(\"example\", new()\n    {\n        DatabaseName = \"database\",\n        GranteeName = \"grantee\",\n        Privilege = \"USAGE\",\n        SchemaName = \"schema\",\n        TargetRoleName = \"target_role\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.NewGrantTableDefaultPrivilege(ctx, \"example\", \u0026materialize.GrantTableDefaultPrivilegeArgs{\n\t\t\tDatabaseName:   pulumi.String(\"database\"),\n\t\t\tGranteeName:    pulumi.String(\"grantee\"),\n\t\t\tPrivilege:      pulumi.String(\"USAGE\"),\n\t\t\tSchemaName:     pulumi.String(\"schema\"),\n\t\t\tTargetRoleName: pulumi.String(\"target_role\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.GrantTableDefaultPrivilege;\nimport com.pulumi.materialize.GrantTableDefaultPrivilegeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new GrantTableDefaultPrivilege(\"example\", GrantTableDefaultPrivilegeArgs.builder()        \n            .databaseName(\"database\")\n            .granteeName(\"grantee\")\n            .privilege(\"USAGE\")\n            .schemaName(\"schema\")\n            .targetRoleName(\"target_role\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Grant role the privilege USAGE for objects in the schema database.schema\n  example:\n    type: materialize:GrantTableDefaultPrivilege\n    properties:\n      databaseName: database\n      granteeName: grantee\n      privilege: USAGE\n      schemaName: schema\n      targetRoleName: target_role\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n#Grants can be imported using the concatenation of GRANT DEFAULT, the grantee id of the role #Optionally you can include the target id, database id and schema id. The privilege is required\n\n\n\n```sh\n $ pulumi import materialize:index/grantTableDefaultPrivilege:GrantTableDefaultPrivilege example \u003cregion\u003e:GRANT DEFAULT|TABLE|\u003cgrantee_id\u003e|\u003ctarget_role_id\u003e|\u003cdatabase_id\u003e|\u003cschema_id\u003e|\u003cprivilege\u003e\n```\n\n The region is the region where the database is located (e.g. aws/us-east-1) ",
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The default privilege will apply only to objects created in this database, if specified.\n"
                },
                "granteeName": {
                    "type": "string",
                    "description": "The role name that will gain the default privilege. Use the `PUBLIC` pseudo-role to grant privileges to all roles.\n"
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant to the object.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The default privilege will apply only to objects created in this schema, if specified.\n"
                },
                "targetRoleName": {
                    "type": "string",
                    "description": "The default privilege will apply to objects created by this role. If this is left blank, then the current role is assumed. Use the `PUBLIC` pseudo-role to target objects created by all roles.\n"
                }
            },
            "required": [
                "granteeName",
                "privilege",
                "targetRoleName"
            ],
            "inputProperties": {
                "databaseName": {
                    "type": "string",
                    "description": "The default privilege will apply only to objects created in this database, if specified.\n",
                    "willReplaceOnChanges": true
                },
                "granteeName": {
                    "type": "string",
                    "description": "The role name that will gain the default privilege. Use the `PUBLIC` pseudo-role to grant privileges to all roles.\n",
                    "willReplaceOnChanges": true
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant to the object.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                    "willReplaceOnChanges": true
                },
                "schemaName": {
                    "type": "string",
                    "description": "The default privilege will apply only to objects created in this schema, if specified.\n",
                    "willReplaceOnChanges": true
                },
                "targetRoleName": {
                    "type": "string",
                    "description": "The default privilege will apply to objects created by this role. If this is left blank, then the current role is assumed. Use the `PUBLIC` pseudo-role to target objects created by all roles.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "granteeName",
                "privilege",
                "targetRoleName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GrantTableDefaultPrivilege resources.\n",
                "properties": {
                    "databaseName": {
                        "type": "string",
                        "description": "The default privilege will apply only to objects created in this database, if specified.\n",
                        "willReplaceOnChanges": true
                    },
                    "granteeName": {
                        "type": "string",
                        "description": "The role name that will gain the default privilege. Use the `PUBLIC` pseudo-role to grant privileges to all roles.\n",
                        "willReplaceOnChanges": true
                    },
                    "privilege": {
                        "type": "string",
                        "description": "The privilege to grant to the object.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                        "willReplaceOnChanges": true
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "The default privilege will apply only to objects created in this schema, if specified.\n",
                        "willReplaceOnChanges": true
                    },
                    "targetRoleName": {
                        "type": "string",
                        "description": "The default privilege will apply to objects created by this role. If this is left blank, then the current role is assumed. Use the `PUBLIC` pseudo-role to target objects created by all roles.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/grantType:GrantType": {
            "description": "Manages the privileges on a Materailize type for roles.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\n// Grant USAGE to role example_role to type example_database.example_schema.example_type\nconst typeGrantUsage = new materialize.GrantType(\"typeGrantUsage\", {\n    databaseName: \"example_database\",\n    privilege: \"USAGE\",\n    roleName: \"example_role\",\n    schemaName: \"example_schema\",\n    typeName: \"example_type\",\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\n# Grant USAGE to role example_role to type example_database.example_schema.example_type\ntype_grant_usage = materialize.GrantType(\"typeGrantUsage\",\n    database_name=\"example_database\",\n    privilege=\"USAGE\",\n    role_name=\"example_role\",\n    schema_name=\"example_schema\",\n    type_name=\"example_type\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Grant USAGE to role example_role to type example_database.example_schema.example_type\n    var typeGrantUsage = new Materialize.GrantType(\"typeGrantUsage\", new()\n    {\n        DatabaseName = \"example_database\",\n        Privilege = \"USAGE\",\n        RoleName = \"example_role\",\n        SchemaName = \"example_schema\",\n        TypeName = \"example_type\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.NewGrantType(ctx, \"typeGrantUsage\", \u0026materialize.GrantTypeArgs{\n\t\t\tDatabaseName: pulumi.String(\"example_database\"),\n\t\t\tPrivilege:    pulumi.String(\"USAGE\"),\n\t\t\tRoleName:     pulumi.String(\"example_role\"),\n\t\t\tSchemaName:   pulumi.String(\"example_schema\"),\n\t\t\tTypeName:     pulumi.String(\"example_type\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.GrantType;\nimport com.pulumi.materialize.GrantTypeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var typeGrantUsage = new GrantType(\"typeGrantUsage\", GrantTypeArgs.builder()        \n            .databaseName(\"example_database\")\n            .privilege(\"USAGE\")\n            .roleName(\"example_role\")\n            .schemaName(\"example_schema\")\n            .typeName(\"example_type\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Grant USAGE to role example_role to type example_database.example_schema.example_type\n  typeGrantUsage:\n    type: materialize:GrantType\n    properties:\n      databaseName: example_database\n      privilege: USAGE\n      roleName: example_role\n      schemaName: example_schema\n      typeName: example_type\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n#Grants can be imported using the concatenation of GRANT, the object type, the id of the object, the id of the role and the privilege\n\n\n\n```sh\n $ pulumi import materialize:index/grantType:GrantType example \u003cregion\u003e:GRANT|TYPE|\u003ctype_id\u003e|\u003crole_id\u003e|\u003cprivilege\u003e\n```\n\n The region is the region where the database is located (e.g. aws/us-east-1) ",
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The database that the type belongs to.\n"
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant to the object.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n"
                },
                "roleName": {
                    "type": "string",
                    "description": "The name of the role to grant privilege to.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The schema that the type being to.\n"
                },
                "typeName": {
                    "type": "string",
                    "description": "The type that is being granted on.\n"
                }
            },
            "required": [
                "databaseName",
                "privilege",
                "roleName",
                "schemaName",
                "typeName"
            ],
            "inputProperties": {
                "databaseName": {
                    "type": "string",
                    "description": "The database that the type belongs to.\n",
                    "willReplaceOnChanges": true
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant to the object.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                    "willReplaceOnChanges": true
                },
                "roleName": {
                    "type": "string",
                    "description": "The name of the role to grant privilege to.\n",
                    "willReplaceOnChanges": true
                },
                "schemaName": {
                    "type": "string",
                    "description": "The schema that the type being to.\n",
                    "willReplaceOnChanges": true
                },
                "typeName": {
                    "type": "string",
                    "description": "The type that is being granted on.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "databaseName",
                "privilege",
                "roleName",
                "schemaName",
                "typeName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GrantType resources.\n",
                "properties": {
                    "databaseName": {
                        "type": "string",
                        "description": "The database that the type belongs to.\n",
                        "willReplaceOnChanges": true
                    },
                    "privilege": {
                        "type": "string",
                        "description": "The privilege to grant to the object.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                        "willReplaceOnChanges": true
                    },
                    "roleName": {
                        "type": "string",
                        "description": "The name of the role to grant privilege to.\n",
                        "willReplaceOnChanges": true
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "The schema that the type being to.\n",
                        "willReplaceOnChanges": true
                    },
                    "typeName": {
                        "type": "string",
                        "description": "The type that is being granted on.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/grantTypeDefaultPrivilege:GrantTypeDefaultPrivilege": {
            "description": "Defines default privileges that will be applied to objects created in the future. It does not affect any existing objects.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\n// Grant role the privilege USAGE for objects in the schema database.schema\nconst example = new materialize.GrantTypeDefaultPrivilege(\"example\", {\n    databaseName: \"database\",\n    granteeName: \"grantee\",\n    privilege: \"USAGE\",\n    schemaName: \"schema\",\n    targetRoleName: \"target_role\",\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\n# Grant role the privilege USAGE for objects in the schema database.schema\nexample = materialize.GrantTypeDefaultPrivilege(\"example\",\n    database_name=\"database\",\n    grantee_name=\"grantee\",\n    privilege=\"USAGE\",\n    schema_name=\"schema\",\n    target_role_name=\"target_role\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Grant role the privilege USAGE for objects in the schema database.schema\n    var example = new Materialize.GrantTypeDefaultPrivilege(\"example\", new()\n    {\n        DatabaseName = \"database\",\n        GranteeName = \"grantee\",\n        Privilege = \"USAGE\",\n        SchemaName = \"schema\",\n        TargetRoleName = \"target_role\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.NewGrantTypeDefaultPrivilege(ctx, \"example\", \u0026materialize.GrantTypeDefaultPrivilegeArgs{\n\t\t\tDatabaseName:   pulumi.String(\"database\"),\n\t\t\tGranteeName:    pulumi.String(\"grantee\"),\n\t\t\tPrivilege:      pulumi.String(\"USAGE\"),\n\t\t\tSchemaName:     pulumi.String(\"schema\"),\n\t\t\tTargetRoleName: pulumi.String(\"target_role\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.GrantTypeDefaultPrivilege;\nimport com.pulumi.materialize.GrantTypeDefaultPrivilegeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new GrantTypeDefaultPrivilege(\"example\", GrantTypeDefaultPrivilegeArgs.builder()        \n            .databaseName(\"database\")\n            .granteeName(\"grantee\")\n            .privilege(\"USAGE\")\n            .schemaName(\"schema\")\n            .targetRoleName(\"target_role\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Grant role the privilege USAGE for objects in the schema database.schema\n  example:\n    type: materialize:GrantTypeDefaultPrivilege\n    properties:\n      databaseName: database\n      granteeName: grantee\n      privilege: USAGE\n      schemaName: schema\n      targetRoleName: target_role\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n#Grants can be imported using the concatenation of GRANT DEFAULT, the grantee id of the role #Optionally you can include the target id, database id and schema id. The privilege is required\n\n\n\n```sh\n $ pulumi import materialize:index/grantTypeDefaultPrivilege:GrantTypeDefaultPrivilege example \u003cregion\u003e:GRANT DEFAULT|TYPE|\u003cgrantee_id\u003e|\u003ctarget_role_id\u003e|\u003cdatabase_id\u003e|\u003cschema_id\u003e|\u003cprivilege\u003e\n```\n\n The region is the region where the database is located (e.g. aws/us-east-1) ",
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The default privilege will apply only to objects created in this database, if specified.\n"
                },
                "granteeName": {
                    "type": "string",
                    "description": "The role name that will gain the default privilege. Use the `PUBLIC` pseudo-role to grant privileges to all roles.\n"
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant to the object.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The default privilege will apply only to objects created in this schema, if specified.\n"
                },
                "targetRoleName": {
                    "type": "string",
                    "description": "The default privilege will apply to objects created by this role. If this is left blank, then the current role is assumed. Use the `PUBLIC` pseudo-role to target objects created by all roles.\n"
                }
            },
            "required": [
                "granteeName",
                "privilege",
                "targetRoleName"
            ],
            "inputProperties": {
                "databaseName": {
                    "type": "string",
                    "description": "The default privilege will apply only to objects created in this database, if specified.\n",
                    "willReplaceOnChanges": true
                },
                "granteeName": {
                    "type": "string",
                    "description": "The role name that will gain the default privilege. Use the `PUBLIC` pseudo-role to grant privileges to all roles.\n",
                    "willReplaceOnChanges": true
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant to the object.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                    "willReplaceOnChanges": true
                },
                "schemaName": {
                    "type": "string",
                    "description": "The default privilege will apply only to objects created in this schema, if specified.\n",
                    "willReplaceOnChanges": true
                },
                "targetRoleName": {
                    "type": "string",
                    "description": "The default privilege will apply to objects created by this role. If this is left blank, then the current role is assumed. Use the `PUBLIC` pseudo-role to target objects created by all roles.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "granteeName",
                "privilege",
                "targetRoleName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GrantTypeDefaultPrivilege resources.\n",
                "properties": {
                    "databaseName": {
                        "type": "string",
                        "description": "The default privilege will apply only to objects created in this database, if specified.\n",
                        "willReplaceOnChanges": true
                    },
                    "granteeName": {
                        "type": "string",
                        "description": "The role name that will gain the default privilege. Use the `PUBLIC` pseudo-role to grant privileges to all roles.\n",
                        "willReplaceOnChanges": true
                    },
                    "privilege": {
                        "type": "string",
                        "description": "The privilege to grant to the object.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                        "willReplaceOnChanges": true
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "The default privilege will apply only to objects created in this schema, if specified.\n",
                        "willReplaceOnChanges": true
                    },
                    "targetRoleName": {
                        "type": "string",
                        "description": "The default privilege will apply to objects created by this role. If this is left blank, then the current role is assumed. Use the `PUBLIC` pseudo-role to target objects created by all roles.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/grantView:GrantView": {
            "description": "Manages the privileges on a Materailize view for roles.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\n// Grant SELECT to role example_role to view example_database.example_schema.example_view\nconst viewGrantSelect = new materialize.GrantView(\"viewGrantSelect\", {\n    databaseName: \"example_database\",\n    privilege: \"SELECT\",\n    roleName: \"example_role\",\n    schemaName: \"example_schema\",\n    viewName: \"example_view\",\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\n# Grant SELECT to role example_role to view example_database.example_schema.example_view\nview_grant_select = materialize.GrantView(\"viewGrantSelect\",\n    database_name=\"example_database\",\n    privilege=\"SELECT\",\n    role_name=\"example_role\",\n    schema_name=\"example_schema\",\n    view_name=\"example_view\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Grant SELECT to role example_role to view example_database.example_schema.example_view\n    var viewGrantSelect = new Materialize.GrantView(\"viewGrantSelect\", new()\n    {\n        DatabaseName = \"example_database\",\n        Privilege = \"SELECT\",\n        RoleName = \"example_role\",\n        SchemaName = \"example_schema\",\n        ViewName = \"example_view\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.NewGrantView(ctx, \"viewGrantSelect\", \u0026materialize.GrantViewArgs{\n\t\t\tDatabaseName: pulumi.String(\"example_database\"),\n\t\t\tPrivilege:    pulumi.String(\"SELECT\"),\n\t\t\tRoleName:     pulumi.String(\"example_role\"),\n\t\t\tSchemaName:   pulumi.String(\"example_schema\"),\n\t\t\tViewName:     pulumi.String(\"example_view\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.GrantView;\nimport com.pulumi.materialize.GrantViewArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var viewGrantSelect = new GrantView(\"viewGrantSelect\", GrantViewArgs.builder()        \n            .databaseName(\"example_database\")\n            .privilege(\"SELECT\")\n            .roleName(\"example_role\")\n            .schemaName(\"example_schema\")\n            .viewName(\"example_view\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Grant SELECT to role example_role to view example_database.example_schema.example_view\n  viewGrantSelect:\n    type: materialize:GrantView\n    properties:\n      databaseName: example_database\n      privilege: SELECT\n      roleName: example_role\n      schemaName: example_schema\n      viewName: example_view\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n#Grants can be imported using the concatenation of GRANT, the object type, the id of the object, the id of the role and the privilege\n\n\n\n```sh\n $ pulumi import materialize:index/grantView:GrantView example GRANT|VIEW|\u003cview_id\u003e|\u003crole_id\u003e|\u003cprivilege\u003e\n```\n\n ",
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The database that the view belongs to.\n"
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant to the object.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n"
                },
                "roleName": {
                    "type": "string",
                    "description": "The name of the role to grant privilege to.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The schema that the view being to.\n"
                },
                "viewName": {
                    "type": "string",
                    "description": "The view that is being granted on.\n"
                }
            },
            "required": [
                "databaseName",
                "privilege",
                "roleName",
                "schemaName",
                "viewName"
            ],
            "inputProperties": {
                "databaseName": {
                    "type": "string",
                    "description": "The database that the view belongs to.\n",
                    "willReplaceOnChanges": true
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant to the object.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                    "willReplaceOnChanges": true
                },
                "roleName": {
                    "type": "string",
                    "description": "The name of the role to grant privilege to.\n",
                    "willReplaceOnChanges": true
                },
                "schemaName": {
                    "type": "string",
                    "description": "The schema that the view being to.\n",
                    "willReplaceOnChanges": true
                },
                "viewName": {
                    "type": "string",
                    "description": "The view that is being granted on.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "databaseName",
                "privilege",
                "roleName",
                "schemaName",
                "viewName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GrantView resources.\n",
                "properties": {
                    "databaseName": {
                        "type": "string",
                        "description": "The database that the view belongs to.\n",
                        "willReplaceOnChanges": true
                    },
                    "privilege": {
                        "type": "string",
                        "description": "The privilege to grant to the object.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                        "willReplaceOnChanges": true
                    },
                    "roleName": {
                        "type": "string",
                        "description": "The name of the role to grant privilege to.\n",
                        "willReplaceOnChanges": true
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "The schema that the view being to.\n",
                        "willReplaceOnChanges": true
                    },
                    "viewName": {
                        "type": "string",
                        "description": "The view that is being granted on.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/index:Index": {
            "description": "Indexes represent query results stored in memory.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\nconst loadgenIndex = new materialize.Index(\"loadgenIndex\", {\n    clusterName: \"cluster\",\n    method: \"ARRANGEMENT\",\n    objName: {\n        databaseName: \"database\",\n        name: \"source\",\n        schemaName: \"schema\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\nloadgen_index = materialize.Index(\"loadgenIndex\",\n    cluster_name=\"cluster\",\n    method=\"ARRANGEMENT\",\n    obj_name=materialize.IndexObjNameArgs(\n        database_name=\"database\",\n        name=\"source\",\n        schema_name=\"schema\",\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var loadgenIndex = new Materialize.Index(\"loadgenIndex\", new()\n    {\n        ClusterName = \"cluster\",\n        Method = \"ARRANGEMENT\",\n        ObjName = new Materialize.Inputs.IndexObjNameArgs\n        {\n            DatabaseName = \"database\",\n            Name = \"source\",\n            SchemaName = \"schema\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.NewIndex(ctx, \"loadgenIndex\", \u0026materialize.IndexArgs{\n\t\t\tClusterName: pulumi.String(\"cluster\"),\n\t\t\tMethod:      pulumi.String(\"ARRANGEMENT\"),\n\t\t\tObjName: \u0026materialize.IndexObjNameArgs{\n\t\t\t\tDatabaseName: pulumi.String(\"database\"),\n\t\t\t\tName:         pulumi.String(\"source\"),\n\t\t\t\tSchemaName:   pulumi.String(\"schema\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.Index;\nimport com.pulumi.materialize.IndexArgs;\nimport com.pulumi.materialize.inputs.IndexObjNameArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var loadgenIndex = new Index(\"loadgenIndex\", IndexArgs.builder()        \n            .clusterName(\"cluster\")\n            .method(\"ARRANGEMENT\")\n            .objName(IndexObjNameArgs.builder()\n                .databaseName(\"database\")\n                .name(\"source\")\n                .schemaName(\"schema\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  loadgenIndex:\n    type: materialize:Index\n    properties:\n      clusterName: cluster\n      method: ARRANGEMENT\n      objName:\n        databaseName: database\n        name: source\n        schemaName: schema\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nIndexes can be imported using the index id\n\n```sh\n $ pulumi import materialize:index/index:Index example_index \u003cregion\u003e:\u003cindex_id\u003e\n```\n\n Index id and information be found in the `mz_catalog.mz_indexes` table The region is the region where the database is located (e.g. aws/us-east-1) ",
            "properties": {
                "clusterName": {
                    "type": "string",
                    "description": "The cluster to maintain this index.\n"
                },
                "colExprs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/materialize:index/IndexColExpr:IndexColExpr"
                    },
                    "description": "The expressions to use as the key for the index.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "**Public Preview** Comment on an object in the database.\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the index database.\n"
                },
                "default": {
                    "type": "boolean",
                    "description": "Creates a default index using all inferred columns are used.\n"
                },
                "method": {
                    "type": "string",
                    "description": "The name of the index method to use.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the index.\n"
                },
                "objName": {
                    "$ref": "#/types/materialize:index/IndexObjName:IndexObjName",
                    "description": "The name of the source, view, or materialized view on which you want to create an index.\n"
                },
                "qualifiedSqlName": {
                    "type": "string",
                    "description": "The fully qualified name of the index.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the index schema.\n"
                }
            },
            "required": [
                "clusterName",
                "colExprs",
                "databaseName",
                "name",
                "objName",
                "qualifiedSqlName",
                "schemaName"
            ],
            "inputProperties": {
                "clusterName": {
                    "type": "string",
                    "description": "The cluster to maintain this index.\n",
                    "willReplaceOnChanges": true
                },
                "colExprs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/materialize:index/IndexColExpr:IndexColExpr"
                    },
                    "description": "The expressions to use as the key for the index.\n",
                    "willReplaceOnChanges": true
                },
                "comment": {
                    "type": "string",
                    "description": "**Public Preview** Comment on an object in the database.\n"
                },
                "default": {
                    "type": "boolean",
                    "description": "Creates a default index using all inferred columns are used.\n",
                    "willReplaceOnChanges": true
                },
                "method": {
                    "type": "string",
                    "description": "The name of the index method to use.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the index.\n",
                    "willReplaceOnChanges": true
                },
                "objName": {
                    "$ref": "#/types/materialize:index/IndexObjName:IndexObjName",
                    "description": "The name of the source, view, or materialized view on which you want to create an index.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "clusterName",
                "colExprs",
                "objName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Index resources.\n",
                "properties": {
                    "clusterName": {
                        "type": "string",
                        "description": "The cluster to maintain this index.\n",
                        "willReplaceOnChanges": true
                    },
                    "colExprs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/materialize:index/IndexColExpr:IndexColExpr"
                        },
                        "description": "The expressions to use as the key for the index.\n",
                        "willReplaceOnChanges": true
                    },
                    "comment": {
                        "type": "string",
                        "description": "**Public Preview** Comment on an object in the database.\n"
                    },
                    "databaseName": {
                        "type": "string",
                        "description": "The identifier for the index database.\n"
                    },
                    "default": {
                        "type": "boolean",
                        "description": "Creates a default index using all inferred columns are used.\n",
                        "willReplaceOnChanges": true
                    },
                    "method": {
                        "type": "string",
                        "description": "The name of the index method to use.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The identifier for the index.\n",
                        "willReplaceOnChanges": true
                    },
                    "objName": {
                        "$ref": "#/types/materialize:index/IndexObjName:IndexObjName",
                        "description": "The name of the source, view, or materialized view on which you want to create an index.\n",
                        "willReplaceOnChanges": true
                    },
                    "qualifiedSqlName": {
                        "type": "string",
                        "description": "The fully qualified name of the index.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                        "willReplaceOnChanges": true
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "The identifier for the index schema.\n"
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/materializedView:MaterializedView": {
            "description": "Materialized views represent query results stored durably.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\nconst simpleMaterializedViewMaterializedView = new materialize.MaterializedView(\"simpleMaterializedViewMaterializedView\", {\n    schemaName: materialize_schema.schema.name,\n    databaseName: materialize_database.database.name,\n    statement: `SELECT\n    *\nFROM\n    ${materialize_table.simple_table.qualified_name}\n`,\n}, {\n    dependsOn: [materialize_table.simple_table],\n});\nconst simpleMaterializedViewIndex_materializedViewMaterializedView = new materialize.MaterializedView(\"simpleMaterializedViewIndex/materializedViewMaterializedView\", {\n    schemaName: materialize_schema.schema.name,\n    databaseName: materialize_database.database.name,\n    statement: \"SELECT * FROM materialize.public.simple_table\",\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\nsimple_materialized_view_materialized_view = materialize.MaterializedView(\"simpleMaterializedViewMaterializedView\",\n    schema_name=materialize_schema[\"schema\"][\"name\"],\n    database_name=materialize_database[\"database\"][\"name\"],\n    statement=f\"\"\"SELECT\n    *\nFROM\n    {materialize_table[\"simple_table\"][\"qualified_name\"]}\n\"\"\",\n    opts=pulumi.ResourceOptions(depends_on=[materialize_table[\"simple_table\"]]))\nsimple_materialized_view_index_materialized_view_materialized_view = materialize.MaterializedView(\"simpleMaterializedViewIndex/materializedViewMaterializedView\",\n    schema_name=materialize_schema[\"schema\"][\"name\"],\n    database_name=materialize_database[\"database\"][\"name\"],\n    statement=\"SELECT * FROM materialize.public.simple_table\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var simpleMaterializedViewMaterializedView = new Materialize.MaterializedView(\"simpleMaterializedViewMaterializedView\", new()\n    {\n        SchemaName = materialize_schema.Schema.Name,\n        DatabaseName = materialize_database.Database.Name,\n        Statement = @$\"SELECT\n    *\nFROM\n    {materialize_table.Simple_table.Qualified_name}\n\",\n    }, new CustomResourceOptions\n    {\n        DependsOn = new[]\n        {\n            materialize_table.Simple_table,\n        },\n    });\n\n    var simpleMaterializedViewIndex_materializedViewMaterializedView = new Materialize.MaterializedView(\"simpleMaterializedViewIndex/materializedViewMaterializedView\", new()\n    {\n        SchemaName = materialize_schema.Schema.Name,\n        DatabaseName = materialize_database.Database.Name,\n        Statement = \"SELECT * FROM materialize.public.simple_table\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.NewMaterializedView(ctx, \"simpleMaterializedViewMaterializedView\", \u0026materialize.MaterializedViewArgs{\n\t\t\tSchemaName:   pulumi.Any(materialize_schema.Schema.Name),\n\t\t\tDatabaseName: pulumi.Any(materialize_database.Database.Name),\n\t\t\tStatement:    pulumi.String(fmt.Sprintf(\"SELECT\\n    *\\nFROM\\n    %v\\n\", materialize_table.Simple_table.Qualified_name)),\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\tmaterialize_table.Simple_table,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = materialize.NewMaterializedView(ctx, \"simpleMaterializedViewIndex/materializedViewMaterializedView\", \u0026materialize.MaterializedViewArgs{\n\t\t\tSchemaName:   pulumi.Any(materialize_schema.Schema.Name),\n\t\t\tDatabaseName: pulumi.Any(materialize_database.Database.Name),\n\t\t\tStatement:    pulumi.String(\"SELECT * FROM materialize.public.simple_table\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.MaterializedView;\nimport com.pulumi.materialize.MaterializedViewArgs;\nimport com.pulumi.resources.CustomResourceOptions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var simpleMaterializedViewMaterializedView = new MaterializedView(\"simpleMaterializedViewMaterializedView\", MaterializedViewArgs.builder()        \n            .schemaName(materialize_schema.schema().name())\n            .databaseName(materialize_database.database().name())\n            .statement(\"\"\"\nSELECT\n    *\nFROM\n    %s\n\", materialize_table.simple_table().qualified_name()))\n            .build(), CustomResourceOptions.builder()\n                .dependsOn(materialize_table.simple_table())\n                .build());\n\n        var simpleMaterializedViewIndex_materializedViewMaterializedView = new MaterializedView(\"simpleMaterializedViewIndex/materializedViewMaterializedView\", MaterializedViewArgs.builder()        \n            .schemaName(materialize_schema.schema().name())\n            .databaseName(materialize_database.database().name())\n            .statement(\"SELECT * FROM materialize.public.simple_table\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  simpleMaterializedViewMaterializedView:\n    type: materialize:MaterializedView\n    properties:\n      schemaName: ${materialize_schema.schema.name}\n      databaseName: ${materialize_database.database.name}\n      statement: |\n        SELECT\n            *\n        FROM\n            ${materialize_table.simple_table.qualified_name}\n    options:\n      dependson:\n        - ${materialize_table.simple_table}\n  simpleMaterializedViewIndex/materializedViewMaterializedView:\n    type: materialize:MaterializedView\n    properties:\n      schemaName: ${materialize_schema.schema.name}\n      databaseName: ${materialize_database.database.name}\n      statement: SELECT * FROM materialize.public.simple_table\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nMaterialized views can be imported using the materialized view id\n\n```sh\n $ pulumi import materialize:index/materializedView:MaterializedView example_materialize_view \u003cregion\u003e:\u003cview_id\u003e\n```\n\n Materialized view id and information be found in the `mz_catalog.mz_materialized_views` table The region is the region where the database is located (e.g. aws/us-east-1) ",
            "properties": {
                "clusterName": {
                    "type": "string",
                    "description": "The cluster to maintain the materialized view.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "**Public Preview** Comment on an object in the database.\n"
                },
                "createSql": {
                    "type": "string",
                    "description": "The SQL statement used to create the materialized view.\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the materialized view database. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the materialized view.\n"
                },
                "notNullAssertions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "**Private Preview** A list of columns for which to create non-null assertions.\n"
                },
                "ownershipRole": {
                    "type": "string",
                    "description": "The owernship role of the object.\n"
                },
                "qualifiedSqlName": {
                    "type": "string",
                    "description": "The fully qualified name of the materialized view.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the materialized view schema. Defaults to `public`.\n"
                },
                "statement": {
                    "type": "string",
                    "description": "The SQL statement for the materialized view.\n"
                }
            },
            "required": [
                "clusterName",
                "createSql",
                "name",
                "ownershipRole",
                "qualifiedSqlName",
                "statement"
            ],
            "inputProperties": {
                "clusterName": {
                    "type": "string",
                    "description": "The cluster to maintain the materialized view.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "**Public Preview** Comment on an object in the database.\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the materialized view database. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the materialized view.\n"
                },
                "notNullAssertions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "**Private Preview** A list of columns for which to create non-null assertions.\n",
                    "willReplaceOnChanges": true
                },
                "ownershipRole": {
                    "type": "string",
                    "description": "The owernship role of the object.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                    "willReplaceOnChanges": true
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the materialized view schema. Defaults to `public`.\n",
                    "willReplaceOnChanges": true
                },
                "statement": {
                    "type": "string",
                    "description": "The SQL statement for the materialized view.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "clusterName",
                "statement"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MaterializedView resources.\n",
                "properties": {
                    "clusterName": {
                        "type": "string",
                        "description": "The cluster to maintain the materialized view.\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "**Public Preview** Comment on an object in the database.\n"
                    },
                    "createSql": {
                        "type": "string",
                        "description": "The SQL statement used to create the materialized view.\n"
                    },
                    "databaseName": {
                        "type": "string",
                        "description": "The identifier for the materialized view database. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The identifier for the materialized view.\n"
                    },
                    "notNullAssertions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "**Private Preview** A list of columns for which to create non-null assertions.\n",
                        "willReplaceOnChanges": true
                    },
                    "ownershipRole": {
                        "type": "string",
                        "description": "The owernship role of the object.\n"
                    },
                    "qualifiedSqlName": {
                        "type": "string",
                        "description": "The fully qualified name of the materialized view.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                        "willReplaceOnChanges": true
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "The identifier for the materialized view schema. Defaults to `public`.\n",
                        "willReplaceOnChanges": true
                    },
                    "statement": {
                        "type": "string",
                        "description": "The SQL statement for the materialized view.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/role:Role": {
            "description": "A role is a collection of privileges you can apply to users.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\nconst exampleRole = new materialize.Role(\"exampleRole\", {});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\nexample_role = materialize.Role(\"exampleRole\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleRole = new Materialize.Role(\"exampleRole\");\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.NewRole(ctx, \"exampleRole\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.Role;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleRole = new Role(\"exampleRole\");\n\n    }\n}\n```\n```yaml\nresources:\n  exampleRole:\n    type: materialize:Role\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nRoles can be imported using the role id\n\n```sh\n $ pulumi import materialize:index/role:Role example_role \u003cregion\u003e:\u003crole_id\u003e\n```\n\n Role id and information be found in the `mz_catalog.mz_roles` table The region is the region where the database is located (e.g. aws/us-east-1) ",
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "**Public Preview** Comment on an object in the database.\n"
                },
                "inherit": {
                    "type": "boolean",
                    "description": "Grants the role the ability to inheritance of privileges of other roles. Unlike PostgreSQL, Materialize does not currently support `NOINHERIT`\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the role.\n"
                },
                "qualifiedSqlName": {
                    "type": "string",
                    "description": "The fully qualified name of the role.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n"
                }
            },
            "required": [
                "inherit",
                "name",
                "qualifiedSqlName"
            ],
            "inputProperties": {
                "comment": {
                    "type": "string",
                    "description": "**Public Preview** Comment on an object in the database.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the role.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Role resources.\n",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "**Public Preview** Comment on an object in the database.\n"
                    },
                    "inherit": {
                        "type": "boolean",
                        "description": "Grants the role the ability to inheritance of privileges of other roles. Unlike PostgreSQL, Materialize does not currently support `NOINHERIT`\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The identifier for the role.\n",
                        "willReplaceOnChanges": true
                    },
                    "qualifiedSqlName": {
                        "type": "string",
                        "description": "The fully qualified name of the role.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/sSOConfig:SSOConfig": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\nconst exampleSsoConfig = new materialize.SSOConfig(\"exampleSsoConfig\", {\n    enabled: true,\n    oidcClientId: \"client-id\",\n    oidcSecret: \"client-secret\",\n    publicCertificate: \"PUBLIC_CERTIFICATE\",\n    signRequest: true,\n    ssoEndpoint: \"https://sso.example2.com\",\n    type: \"saml\",\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\nexample_sso_config = materialize.SSOConfig(\"exampleSsoConfig\",\n    enabled=True,\n    oidc_client_id=\"client-id\",\n    oidc_secret=\"client-secret\",\n    public_certificate=\"PUBLIC_CERTIFICATE\",\n    sign_request=True,\n    sso_endpoint=\"https://sso.example2.com\",\n    type=\"saml\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleSsoConfig = new Materialize.SSOConfig(\"exampleSsoConfig\", new()\n    {\n        Enabled = true,\n        OidcClientId = \"client-id\",\n        OidcSecret = \"client-secret\",\n        PublicCertificate = \"PUBLIC_CERTIFICATE\",\n        SignRequest = true,\n        SsoEndpoint = \"https://sso.example2.com\",\n        Type = \"saml\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.NewSSOConfig(ctx, \"exampleSsoConfig\", \u0026materialize.SSOConfigArgs{\n\t\t\tEnabled:           pulumi.Bool(true),\n\t\t\tOidcClientId:      pulumi.String(\"client-id\"),\n\t\t\tOidcSecret:        pulumi.String(\"client-secret\"),\n\t\t\tPublicCertificate: pulumi.String(\"PUBLIC_CERTIFICATE\"),\n\t\t\tSignRequest:       pulumi.Bool(true),\n\t\t\tSsoEndpoint:       pulumi.String(\"https://sso.example2.com\"),\n\t\t\tType:              pulumi.String(\"saml\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.SSOConfig;\nimport com.pulumi.materialize.SSOConfigArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleSsoConfig = new SSOConfig(\"exampleSsoConfig\", SSOConfigArgs.builder()        \n            .enabled(true)\n            .oidcClientId(\"client-id\")\n            .oidcSecret(\"client-secret\")\n            .publicCertificate(\"PUBLIC_CERTIFICATE\")\n            .signRequest(true)\n            .ssoEndpoint(\"https://sso.example2.com\")\n            .type(\"saml\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleSsoConfig:\n    type: materialize:SSOConfig\n    properties:\n      enabled: true\n      oidcClientId: client-id\n      oidcSecret: client-secret\n      publicCertificate: PUBLIC_CERTIFICATE\n      signRequest: true\n      ssoEndpoint: https://sso.example2.com\n      type: saml\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nSSO Configuration ID can be found in the URL when viewing the SSO Configuration in the UI\n\n```sh\n $ pulumi import materialize:index/sSOConfig:SSOConfig example \u003csso_config_id\u003e\n```\n\n ",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Whether SSO is enabled or not. If enabled, users will be redirected to the SSO endpoint for authentication. The configuration needs to be valid for SSO to work.\n"
                },
                "oidcClientId": {
                    "type": "string",
                    "description": "The client ID of the OIDC application. This is used to identify the application to the OIDC service. This is required if the type is OIDC.\n"
                },
                "oidcSecret": {
                    "type": "string",
                    "description": "The client secret of the OIDC application. This is used to authenticate the application to the OIDC service. This is required if the type is OIDC.\n"
                },
                "publicCertificate": {
                    "type": "string",
                    "description": "The public certificate of the SSO service. This is used to verify the SSO response. The certificate must be in PEM format. The certificate must be accessible from the browser. If the certificate is not accessible from the browser, you can use the public certificate of the Identity Provider (IdP) instead.\n"
                },
                "signRequest": {
                    "type": "boolean",
                    "description": "Indicates whether the SSO request needs to be digitally signed.\n"
                },
                "ssoEndpoint": {
                    "type": "string",
                    "description": "The URL endpoint for the SSO service. This is the URL that users will be redirected to for authentication. The URL must be accessible from the browser.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Defines the type of SSO protocol being used (e.g., saml, oidc).\n"
                }
            },
            "required": [
                "enabled",
                "publicCertificate",
                "signRequest",
                "ssoEndpoint",
                "type"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Whether SSO is enabled or not. If enabled, users will be redirected to the SSO endpoint for authentication. The configuration needs to be valid for SSO to work.\n"
                },
                "oidcClientId": {
                    "type": "string",
                    "description": "The client ID of the OIDC application. This is used to identify the application to the OIDC service. This is required if the type is OIDC.\n"
                },
                "oidcSecret": {
                    "type": "string",
                    "description": "The client secret of the OIDC application. This is used to authenticate the application to the OIDC service. This is required if the type is OIDC.\n"
                },
                "publicCertificate": {
                    "type": "string",
                    "description": "The public certificate of the SSO service. This is used to verify the SSO response. The certificate must be in PEM format. The certificate must be accessible from the browser. If the certificate is not accessible from the browser, you can use the public certificate of the Identity Provider (IdP) instead.\n"
                },
                "signRequest": {
                    "type": "boolean",
                    "description": "Indicates whether the SSO request needs to be digitally signed.\n"
                },
                "ssoEndpoint": {
                    "type": "string",
                    "description": "The URL endpoint for the SSO service. This is the URL that users will be redirected to for authentication. The URL must be accessible from the browser.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Defines the type of SSO protocol being used (e.g., saml, oidc).\n"
                }
            },
            "requiredInputs": [
                "enabled",
                "publicCertificate",
                "signRequest",
                "ssoEndpoint",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SSOConfig resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether SSO is enabled or not. If enabled, users will be redirected to the SSO endpoint for authentication. The configuration needs to be valid for SSO to work.\n"
                    },
                    "oidcClientId": {
                        "type": "string",
                        "description": "The client ID of the OIDC application. This is used to identify the application to the OIDC service. This is required if the type is OIDC.\n"
                    },
                    "oidcSecret": {
                        "type": "string",
                        "description": "The client secret of the OIDC application. This is used to authenticate the application to the OIDC service. This is required if the type is OIDC.\n"
                    },
                    "publicCertificate": {
                        "type": "string",
                        "description": "The public certificate of the SSO service. This is used to verify the SSO response. The certificate must be in PEM format. The certificate must be accessible from the browser. If the certificate is not accessible from the browser, you can use the public certificate of the Identity Provider (IdP) instead.\n"
                    },
                    "signRequest": {
                        "type": "boolean",
                        "description": "Indicates whether the SSO request needs to be digitally signed.\n"
                    },
                    "ssoEndpoint": {
                        "type": "string",
                        "description": "The URL endpoint for the SSO service. This is the URL that users will be redirected to for authentication. The URL must be accessible from the browser.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Defines the type of SSO protocol being used (e.g., saml, oidc).\n"
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/sSODefaultRoles:SSODefaultRoles": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\nconst exampleSsoDefaultRoles = new materialize.SSODefaultRoles(\"exampleSsoDefaultRoles\", {\n    ssoConfigId: materialize_sso_config.example_sso_config.id,\n    roles: [\"Admin\"],\n});\nconst exampleSsoDefaultRoles2 = new materialize.SSODefaultRoles(\"exampleSsoDefaultRoles2\", {\n    ssoConfigId: materialize_sso_config.example_sso_config.id,\n    roles: [\n        \"Admin\",\n        \"Member\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\nexample_sso_default_roles = materialize.SSODefaultRoles(\"exampleSsoDefaultRoles\",\n    sso_config_id=materialize_sso_config[\"example_sso_config\"][\"id\"],\n    roles=[\"Admin\"])\nexample_sso_default_roles2 = materialize.SSODefaultRoles(\"exampleSsoDefaultRoles2\",\n    sso_config_id=materialize_sso_config[\"example_sso_config\"][\"id\"],\n    roles=[\n        \"Admin\",\n        \"Member\",\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleSsoDefaultRoles = new Materialize.SSODefaultRoles(\"exampleSsoDefaultRoles\", new()\n    {\n        SsoConfigId = materialize_sso_config.Example_sso_config.Id,\n        Roles = new[]\n        {\n            \"Admin\",\n        },\n    });\n\n    var exampleSsoDefaultRoles2 = new Materialize.SSODefaultRoles(\"exampleSsoDefaultRoles2\", new()\n    {\n        SsoConfigId = materialize_sso_config.Example_sso_config.Id,\n        Roles = new[]\n        {\n            \"Admin\",\n            \"Member\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.NewSSODefaultRoles(ctx, \"exampleSsoDefaultRoles\", \u0026materialize.SSODefaultRolesArgs{\n\t\t\tSsoConfigId: pulumi.Any(materialize_sso_config.Example_sso_config.Id),\n\t\t\tRoles: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"Admin\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = materialize.NewSSODefaultRoles(ctx, \"exampleSsoDefaultRoles2\", \u0026materialize.SSODefaultRolesArgs{\n\t\t\tSsoConfigId: pulumi.Any(materialize_sso_config.Example_sso_config.Id),\n\t\t\tRoles: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"Admin\"),\n\t\t\t\tpulumi.String(\"Member\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.SSODefaultRoles;\nimport com.pulumi.materialize.SSODefaultRolesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleSsoDefaultRoles = new SSODefaultRoles(\"exampleSsoDefaultRoles\", SSODefaultRolesArgs.builder()        \n            .ssoConfigId(materialize_sso_config.example_sso_config().id())\n            .roles(\"Admin\")\n            .build());\n\n        var exampleSsoDefaultRoles2 = new SSODefaultRoles(\"exampleSsoDefaultRoles2\", SSODefaultRolesArgs.builder()        \n            .ssoConfigId(materialize_sso_config.example_sso_config().id())\n            .roles(            \n                \"Admin\",\n                \"Member\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleSsoDefaultRoles:\n    type: materialize:SSODefaultRoles\n    properties:\n      ssoConfigId: ${materialize_sso_config.example_sso_config.id}\n      roles:\n        - Admin\n  exampleSsoDefaultRoles2:\n    type: materialize:SSODefaultRoles\n    properties:\n      ssoConfigId: ${materialize_sso_config.example_sso_config.id}\n      roles:\n        - Admin\n        - Member\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nDefault roles can be imported using the role id\n\n```sh\n $ pulumi import materialize:index/sSODefaultRoles:SSODefaultRoles example_role \u003crole_id\u003e\n```\n\n ",
            "properties": {
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of default role names for the SSO configuration.\n"
                },
                "ssoConfigId": {
                    "type": "string",
                    "description": "The ID of the associated SSO configuration.\n"
                }
            },
            "required": [
                "roles",
                "ssoConfigId"
            ],
            "inputProperties": {
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of default role names for the SSO configuration.\n"
                },
                "ssoConfigId": {
                    "type": "string",
                    "description": "The ID of the associated SSO configuration.\n"
                }
            },
            "requiredInputs": [
                "roles",
                "ssoConfigId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SSODefaultRoles resources.\n",
                "properties": {
                    "roles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Set of default role names for the SSO configuration.\n"
                    },
                    "ssoConfigId": {
                        "type": "string",
                        "description": "The ID of the associated SSO configuration.\n"
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/sSODomain:SSODomain": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\nconst exampleSsoDomain = new materialize.SSODomain(\"exampleSsoDomain\", {\n    domain: \"example.com\",\n    ssoConfigId: materialize_sso_config.example_sso_config.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\nexample_sso_domain = materialize.SSODomain(\"exampleSsoDomain\",\n    domain=\"example.com\",\n    sso_config_id=materialize_sso_config[\"example_sso_config\"][\"id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleSsoDomain = new Materialize.SSODomain(\"exampleSsoDomain\", new()\n    {\n        Domain = \"example.com\",\n        SsoConfigId = materialize_sso_config.Example_sso_config.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.NewSSODomain(ctx, \"exampleSsoDomain\", \u0026materialize.SSODomainArgs{\n\t\t\tDomain:      pulumi.String(\"example.com\"),\n\t\t\tSsoConfigId: pulumi.Any(materialize_sso_config.Example_sso_config.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.SSODomain;\nimport com.pulumi.materialize.SSODomainArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleSsoDomain = new SSODomain(\"exampleSsoDomain\", SSODomainArgs.builder()        \n            .domain(\"example.com\")\n            .ssoConfigId(materialize_sso_config.example_sso_config().id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleSsoDomain:\n    type: materialize:SSODomain\n    properties:\n      domain: example.com\n      ssoConfigId: ${materialize_sso_config.example_sso_config.id}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nSSO Domain ID can be found in the URL when viewing the SSO Domain in the UI\n\n```sh\n $ pulumi import materialize:index/sSODomain:SSODomain example \u003csso_domain_id\u003e\n```\n\n ",
            "properties": {
                "domain": {
                    "type": "string",
                    "description": "The domain name for the SSO domain configuration.\n"
                },
                "ssoConfigId": {
                    "type": "string",
                    "description": "The ID of the associated SSO configuration.\n"
                },
                "validated": {
                    "type": "boolean",
                    "description": "Indicates whether the domain has been validated.\n"
                }
            },
            "required": [
                "domain",
                "ssoConfigId",
                "validated"
            ],
            "inputProperties": {
                "domain": {
                    "type": "string",
                    "description": "The domain name for the SSO domain configuration.\n"
                },
                "ssoConfigId": {
                    "type": "string",
                    "description": "The ID of the associated SSO configuration.\n"
                }
            },
            "requiredInputs": [
                "domain",
                "ssoConfigId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SSODomain resources.\n",
                "properties": {
                    "domain": {
                        "type": "string",
                        "description": "The domain name for the SSO domain configuration.\n"
                    },
                    "ssoConfigId": {
                        "type": "string",
                        "description": "The ID of the associated SSO configuration.\n"
                    },
                    "validated": {
                        "type": "boolean",
                        "description": "Indicates whether the domain has been validated.\n"
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/sSORoleGroupMapping:SSORoleGroupMapping": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\nconst exampleSsoGroupMapping = new materialize.SSORoleGroupMapping(\"exampleSsoGroupMapping\", {\n    group: \"admins\",\n    ssoConfigId: materialize_sso_config.example_sso_config.id,\n    roles: [\"Admin\"],\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\nexample_sso_group_mapping = materialize.SSORoleGroupMapping(\"exampleSsoGroupMapping\",\n    group=\"admins\",\n    sso_config_id=materialize_sso_config[\"example_sso_config\"][\"id\"],\n    roles=[\"Admin\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleSsoGroupMapping = new Materialize.SSORoleGroupMapping(\"exampleSsoGroupMapping\", new()\n    {\n        Group = \"admins\",\n        SsoConfigId = materialize_sso_config.Example_sso_config.Id,\n        Roles = new[]\n        {\n            \"Admin\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.NewSSORoleGroupMapping(ctx, \"exampleSsoGroupMapping\", \u0026materialize.SSORoleGroupMappingArgs{\n\t\t\tGroup:       pulumi.String(\"admins\"),\n\t\t\tSsoConfigId: pulumi.Any(materialize_sso_config.Example_sso_config.Id),\n\t\t\tRoles: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"Admin\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.SSORoleGroupMapping;\nimport com.pulumi.materialize.SSORoleGroupMappingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleSsoGroupMapping = new SSORoleGroupMapping(\"exampleSsoGroupMapping\", SSORoleGroupMappingArgs.builder()        \n            .group(\"admins\")\n            .ssoConfigId(materialize_sso_config.example_sso_config().id())\n            .roles(\"Admin\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleSsoGroupMapping:\n    type: materialize:SSORoleGroupMapping\n    properties:\n      group: admins\n      ssoConfigId: ${materialize_sso_config.example_sso_config.id}\n      roles:\n        - Admin\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nSSO group mapping ID can be found in the URL when viewing the SSO group mapping in the UI\n\n```sh\n $ pulumi import materialize:index/sSORoleGroupMapping:SSORoleGroupMapping example \u003csso_group_mapping_id\u003e\n```\n\n ",
            "properties": {
                "group": {
                    "type": "string",
                    "description": "The name of the SSO group.\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of role names associated with the group.\n"
                },
                "ssoConfigId": {
                    "type": "string",
                    "description": "The ID of the associated SSO configuration.\n"
                }
            },
            "required": [
                "group",
                "roles",
                "ssoConfigId"
            ],
            "inputProperties": {
                "group": {
                    "type": "string",
                    "description": "The name of the SSO group.\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of role names associated with the group.\n"
                },
                "ssoConfigId": {
                    "type": "string",
                    "description": "The ID of the associated SSO configuration.\n"
                }
            },
            "requiredInputs": [
                "group",
                "roles",
                "ssoConfigId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SSORoleGroupMapping resources.\n",
                "properties": {
                    "group": {
                        "type": "string",
                        "description": "The name of the SSO group.\n"
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of role names associated with the group.\n"
                    },
                    "ssoConfigId": {
                        "type": "string",
                        "description": "The ID of the associated SSO configuration.\n"
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/schema:Schema": {
            "description": "The second highest level namespace hierarchy in Materialize.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\nconst exampleSchema = new materialize.Schema(\"exampleSchema\", {databaseName: \"database\"});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\nexample_schema = materialize.Schema(\"exampleSchema\", database_name=\"database\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleSchema = new Materialize.Schema(\"exampleSchema\", new()\n    {\n        DatabaseName = \"database\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.NewSchema(ctx, \"exampleSchema\", \u0026materialize.SchemaArgs{\n\t\t\tDatabaseName: pulumi.String(\"database\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.Schema;\nimport com.pulumi.materialize.SchemaArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleSchema = new Schema(\"exampleSchema\", SchemaArgs.builder()        \n            .databaseName(\"database\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleSchema:\n    type: materialize:Schema\n    properties:\n      databaseName: database\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nSchemas can be imported using the schema id\n\n```sh\n $ pulumi import materialize:index/schema:Schema example_schema \u003cregion\u003e:\u003cschema_id\u003e\n```\n\n Schema id and information be found in the `mz_catalog.mz_schemas` table The role is the role where the database is located (e.g. aws/us-east-1) ",
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "**Public Preview** Comment on an object in the database.\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the schema database. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the schema.\n"
                },
                "ownershipRole": {
                    "type": "string",
                    "description": "The owernship role of the object.\n"
                },
                "qualifiedSqlName": {
                    "type": "string",
                    "description": "The fully qualified name of the schema.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n"
                }
            },
            "required": [
                "name",
                "ownershipRole",
                "qualifiedSqlName"
            ],
            "inputProperties": {
                "comment": {
                    "type": "string",
                    "description": "**Public Preview** Comment on an object in the database.\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the schema database. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the schema.\n",
                    "willReplaceOnChanges": true
                },
                "ownershipRole": {
                    "type": "string",
                    "description": "The owernship role of the object.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Schema resources.\n",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "**Public Preview** Comment on an object in the database.\n"
                    },
                    "databaseName": {
                        "type": "string",
                        "description": "The identifier for the schema database. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The identifier for the schema.\n",
                        "willReplaceOnChanges": true
                    },
                    "ownershipRole": {
                        "type": "string",
                        "description": "The owernship role of the object.\n"
                    },
                    "qualifiedSqlName": {
                        "type": "string",
                        "description": "The fully qualified name of the schema.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/secret:Secret": {
            "description": "A secret securely stores sensitive credentials (like passwords and SSL keys) in Materialize’s secret management system.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\nconst exampleSecret = new materialize.Secret(\"exampleSecret\", {value: \"some-secret-value\"});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\nexample_secret = materialize.Secret(\"exampleSecret\", value=\"some-secret-value\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleSecret = new Materialize.Secret(\"exampleSecret\", new()\n    {\n        Value = \"some-secret-value\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.NewSecret(ctx, \"exampleSecret\", \u0026materialize.SecretArgs{\n\t\t\tValue: pulumi.String(\"some-secret-value\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.Secret;\nimport com.pulumi.materialize.SecretArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleSecret = new Secret(\"exampleSecret\", SecretArgs.builder()        \n            .value(\"some-secret-value\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleSecret:\n    type: materialize:Secret\n    properties:\n      value: some-secret-value\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nSecrets can be imported using the secret id\n\n```sh\n $ pulumi import materialize:index/secret:Secret example_secret \u003cregion\u003e:\u003csecret_id\u003e\n```\n\n Secret id and information be found in the `mz_catalog.mz_secrets` table The region is the region where the database is located (e.g. aws/us-east-1) ",
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "**Public Preview** Comment on an object in the database.\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the secret database. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the secret.\n"
                },
                "ownershipRole": {
                    "type": "string",
                    "description": "The owernship role of the object.\n"
                },
                "qualifiedSqlName": {
                    "type": "string",
                    "description": "The fully qualified name of the secret.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the secret schema. Defaults to `public`.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value for the secret. The value expression may not reference any relations, and must be a bytea string literal.\n",
                    "secret": true
                }
            },
            "required": [
                "name",
                "ownershipRole",
                "qualifiedSqlName",
                "value"
            ],
            "inputProperties": {
                "comment": {
                    "type": "string",
                    "description": "**Public Preview** Comment on an object in the database.\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the secret database. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the secret.\n"
                },
                "ownershipRole": {
                    "type": "string",
                    "description": "The owernship role of the object.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                    "willReplaceOnChanges": true
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the secret schema. Defaults to `public`.\n",
                    "willReplaceOnChanges": true
                },
                "value": {
                    "type": "string",
                    "description": "The value for the secret. The value expression may not reference any relations, and must be a bytea string literal.\n",
                    "secret": true
                }
            },
            "requiredInputs": [
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Secret resources.\n",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "**Public Preview** Comment on an object in the database.\n"
                    },
                    "databaseName": {
                        "type": "string",
                        "description": "The identifier for the secret database. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The identifier for the secret.\n"
                    },
                    "ownershipRole": {
                        "type": "string",
                        "description": "The owernship role of the object.\n"
                    },
                    "qualifiedSqlName": {
                        "type": "string",
                        "description": "The fully qualified name of the secret.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                        "willReplaceOnChanges": true
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "The identifier for the secret schema. Defaults to `public`.\n",
                        "willReplaceOnChanges": true
                    },
                    "value": {
                        "type": "string",
                        "description": "The value for the secret. The value expression may not reference any relations, and must be a bytea string literal.\n",
                        "secret": true
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/sinkKafka:SinkKafka": {
            "description": "A Kafka sink establishes a link to a Kafka cluster that you want Materialize to write data to.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.SinkKafka;\nimport com.pulumi.materialize.SinkKafkaArgs;\nimport com.pulumi.materialize.inputs.SinkKafkaEnvelopeArgs;\nimport com.pulumi.materialize.inputs.SinkKafkaFormatArgs;\nimport com.pulumi.materialize.inputs.SinkKafkaFormatAvroArgs;\nimport com.pulumi.materialize.inputs.SinkKafkaFormatAvroSchemaRegistryConnectionArgs;\nimport com.pulumi.materialize.inputs.SinkKafkaFromArgs;\nimport com.pulumi.materialize.inputs.SinkKafkaKafkaConnectionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleSinkKafka = new SinkKafka(\"exampleSinkKafka\", SinkKafkaArgs.builder()        \n            .envelope(SinkKafkaEnvelopeArgs.builder()\n                .upsert(true)\n                .build())\n            .format(SinkKafkaFormatArgs.builder()\n                .avro(SinkKafkaFormatAvroArgs.builder()\n                    .schemaRegistryConnection(SinkKafkaFormatAvroSchemaRegistryConnectionArgs.builder()\n                        .databaseName(\"database\")\n                        .name(\"csr_connection\")\n                        .schemaName(\"schema\")\n                        .build())\n                    .build())\n                .build())\n            .from(SinkKafkaFromArgs.builder()\n                .name(\"table\")\n                .build())\n            .kafkaConnection(SinkKafkaKafkaConnectionArgs.builder()\n                .name(\"kafka_connection\")\n                .build())\n            .schemaName(\"schema\")\n            .size(\"3xsmall\")\n            .topic(\"test_avro_topic\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleSinkKafka:\n    type: materialize:SinkKafka\n    properties:\n      envelope:\n        upsert: true\n      format:\n        avro:\n          schemaRegistryConnection:\n            databaseName: database\n            name: csr_connection\n            schemaName: schema\n      from:\n        name: table\n      kafkaConnection:\n        name: kafka_connection\n      schemaName: schema\n      size: 3xsmall\n      topic: test_avro_topic\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nSinks can be imported using the sink id\n\n```sh\n $ pulumi import materialize:index/sinkKafka:SinkKafka example_sink_kafka \u003cregion\u003e:\u003csink_id\u003e\n```\n\n Sink id and information be found in the `mz_catalog.mz_sinks` table The region is the region where the database is located (e.g. aws/us-east-1) ",
            "properties": {
                "clusterName": {
                    "type": "string",
                    "description": "The cluster to maintain this sink.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "**Public Preview** Comment on an object in the database.\n"
                },
                "compressionType": {
                    "type": "string",
                    "description": "The type of compression to apply to messages before they are sent to Kafka.\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the sink database. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "envelope": {
                    "$ref": "#/types/materialize:index/SinkKafkaEnvelope:SinkKafkaEnvelope",
                    "description": "How to interpret records (e.g. Debezium, Upsert).\n"
                },
                "format": {
                    "$ref": "#/types/materialize:index/SinkKafkaFormat:SinkKafkaFormat",
                    "description": "How to decode raw bytes from different formats into data structures it can understand at runtime.\n"
                },
                "from": {
                    "$ref": "#/types/materialize:index/SinkKafkaFrom:SinkKafkaFrom",
                    "description": "The name of the source, table or materialized view you want to send to the sink.\n"
                },
                "kafkaConnection": {
                    "$ref": "#/types/materialize:index/SinkKafkaKafkaConnection:SinkKafkaKafkaConnection",
                    "description": "The name of the Kafka connection to use in the sink.\n"
                },
                "keyNotEnforced": {
                    "type": "boolean",
                    "description": "Disable Materialize's validation of the key's uniqueness.\n"
                },
                "keys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An optional list of columns to use for the Kafka key. If unspecified, the Kafka key is left unset.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the sink.\n"
                },
                "ownershipRole": {
                    "type": "string",
                    "description": "The owernship role of the object.\n"
                },
                "qualifiedSqlName": {
                    "type": "string",
                    "description": "The fully qualified name of the sink.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the sink schema. Defaults to `public`.\n"
                },
                "size": {
                    "type": "string",
                    "description": "The size of the cluster maintaining this sink.\n"
                },
                "snapshot": {
                    "type": "boolean",
                    "description": "Whether to emit the consolidated results of the query before the sink was created at the start of the sink.\n"
                },
                "topic": {
                    "type": "string",
                    "description": "The Kafka topic you want to subscribe to.\n"
                }
            },
            "required": [
                "clusterName",
                "from",
                "kafkaConnection",
                "name",
                "ownershipRole",
                "qualifiedSqlName",
                "size",
                "topic"
            ],
            "inputProperties": {
                "clusterName": {
                    "type": "string",
                    "description": "The cluster to maintain this sink.\n",
                    "willReplaceOnChanges": true
                },
                "comment": {
                    "type": "string",
                    "description": "**Public Preview** Comment on an object in the database.\n"
                },
                "compressionType": {
                    "type": "string",
                    "description": "The type of compression to apply to messages before they are sent to Kafka.\n",
                    "willReplaceOnChanges": true
                },
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the sink database. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n",
                    "willReplaceOnChanges": true
                },
                "envelope": {
                    "$ref": "#/types/materialize:index/SinkKafkaEnvelope:SinkKafkaEnvelope",
                    "description": "How to interpret records (e.g. Debezium, Upsert).\n",
                    "willReplaceOnChanges": true
                },
                "format": {
                    "$ref": "#/types/materialize:index/SinkKafkaFormat:SinkKafkaFormat",
                    "description": "How to decode raw bytes from different formats into data structures it can understand at runtime.\n",
                    "willReplaceOnChanges": true
                },
                "from": {
                    "$ref": "#/types/materialize:index/SinkKafkaFrom:SinkKafkaFrom",
                    "description": "The name of the source, table or materialized view you want to send to the sink.\n",
                    "willReplaceOnChanges": true
                },
                "kafkaConnection": {
                    "$ref": "#/types/materialize:index/SinkKafkaKafkaConnection:SinkKafkaKafkaConnection",
                    "description": "The name of the Kafka connection to use in the sink.\n",
                    "willReplaceOnChanges": true
                },
                "keyNotEnforced": {
                    "type": "boolean",
                    "description": "Disable Materialize's validation of the key's uniqueness.\n",
                    "willReplaceOnChanges": true
                },
                "keys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An optional list of columns to use for the Kafka key. If unspecified, the Kafka key is left unset.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the sink.\n"
                },
                "ownershipRole": {
                    "type": "string",
                    "description": "The owernship role of the object.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                    "willReplaceOnChanges": true
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the sink schema. Defaults to `public`.\n",
                    "willReplaceOnChanges": true
                },
                "snapshot": {
                    "type": "boolean",
                    "description": "Whether to emit the consolidated results of the query before the sink was created at the start of the sink.\n",
                    "willReplaceOnChanges": true
                },
                "topic": {
                    "type": "string",
                    "description": "The Kafka topic you want to subscribe to.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "from",
                "kafkaConnection",
                "topic"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SinkKafka resources.\n",
                "properties": {
                    "clusterName": {
                        "type": "string",
                        "description": "The cluster to maintain this sink.\n",
                        "willReplaceOnChanges": true
                    },
                    "comment": {
                        "type": "string",
                        "description": "**Public Preview** Comment on an object in the database.\n"
                    },
                    "compressionType": {
                        "type": "string",
                        "description": "The type of compression to apply to messages before they are sent to Kafka.\n",
                        "willReplaceOnChanges": true
                    },
                    "databaseName": {
                        "type": "string",
                        "description": "The identifier for the sink database. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n",
                        "willReplaceOnChanges": true
                    },
                    "envelope": {
                        "$ref": "#/types/materialize:index/SinkKafkaEnvelope:SinkKafkaEnvelope",
                        "description": "How to interpret records (e.g. Debezium, Upsert).\n",
                        "willReplaceOnChanges": true
                    },
                    "format": {
                        "$ref": "#/types/materialize:index/SinkKafkaFormat:SinkKafkaFormat",
                        "description": "How to decode raw bytes from different formats into data structures it can understand at runtime.\n",
                        "willReplaceOnChanges": true
                    },
                    "from": {
                        "$ref": "#/types/materialize:index/SinkKafkaFrom:SinkKafkaFrom",
                        "description": "The name of the source, table or materialized view you want to send to the sink.\n",
                        "willReplaceOnChanges": true
                    },
                    "kafkaConnection": {
                        "$ref": "#/types/materialize:index/SinkKafkaKafkaConnection:SinkKafkaKafkaConnection",
                        "description": "The name of the Kafka connection to use in the sink.\n",
                        "willReplaceOnChanges": true
                    },
                    "keyNotEnforced": {
                        "type": "boolean",
                        "description": "Disable Materialize's validation of the key's uniqueness.\n",
                        "willReplaceOnChanges": true
                    },
                    "keys": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An optional list of columns to use for the Kafka key. If unspecified, the Kafka key is left unset.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The identifier for the sink.\n"
                    },
                    "ownershipRole": {
                        "type": "string",
                        "description": "The owernship role of the object.\n"
                    },
                    "qualifiedSqlName": {
                        "type": "string",
                        "description": "The fully qualified name of the sink.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                        "willReplaceOnChanges": true
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "The identifier for the sink schema. Defaults to `public`.\n",
                        "willReplaceOnChanges": true
                    },
                    "size": {
                        "type": "string",
                        "description": "The size of the cluster maintaining this sink.\n"
                    },
                    "snapshot": {
                        "type": "boolean",
                        "description": "Whether to emit the consolidated results of the query before the sink was created at the start of the sink.\n",
                        "willReplaceOnChanges": true
                    },
                    "topic": {
                        "type": "string",
                        "description": "The Kafka topic you want to subscribe to.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/sourceKafka:SourceKafka": {
            "description": "A Kafka source describes a Kafka cluster you want Materialize to read data from.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.SourceKafka;\nimport com.pulumi.materialize.SourceKafkaArgs;\nimport com.pulumi.materialize.inputs.SourceKafkaEnvelopeArgs;\nimport com.pulumi.materialize.inputs.SourceKafkaFormatArgs;\nimport com.pulumi.materialize.inputs.SourceKafkaFormatAvroArgs;\nimport com.pulumi.materialize.inputs.SourceKafkaFormatAvroSchemaRegistryConnectionArgs;\nimport com.pulumi.materialize.inputs.SourceKafkaKafkaConnectionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleSourceKafka = new SourceKafka(\"exampleSourceKafka\", SourceKafkaArgs.builder()        \n            .envelope(SourceKafkaEnvelopeArgs.builder()\n                .none(true)\n                .build())\n            .format(SourceKafkaFormatArgs.builder()\n                .avro(SourceKafkaFormatAvroArgs.builder()\n                    .schemaRegistryConnection(SourceKafkaFormatAvroSchemaRegistryConnectionArgs.builder()\n                        .databaseName(\"database\")\n                        .name(\"csr_connection\")\n                        .schemaName(\"schema\")\n                        .build())\n                    .build())\n                .build())\n            .kafkaConnection(SourceKafkaKafkaConnectionArgs.builder()\n                .databaseName(\"database\")\n                .name(\"kafka_connection\")\n                .schemaName(\"schema\")\n                .build())\n            .schemaName(\"schema\")\n            .size(\"3xsmall\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleSourceKafka:\n    type: materialize:SourceKafka\n    properties:\n      envelope:\n        none: true\n      format:\n        avro:\n          schemaRegistryConnection:\n            databaseName: database\n            name: csr_connection\n            schemaName: schema\n      kafkaConnection:\n        databaseName: database\n        name: kafka_connection\n        schemaName: schema\n      schemaName: schema\n      size: 3xsmall\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nSources can be imported using the source id\n\n```sh\n $ pulumi import materialize:index/sourceKafka:SourceKafka example_source_kafka \u003cregion\u003e:\u003csource_id\u003e\n```\n\n Source id and information be found in the `mz_catalog.mz_sources` table The region is the region where the database is located (e.g. aws/us-east-1) ",
            "properties": {
                "clusterName": {
                    "type": "string",
                    "description": "The cluster to maintain this source.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "**Public Preview** Comment on an object in the database.\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the source database. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "envelope": {
                    "$ref": "#/types/materialize:index/SourceKafkaEnvelope:SourceKafkaEnvelope",
                    "description": "How Materialize should interpret records (e.g. append-only, upsert)..\n"
                },
                "exposeProgress": {
                    "$ref": "#/types/materialize:index/SourceKafkaExposeProgress:SourceKafkaExposeProgress",
                    "description": "The name of the progress subsource for the source. If this is not specified, the subsource will be named `\u003csrc_name\u003e_progress`.\n"
                },
                "format": {
                    "$ref": "#/types/materialize:index/SourceKafkaFormat:SourceKafkaFormat",
                    "description": "How to decode raw bytes from different formats into data structures Materialize can understand at runtime.\n"
                },
                "includeHeaders": {
                    "type": "boolean",
                    "description": "Include message headers.\n"
                },
                "includeHeadersAlias": {
                    "type": "string",
                    "description": "Provide an alias for the headers column.\n"
                },
                "includeKey": {
                    "type": "boolean",
                    "description": "Include a column containing the Kafka message key.\n"
                },
                "includeKeyAlias": {
                    "type": "string",
                    "description": "Provide an alias for the key column.\n"
                },
                "includeOffset": {
                    "type": "boolean",
                    "description": "Include an offset column containing the Kafka message offset.\n"
                },
                "includeOffsetAlias": {
                    "type": "string",
                    "description": "Provide an alias for the offset column.\n"
                },
                "includePartition": {
                    "type": "boolean",
                    "description": "Include a partition column containing the Kafka message partition\n"
                },
                "includePartitionAlias": {
                    "type": "string",
                    "description": "Provide an alias for the partition column.\n"
                },
                "includeTimestamp": {
                    "type": "boolean",
                    "description": "Include a timestamp column containing the Kafka message timestamp.\n"
                },
                "includeTimestampAlias": {
                    "type": "string",
                    "description": "Provide an alias for the timestamp column.\n"
                },
                "kafkaConnection": {
                    "$ref": "#/types/materialize:index/SourceKafkaKafkaConnection:SourceKafkaKafkaConnection",
                    "description": "The Kafka connection to use in the source.\n"
                },
                "keyFormat": {
                    "$ref": "#/types/materialize:index/SourceKafkaKeyFormat:SourceKafkaKeyFormat",
                    "description": "Set the key format explicitly.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the source.\n"
                },
                "ownershipRole": {
                    "type": "string",
                    "description": "The owernship role of the object.\n"
                },
                "qualifiedSqlName": {
                    "type": "string",
                    "description": "The fully qualified name of the source.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the source schema. Defaults to `public`.\n"
                },
                "size": {
                    "type": "string",
                    "description": "The size of the cluster maintaining this source.\n"
                },
                "startOffsets": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Read partitions from the specified offset.\n"
                },
                "startTimestamp": {
                    "type": "integer",
                    "description": "Use the specified value to set `START OFFSET` based on the Kafka timestamp.\n"
                },
                "subsources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/materialize:index/SourceKafkaSubsource:SourceKafkaSubsource"
                    },
                    "description": "Subsources of a source.\n"
                },
                "topic": {
                    "type": "string",
                    "description": "The Kafka topic you want to subscribe to.\n"
                },
                "valueFormat": {
                    "$ref": "#/types/materialize:index/SourceKafkaValueFormat:SourceKafkaValueFormat",
                    "description": "Set the value format explicitly.\n"
                }
            },
            "required": [
                "clusterName",
                "kafkaConnection",
                "name",
                "ownershipRole",
                "qualifiedSqlName",
                "size",
                "subsources",
                "topic"
            ],
            "inputProperties": {
                "clusterName": {
                    "type": "string",
                    "description": "The cluster to maintain this source.\n",
                    "willReplaceOnChanges": true
                },
                "comment": {
                    "type": "string",
                    "description": "**Public Preview** Comment on an object in the database.\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the source database. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n",
                    "willReplaceOnChanges": true
                },
                "envelope": {
                    "$ref": "#/types/materialize:index/SourceKafkaEnvelope:SourceKafkaEnvelope",
                    "description": "How Materialize should interpret records (e.g. append-only, upsert)..\n",
                    "willReplaceOnChanges": true
                },
                "exposeProgress": {
                    "$ref": "#/types/materialize:index/SourceKafkaExposeProgress:SourceKafkaExposeProgress",
                    "description": "The name of the progress subsource for the source. If this is not specified, the subsource will be named `\u003csrc_name\u003e_progress`.\n",
                    "willReplaceOnChanges": true
                },
                "format": {
                    "$ref": "#/types/materialize:index/SourceKafkaFormat:SourceKafkaFormat",
                    "description": "How to decode raw bytes from different formats into data structures Materialize can understand at runtime.\n",
                    "willReplaceOnChanges": true
                },
                "includeHeaders": {
                    "type": "boolean",
                    "description": "Include message headers.\n",
                    "willReplaceOnChanges": true
                },
                "includeHeadersAlias": {
                    "type": "string",
                    "description": "Provide an alias for the headers column.\n",
                    "willReplaceOnChanges": true
                },
                "includeKey": {
                    "type": "boolean",
                    "description": "Include a column containing the Kafka message key.\n",
                    "willReplaceOnChanges": true
                },
                "includeKeyAlias": {
                    "type": "string",
                    "description": "Provide an alias for the key column.\n",
                    "willReplaceOnChanges": true
                },
                "includeOffset": {
                    "type": "boolean",
                    "description": "Include an offset column containing the Kafka message offset.\n",
                    "willReplaceOnChanges": true
                },
                "includeOffsetAlias": {
                    "type": "string",
                    "description": "Provide an alias for the offset column.\n",
                    "willReplaceOnChanges": true
                },
                "includePartition": {
                    "type": "boolean",
                    "description": "Include a partition column containing the Kafka message partition\n",
                    "willReplaceOnChanges": true
                },
                "includePartitionAlias": {
                    "type": "string",
                    "description": "Provide an alias for the partition column.\n",
                    "willReplaceOnChanges": true
                },
                "includeTimestamp": {
                    "type": "boolean",
                    "description": "Include a timestamp column containing the Kafka message timestamp.\n",
                    "willReplaceOnChanges": true
                },
                "includeTimestampAlias": {
                    "type": "string",
                    "description": "Provide an alias for the timestamp column.\n",
                    "willReplaceOnChanges": true
                },
                "kafkaConnection": {
                    "$ref": "#/types/materialize:index/SourceKafkaKafkaConnection:SourceKafkaKafkaConnection",
                    "description": "The Kafka connection to use in the source.\n",
                    "willReplaceOnChanges": true
                },
                "keyFormat": {
                    "$ref": "#/types/materialize:index/SourceKafkaKeyFormat:SourceKafkaKeyFormat",
                    "description": "Set the key format explicitly.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the source.\n"
                },
                "ownershipRole": {
                    "type": "string",
                    "description": "The owernship role of the object.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                    "willReplaceOnChanges": true
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the source schema. Defaults to `public`.\n",
                    "willReplaceOnChanges": true
                },
                "startOffsets": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Read partitions from the specified offset.\n",
                    "willReplaceOnChanges": true
                },
                "startTimestamp": {
                    "type": "integer",
                    "description": "Use the specified value to set `START OFFSET` based on the Kafka timestamp.\n",
                    "willReplaceOnChanges": true
                },
                "topic": {
                    "type": "string",
                    "description": "The Kafka topic you want to subscribe to.\n",
                    "willReplaceOnChanges": true
                },
                "valueFormat": {
                    "$ref": "#/types/materialize:index/SourceKafkaValueFormat:SourceKafkaValueFormat",
                    "description": "Set the value format explicitly.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "kafkaConnection",
                "topic"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceKafka resources.\n",
                "properties": {
                    "clusterName": {
                        "type": "string",
                        "description": "The cluster to maintain this source.\n",
                        "willReplaceOnChanges": true
                    },
                    "comment": {
                        "type": "string",
                        "description": "**Public Preview** Comment on an object in the database.\n"
                    },
                    "databaseName": {
                        "type": "string",
                        "description": "The identifier for the source database. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n",
                        "willReplaceOnChanges": true
                    },
                    "envelope": {
                        "$ref": "#/types/materialize:index/SourceKafkaEnvelope:SourceKafkaEnvelope",
                        "description": "How Materialize should interpret records (e.g. append-only, upsert)..\n",
                        "willReplaceOnChanges": true
                    },
                    "exposeProgress": {
                        "$ref": "#/types/materialize:index/SourceKafkaExposeProgress:SourceKafkaExposeProgress",
                        "description": "The name of the progress subsource for the source. If this is not specified, the subsource will be named `\u003csrc_name\u003e_progress`.\n",
                        "willReplaceOnChanges": true
                    },
                    "format": {
                        "$ref": "#/types/materialize:index/SourceKafkaFormat:SourceKafkaFormat",
                        "description": "How to decode raw bytes from different formats into data structures Materialize can understand at runtime.\n",
                        "willReplaceOnChanges": true
                    },
                    "includeHeaders": {
                        "type": "boolean",
                        "description": "Include message headers.\n",
                        "willReplaceOnChanges": true
                    },
                    "includeHeadersAlias": {
                        "type": "string",
                        "description": "Provide an alias for the headers column.\n",
                        "willReplaceOnChanges": true
                    },
                    "includeKey": {
                        "type": "boolean",
                        "description": "Include a column containing the Kafka message key.\n",
                        "willReplaceOnChanges": true
                    },
                    "includeKeyAlias": {
                        "type": "string",
                        "description": "Provide an alias for the key column.\n",
                        "willReplaceOnChanges": true
                    },
                    "includeOffset": {
                        "type": "boolean",
                        "description": "Include an offset column containing the Kafka message offset.\n",
                        "willReplaceOnChanges": true
                    },
                    "includeOffsetAlias": {
                        "type": "string",
                        "description": "Provide an alias for the offset column.\n",
                        "willReplaceOnChanges": true
                    },
                    "includePartition": {
                        "type": "boolean",
                        "description": "Include a partition column containing the Kafka message partition\n",
                        "willReplaceOnChanges": true
                    },
                    "includePartitionAlias": {
                        "type": "string",
                        "description": "Provide an alias for the partition column.\n",
                        "willReplaceOnChanges": true
                    },
                    "includeTimestamp": {
                        "type": "boolean",
                        "description": "Include a timestamp column containing the Kafka message timestamp.\n",
                        "willReplaceOnChanges": true
                    },
                    "includeTimestampAlias": {
                        "type": "string",
                        "description": "Provide an alias for the timestamp column.\n",
                        "willReplaceOnChanges": true
                    },
                    "kafkaConnection": {
                        "$ref": "#/types/materialize:index/SourceKafkaKafkaConnection:SourceKafkaKafkaConnection",
                        "description": "The Kafka connection to use in the source.\n",
                        "willReplaceOnChanges": true
                    },
                    "keyFormat": {
                        "$ref": "#/types/materialize:index/SourceKafkaKeyFormat:SourceKafkaKeyFormat",
                        "description": "Set the key format explicitly.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The identifier for the source.\n"
                    },
                    "ownershipRole": {
                        "type": "string",
                        "description": "The owernship role of the object.\n"
                    },
                    "qualifiedSqlName": {
                        "type": "string",
                        "description": "The fully qualified name of the source.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                        "willReplaceOnChanges": true
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "The identifier for the source schema. Defaults to `public`.\n",
                        "willReplaceOnChanges": true
                    },
                    "size": {
                        "type": "string",
                        "description": "The size of the cluster maintaining this source.\n"
                    },
                    "startOffsets": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Read partitions from the specified offset.\n",
                        "willReplaceOnChanges": true
                    },
                    "startTimestamp": {
                        "type": "integer",
                        "description": "Use the specified value to set `START OFFSET` based on the Kafka timestamp.\n",
                        "willReplaceOnChanges": true
                    },
                    "subsources": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/materialize:index/SourceKafkaSubsource:SourceKafkaSubsource"
                        },
                        "description": "Subsources of a source.\n"
                    },
                    "topic": {
                        "type": "string",
                        "description": "The Kafka topic you want to subscribe to.\n",
                        "willReplaceOnChanges": true
                    },
                    "valueFormat": {
                        "$ref": "#/types/materialize:index/SourceKafkaValueFormat:SourceKafkaValueFormat",
                        "description": "Set the value format explicitly.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/sourceLoadgen:SourceLoadgen": {
            "description": "A load generator source produces synthetic data for use in demos and performance tests.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.SourceLoadgen;\nimport com.pulumi.materialize.SourceLoadgenArgs;\nimport com.pulumi.materialize.inputs.SourceLoadgenCounterOptionsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleSourceLoadGenerator = new SourceLoadgen(\"exampleSourceLoadGenerator\", SourceLoadgenArgs.builder()        \n            .counterOptions(SourceLoadgenCounterOptionsArgs.builder()\n                .scaleFactor(0.01)\n                .tickInterval(\"500ms\")\n                .build())\n            .loadGeneratorType(\"COUNTER\")\n            .schemaName(\"schema\")\n            .size(\"3xsmall\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleSourceLoadGenerator:\n    type: materialize:SourceLoadgen\n    properties:\n      counterOptions:\n        scaleFactor: 0.01\n        tickInterval: 500ms\n      loadGeneratorType: COUNTER\n      schemaName: schema\n      size: 3xsmall\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nSources can be imported using the source id\n\n```sh\n $ pulumi import materialize:index/sourceLoadgen:SourceLoadgen example_source_load_generator \u003cregion\u003e:\u003csource_id\u003e\n```\n\n Source id and information be found in the `mz_catalog.mz_sources` table The region is the region where the database is located (e.g. aws/us-east-1) ",
            "properties": {
                "auctionOptions": {
                    "$ref": "#/types/materialize:index/SourceLoadgenAuctionOptions:SourceLoadgenAuctionOptions",
                    "description": "Auction Options.\n"
                },
                "clusterName": {
                    "type": "string",
                    "description": "The cluster to maintain this source.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "**Public Preview** Comment on an object in the database.\n"
                },
                "counterOptions": {
                    "$ref": "#/types/materialize:index/SourceLoadgenCounterOptions:SourceLoadgenCounterOptions",
                    "description": "Counter Options.\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the source database. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "exposeProgress": {
                    "$ref": "#/types/materialize:index/SourceLoadgenExposeProgress:SourceLoadgenExposeProgress",
                    "description": "The name of the progress subsource for the source. If this is not specified, the subsource will be named `\u003csrc_name\u003e_progress`.\n"
                },
                "loadGeneratorType": {
                    "type": "string",
                    "description": "The load generator types: [AUCTION MARKETING COUNTER TPCH].\n"
                },
                "marketingOptions": {
                    "$ref": "#/types/materialize:index/SourceLoadgenMarketingOptions:SourceLoadgenMarketingOptions",
                    "description": "Marketing Options.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the source.\n"
                },
                "ownershipRole": {
                    "type": "string",
                    "description": "The owernship role of the object.\n"
                },
                "qualifiedSqlName": {
                    "type": "string",
                    "description": "The fully qualified name of the source.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the source schema. Defaults to `public`.\n"
                },
                "size": {
                    "type": "string",
                    "description": "The size of the cluster maintaining this source.\n"
                },
                "subsources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/materialize:index/SourceLoadgenSubsource:SourceLoadgenSubsource"
                    },
                    "description": "Subsources of a source.\n"
                },
                "tpchOptions": {
                    "$ref": "#/types/materialize:index/SourceLoadgenTpchOptions:SourceLoadgenTpchOptions",
                    "description": "TPCH Options.\n"
                }
            },
            "required": [
                "clusterName",
                "loadGeneratorType",
                "name",
                "ownershipRole",
                "qualifiedSqlName",
                "size",
                "subsources"
            ],
            "inputProperties": {
                "auctionOptions": {
                    "$ref": "#/types/materialize:index/SourceLoadgenAuctionOptions:SourceLoadgenAuctionOptions",
                    "description": "Auction Options.\n",
                    "willReplaceOnChanges": true
                },
                "clusterName": {
                    "type": "string",
                    "description": "The cluster to maintain this source.\n",
                    "willReplaceOnChanges": true
                },
                "comment": {
                    "type": "string",
                    "description": "**Public Preview** Comment on an object in the database.\n"
                },
                "counterOptions": {
                    "$ref": "#/types/materialize:index/SourceLoadgenCounterOptions:SourceLoadgenCounterOptions",
                    "description": "Counter Options.\n",
                    "willReplaceOnChanges": true
                },
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the source database. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n",
                    "willReplaceOnChanges": true
                },
                "exposeProgress": {
                    "$ref": "#/types/materialize:index/SourceLoadgenExposeProgress:SourceLoadgenExposeProgress",
                    "description": "The name of the progress subsource for the source. If this is not specified, the subsource will be named `\u003csrc_name\u003e_progress`.\n",
                    "willReplaceOnChanges": true
                },
                "loadGeneratorType": {
                    "type": "string",
                    "description": "The load generator types: [AUCTION MARKETING COUNTER TPCH].\n",
                    "willReplaceOnChanges": true
                },
                "marketingOptions": {
                    "$ref": "#/types/materialize:index/SourceLoadgenMarketingOptions:SourceLoadgenMarketingOptions",
                    "description": "Marketing Options.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the source.\n"
                },
                "ownershipRole": {
                    "type": "string",
                    "description": "The owernship role of the object.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                    "willReplaceOnChanges": true
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the source schema. Defaults to `public`.\n",
                    "willReplaceOnChanges": true
                },
                "tpchOptions": {
                    "$ref": "#/types/materialize:index/SourceLoadgenTpchOptions:SourceLoadgenTpchOptions",
                    "description": "TPCH Options.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "loadGeneratorType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceLoadgen resources.\n",
                "properties": {
                    "auctionOptions": {
                        "$ref": "#/types/materialize:index/SourceLoadgenAuctionOptions:SourceLoadgenAuctionOptions",
                        "description": "Auction Options.\n",
                        "willReplaceOnChanges": true
                    },
                    "clusterName": {
                        "type": "string",
                        "description": "The cluster to maintain this source.\n",
                        "willReplaceOnChanges": true
                    },
                    "comment": {
                        "type": "string",
                        "description": "**Public Preview** Comment on an object in the database.\n"
                    },
                    "counterOptions": {
                        "$ref": "#/types/materialize:index/SourceLoadgenCounterOptions:SourceLoadgenCounterOptions",
                        "description": "Counter Options.\n",
                        "willReplaceOnChanges": true
                    },
                    "databaseName": {
                        "type": "string",
                        "description": "The identifier for the source database. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n",
                        "willReplaceOnChanges": true
                    },
                    "exposeProgress": {
                        "$ref": "#/types/materialize:index/SourceLoadgenExposeProgress:SourceLoadgenExposeProgress",
                        "description": "The name of the progress subsource for the source. If this is not specified, the subsource will be named `\u003csrc_name\u003e_progress`.\n",
                        "willReplaceOnChanges": true
                    },
                    "loadGeneratorType": {
                        "type": "string",
                        "description": "The load generator types: [AUCTION MARKETING COUNTER TPCH].\n",
                        "willReplaceOnChanges": true
                    },
                    "marketingOptions": {
                        "$ref": "#/types/materialize:index/SourceLoadgenMarketingOptions:SourceLoadgenMarketingOptions",
                        "description": "Marketing Options.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The identifier for the source.\n"
                    },
                    "ownershipRole": {
                        "type": "string",
                        "description": "The owernship role of the object.\n"
                    },
                    "qualifiedSqlName": {
                        "type": "string",
                        "description": "The fully qualified name of the source.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                        "willReplaceOnChanges": true
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "The identifier for the source schema. Defaults to `public`.\n",
                        "willReplaceOnChanges": true
                    },
                    "size": {
                        "type": "string",
                        "description": "The size of the cluster maintaining this source.\n"
                    },
                    "subsources": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/materialize:index/SourceLoadgenSubsource:SourceLoadgenSubsource"
                        },
                        "description": "Subsources of a source.\n"
                    },
                    "tpchOptions": {
                        "$ref": "#/types/materialize:index/SourceLoadgenTpchOptions:SourceLoadgenTpchOptions",
                        "description": "TPCH Options.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/sourcePostgres:SourcePostgres": {
            "description": "A Postgres source describes a PostgreSQL instance you want Materialize to read data from.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.SourcePostgres;\nimport com.pulumi.materialize.SourcePostgresArgs;\nimport com.pulumi.materialize.inputs.SourcePostgresPostgresConnectionArgs;\nimport com.pulumi.materialize.inputs.SourcePostgresTableArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleSourcePostgres = new SourcePostgres(\"exampleSourcePostgres\", SourcePostgresArgs.builder()        \n            .postgresConnection(SourcePostgresPostgresConnectionArgs.builder()\n                .name(\"pg_connection\")\n                .build())\n            .publication(\"mz_source\")\n            .schemaName(\"schema\")\n            .size(\"3xsmall\")\n            .tables(            \n                SourcePostgresTableArgs.builder()\n                    .alias(\"s1_table_1\")\n                    .name(\"schema1.table_1\")\n                    .build(),\n                SourcePostgresTableArgs.builder()\n                    .alias(\"s2_table_1\")\n                    .name(\"schema2.table_1\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleSourcePostgres:\n    type: materialize:SourcePostgres\n    properties:\n      postgresConnection:\n        name: pg_connection\n      publication: mz_source\n      schemaName: schema\n      size: 3xsmall\n      tables:\n        - alias: s1_table_1\n          name: schema1.table_1\n        - alias: s2_table_1\n          name: schema2.table_1\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nSources can be imported using the source id\n\n```sh\n $ pulumi import materialize:index/sourcePostgres:SourcePostgres example_source_postgres \u003cregion\u003e:\u003csource_id\u003e\n```\n\n Source id and information be found in the `mz_catalog.mz_sources` table The region is the region where the database is located (e.g. aws/us-east-1) ",
            "properties": {
                "clusterName": {
                    "type": "string",
                    "description": "The cluster to maintain this source.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "**Public Preview** Comment on an object in the database.\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the source database. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "exposeProgress": {
                    "$ref": "#/types/materialize:index/SourcePostgresExposeProgress:SourcePostgresExposeProgress",
                    "description": "The name of the progress subsource for the source. If this is not specified, the subsource will be named `\u003csrc_name\u003e_progress`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the source.\n"
                },
                "ownershipRole": {
                    "type": "string",
                    "description": "The owernship role of the object.\n"
                },
                "postgresConnection": {
                    "$ref": "#/types/materialize:index/SourcePostgresPostgresConnection:SourcePostgresPostgresConnection",
                    "description": "The PostgreSQL connection to use in the source.\n"
                },
                "publication": {
                    "type": "string",
                    "description": "The PostgreSQL publication (the replication data set containing the tables to be streamed to Materialize).\n"
                },
                "qualifiedSqlName": {
                    "type": "string",
                    "description": "The fully qualified name of the source.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the source schema. Defaults to `public`.\n"
                },
                "schemas": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Creates subsources for specific schemas. If neither table or schema is specified, will default to ALL TABLES\n"
                },
                "size": {
                    "type": "string",
                    "description": "The size of the cluster maintaining this source.\n"
                },
                "subsources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/materialize:index/SourcePostgresSubsource:SourcePostgresSubsource"
                    },
                    "description": "Subsources of a source.\n"
                },
                "tables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/materialize:index/SourcePostgresTable:SourcePostgresTable"
                    },
                    "description": "Creates subsources for specific tables. If neither table or schema is specified, will default to ALL TABLES\n"
                },
                "textColumns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Decode data as text for specific columns that contain PostgreSQL types that are unsupported in Materialize. Can only be updated in place when also updating a corresponding `table` attribute.\n"
                }
            },
            "required": [
                "clusterName",
                "name",
                "ownershipRole",
                "postgresConnection",
                "publication",
                "qualifiedSqlName",
                "size",
                "subsources"
            ],
            "inputProperties": {
                "clusterName": {
                    "type": "string",
                    "description": "The cluster to maintain this source.\n",
                    "willReplaceOnChanges": true
                },
                "comment": {
                    "type": "string",
                    "description": "**Public Preview** Comment on an object in the database.\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the source database. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n",
                    "willReplaceOnChanges": true
                },
                "exposeProgress": {
                    "$ref": "#/types/materialize:index/SourcePostgresExposeProgress:SourcePostgresExposeProgress",
                    "description": "The name of the progress subsource for the source. If this is not specified, the subsource will be named `\u003csrc_name\u003e_progress`.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the source.\n"
                },
                "ownershipRole": {
                    "type": "string",
                    "description": "The owernship role of the object.\n"
                },
                "postgresConnection": {
                    "$ref": "#/types/materialize:index/SourcePostgresPostgresConnection:SourcePostgresPostgresConnection",
                    "description": "The PostgreSQL connection to use in the source.\n",
                    "willReplaceOnChanges": true
                },
                "publication": {
                    "type": "string",
                    "description": "The PostgreSQL publication (the replication data set containing the tables to be streamed to Materialize).\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                    "willReplaceOnChanges": true
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the source schema. Defaults to `public`.\n",
                    "willReplaceOnChanges": true
                },
                "schemas": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Creates subsources for specific schemas. If neither table or schema is specified, will default to ALL TABLES\n",
                    "willReplaceOnChanges": true
                },
                "tables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/materialize:index/SourcePostgresTable:SourcePostgresTable"
                    },
                    "description": "Creates subsources for specific tables. If neither table or schema is specified, will default to ALL TABLES\n"
                },
                "textColumns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Decode data as text for specific columns that contain PostgreSQL types that are unsupported in Materialize. Can only be updated in place when also updating a corresponding `table` attribute.\n"
                }
            },
            "requiredInputs": [
                "postgresConnection",
                "publication"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourcePostgres resources.\n",
                "properties": {
                    "clusterName": {
                        "type": "string",
                        "description": "The cluster to maintain this source.\n",
                        "willReplaceOnChanges": true
                    },
                    "comment": {
                        "type": "string",
                        "description": "**Public Preview** Comment on an object in the database.\n"
                    },
                    "databaseName": {
                        "type": "string",
                        "description": "The identifier for the source database. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n",
                        "willReplaceOnChanges": true
                    },
                    "exposeProgress": {
                        "$ref": "#/types/materialize:index/SourcePostgresExposeProgress:SourcePostgresExposeProgress",
                        "description": "The name of the progress subsource for the source. If this is not specified, the subsource will be named `\u003csrc_name\u003e_progress`.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The identifier for the source.\n"
                    },
                    "ownershipRole": {
                        "type": "string",
                        "description": "The owernship role of the object.\n"
                    },
                    "postgresConnection": {
                        "$ref": "#/types/materialize:index/SourcePostgresPostgresConnection:SourcePostgresPostgresConnection",
                        "description": "The PostgreSQL connection to use in the source.\n",
                        "willReplaceOnChanges": true
                    },
                    "publication": {
                        "type": "string",
                        "description": "The PostgreSQL publication (the replication data set containing the tables to be streamed to Materialize).\n",
                        "willReplaceOnChanges": true
                    },
                    "qualifiedSqlName": {
                        "type": "string",
                        "description": "The fully qualified name of the source.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                        "willReplaceOnChanges": true
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "The identifier for the source schema. Defaults to `public`.\n",
                        "willReplaceOnChanges": true
                    },
                    "schemas": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Creates subsources for specific schemas. If neither table or schema is specified, will default to ALL TABLES\n",
                        "willReplaceOnChanges": true
                    },
                    "size": {
                        "type": "string",
                        "description": "The size of the cluster maintaining this source.\n"
                    },
                    "subsources": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/materialize:index/SourcePostgresSubsource:SourcePostgresSubsource"
                        },
                        "description": "Subsources of a source.\n"
                    },
                    "tables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/materialize:index/SourcePostgresTable:SourcePostgresTable"
                        },
                        "description": "Creates subsources for specific tables. If neither table or schema is specified, will default to ALL TABLES\n"
                    },
                    "textColumns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Decode data as text for specific columns that contain PostgreSQL types that are unsupported in Materialize. Can only be updated in place when also updating a corresponding `table` attribute.\n"
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/sourceWebhook:SourceWebhook": {
            "description": "**Private Preview** A webhook source describes a webhook you want Materialize to read data from.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\nconst exampleWebhook = new materialize.SourceWebhook(\"exampleWebhook\", {\n    clusterName: materialize_cluster.cluster.name,\n    bodyFormat: \"json\",\n    checkExpression: \"headers-\u003e'x-mz-api-key' = secret\",\n    includeHeaders: {\n        nots: [\"x-mz-api-key\"],\n    },\n    checkOptions: [\n        {\n            field: {\n                headers: true,\n            },\n        },\n        {\n            field: {\n                secret: {\n                    name: materialize_secret.password.name,\n                    databaseName: materialize_secret.password.database_name,\n                    schemaName: materialize_secret.password.schema_name,\n                },\n            },\n            alias: \"secret\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\nexample_webhook = materialize.SourceWebhook(\"exampleWebhook\",\n    cluster_name=materialize_cluster[\"cluster\"][\"name\"],\n    body_format=\"json\",\n    check_expression=\"headers-\u003e'x-mz-api-key' = secret\",\n    include_headers=materialize.SourceWebhookIncludeHeadersArgs(\n        nots=[\"x-mz-api-key\"],\n    ),\n    check_options=[\n        materialize.SourceWebhookCheckOptionArgs(\n            field=materialize.SourceWebhookCheckOptionFieldArgs(\n                headers=True,\n            ),\n        ),\n        materialize.SourceWebhookCheckOptionArgs(\n            field=materialize.SourceWebhookCheckOptionFieldArgs(\n                secret=materialize.SourceWebhookCheckOptionFieldSecretArgs(\n                    name=materialize_secret[\"password\"][\"name\"],\n                    database_name=materialize_secret[\"password\"][\"database_name\"],\n                    schema_name=materialize_secret[\"password\"][\"schema_name\"],\n                ),\n            ),\n            alias=\"secret\",\n        ),\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleWebhook = new Materialize.SourceWebhook(\"exampleWebhook\", new()\n    {\n        ClusterName = materialize_cluster.Cluster.Name,\n        BodyFormat = \"json\",\n        CheckExpression = \"headers-\u003e'x-mz-api-key' = secret\",\n        IncludeHeaders = new Materialize.Inputs.SourceWebhookIncludeHeadersArgs\n        {\n            Nots = new[]\n            {\n                \"x-mz-api-key\",\n            },\n        },\n        CheckOptions = new[]\n        {\n            new Materialize.Inputs.SourceWebhookCheckOptionArgs\n            {\n                Field = new Materialize.Inputs.SourceWebhookCheckOptionFieldArgs\n                {\n                    Headers = true,\n                },\n            },\n            new Materialize.Inputs.SourceWebhookCheckOptionArgs\n            {\n                Field = new Materialize.Inputs.SourceWebhookCheckOptionFieldArgs\n                {\n                    Secret = new Materialize.Inputs.SourceWebhookCheckOptionFieldSecretArgs\n                    {\n                        Name = materialize_secret.Password.Name,\n                        DatabaseName = materialize_secret.Password.Database_name,\n                        SchemaName = materialize_secret.Password.Schema_name,\n                    },\n                },\n                Alias = \"secret\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.NewSourceWebhook(ctx, \"exampleWebhook\", \u0026materialize.SourceWebhookArgs{\n\t\t\tClusterName:     pulumi.Any(materialize_cluster.Cluster.Name),\n\t\t\tBodyFormat:      pulumi.String(\"json\"),\n\t\t\tCheckExpression: pulumi.String(\"headers-\u003e'x-mz-api-key' = secret\"),\n\t\t\tIncludeHeaders: \u0026materialize.SourceWebhookIncludeHeadersArgs{\n\t\t\t\tNots: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"x-mz-api-key\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tCheckOptions: materialize.SourceWebhookCheckOptionArray{\n\t\t\t\t\u0026materialize.SourceWebhookCheckOptionArgs{\n\t\t\t\t\tField: \u0026materialize.SourceWebhookCheckOptionFieldArgs{\n\t\t\t\t\t\tHeaders: pulumi.Bool(true),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\u0026materialize.SourceWebhookCheckOptionArgs{\n\t\t\t\t\tField: \u0026materialize.SourceWebhookCheckOptionFieldArgs{\n\t\t\t\t\t\tSecret: \u0026materialize.SourceWebhookCheckOptionFieldSecretArgs{\n\t\t\t\t\t\t\tName:         pulumi.Any(materialize_secret.Password.Name),\n\t\t\t\t\t\t\tDatabaseName: pulumi.Any(materialize_secret.Password.Database_name),\n\t\t\t\t\t\t\tSchemaName:   pulumi.Any(materialize_secret.Password.Schema_name),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tAlias: pulumi.String(\"secret\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.SourceWebhook;\nimport com.pulumi.materialize.SourceWebhookArgs;\nimport com.pulumi.materialize.inputs.SourceWebhookIncludeHeadersArgs;\nimport com.pulumi.materialize.inputs.SourceWebhookCheckOptionArgs;\nimport com.pulumi.materialize.inputs.SourceWebhookCheckOptionFieldArgs;\nimport com.pulumi.materialize.inputs.SourceWebhookCheckOptionFieldSecretArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleWebhook = new SourceWebhook(\"exampleWebhook\", SourceWebhookArgs.builder()        \n            .clusterName(materialize_cluster.cluster().name())\n            .bodyFormat(\"json\")\n            .checkExpression(\"headers-\u003e'x-mz-api-key' = secret\")\n            .includeHeaders(SourceWebhookIncludeHeadersArgs.builder()\n                .nots(\"x-mz-api-key\")\n                .build())\n            .checkOptions(            \n                SourceWebhookCheckOptionArgs.builder()\n                    .field(SourceWebhookCheckOptionFieldArgs.builder()\n                        .headers(true)\n                        .build())\n                    .build(),\n                SourceWebhookCheckOptionArgs.builder()\n                    .field(SourceWebhookCheckOptionFieldArgs.builder()\n                        .secret(SourceWebhookCheckOptionFieldSecretArgs.builder()\n                            .name(materialize_secret.password().name())\n                            .databaseName(materialize_secret.password().database_name())\n                            .schemaName(materialize_secret.password().schema_name())\n                            .build())\n                        .build())\n                    .alias(\"secret\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleWebhook:\n    type: materialize:SourceWebhook\n    properties:\n      clusterName: ${materialize_cluster.cluster.name}\n      bodyFormat: json\n      checkExpression: headers-\u003e'x-mz-api-key' = secret\n      includeHeaders:\n        nots:\n          - x-mz-api-key\n      checkOptions:\n        - field:\n            headers: true\n        - field:\n            secret:\n              name: ${materialize_secret.password.name}\n              databaseName: ${materialize_secret.password.database_name}\n              schemaName: ${materialize_secret.password.schema_name}\n          alias: secret\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nSources can be imported using the source id\n\n```sh\n $ pulumi import materialize:index/sourceWebhook:SourceWebhook example_source_webhook \u003cregion\u003e:\u003csource_id\u003e\n```\n\n Source id and information be found in the `mz_catalog.mz_sources` table The region is the region where the database is located (e.g. aws/us-east-1) ",
            "properties": {
                "bodyFormat": {
                    "type": "string",
                    "description": "The body format of the webhook.\n"
                },
                "checkExpression": {
                    "type": "string",
                    "description": "The check expression for the webhook.\n"
                },
                "checkOptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/materialize:index/SourceWebhookCheckOption:SourceWebhookCheckOption"
                    },
                    "description": "The check options for the webhook.\n"
                },
                "clusterName": {
                    "type": "string",
                    "description": "The cluster to maintain this source.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "**Public Preview** Comment on an object in the database.\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the source database. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "includeHeader": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/materialize:index/SourceWebhookIncludeHeader:SourceWebhookIncludeHeader"
                    },
                    "description": "Map a header value from a request into a column.\n"
                },
                "includeHeaders": {
                    "$ref": "#/types/materialize:index/SourceWebhookIncludeHeaders:SourceWebhookIncludeHeaders",
                    "description": "Include headers in the webhook.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the source.\n"
                },
                "ownershipRole": {
                    "type": "string",
                    "description": "The owernship role of the object.\n"
                },
                "qualifiedSqlName": {
                    "type": "string",
                    "description": "The fully qualified name of the source.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the source schema. Defaults to `public`.\n"
                },
                "size": {
                    "type": "string",
                    "description": "The size of the cluster maintaining this source.\n"
                },
                "subsources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/materialize:index/SourceWebhookSubsource:SourceWebhookSubsource"
                    },
                    "description": "Subsources of a source.\n"
                }
            },
            "required": [
                "bodyFormat",
                "name",
                "ownershipRole",
                "qualifiedSqlName",
                "size",
                "subsources"
            ],
            "inputProperties": {
                "bodyFormat": {
                    "type": "string",
                    "description": "The body format of the webhook.\n",
                    "willReplaceOnChanges": true
                },
                "checkExpression": {
                    "type": "string",
                    "description": "The check expression for the webhook.\n",
                    "willReplaceOnChanges": true
                },
                "checkOptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/materialize:index/SourceWebhookCheckOption:SourceWebhookCheckOption"
                    },
                    "description": "The check options for the webhook.\n",
                    "willReplaceOnChanges": true
                },
                "clusterName": {
                    "type": "string",
                    "description": "The cluster to maintain this source.\n",
                    "willReplaceOnChanges": true
                },
                "comment": {
                    "type": "string",
                    "description": "**Public Preview** Comment on an object in the database.\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the source database. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n",
                    "willReplaceOnChanges": true
                },
                "includeHeader": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/materialize:index/SourceWebhookIncludeHeader:SourceWebhookIncludeHeader"
                    },
                    "description": "Map a header value from a request into a column.\n",
                    "willReplaceOnChanges": true
                },
                "includeHeaders": {
                    "$ref": "#/types/materialize:index/SourceWebhookIncludeHeaders:SourceWebhookIncludeHeaders",
                    "description": "Include headers in the webhook.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the source.\n"
                },
                "ownershipRole": {
                    "type": "string",
                    "description": "The owernship role of the object.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                    "willReplaceOnChanges": true
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the source schema. Defaults to `public`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "bodyFormat"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceWebhook resources.\n",
                "properties": {
                    "bodyFormat": {
                        "type": "string",
                        "description": "The body format of the webhook.\n",
                        "willReplaceOnChanges": true
                    },
                    "checkExpression": {
                        "type": "string",
                        "description": "The check expression for the webhook.\n",
                        "willReplaceOnChanges": true
                    },
                    "checkOptions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/materialize:index/SourceWebhookCheckOption:SourceWebhookCheckOption"
                        },
                        "description": "The check options for the webhook.\n",
                        "willReplaceOnChanges": true
                    },
                    "clusterName": {
                        "type": "string",
                        "description": "The cluster to maintain this source.\n",
                        "willReplaceOnChanges": true
                    },
                    "comment": {
                        "type": "string",
                        "description": "**Public Preview** Comment on an object in the database.\n"
                    },
                    "databaseName": {
                        "type": "string",
                        "description": "The identifier for the source database. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n",
                        "willReplaceOnChanges": true
                    },
                    "includeHeader": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/materialize:index/SourceWebhookIncludeHeader:SourceWebhookIncludeHeader"
                        },
                        "description": "Map a header value from a request into a column.\n",
                        "willReplaceOnChanges": true
                    },
                    "includeHeaders": {
                        "$ref": "#/types/materialize:index/SourceWebhookIncludeHeaders:SourceWebhookIncludeHeaders",
                        "description": "Include headers in the webhook.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The identifier for the source.\n"
                    },
                    "ownershipRole": {
                        "type": "string",
                        "description": "The owernship role of the object.\n"
                    },
                    "qualifiedSqlName": {
                        "type": "string",
                        "description": "The fully qualified name of the source.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                        "willReplaceOnChanges": true
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "The identifier for the source schema. Defaults to `public`.\n",
                        "willReplaceOnChanges": true
                    },
                    "size": {
                        "type": "string",
                        "description": "The size of the cluster maintaining this source.\n"
                    },
                    "subsources": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/materialize:index/SourceWebhookSubsource:SourceWebhookSubsource"
                        },
                        "description": "Subsources of a source.\n"
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/table:Table": {
            "description": "A table persists durable storage that can be written to, updated and seamlessly joined with other tables, views or sources\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\nconst simpleTable = new materialize.Table(\"simpleTable\", {\n    schemaName: materialize_schema.schema.name,\n    databaseName: materialize_database.database.name,\n    columns: [\n        {\n            name: \"column_1\",\n            type: \"text\",\n        },\n        {\n            name: \"column_2\",\n            type: \"int\",\n        },\n        {\n            name: \"column_3\",\n            type: \"text\",\n            nullable: true,\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\nsimple_table = materialize.Table(\"simpleTable\",\n    schema_name=materialize_schema[\"schema\"][\"name\"],\n    database_name=materialize_database[\"database\"][\"name\"],\n    columns=[\n        materialize.TableColumnArgs(\n            name=\"column_1\",\n            type=\"text\",\n        ),\n        materialize.TableColumnArgs(\n            name=\"column_2\",\n            type=\"int\",\n        ),\n        materialize.TableColumnArgs(\n            name=\"column_3\",\n            type=\"text\",\n            nullable=True,\n        ),\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var simpleTable = new Materialize.Table(\"simpleTable\", new()\n    {\n        SchemaName = materialize_schema.Schema.Name,\n        DatabaseName = materialize_database.Database.Name,\n        Columns = new[]\n        {\n            new Materialize.Inputs.TableColumnArgs\n            {\n                Name = \"column_1\",\n                Type = \"text\",\n            },\n            new Materialize.Inputs.TableColumnArgs\n            {\n                Name = \"column_2\",\n                Type = \"int\",\n            },\n            new Materialize.Inputs.TableColumnArgs\n            {\n                Name = \"column_3\",\n                Type = \"text\",\n                Nullable = true,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.NewTable(ctx, \"simpleTable\", \u0026materialize.TableArgs{\n\t\t\tSchemaName:   pulumi.Any(materialize_schema.Schema.Name),\n\t\t\tDatabaseName: pulumi.Any(materialize_database.Database.Name),\n\t\t\tColumns: materialize.TableColumnArray{\n\t\t\t\t\u0026materialize.TableColumnArgs{\n\t\t\t\t\tName: pulumi.String(\"column_1\"),\n\t\t\t\t\tType: pulumi.String(\"text\"),\n\t\t\t\t},\n\t\t\t\t\u0026materialize.TableColumnArgs{\n\t\t\t\t\tName: pulumi.String(\"column_2\"),\n\t\t\t\t\tType: pulumi.String(\"int\"),\n\t\t\t\t},\n\t\t\t\t\u0026materialize.TableColumnArgs{\n\t\t\t\t\tName:     pulumi.String(\"column_3\"),\n\t\t\t\t\tType:     pulumi.String(\"text\"),\n\t\t\t\t\tNullable: pulumi.Bool(true),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.Table;\nimport com.pulumi.materialize.TableArgs;\nimport com.pulumi.materialize.inputs.TableColumnArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var simpleTable = new Table(\"simpleTable\", TableArgs.builder()        \n            .schemaName(materialize_schema.schema().name())\n            .databaseName(materialize_database.database().name())\n            .columns(            \n                TableColumnArgs.builder()\n                    .name(\"column_1\")\n                    .type(\"text\")\n                    .build(),\n                TableColumnArgs.builder()\n                    .name(\"column_2\")\n                    .type(\"int\")\n                    .build(),\n                TableColumnArgs.builder()\n                    .name(\"column_3\")\n                    .type(\"text\")\n                    .nullable(true)\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  simpleTable:\n    type: materialize:Table\n    properties:\n      schemaName: ${materialize_schema.schema.name}\n      databaseName: ${materialize_database.database.name}\n      columns:\n        - name: column_1\n          type: text\n        - name: column_2\n          type: int\n        - name: column_3\n          type: text\n          nullable: true\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nTables can be imported using the table id\n\n```sh\n $ pulumi import materialize:index/table:Table example_table \u003cregion\u003e:\u003ctable_id\u003e\n```\n\n Table id and information be found in the `mz_catalog.mz_tables` table The region is the region where the database is located (e.g. aws/us-east-1) ",
            "properties": {
                "columns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/materialize:index/TableColumn:TableColumn"
                    },
                    "description": "Column of the table.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "**Public Preview** Comment on an object in the database.\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the table database. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the table.\n"
                },
                "ownershipRole": {
                    "type": "string",
                    "description": "The owernship role of the object.\n"
                },
                "qualifiedSqlName": {
                    "type": "string",
                    "description": "The fully qualified name of the table.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the table schema. Defaults to `public`.\n"
                }
            },
            "required": [
                "columns",
                "name",
                "ownershipRole",
                "qualifiedSqlName"
            ],
            "inputProperties": {
                "columns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/materialize:index/TableColumn:TableColumn"
                    },
                    "description": "Column of the table.\n",
                    "willReplaceOnChanges": true
                },
                "comment": {
                    "type": "string",
                    "description": "**Public Preview** Comment on an object in the database.\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the table database. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the table.\n"
                },
                "ownershipRole": {
                    "type": "string",
                    "description": "The owernship role of the object.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                    "willReplaceOnChanges": true
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the table schema. Defaults to `public`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "columns"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Table resources.\n",
                "properties": {
                    "columns": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/materialize:index/TableColumn:TableColumn"
                        },
                        "description": "Column of the table.\n",
                        "willReplaceOnChanges": true
                    },
                    "comment": {
                        "type": "string",
                        "description": "**Public Preview** Comment on an object in the database.\n"
                    },
                    "databaseName": {
                        "type": "string",
                        "description": "The identifier for the table database. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The identifier for the table.\n"
                    },
                    "ownershipRole": {
                        "type": "string",
                        "description": "The owernship role of the object.\n"
                    },
                    "qualifiedSqlName": {
                        "type": "string",
                        "description": "The fully qualified name of the table.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                        "willReplaceOnChanges": true
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "The identifier for the table schema. Defaults to `public`.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/type:Type": {
            "description": "A custom types, which let you create named versions of anonymous types.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\nconst listType = new materialize.Type(\"listType\", {\n    schemaName: materialize_schema.schema.name,\n    databaseName: materialize_database.database.name,\n    listProperties: {\n        elementType: \"int4\",\n    },\n});\nconst mapType = new materialize.Type(\"mapType\", {\n    schemaName: materialize_schema.schema.name,\n    databaseName: materialize_database.database.name,\n    mapProperties: {\n        keyType: \"text\",\n        valueType: \"int4\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\nlist_type = materialize.Type(\"listType\",\n    schema_name=materialize_schema[\"schema\"][\"name\"],\n    database_name=materialize_database[\"database\"][\"name\"],\n    list_properties=materialize.TypeListPropertiesArgs(\n        element_type=\"int4\",\n    ))\nmap_type = materialize.Type(\"mapType\",\n    schema_name=materialize_schema[\"schema\"][\"name\"],\n    database_name=materialize_database[\"database\"][\"name\"],\n    map_properties=materialize.TypeMapPropertiesArgs(\n        key_type=\"text\",\n        value_type=\"int4\",\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var listType = new Materialize.Type(\"listType\", new()\n    {\n        SchemaName = materialize_schema.Schema.Name,\n        DatabaseName = materialize_database.Database.Name,\n        ListProperties = new Materialize.Inputs.TypeListPropertiesArgs\n        {\n            ElementType = \"int4\",\n        },\n    });\n\n    var mapType = new Materialize.Type(\"mapType\", new()\n    {\n        SchemaName = materialize_schema.Schema.Name,\n        DatabaseName = materialize_database.Database.Name,\n        MapProperties = new Materialize.Inputs.TypeMapPropertiesArgs\n        {\n            KeyType = \"text\",\n            ValueType = \"int4\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.NewType(ctx, \"listType\", \u0026materialize.TypeArgs{\n\t\t\tSchemaName:   pulumi.Any(materialize_schema.Schema.Name),\n\t\t\tDatabaseName: pulumi.Any(materialize_database.Database.Name),\n\t\t\tListProperties: \u0026materialize.TypeListPropertiesArgs{\n\t\t\t\tElementType: pulumi.String(\"int4\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = materialize.NewType(ctx, \"mapType\", \u0026materialize.TypeArgs{\n\t\t\tSchemaName:   pulumi.Any(materialize_schema.Schema.Name),\n\t\t\tDatabaseName: pulumi.Any(materialize_database.Database.Name),\n\t\t\tMapProperties: \u0026materialize.TypeMapPropertiesArgs{\n\t\t\t\tKeyType:   pulumi.String(\"text\"),\n\t\t\t\tValueType: pulumi.String(\"int4\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.Type;\nimport com.pulumi.materialize.TypeArgs;\nimport com.pulumi.materialize.inputs.TypeListPropertiesArgs;\nimport com.pulumi.materialize.inputs.TypeMapPropertiesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var listType = new Type(\"listType\", TypeArgs.builder()        \n            .schemaName(materialize_schema.schema().name())\n            .databaseName(materialize_database.database().name())\n            .listProperties(TypeListPropertiesArgs.builder()\n                .elementType(\"int4\")\n                .build())\n            .build());\n\n        var mapType = new Type(\"mapType\", TypeArgs.builder()        \n            .schemaName(materialize_schema.schema().name())\n            .databaseName(materialize_database.database().name())\n            .mapProperties(TypeMapPropertiesArgs.builder()\n                .keyType(\"text\")\n                .valueType(\"int4\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  listType:\n    type: materialize:Type\n    properties:\n      schemaName: ${materialize_schema.schema.name}\n      databaseName: ${materialize_database.database.name}\n      listProperties:\n        elementType: int4\n  mapType:\n    type: materialize:Type\n    properties:\n      schemaName: ${materialize_schema.schema.name}\n      databaseName: ${materialize_database.database.name}\n      mapProperties:\n        keyType: text\n        valueType: int4\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nTypes can be imported using the type id\n\n```sh\n $ pulumi import materialize:index/type:Type example_type \u003cregion\u003e:\u003ctype_id\u003e\n```\n\n Type id and information be found in the `mz_catalog.mz_types` table The region is the region where the database is located (e.g. aws/us-east-1) ",
            "properties": {
                "category": {
                    "type": "string",
                    "description": "Type category.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "**Public Preview** Comment on an object in the database.\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the type database. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "listProperties": {
                    "$ref": "#/types/materialize:index/TypeListProperties:TypeListProperties",
                    "description": "List properties.\n"
                },
                "mapProperties": {
                    "$ref": "#/types/materialize:index/TypeMapProperties:TypeMapProperties",
                    "description": "Map properties.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the type.\n"
                },
                "ownershipRole": {
                    "type": "string",
                    "description": "The owernship role of the object.\n"
                },
                "qualifiedSqlName": {
                    "type": "string",
                    "description": "The fully qualified name of the type.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n"
                },
                "rowProperties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/materialize:index/TypeRowProperty:TypeRowProperty"
                    },
                    "description": "Row properties.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the type schema. Defaults to `public`.\n"
                }
            },
            "required": [
                "category",
                "name",
                "ownershipRole",
                "qualifiedSqlName"
            ],
            "inputProperties": {
                "comment": {
                    "type": "string",
                    "description": "**Public Preview** Comment on an object in the database.\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the type database. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n",
                    "willReplaceOnChanges": true
                },
                "listProperties": {
                    "$ref": "#/types/materialize:index/TypeListProperties:TypeListProperties",
                    "description": "List properties.\n",
                    "willReplaceOnChanges": true
                },
                "mapProperties": {
                    "$ref": "#/types/materialize:index/TypeMapProperties:TypeMapProperties",
                    "description": "Map properties.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the type.\n",
                    "willReplaceOnChanges": true
                },
                "ownershipRole": {
                    "type": "string",
                    "description": "The owernship role of the object.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                    "willReplaceOnChanges": true
                },
                "rowProperties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/materialize:index/TypeRowProperty:TypeRowProperty"
                    },
                    "description": "Row properties.\n",
                    "willReplaceOnChanges": true
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the type schema. Defaults to `public`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Type resources.\n",
                "properties": {
                    "category": {
                        "type": "string",
                        "description": "Type category.\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "**Public Preview** Comment on an object in the database.\n"
                    },
                    "databaseName": {
                        "type": "string",
                        "description": "The identifier for the type database. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n",
                        "willReplaceOnChanges": true
                    },
                    "listProperties": {
                        "$ref": "#/types/materialize:index/TypeListProperties:TypeListProperties",
                        "description": "List properties.\n",
                        "willReplaceOnChanges": true
                    },
                    "mapProperties": {
                        "$ref": "#/types/materialize:index/TypeMapProperties:TypeMapProperties",
                        "description": "Map properties.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The identifier for the type.\n",
                        "willReplaceOnChanges": true
                    },
                    "ownershipRole": {
                        "type": "string",
                        "description": "The owernship role of the object.\n"
                    },
                    "qualifiedSqlName": {
                        "type": "string",
                        "description": "The fully qualified name of the type.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                        "willReplaceOnChanges": true
                    },
                    "rowProperties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/materialize:index/TypeRowProperty:TypeRowProperty"
                        },
                        "description": "Row properties.\n",
                        "willReplaceOnChanges": true
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "The identifier for the type schema. Defaults to `public`.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/user:User": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\nconst exampleUser = new materialize.User(\"exampleUser\", {\n    email: \"example-user@example.com\",\n    roles: [\n        \"Member\",\n        \"Admin\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\nexample_user = materialize.User(\"exampleUser\",\n    email=\"example-user@example.com\",\n    roles=[\n        \"Member\",\n        \"Admin\",\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleUser = new Materialize.User(\"exampleUser\", new()\n    {\n        Email = \"example-user@example.com\",\n        Roles = new[]\n        {\n            \"Member\",\n            \"Admin\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.NewUser(ctx, \"exampleUser\", \u0026materialize.UserArgs{\n\t\t\tEmail: pulumi.String(\"example-user@example.com\"),\n\t\t\tRoles: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"Member\"),\n\t\t\t\tpulumi.String(\"Admin\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.User;\nimport com.pulumi.materialize.UserArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleUser = new User(\"exampleUser\", UserArgs.builder()        \n            .email(\"example-user@example.com\")\n            .roles(            \n                \"Member\",\n                \"Admin\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleUser:\n    type: materialize:User\n    properties:\n      email: example-user@example.com\n      roles:\n        - Member\n        - Admin\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nUsers can be imported using the user id\n\n```sh\n $ pulumi import materialize:index/user:User example_user \u003cuser_id\u003e\n```\n\n ",
            "properties": {
                "authProvider": {
                    "type": "string",
                    "description": "The authentication provider for the user.\n"
                },
                "email": {
                    "type": "string",
                    "description": "The email address of the user. This must be unique across all users in the organization.\n"
                },
                "metadata": {
                    "type": "string"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The roles to assign to the user. Allowed values are 'Member' and 'Admin'.\n"
                },
                "verified": {
                    "type": "boolean"
                }
            },
            "required": [
                "authProvider",
                "email",
                "metadata",
                "roles",
                "verified"
            ],
            "inputProperties": {
                "email": {
                    "type": "string",
                    "description": "The email address of the user. This must be unique across all users in the organization.\n",
                    "willReplaceOnChanges": true
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The roles to assign to the user. Allowed values are 'Member' and 'Admin'.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "email",
                "roles"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering User resources.\n",
                "properties": {
                    "authProvider": {
                        "type": "string",
                        "description": "The authentication provider for the user.\n"
                    },
                    "email": {
                        "type": "string",
                        "description": "The email address of the user. This must be unique across all users in the organization.\n",
                        "willReplaceOnChanges": true
                    },
                    "metadata": {
                        "type": "string"
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The roles to assign to the user. Allowed values are 'Member' and 'Admin'.\n",
                        "willReplaceOnChanges": true
                    },
                    "verified": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            }
        },
        "materialize:index/view:View": {
            "description": "Views represent queries of sources and other views that you want to save for repeated execution.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\nconst simpleViewView = new materialize.View(\"simpleViewView\", {\n    schemaName: materialize_schema.schema.name,\n    databaseName: materialize_database.database.name,\n    statement: `SELECT\n    *\nFROM\n    ${materialize_table.simple_table.qualified_name}\n`,\n}, {\n    dependsOn: [materialize_table.simple_table],\n});\nconst simpleViewIndex_viewView = new materialize.View(\"simpleViewIndex/viewView\", {\n    schemaName: materialize_schema.schema.name,\n    databaseName: materialize_database.database.name,\n    statement: \"SELECT * FROM materialize.public.simple_table\",\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\nsimple_view_view = materialize.View(\"simpleViewView\",\n    schema_name=materialize_schema[\"schema\"][\"name\"],\n    database_name=materialize_database[\"database\"][\"name\"],\n    statement=f\"\"\"SELECT\n    *\nFROM\n    {materialize_table[\"simple_table\"][\"qualified_name\"]}\n\"\"\",\n    opts=pulumi.ResourceOptions(depends_on=[materialize_table[\"simple_table\"]]))\nsimple_view_index_view_view = materialize.View(\"simpleViewIndex/viewView\",\n    schema_name=materialize_schema[\"schema\"][\"name\"],\n    database_name=materialize_database[\"database\"][\"name\"],\n    statement=\"SELECT * FROM materialize.public.simple_table\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var simpleViewView = new Materialize.View(\"simpleViewView\", new()\n    {\n        SchemaName = materialize_schema.Schema.Name,\n        DatabaseName = materialize_database.Database.Name,\n        Statement = @$\"SELECT\n    *\nFROM\n    {materialize_table.Simple_table.Qualified_name}\n\",\n    }, new CustomResourceOptions\n    {\n        DependsOn = new[]\n        {\n            materialize_table.Simple_table,\n        },\n    });\n\n    var simpleViewIndex_viewView = new Materialize.View(\"simpleViewIndex/viewView\", new()\n    {\n        SchemaName = materialize_schema.Schema.Name,\n        DatabaseName = materialize_database.Database.Name,\n        Statement = \"SELECT * FROM materialize.public.simple_table\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.NewView(ctx, \"simpleViewView\", \u0026materialize.ViewArgs{\n\t\t\tSchemaName:   pulumi.Any(materialize_schema.Schema.Name),\n\t\t\tDatabaseName: pulumi.Any(materialize_database.Database.Name),\n\t\t\tStatement:    pulumi.String(fmt.Sprintf(\"SELECT\\n    *\\nFROM\\n    %v\\n\", materialize_table.Simple_table.Qualified_name)),\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\tmaterialize_table.Simple_table,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = materialize.NewView(ctx, \"simpleViewIndex/viewView\", \u0026materialize.ViewArgs{\n\t\t\tSchemaName:   pulumi.Any(materialize_schema.Schema.Name),\n\t\t\tDatabaseName: pulumi.Any(materialize_database.Database.Name),\n\t\t\tStatement:    pulumi.String(\"SELECT * FROM materialize.public.simple_table\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.View;\nimport com.pulumi.materialize.ViewArgs;\nimport com.pulumi.resources.CustomResourceOptions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var simpleViewView = new View(\"simpleViewView\", ViewArgs.builder()        \n            .schemaName(materialize_schema.schema().name())\n            .databaseName(materialize_database.database().name())\n            .statement(\"\"\"\nSELECT\n    *\nFROM\n    %s\n\", materialize_table.simple_table().qualified_name()))\n            .build(), CustomResourceOptions.builder()\n                .dependsOn(materialize_table.simple_table())\n                .build());\n\n        var simpleViewIndex_viewView = new View(\"simpleViewIndex/viewView\", ViewArgs.builder()        \n            .schemaName(materialize_schema.schema().name())\n            .databaseName(materialize_database.database().name())\n            .statement(\"SELECT * FROM materialize.public.simple_table\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  simpleViewView:\n    type: materialize:View\n    properties:\n      schemaName: ${materialize_schema.schema.name}\n      databaseName: ${materialize_database.database.name}\n      statement: |\n        SELECT\n            *\n        FROM\n            ${materialize_table.simple_table.qualified_name}\n    options:\n      dependson:\n        - ${materialize_table.simple_table}\n  simpleViewIndex/viewView:\n    type: materialize:View\n    properties:\n      schemaName: ${materialize_schema.schema.name}\n      databaseName: ${materialize_database.database.name}\n      statement: SELECT * FROM materialize.public.simple_table\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nViews can be imported using the view id\n\n```sh\n $ pulumi import materialize:index/view:View example_view \u003cregion\u003e:\u003cview_id\u003e\n```\n\n View id and information be found in the `mz_catalog.mz_views` The region is the region where the database is located (e.g. aws/us-east-1) ",
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "**Public Preview** Comment on an object in the database.\n"
                },
                "createSql": {
                    "type": "string",
                    "description": "The SQL statement used to create the view.\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the view database. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the view.\n"
                },
                "ownershipRole": {
                    "type": "string",
                    "description": "The owernship role of the object.\n"
                },
                "qualifiedSqlName": {
                    "type": "string",
                    "description": "The fully qualified name of the view.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the view schema. Defaults to `public`.\n"
                },
                "statement": {
                    "type": "string",
                    "description": "The SQL statement for the view.\n"
                }
            },
            "required": [
                "createSql",
                "name",
                "ownershipRole",
                "qualifiedSqlName",
                "statement"
            ],
            "inputProperties": {
                "comment": {
                    "type": "string",
                    "description": "**Public Preview** Comment on an object in the database.\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "The identifier for the view database. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The identifier for the view.\n"
                },
                "ownershipRole": {
                    "type": "string",
                    "description": "The owernship role of the object.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                    "willReplaceOnChanges": true
                },
                "schemaName": {
                    "type": "string",
                    "description": "The identifier for the view schema. Defaults to `public`.\n",
                    "willReplaceOnChanges": true
                },
                "statement": {
                    "type": "string",
                    "description": "The SQL statement for the view.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "statement"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering View resources.\n",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "**Public Preview** Comment on an object in the database.\n"
                    },
                    "createSql": {
                        "type": "string",
                        "description": "The SQL statement used to create the view.\n"
                    },
                    "databaseName": {
                        "type": "string",
                        "description": "The identifier for the view database. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The identifier for the view.\n"
                    },
                    "ownershipRole": {
                        "type": "string",
                        "description": "The owernship role of the object.\n"
                    },
                    "qualifiedSqlName": {
                        "type": "string",
                        "description": "The fully qualified name of the view.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to use for the resource connection. If not set, the default region is used.\n",
                        "willReplaceOnChanges": true
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "The identifier for the view schema. Defaults to `public`.\n",
                        "willReplaceOnChanges": true
                    },
                    "statement": {
                        "type": "string",
                        "description": "The SQL statement for the view.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "materialize:index/getClusterReplicas:GetClusterReplicas": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\nconst all = materialize.GetClusterReplicas({});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\nall = materialize.get_cluster_replicas()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var all = Materialize.GetClusterReplicas.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.GetClusterReplicas(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.MaterializeFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var all = MaterializeFunctions.GetClusterReplicas();\n\n    }\n}\n```\n```yaml\nvariables:\n  all:\n    fn::invoke:\n      Function: materialize:GetClusterReplicas\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by GetClusterReplicas.\n",
                "properties": {
                    "clusterReplicas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/materialize:index/GetClusterReplicasClusterReplica:GetClusterReplicasClusterReplica"
                        },
                        "description": "The cluster replicas in the account\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region in which the resource is located.\n"
                    }
                },
                "type": "object",
                "required": [
                    "clusterReplicas",
                    "region",
                    "id"
                ]
            }
        },
        "materialize:index/getClusters:GetClusters": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\nconst all = materialize.GetClusters({});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\nall = materialize.get_clusters()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var all = Materialize.GetClusters.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.GetClusters(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.MaterializeFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var all = MaterializeFunctions.GetClusters();\n\n    }\n}\n```\n```yaml\nvariables:\n  all:\n    fn::invoke:\n      Function: materialize:GetClusters\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by GetClusters.\n",
                "properties": {
                    "clusters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/materialize:index/GetClustersCluster:GetClustersCluster"
                        },
                        "description": "The clusters in the account\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region in which the resource is located.\n"
                    }
                },
                "type": "object",
                "required": [
                    "clusters",
                    "region",
                    "id"
                ]
            }
        },
        "materialize:index/getConnections:GetConnections": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\nconst all = materialize.GetConnections({});\nconst materialize = materialize.GetConnections({\n    databaseName: \"materialize\",\n});\nconst materializeSchema = materialize.GetConnections({\n    databaseName: \"materialize\",\n    schemaName: \"schema\",\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\nall = materialize.get_connections()\nmaterialize = materialize.get_connections(database_name=\"materialize\")\nmaterialize_schema = materialize.get_connections(database_name=\"materialize\",\n    schema_name=\"schema\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var all = Materialize.GetConnections.Invoke();\n\n    var materialize = Materialize.GetConnections.Invoke(new()\n    {\n        DatabaseName = \"materialize\",\n    });\n\n    var materializeSchema = Materialize.GetConnections.Invoke(new()\n    {\n        DatabaseName = \"materialize\",\n        SchemaName = \"schema\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.GetConnections(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = materialize.GetConnections(ctx, \u0026materialize.GetConnectionsArgs{\n\t\t\tDatabaseName: pulumi.StringRef(\"materialize\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = materialize.GetConnections(ctx, \u0026materialize.GetConnectionsArgs{\n\t\t\tDatabaseName: pulumi.StringRef(\"materialize\"),\n\t\t\tSchemaName:   pulumi.StringRef(\"schema\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.MaterializeFunctions;\nimport com.pulumi.materialize.inputs.GetConnectionsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var all = MaterializeFunctions.GetConnections();\n\n        final var materialize = MaterializeFunctions.GetConnections(GetConnectionsArgs.builder()\n            .databaseName(\"materialize\")\n            .build());\n\n        final var materializeSchema = MaterializeFunctions.GetConnections(GetConnectionsArgs.builder()\n            .databaseName(\"materialize\")\n            .schemaName(\"schema\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  all:\n    fn::invoke:\n      Function: materialize:GetConnections\n      Arguments: {}\n  materialize:\n    fn::invoke:\n      Function: materialize:GetConnections\n      Arguments:\n        databaseName: materialize\n  materializeSchema:\n    fn::invoke:\n      Function: materialize:GetConnections\n      Arguments:\n        databaseName: materialize\n        schemaName: schema\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking GetConnections.\n",
                "properties": {
                    "databaseName": {
                        "type": "string",
                        "description": "Limit connections to a specific database\n"
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "Limit connections to a specific schema within a specific database\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by GetConnections.\n",
                "properties": {
                    "connections": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/materialize:index/GetConnectionsConnection:GetConnectionsConnection"
                        },
                        "description": "The connections in the account\n"
                    },
                    "databaseName": {
                        "type": "string",
                        "description": "Limit connections to a specific database\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region in which the resource is located.\n"
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "Limit connections to a specific schema within a specific database\n"
                    }
                },
                "type": "object",
                "required": [
                    "connections",
                    "region",
                    "id"
                ]
            }
        },
        "materialize:index/getCurrentCluster:GetCurrentCluster": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\nconst current = materialize.GetCurrentCluster({});\nexport const clusterName = current.then(current =\u003e current.name);\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\ncurrent = materialize.get_current_cluster()\npulumi.export(\"clusterName\", current.name)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var current = Materialize.GetCurrentCluster.Invoke();\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"clusterName\"] = current.Apply(getCurrentClusterResult =\u003e getCurrentClusterResult.Name),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcurrent, err := materialize.GetCurrentCluster(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"clusterName\", current.Name)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.MaterializeFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var current = MaterializeFunctions.GetCurrentCluster();\n\n        ctx.export(\"clusterName\", current.applyValue(getCurrentClusterResult -\u003e getCurrentClusterResult.name()));\n    }\n}\n```\n```yaml\nvariables:\n  current:\n    fn::invoke:\n      Function: materialize:GetCurrentCluster\n      Arguments: {}\noutputs:\n  clusterName: ${current.name}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by GetCurrentCluster.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region in which the resource is located.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "region",
                    "id"
                ]
            }
        },
        "materialize:index/getCurrentDatabase:GetCurrentDatabase": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\nconst current = materialize.GetCurrentDatabase({});\nexport const databaseName = current.then(current =\u003e current.name);\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\ncurrent = materialize.get_current_database()\npulumi.export(\"databaseName\", current.name)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var current = Materialize.GetCurrentDatabase.Invoke();\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"databaseName\"] = current.Apply(getCurrentDatabaseResult =\u003e getCurrentDatabaseResult.Name),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcurrent, err := materialize.GetCurrentDatabase(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"databaseName\", current.Name)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.MaterializeFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var current = MaterializeFunctions.GetCurrentDatabase();\n\n        ctx.export(\"databaseName\", current.applyValue(getCurrentDatabaseResult -\u003e getCurrentDatabaseResult.name()));\n    }\n}\n```\n```yaml\nvariables:\n  current:\n    fn::invoke:\n      Function: materialize:GetCurrentDatabase\n      Arguments: {}\noutputs:\n  databaseName: ${current.name}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by GetCurrentDatabase.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region in which the resource is located.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "region",
                    "id"
                ]
            }
        },
        "materialize:index/getDatabases:GetDatabases": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\nconst all = materialize.GetDatabases({});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\nall = materialize.get_databases()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var all = Materialize.GetDatabases.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.GetDatabases(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.MaterializeFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var all = MaterializeFunctions.GetDatabases();\n\n    }\n}\n```\n```yaml\nvariables:\n  all:\n    fn::invoke:\n      Function: materialize:GetDatabases\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by GetDatabases.\n",
                "properties": {
                    "databases": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/materialize:index/GetDatabasesDatabase:GetDatabasesDatabase"
                        },
                        "description": "The databases in the account\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region in which the resource is located.\n"
                    }
                },
                "type": "object",
                "required": [
                    "databases",
                    "region",
                    "id"
                ]
            }
        },
        "materialize:index/getEgressIps:GetEgressIps": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\nconst all = materialize.GetEgressIps({});\nexport const ips = all.then(all =\u003e all.egressIps);\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\nall = materialize.get_egress_ips()\npulumi.export(\"ips\", all.egress_ips)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var all = Materialize.GetEgressIps.Invoke();\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"ips\"] = all.Apply(getEgressIpsResult =\u003e getEgressIpsResult.EgressIps),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tall, err := materialize.GetEgressIps(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"ips\", all.EgressIps)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.MaterializeFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var all = MaterializeFunctions.GetEgressIps();\n\n        ctx.export(\"ips\", all.applyValue(getEgressIpsResult -\u003e getEgressIpsResult.egressIps()));\n    }\n}\n```\n```yaml\nvariables:\n  all:\n    fn::invoke:\n      Function: materialize:GetEgressIps\n      Arguments: {}\noutputs:\n  ips: ${all.egressIps}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by GetEgressIps.\n",
                "properties": {
                    "egressIps": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The egress IPs in the account\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region in which the resource is located.\n"
                    }
                },
                "type": "object",
                "required": [
                    "egressIps",
                    "region",
                    "id"
                ]
            }
        },
        "materialize:index/getIndexes:GetIndexes": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\nconst all = materialize.GetIndexes({});\nconst materialize = materialize.GetIndexes({\n    databaseName: \"materialize\",\n});\nconst materializeSchema = materialize.GetIndexes({\n    databaseName: \"materialize\",\n    schemaName: \"schema\",\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\nall = materialize.get_indexes()\nmaterialize = materialize.get_indexes(database_name=\"materialize\")\nmaterialize_schema = materialize.get_indexes(database_name=\"materialize\",\n    schema_name=\"schema\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var all = Materialize.GetIndexes.Invoke();\n\n    var materialize = Materialize.GetIndexes.Invoke(new()\n    {\n        DatabaseName = \"materialize\",\n    });\n\n    var materializeSchema = Materialize.GetIndexes.Invoke(new()\n    {\n        DatabaseName = \"materialize\",\n        SchemaName = \"schema\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.GetIndexes(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = materialize.GetIndexes(ctx, \u0026materialize.GetIndexesArgs{\n\t\t\tDatabaseName: pulumi.StringRef(\"materialize\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = materialize.GetIndexes(ctx, \u0026materialize.GetIndexesArgs{\n\t\t\tDatabaseName: pulumi.StringRef(\"materialize\"),\n\t\t\tSchemaName:   pulumi.StringRef(\"schema\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.MaterializeFunctions;\nimport com.pulumi.materialize.inputs.GetIndexesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var all = MaterializeFunctions.GetIndexes();\n\n        final var materialize = MaterializeFunctions.GetIndexes(GetIndexesArgs.builder()\n            .databaseName(\"materialize\")\n            .build());\n\n        final var materializeSchema = MaterializeFunctions.GetIndexes(GetIndexesArgs.builder()\n            .databaseName(\"materialize\")\n            .schemaName(\"schema\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  all:\n    fn::invoke:\n      Function: materialize:GetIndexes\n      Arguments: {}\n  materialize:\n    fn::invoke:\n      Function: materialize:GetIndexes\n      Arguments:\n        databaseName: materialize\n  materializeSchema:\n    fn::invoke:\n      Function: materialize:GetIndexes\n      Arguments:\n        databaseName: materialize\n        schemaName: schema\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking GetIndexes.\n",
                "properties": {
                    "databaseName": {
                        "type": "string",
                        "description": "Limit indexes to a specific database\n"
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "Limit indexes to a specific schema within a specific database\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by GetIndexes.\n",
                "properties": {
                    "databaseName": {
                        "type": "string",
                        "description": "Limit indexes to a specific database\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "indexes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/materialize:index/GetIndexesIndex:GetIndexesIndex"
                        },
                        "description": "The indexes in the account\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region in which the resource is located.\n"
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "Limit indexes to a specific schema within a specific database\n"
                    }
                },
                "type": "object",
                "required": [
                    "indexes",
                    "region",
                    "id"
                ]
            }
        },
        "materialize:index/getMaterializedViews:GetMaterializedViews": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\nconst all = materialize.GetMaterializedViews({});\nconst materialize = materialize.GetMaterializedViews({\n    databaseName: \"materialize\",\n});\nconst materializeSchema = materialize.GetMaterializedViews({\n    databaseName: \"materialize\",\n    schemaName: \"schema\",\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\nall = materialize.get_materialized_views()\nmaterialize = materialize.get_materialized_views(database_name=\"materialize\")\nmaterialize_schema = materialize.get_materialized_views(database_name=\"materialize\",\n    schema_name=\"schema\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var all = Materialize.GetMaterializedViews.Invoke();\n\n    var materialize = Materialize.GetMaterializedViews.Invoke(new()\n    {\n        DatabaseName = \"materialize\",\n    });\n\n    var materializeSchema = Materialize.GetMaterializedViews.Invoke(new()\n    {\n        DatabaseName = \"materialize\",\n        SchemaName = \"schema\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.GetMaterializedViews(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = materialize.GetMaterializedViews(ctx, \u0026materialize.GetMaterializedViewsArgs{\n\t\t\tDatabaseName: pulumi.StringRef(\"materialize\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = materialize.GetMaterializedViews(ctx, \u0026materialize.GetMaterializedViewsArgs{\n\t\t\tDatabaseName: pulumi.StringRef(\"materialize\"),\n\t\t\tSchemaName:   pulumi.StringRef(\"schema\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.MaterializeFunctions;\nimport com.pulumi.materialize.inputs.GetMaterializedViewsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var all = MaterializeFunctions.GetMaterializedViews();\n\n        final var materialize = MaterializeFunctions.GetMaterializedViews(GetMaterializedViewsArgs.builder()\n            .databaseName(\"materialize\")\n            .build());\n\n        final var materializeSchema = MaterializeFunctions.GetMaterializedViews(GetMaterializedViewsArgs.builder()\n            .databaseName(\"materialize\")\n            .schemaName(\"schema\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  all:\n    fn::invoke:\n      Function: materialize:GetMaterializedViews\n      Arguments: {}\n  materialize:\n    fn::invoke:\n      Function: materialize:GetMaterializedViews\n      Arguments:\n        databaseName: materialize\n  materializeSchema:\n    fn::invoke:\n      Function: materialize:GetMaterializedViews\n      Arguments:\n        databaseName: materialize\n        schemaName: schema\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking GetMaterializedViews.\n",
                "properties": {
                    "databaseName": {
                        "type": "string",
                        "description": "Limit materialized views to a specific database\n"
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "Limit materialized views to a specific schema within a specific database\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by GetMaterializedViews.\n",
                "properties": {
                    "databaseName": {
                        "type": "string",
                        "description": "Limit materialized views to a specific database\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "materializedViews": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/materialize:index/GetMaterializedViewsMaterializedView:GetMaterializedViewsMaterializedView"
                        },
                        "description": "The materialized views in the account\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region in which the resource is located.\n"
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "Limit materialized views to a specific schema within a specific database\n"
                    }
                },
                "type": "object",
                "required": [
                    "materializedViews",
                    "region",
                    "id"
                ]
            }
        },
        "materialize:index/getRoles:GetRoles": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\nconst all = materialize.GetRoles({});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\nall = materialize.get_roles()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var all = Materialize.GetRoles.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.GetRoles(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.MaterializeFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var all = MaterializeFunctions.GetRoles();\n\n    }\n}\n```\n```yaml\nvariables:\n  all:\n    fn::invoke:\n      Function: materialize:GetRoles\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by GetRoles.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region in which the resource is located.\n"
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/materialize:index/GetRolesRole:GetRolesRole"
                        },
                        "description": "The roles in the account\n"
                    }
                },
                "type": "object",
                "required": [
                    "region",
                    "roles",
                    "id"
                ]
            }
        },
        "materialize:index/getSCIMConfigs:GetSCIMConfigs": {
            "outputs": {
                "description": "A collection of values returned by GetSCIMConfigs.\n",
                "properties": {
                    "configurations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/materialize:index/GetSCIMConfigsConfiguration:GetSCIMConfigsConfiguration"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "configurations",
                    "id"
                ]
            }
        },
        "materialize:index/getSCIMGroups:GetSCIMGroups": {
            "outputs": {
                "description": "A collection of values returned by GetSCIMGroups.\n",
                "properties": {
                    "groups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/materialize:index/GetSCIMGroupsGroup:GetSCIMGroupsGroup"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "groups",
                    "id"
                ]
            }
        },
        "materialize:index/getSSOConfig:GetSSOConfig": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\nconst all = materialize.GetSSOConfig({});\nexport const ssoConfigs = all.then(all =\u003e all.ssoConfigs);\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\nall = materialize.get_sso_config()\npulumi.export(\"ssoConfigs\", all.sso_configs)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var all = Materialize.GetSSOConfig.Invoke();\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"ssoConfigs\"] = all.Apply(getSSOConfigResult =\u003e getSSOConfigResult.SsoConfigs),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tall, err := materialize.GetSSOConfig(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"ssoConfigs\", all.SsoConfigs)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.MaterializeFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var all = MaterializeFunctions.GetSSOConfig();\n\n        ctx.export(\"ssoConfigs\", all.applyValue(getSSOConfigResult -\u003e getSSOConfigResult.ssoConfigs()));\n    }\n}\n```\n```yaml\nvariables:\n  all:\n    fn::invoke:\n      Function: materialize:GetSSOConfig\n      Arguments: {}\noutputs:\n  ssoConfigs: ${all.ssoConfigs}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by GetSSOConfig.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ssoConfigs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/materialize:index/GetSSOConfigSsoConfig:GetSSOConfigSsoConfig"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "ssoConfigs",
                    "id"
                ]
            }
        },
        "materialize:index/getSchemas:GetSchemas": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\nconst all = materialize.GetSchemas({});\nconst materialize = materialize.GetSchemas({\n    databaseName: \"materialize\",\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\nall = materialize.get_schemas()\nmaterialize = materialize.get_schemas(database_name=\"materialize\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var all = Materialize.GetSchemas.Invoke();\n\n    var materialize = Materialize.GetSchemas.Invoke(new()\n    {\n        DatabaseName = \"materialize\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.GetSchemas(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = materialize.GetSchemas(ctx, \u0026materialize.GetSchemasArgs{\n\t\t\tDatabaseName: pulumi.StringRef(\"materialize\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.MaterializeFunctions;\nimport com.pulumi.materialize.inputs.GetSchemasArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var all = MaterializeFunctions.GetSchemas();\n\n        final var materialize = MaterializeFunctions.GetSchemas(GetSchemasArgs.builder()\n            .databaseName(\"materialize\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  all:\n    fn::invoke:\n      Function: materialize:GetSchemas\n      Arguments: {}\n  materialize:\n    fn::invoke:\n      Function: materialize:GetSchemas\n      Arguments:\n        databaseName: materialize\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking GetSchemas.\n",
                "properties": {
                    "databaseName": {
                        "type": "string",
                        "description": "Limit schemas to a specific database\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by GetSchemas.\n",
                "properties": {
                    "databaseName": {
                        "type": "string",
                        "description": "Limit schemas to a specific database\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region in which the resource is located.\n"
                    },
                    "schemas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/materialize:index/GetSchemasSchema:GetSchemasSchema"
                        },
                        "description": "The schemas in the account\n"
                    }
                },
                "type": "object",
                "required": [
                    "region",
                    "schemas",
                    "id"
                ]
            }
        },
        "materialize:index/getSecrets:GetSecrets": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\nconst all = materialize.GetSecrets({});\nconst materialize = materialize.GetSecrets({\n    databaseName: \"materialize\",\n});\nconst materializeSchema = materialize.GetSecrets({\n    databaseName: \"materialize\",\n    schemaName: \"schema\",\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\nall = materialize.get_secrets()\nmaterialize = materialize.get_secrets(database_name=\"materialize\")\nmaterialize_schema = materialize.get_secrets(database_name=\"materialize\",\n    schema_name=\"schema\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var all = Materialize.GetSecrets.Invoke();\n\n    var materialize = Materialize.GetSecrets.Invoke(new()\n    {\n        DatabaseName = \"materialize\",\n    });\n\n    var materializeSchema = Materialize.GetSecrets.Invoke(new()\n    {\n        DatabaseName = \"materialize\",\n        SchemaName = \"schema\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.GetSecrets(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = materialize.GetSecrets(ctx, \u0026materialize.GetSecretsArgs{\n\t\t\tDatabaseName: pulumi.StringRef(\"materialize\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = materialize.GetSecrets(ctx, \u0026materialize.GetSecretsArgs{\n\t\t\tDatabaseName: pulumi.StringRef(\"materialize\"),\n\t\t\tSchemaName:   pulumi.StringRef(\"schema\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.MaterializeFunctions;\nimport com.pulumi.materialize.inputs.GetSecretsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var all = MaterializeFunctions.GetSecrets();\n\n        final var materialize = MaterializeFunctions.GetSecrets(GetSecretsArgs.builder()\n            .databaseName(\"materialize\")\n            .build());\n\n        final var materializeSchema = MaterializeFunctions.GetSecrets(GetSecretsArgs.builder()\n            .databaseName(\"materialize\")\n            .schemaName(\"schema\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  all:\n    fn::invoke:\n      Function: materialize:GetSecrets\n      Arguments: {}\n  materialize:\n    fn::invoke:\n      Function: materialize:GetSecrets\n      Arguments:\n        databaseName: materialize\n  materializeSchema:\n    fn::invoke:\n      Function: materialize:GetSecrets\n      Arguments:\n        databaseName: materialize\n        schemaName: schema\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking GetSecrets.\n",
                "properties": {
                    "databaseName": {
                        "type": "string",
                        "description": "Limit secrets to a specific database\n"
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "Limit secrets to a specific schema within a specific database\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by GetSecrets.\n",
                "properties": {
                    "databaseName": {
                        "type": "string",
                        "description": "Limit secrets to a specific database\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region in which the resource is located.\n"
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "Limit secrets to a specific schema within a specific database\n"
                    },
                    "secrets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/materialize:index/GetSecretsSecret:GetSecretsSecret"
                        },
                        "description": "The secrets in the account\n"
                    }
                },
                "type": "object",
                "required": [
                    "region",
                    "secrets",
                    "id"
                ]
            }
        },
        "materialize:index/getSinks:GetSinks": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\nconst all = materialize.GetSinks({});\nconst materialize = materialize.GetSinks({\n    databaseName: \"materialize\",\n});\nconst materializeSchema = materialize.GetSinks({\n    databaseName: \"materialize\",\n    schemaName: \"schema\",\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\nall = materialize.get_sinks()\nmaterialize = materialize.get_sinks(database_name=\"materialize\")\nmaterialize_schema = materialize.get_sinks(database_name=\"materialize\",\n    schema_name=\"schema\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var all = Materialize.GetSinks.Invoke();\n\n    var materialize = Materialize.GetSinks.Invoke(new()\n    {\n        DatabaseName = \"materialize\",\n    });\n\n    var materializeSchema = Materialize.GetSinks.Invoke(new()\n    {\n        DatabaseName = \"materialize\",\n        SchemaName = \"schema\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.GetSinks(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = materialize.GetSinks(ctx, \u0026materialize.GetSinksArgs{\n\t\t\tDatabaseName: pulumi.StringRef(\"materialize\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = materialize.GetSinks(ctx, \u0026materialize.GetSinksArgs{\n\t\t\tDatabaseName: pulumi.StringRef(\"materialize\"),\n\t\t\tSchemaName:   pulumi.StringRef(\"schema\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.MaterializeFunctions;\nimport com.pulumi.materialize.inputs.GetSinksArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var all = MaterializeFunctions.GetSinks();\n\n        final var materialize = MaterializeFunctions.GetSinks(GetSinksArgs.builder()\n            .databaseName(\"materialize\")\n            .build());\n\n        final var materializeSchema = MaterializeFunctions.GetSinks(GetSinksArgs.builder()\n            .databaseName(\"materialize\")\n            .schemaName(\"schema\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  all:\n    fn::invoke:\n      Function: materialize:GetSinks\n      Arguments: {}\n  materialize:\n    fn::invoke:\n      Function: materialize:GetSinks\n      Arguments:\n        databaseName: materialize\n  materializeSchema:\n    fn::invoke:\n      Function: materialize:GetSinks\n      Arguments:\n        databaseName: materialize\n        schemaName: schema\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking GetSinks.\n",
                "properties": {
                    "databaseName": {
                        "type": "string",
                        "description": "Limit sinks to a specific database\n"
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "Limit sinks to a specific schema within a specific database\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by GetSinks.\n",
                "properties": {
                    "databaseName": {
                        "type": "string",
                        "description": "Limit sinks to a specific database\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region in which the resource is located.\n"
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "Limit sinks to a specific schema within a specific database\n"
                    },
                    "sinks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/materialize:index/GetSinksSink:GetSinksSink"
                        },
                        "description": "The sinks in the account\n"
                    }
                },
                "type": "object",
                "required": [
                    "region",
                    "sinks",
                    "id"
                ]
            }
        },
        "materialize:index/getSources:GetSources": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\nconst all = materialize.GetSources({});\nconst materialize = materialize.GetSources({\n    databaseName: \"materialize\",\n});\nconst materializeSchema = materialize.GetSources({\n    databaseName: \"materialize\",\n    schemaName: \"schema\",\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\nall = materialize.get_sources()\nmaterialize = materialize.get_sources(database_name=\"materialize\")\nmaterialize_schema = materialize.get_sources(database_name=\"materialize\",\n    schema_name=\"schema\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var all = Materialize.GetSources.Invoke();\n\n    var materialize = Materialize.GetSources.Invoke(new()\n    {\n        DatabaseName = \"materialize\",\n    });\n\n    var materializeSchema = Materialize.GetSources.Invoke(new()\n    {\n        DatabaseName = \"materialize\",\n        SchemaName = \"schema\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.GetSources(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = materialize.GetSources(ctx, \u0026materialize.GetSourcesArgs{\n\t\t\tDatabaseName: pulumi.StringRef(\"materialize\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = materialize.GetSources(ctx, \u0026materialize.GetSourcesArgs{\n\t\t\tDatabaseName: pulumi.StringRef(\"materialize\"),\n\t\t\tSchemaName:   pulumi.StringRef(\"schema\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.MaterializeFunctions;\nimport com.pulumi.materialize.inputs.GetSourcesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var all = MaterializeFunctions.GetSources();\n\n        final var materialize = MaterializeFunctions.GetSources(GetSourcesArgs.builder()\n            .databaseName(\"materialize\")\n            .build());\n\n        final var materializeSchema = MaterializeFunctions.GetSources(GetSourcesArgs.builder()\n            .databaseName(\"materialize\")\n            .schemaName(\"schema\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  all:\n    fn::invoke:\n      Function: materialize:GetSources\n      Arguments: {}\n  materialize:\n    fn::invoke:\n      Function: materialize:GetSources\n      Arguments:\n        databaseName: materialize\n  materializeSchema:\n    fn::invoke:\n      Function: materialize:GetSources\n      Arguments:\n        databaseName: materialize\n        schemaName: schema\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking GetSources.\n",
                "properties": {
                    "databaseName": {
                        "type": "string",
                        "description": "Limit sources to a specific database\n"
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "Limit sources to a specific schema within a specific database\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by GetSources.\n",
                "properties": {
                    "databaseName": {
                        "type": "string",
                        "description": "Limit sources to a specific database\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region in which the resource is located.\n"
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "Limit sources to a specific schema within a specific database\n"
                    },
                    "sources": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/materialize:index/GetSourcesSource:GetSourcesSource"
                        },
                        "description": "The sources in the account\n"
                    }
                },
                "type": "object",
                "required": [
                    "region",
                    "sources",
                    "id"
                ]
            }
        },
        "materialize:index/getTables:GetTables": {
            "inputs": {
                "description": "A collection of arguments for invoking GetTables.\n",
                "properties": {
                    "databaseName": {
                        "type": "string",
                        "description": "Limit tables to a specific database\n"
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "Limit tables to a specific schema within a specific database\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by GetTables.\n",
                "properties": {
                    "databaseName": {
                        "type": "string",
                        "description": "Limit tables to a specific database\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region in which the resource is located.\n"
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "Limit tables to a specific schema within a specific database\n"
                    },
                    "tables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/materialize:index/GetTablesTable:GetTablesTable"
                        },
                        "description": "The tables in the account\n"
                    }
                },
                "type": "object",
                "required": [
                    "region",
                    "tables",
                    "id"
                ]
            }
        },
        "materialize:index/getTypes:GetTypes": {
            "inputs": {
                "description": "A collection of arguments for invoking GetTypes.\n",
                "properties": {
                    "databaseName": {
                        "type": "string",
                        "description": "Limit types to a specific database\n"
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "Limit types to a specific schema within a specific database\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by GetTypes.\n",
                "properties": {
                    "databaseName": {
                        "type": "string",
                        "description": "Limit types to a specific database\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region in which the resource is located.\n"
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "Limit types to a specific schema within a specific database\n"
                    },
                    "types": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/materialize:index/GetTypesType:GetTypesType"
                        },
                        "description": "The types in the account\n"
                    }
                },
                "type": "object",
                "required": [
                    "region",
                    "types",
                    "id"
                ]
            }
        },
        "materialize:index/getViews:GetViews": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\nconst all = materialize.GetViews({});\nconst materialize = materialize.GetViews({\n    databaseName: \"materialize\",\n});\nconst materializeSchema = materialize.GetViews({\n    databaseName: \"materialize\",\n    schemaName: \"schema\",\n});\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\nall = materialize.get_views()\nmaterialize = materialize.get_views(database_name=\"materialize\")\nmaterialize_schema = materialize.get_views(database_name=\"materialize\",\n    schema_name=\"schema\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var all = Materialize.GetViews.Invoke();\n\n    var materialize = Materialize.GetViews.Invoke(new()\n    {\n        DatabaseName = \"materialize\",\n    });\n\n    var materializeSchema = Materialize.GetViews.Invoke(new()\n    {\n        DatabaseName = \"materialize\",\n        SchemaName = \"schema\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := materialize.GetViews(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = materialize.GetViews(ctx, \u0026materialize.GetViewsArgs{\n\t\t\tDatabaseName: pulumi.StringRef(\"materialize\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = materialize.GetViews(ctx, \u0026materialize.GetViewsArgs{\n\t\t\tDatabaseName: pulumi.StringRef(\"materialize\"),\n\t\t\tSchemaName:   pulumi.StringRef(\"schema\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.MaterializeFunctions;\nimport com.pulumi.materialize.inputs.GetViewsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var all = MaterializeFunctions.GetViews();\n\n        final var materialize = MaterializeFunctions.GetViews(GetViewsArgs.builder()\n            .databaseName(\"materialize\")\n            .build());\n\n        final var materializeSchema = MaterializeFunctions.GetViews(GetViewsArgs.builder()\n            .databaseName(\"materialize\")\n            .schemaName(\"schema\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  all:\n    fn::invoke:\n      Function: materialize:GetViews\n      Arguments: {}\n  materialize:\n    fn::invoke:\n      Function: materialize:GetViews\n      Arguments:\n        databaseName: materialize\n  materializeSchema:\n    fn::invoke:\n      Function: materialize:GetViews\n      Arguments:\n        databaseName: materialize\n        schemaName: schema\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking GetViews.\n",
                "properties": {
                    "databaseName": {
                        "type": "string",
                        "description": "Limit views to a specific database\n"
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "Limit views to a specific schema within a specific database\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by GetViews.\n",
                "properties": {
                    "databaseName": {
                        "type": "string",
                        "description": "Limit views to a specific database\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region in which the resource is located.\n"
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "Limit views to a specific schema within a specific database\n"
                    },
                    "views": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/materialize:index/GetViewsView:GetViewsView"
                        },
                        "description": "The views in the account\n"
                    }
                },
                "type": "object",
                "required": [
                    "region",
                    "views",
                    "id"
                ]
            }
        },
        "materialize:index/region:Region": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as materialize from \"@pulumi/materialize\";\n\nconst all = materialize.Region({});\nexport const region = all;\n```\n```python\nimport pulumi\nimport pulumi_materialize as materialize\n\nall = materialize.region()\npulumi.export(\"region\", all)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Materialize = Pulumi.Materialize;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var all = Materialize.Region.Invoke();\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"region\"] = all,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-materialize/sdk/go/materialize\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tall, err := materialize.Region(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"region\", all)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.materialize.MaterializeFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var all = MaterializeFunctions.Region();\n\n        ctx.export(\"region\", all.applyValue(regionResult -\u003e regionResult));\n    }\n}\n```\n```yaml\nvariables:\n  all:\n    fn::invoke:\n      Function: materialize:Region\n      Arguments: {}\noutputs:\n  region: ${all}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by Region.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "regions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/materialize:index/RegionRegion:RegionRegion"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "regions",
                    "id"
                ]
            }
        }
    }
}