# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ConnectionConfluentSchemaRegistryArgs', 'ConnectionConfluentSchemaRegistry']

@pulumi.input_type
class ConnectionConfluentSchemaRegistryArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str],
                 aws_privatelink: Optional[pulumi.Input['ConnectionConfluentSchemaRegistryAwsPrivatelinkArgs']] = None,
                 database_name: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input['ConnectionConfluentSchemaRegistryPasswordArgs']] = None,
                 schema_name: Optional[pulumi.Input[str]] = None,
                 ssh_tunnel: Optional[pulumi.Input['ConnectionConfluentSchemaRegistrySshTunnelArgs']] = None,
                 ssl_certificate: Optional[pulumi.Input['ConnectionConfluentSchemaRegistrySslCertificateArgs']] = None,
                 ssl_certificate_authority: Optional[pulumi.Input['ConnectionConfluentSchemaRegistrySslCertificateAuthorityArgs']] = None,
                 ssl_key: Optional[pulumi.Input['ConnectionConfluentSchemaRegistrySslKeyArgs']] = None,
                 username: Optional[pulumi.Input['ConnectionConfluentSchemaRegistryUsernameArgs']] = None):
        """
        The set of arguments for constructing a ConnectionConfluentSchemaRegistry resource.
        :param pulumi.Input[str] url: The URL of the Confluent Schema Registry.
        :param pulumi.Input['ConnectionConfluentSchemaRegistryAwsPrivatelinkArgs'] aws_privatelink: The AWS PrivateLink configuration for the Confluent Schema Registry.
        :param pulumi.Input[str] database_name: The identifier for the connection database.
        :param pulumi.Input[str] name: The identifier for the connection.
        :param pulumi.Input['ConnectionConfluentSchemaRegistryPasswordArgs'] password: The password for the Confluent Schema Registry.
        :param pulumi.Input[str] schema_name: The identifier for the connection schema.
        :param pulumi.Input['ConnectionConfluentSchemaRegistrySshTunnelArgs'] ssh_tunnel: The SSH tunnel configuration for the Confluent Schema Registry.
        :param pulumi.Input['ConnectionConfluentSchemaRegistrySslCertificateArgs'] ssl_certificate: The client certificate for the Confluent Schema Registry.
        :param pulumi.Input['ConnectionConfluentSchemaRegistrySslCertificateAuthorityArgs'] ssl_certificate_authority: The CA certificate for the Confluent Schema Registry.
        :param pulumi.Input['ConnectionConfluentSchemaRegistrySslKeyArgs'] ssl_key: The client key for the Confluent Schema Registry.
        :param pulumi.Input['ConnectionConfluentSchemaRegistryUsernameArgs'] username: The username for the Confluent Schema Registry.
        """
        pulumi.set(__self__, "url", url)
        if aws_privatelink is not None:
            pulumi.set(__self__, "aws_privatelink", aws_privatelink)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)
        if ssh_tunnel is not None:
            pulumi.set(__self__, "ssh_tunnel", ssh_tunnel)
        if ssl_certificate is not None:
            pulumi.set(__self__, "ssl_certificate", ssl_certificate)
        if ssl_certificate_authority is not None:
            pulumi.set(__self__, "ssl_certificate_authority", ssl_certificate_authority)
        if ssl_key is not None:
            pulumi.set(__self__, "ssl_key", ssl_key)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        """
        The URL of the Confluent Schema Registry.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter(name="awsPrivatelink")
    def aws_privatelink(self) -> Optional[pulumi.Input['ConnectionConfluentSchemaRegistryAwsPrivatelinkArgs']]:
        """
        The AWS PrivateLink configuration for the Confluent Schema Registry.
        """
        return pulumi.get(self, "aws_privatelink")

    @aws_privatelink.setter
    def aws_privatelink(self, value: Optional[pulumi.Input['ConnectionConfluentSchemaRegistryAwsPrivatelinkArgs']]):
        pulumi.set(self, "aws_privatelink", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[pulumi.Input[str]]:
        """
        The identifier for the connection database.
        """
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The identifier for the connection.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input['ConnectionConfluentSchemaRegistryPasswordArgs']]:
        """
        The password for the Confluent Schema Registry.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input['ConnectionConfluentSchemaRegistryPasswordArgs']]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[pulumi.Input[str]]:
        """
        The identifier for the connection schema.
        """
        return pulumi.get(self, "schema_name")

    @schema_name.setter
    def schema_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_name", value)

    @property
    @pulumi.getter(name="sshTunnel")
    def ssh_tunnel(self) -> Optional[pulumi.Input['ConnectionConfluentSchemaRegistrySshTunnelArgs']]:
        """
        The SSH tunnel configuration for the Confluent Schema Registry.
        """
        return pulumi.get(self, "ssh_tunnel")

    @ssh_tunnel.setter
    def ssh_tunnel(self, value: Optional[pulumi.Input['ConnectionConfluentSchemaRegistrySshTunnelArgs']]):
        pulumi.set(self, "ssh_tunnel", value)

    @property
    @pulumi.getter(name="sslCertificate")
    def ssl_certificate(self) -> Optional[pulumi.Input['ConnectionConfluentSchemaRegistrySslCertificateArgs']]:
        """
        The client certificate for the Confluent Schema Registry.
        """
        return pulumi.get(self, "ssl_certificate")

    @ssl_certificate.setter
    def ssl_certificate(self, value: Optional[pulumi.Input['ConnectionConfluentSchemaRegistrySslCertificateArgs']]):
        pulumi.set(self, "ssl_certificate", value)

    @property
    @pulumi.getter(name="sslCertificateAuthority")
    def ssl_certificate_authority(self) -> Optional[pulumi.Input['ConnectionConfluentSchemaRegistrySslCertificateAuthorityArgs']]:
        """
        The CA certificate for the Confluent Schema Registry.
        """
        return pulumi.get(self, "ssl_certificate_authority")

    @ssl_certificate_authority.setter
    def ssl_certificate_authority(self, value: Optional[pulumi.Input['ConnectionConfluentSchemaRegistrySslCertificateAuthorityArgs']]):
        pulumi.set(self, "ssl_certificate_authority", value)

    @property
    @pulumi.getter(name="sslKey")
    def ssl_key(self) -> Optional[pulumi.Input['ConnectionConfluentSchemaRegistrySslKeyArgs']]:
        """
        The client key for the Confluent Schema Registry.
        """
        return pulumi.get(self, "ssl_key")

    @ssl_key.setter
    def ssl_key(self, value: Optional[pulumi.Input['ConnectionConfluentSchemaRegistrySslKeyArgs']]):
        pulumi.set(self, "ssl_key", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input['ConnectionConfluentSchemaRegistryUsernameArgs']]:
        """
        The username for the Confluent Schema Registry.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input['ConnectionConfluentSchemaRegistryUsernameArgs']]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class _ConnectionConfluentSchemaRegistryState:
    def __init__(__self__, *,
                 aws_privatelink: Optional[pulumi.Input['ConnectionConfluentSchemaRegistryAwsPrivatelinkArgs']] = None,
                 connection_type: Optional[pulumi.Input[str]] = None,
                 database_name: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input['ConnectionConfluentSchemaRegistryPasswordArgs']] = None,
                 qualified_sql_name: Optional[pulumi.Input[str]] = None,
                 schema_name: Optional[pulumi.Input[str]] = None,
                 ssh_tunnel: Optional[pulumi.Input['ConnectionConfluentSchemaRegistrySshTunnelArgs']] = None,
                 ssl_certificate: Optional[pulumi.Input['ConnectionConfluentSchemaRegistrySslCertificateArgs']] = None,
                 ssl_certificate_authority: Optional[pulumi.Input['ConnectionConfluentSchemaRegistrySslCertificateAuthorityArgs']] = None,
                 ssl_key: Optional[pulumi.Input['ConnectionConfluentSchemaRegistrySslKeyArgs']] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input['ConnectionConfluentSchemaRegistryUsernameArgs']] = None):
        """
        Input properties used for looking up and filtering ConnectionConfluentSchemaRegistry resources.
        :param pulumi.Input['ConnectionConfluentSchemaRegistryAwsPrivatelinkArgs'] aws_privatelink: The AWS PrivateLink configuration for the Confluent Schema Registry.
        :param pulumi.Input[str] connection_type: The type of connection.
        :param pulumi.Input[str] database_name: The identifier for the connection database.
        :param pulumi.Input[str] name: The identifier for the connection.
        :param pulumi.Input['ConnectionConfluentSchemaRegistryPasswordArgs'] password: The password for the Confluent Schema Registry.
        :param pulumi.Input[str] qualified_sql_name: The fully qualified name of the connection.
        :param pulumi.Input[str] schema_name: The identifier for the connection schema.
        :param pulumi.Input['ConnectionConfluentSchemaRegistrySshTunnelArgs'] ssh_tunnel: The SSH tunnel configuration for the Confluent Schema Registry.
        :param pulumi.Input['ConnectionConfluentSchemaRegistrySslCertificateArgs'] ssl_certificate: The client certificate for the Confluent Schema Registry.
        :param pulumi.Input['ConnectionConfluentSchemaRegistrySslCertificateAuthorityArgs'] ssl_certificate_authority: The CA certificate for the Confluent Schema Registry.
        :param pulumi.Input['ConnectionConfluentSchemaRegistrySslKeyArgs'] ssl_key: The client key for the Confluent Schema Registry.
        :param pulumi.Input[str] url: The URL of the Confluent Schema Registry.
        :param pulumi.Input['ConnectionConfluentSchemaRegistryUsernameArgs'] username: The username for the Confluent Schema Registry.
        """
        if aws_privatelink is not None:
            pulumi.set(__self__, "aws_privatelink", aws_privatelink)
        if connection_type is not None:
            pulumi.set(__self__, "connection_type", connection_type)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if qualified_sql_name is not None:
            pulumi.set(__self__, "qualified_sql_name", qualified_sql_name)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)
        if ssh_tunnel is not None:
            pulumi.set(__self__, "ssh_tunnel", ssh_tunnel)
        if ssl_certificate is not None:
            pulumi.set(__self__, "ssl_certificate", ssl_certificate)
        if ssl_certificate_authority is not None:
            pulumi.set(__self__, "ssl_certificate_authority", ssl_certificate_authority)
        if ssl_key is not None:
            pulumi.set(__self__, "ssl_key", ssl_key)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="awsPrivatelink")
    def aws_privatelink(self) -> Optional[pulumi.Input['ConnectionConfluentSchemaRegistryAwsPrivatelinkArgs']]:
        """
        The AWS PrivateLink configuration for the Confluent Schema Registry.
        """
        return pulumi.get(self, "aws_privatelink")

    @aws_privatelink.setter
    def aws_privatelink(self, value: Optional[pulumi.Input['ConnectionConfluentSchemaRegistryAwsPrivatelinkArgs']]):
        pulumi.set(self, "aws_privatelink", value)

    @property
    @pulumi.getter(name="connectionType")
    def connection_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of connection.
        """
        return pulumi.get(self, "connection_type")

    @connection_type.setter
    def connection_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connection_type", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[pulumi.Input[str]]:
        """
        The identifier for the connection database.
        """
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The identifier for the connection.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input['ConnectionConfluentSchemaRegistryPasswordArgs']]:
        """
        The password for the Confluent Schema Registry.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input['ConnectionConfluentSchemaRegistryPasswordArgs']]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="qualifiedSqlName")
    def qualified_sql_name(self) -> Optional[pulumi.Input[str]]:
        """
        The fully qualified name of the connection.
        """
        return pulumi.get(self, "qualified_sql_name")

    @qualified_sql_name.setter
    def qualified_sql_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "qualified_sql_name", value)

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[pulumi.Input[str]]:
        """
        The identifier for the connection schema.
        """
        return pulumi.get(self, "schema_name")

    @schema_name.setter
    def schema_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_name", value)

    @property
    @pulumi.getter(name="sshTunnel")
    def ssh_tunnel(self) -> Optional[pulumi.Input['ConnectionConfluentSchemaRegistrySshTunnelArgs']]:
        """
        The SSH tunnel configuration for the Confluent Schema Registry.
        """
        return pulumi.get(self, "ssh_tunnel")

    @ssh_tunnel.setter
    def ssh_tunnel(self, value: Optional[pulumi.Input['ConnectionConfluentSchemaRegistrySshTunnelArgs']]):
        pulumi.set(self, "ssh_tunnel", value)

    @property
    @pulumi.getter(name="sslCertificate")
    def ssl_certificate(self) -> Optional[pulumi.Input['ConnectionConfluentSchemaRegistrySslCertificateArgs']]:
        """
        The client certificate for the Confluent Schema Registry.
        """
        return pulumi.get(self, "ssl_certificate")

    @ssl_certificate.setter
    def ssl_certificate(self, value: Optional[pulumi.Input['ConnectionConfluentSchemaRegistrySslCertificateArgs']]):
        pulumi.set(self, "ssl_certificate", value)

    @property
    @pulumi.getter(name="sslCertificateAuthority")
    def ssl_certificate_authority(self) -> Optional[pulumi.Input['ConnectionConfluentSchemaRegistrySslCertificateAuthorityArgs']]:
        """
        The CA certificate for the Confluent Schema Registry.
        """
        return pulumi.get(self, "ssl_certificate_authority")

    @ssl_certificate_authority.setter
    def ssl_certificate_authority(self, value: Optional[pulumi.Input['ConnectionConfluentSchemaRegistrySslCertificateAuthorityArgs']]):
        pulumi.set(self, "ssl_certificate_authority", value)

    @property
    @pulumi.getter(name="sslKey")
    def ssl_key(self) -> Optional[pulumi.Input['ConnectionConfluentSchemaRegistrySslKeyArgs']]:
        """
        The client key for the Confluent Schema Registry.
        """
        return pulumi.get(self, "ssl_key")

    @ssl_key.setter
    def ssl_key(self, value: Optional[pulumi.Input['ConnectionConfluentSchemaRegistrySslKeyArgs']]):
        pulumi.set(self, "ssl_key", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        The URL of the Confluent Schema Registry.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input['ConnectionConfluentSchemaRegistryUsernameArgs']]:
        """
        The username for the Confluent Schema Registry.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input['ConnectionConfluentSchemaRegistryUsernameArgs']]):
        pulumi.set(self, "username", value)


class ConnectionConfluentSchemaRegistry(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 aws_privatelink: Optional[pulumi.Input[pulumi.InputType['ConnectionConfluentSchemaRegistryAwsPrivatelinkArgs']]] = None,
                 database_name: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[pulumi.InputType['ConnectionConfluentSchemaRegistryPasswordArgs']]] = None,
                 schema_name: Optional[pulumi.Input[str]] = None,
                 ssh_tunnel: Optional[pulumi.Input[pulumi.InputType['ConnectionConfluentSchemaRegistrySshTunnelArgs']]] = None,
                 ssl_certificate: Optional[pulumi.Input[pulumi.InputType['ConnectionConfluentSchemaRegistrySslCertificateArgs']]] = None,
                 ssl_certificate_authority: Optional[pulumi.Input[pulumi.InputType['ConnectionConfluentSchemaRegistrySslCertificateAuthorityArgs']]] = None,
                 ssl_key: Optional[pulumi.Input[pulumi.InputType['ConnectionConfluentSchemaRegistrySslKeyArgs']]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[pulumi.InputType['ConnectionConfluentSchemaRegistryUsernameArgs']]] = None,
                 __props__=None):
        """
        The connection resource allows you to manage connections in Materialize.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_materialize as materialize

        # Create a Confluent Schema Registry Connection
        example_confluent_schema_registry_connection = materialize.ConnectionConfluentSchemaRegistry("exampleConfluentSchemaRegistryConnection",
            password=materialize.ConnectionConfluentSchemaRegistryPasswordArgs(
                database_name="database",
                name="example",
                schema_name="schema",
            ),
            url="https://rp-f00000bar.data.vectorized.cloud:30993",
            username=materialize.ConnectionConfluentSchemaRegistryUsernameArgs(
                text="example",
            ))
        ```

        ## Import

        #Connections can be imported using the connection id

        ```sh
         $ pulumi import materialize:index/connectionConfluentSchemaRegistry:ConnectionConfluentSchemaRegistry example <connection_id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['ConnectionConfluentSchemaRegistryAwsPrivatelinkArgs']] aws_privatelink: The AWS PrivateLink configuration for the Confluent Schema Registry.
        :param pulumi.Input[str] database_name: The identifier for the connection database.
        :param pulumi.Input[str] name: The identifier for the connection.
        :param pulumi.Input[pulumi.InputType['ConnectionConfluentSchemaRegistryPasswordArgs']] password: The password for the Confluent Schema Registry.
        :param pulumi.Input[str] schema_name: The identifier for the connection schema.
        :param pulumi.Input[pulumi.InputType['ConnectionConfluentSchemaRegistrySshTunnelArgs']] ssh_tunnel: The SSH tunnel configuration for the Confluent Schema Registry.
        :param pulumi.Input[pulumi.InputType['ConnectionConfluentSchemaRegistrySslCertificateArgs']] ssl_certificate: The client certificate for the Confluent Schema Registry.
        :param pulumi.Input[pulumi.InputType['ConnectionConfluentSchemaRegistrySslCertificateAuthorityArgs']] ssl_certificate_authority: The CA certificate for the Confluent Schema Registry.
        :param pulumi.Input[pulumi.InputType['ConnectionConfluentSchemaRegistrySslKeyArgs']] ssl_key: The client key for the Confluent Schema Registry.
        :param pulumi.Input[str] url: The URL of the Confluent Schema Registry.
        :param pulumi.Input[pulumi.InputType['ConnectionConfluentSchemaRegistryUsernameArgs']] username: The username for the Confluent Schema Registry.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ConnectionConfluentSchemaRegistryArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The connection resource allows you to manage connections in Materialize.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_materialize as materialize

        # Create a Confluent Schema Registry Connection
        example_confluent_schema_registry_connection = materialize.ConnectionConfluentSchemaRegistry("exampleConfluentSchemaRegistryConnection",
            password=materialize.ConnectionConfluentSchemaRegistryPasswordArgs(
                database_name="database",
                name="example",
                schema_name="schema",
            ),
            url="https://rp-f00000bar.data.vectorized.cloud:30993",
            username=materialize.ConnectionConfluentSchemaRegistryUsernameArgs(
                text="example",
            ))
        ```

        ## Import

        #Connections can be imported using the connection id

        ```sh
         $ pulumi import materialize:index/connectionConfluentSchemaRegistry:ConnectionConfluentSchemaRegistry example <connection_id>
        ```

        :param str resource_name: The name of the resource.
        :param ConnectionConfluentSchemaRegistryArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ConnectionConfluentSchemaRegistryArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 aws_privatelink: Optional[pulumi.Input[pulumi.InputType['ConnectionConfluentSchemaRegistryAwsPrivatelinkArgs']]] = None,
                 database_name: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[pulumi.InputType['ConnectionConfluentSchemaRegistryPasswordArgs']]] = None,
                 schema_name: Optional[pulumi.Input[str]] = None,
                 ssh_tunnel: Optional[pulumi.Input[pulumi.InputType['ConnectionConfluentSchemaRegistrySshTunnelArgs']]] = None,
                 ssl_certificate: Optional[pulumi.Input[pulumi.InputType['ConnectionConfluentSchemaRegistrySslCertificateArgs']]] = None,
                 ssl_certificate_authority: Optional[pulumi.Input[pulumi.InputType['ConnectionConfluentSchemaRegistrySslCertificateAuthorityArgs']]] = None,
                 ssl_key: Optional[pulumi.Input[pulumi.InputType['ConnectionConfluentSchemaRegistrySslKeyArgs']]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[pulumi.InputType['ConnectionConfluentSchemaRegistryUsernameArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ConnectionConfluentSchemaRegistryArgs.__new__(ConnectionConfluentSchemaRegistryArgs)

            __props__.__dict__["aws_privatelink"] = aws_privatelink
            __props__.__dict__["database_name"] = database_name
            __props__.__dict__["name"] = name
            __props__.__dict__["password"] = password
            __props__.__dict__["schema_name"] = schema_name
            __props__.__dict__["ssh_tunnel"] = ssh_tunnel
            __props__.__dict__["ssl_certificate"] = ssl_certificate
            __props__.__dict__["ssl_certificate_authority"] = ssl_certificate_authority
            __props__.__dict__["ssl_key"] = ssl_key
            if url is None and not opts.urn:
                raise TypeError("Missing required property 'url'")
            __props__.__dict__["url"] = url
            __props__.__dict__["username"] = username
            __props__.__dict__["connection_type"] = None
            __props__.__dict__["qualified_sql_name"] = None
        super(ConnectionConfluentSchemaRegistry, __self__).__init__(
            'materialize:index/connectionConfluentSchemaRegistry:ConnectionConfluentSchemaRegistry',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            aws_privatelink: Optional[pulumi.Input[pulumi.InputType['ConnectionConfluentSchemaRegistryAwsPrivatelinkArgs']]] = None,
            connection_type: Optional[pulumi.Input[str]] = None,
            database_name: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            password: Optional[pulumi.Input[pulumi.InputType['ConnectionConfluentSchemaRegistryPasswordArgs']]] = None,
            qualified_sql_name: Optional[pulumi.Input[str]] = None,
            schema_name: Optional[pulumi.Input[str]] = None,
            ssh_tunnel: Optional[pulumi.Input[pulumi.InputType['ConnectionConfluentSchemaRegistrySshTunnelArgs']]] = None,
            ssl_certificate: Optional[pulumi.Input[pulumi.InputType['ConnectionConfluentSchemaRegistrySslCertificateArgs']]] = None,
            ssl_certificate_authority: Optional[pulumi.Input[pulumi.InputType['ConnectionConfluentSchemaRegistrySslCertificateAuthorityArgs']]] = None,
            ssl_key: Optional[pulumi.Input[pulumi.InputType['ConnectionConfluentSchemaRegistrySslKeyArgs']]] = None,
            url: Optional[pulumi.Input[str]] = None,
            username: Optional[pulumi.Input[pulumi.InputType['ConnectionConfluentSchemaRegistryUsernameArgs']]] = None) -> 'ConnectionConfluentSchemaRegistry':
        """
        Get an existing ConnectionConfluentSchemaRegistry resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['ConnectionConfluentSchemaRegistryAwsPrivatelinkArgs']] aws_privatelink: The AWS PrivateLink configuration for the Confluent Schema Registry.
        :param pulumi.Input[str] connection_type: The type of connection.
        :param pulumi.Input[str] database_name: The identifier for the connection database.
        :param pulumi.Input[str] name: The identifier for the connection.
        :param pulumi.Input[pulumi.InputType['ConnectionConfluentSchemaRegistryPasswordArgs']] password: The password for the Confluent Schema Registry.
        :param pulumi.Input[str] qualified_sql_name: The fully qualified name of the connection.
        :param pulumi.Input[str] schema_name: The identifier for the connection schema.
        :param pulumi.Input[pulumi.InputType['ConnectionConfluentSchemaRegistrySshTunnelArgs']] ssh_tunnel: The SSH tunnel configuration for the Confluent Schema Registry.
        :param pulumi.Input[pulumi.InputType['ConnectionConfluentSchemaRegistrySslCertificateArgs']] ssl_certificate: The client certificate for the Confluent Schema Registry.
        :param pulumi.Input[pulumi.InputType['ConnectionConfluentSchemaRegistrySslCertificateAuthorityArgs']] ssl_certificate_authority: The CA certificate for the Confluent Schema Registry.
        :param pulumi.Input[pulumi.InputType['ConnectionConfluentSchemaRegistrySslKeyArgs']] ssl_key: The client key for the Confluent Schema Registry.
        :param pulumi.Input[str] url: The URL of the Confluent Schema Registry.
        :param pulumi.Input[pulumi.InputType['ConnectionConfluentSchemaRegistryUsernameArgs']] username: The username for the Confluent Schema Registry.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ConnectionConfluentSchemaRegistryState.__new__(_ConnectionConfluentSchemaRegistryState)

        __props__.__dict__["aws_privatelink"] = aws_privatelink
        __props__.__dict__["connection_type"] = connection_type
        __props__.__dict__["database_name"] = database_name
        __props__.__dict__["name"] = name
        __props__.__dict__["password"] = password
        __props__.__dict__["qualified_sql_name"] = qualified_sql_name
        __props__.__dict__["schema_name"] = schema_name
        __props__.__dict__["ssh_tunnel"] = ssh_tunnel
        __props__.__dict__["ssl_certificate"] = ssl_certificate
        __props__.__dict__["ssl_certificate_authority"] = ssl_certificate_authority
        __props__.__dict__["ssl_key"] = ssl_key
        __props__.__dict__["url"] = url
        __props__.__dict__["username"] = username
        return ConnectionConfluentSchemaRegistry(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="awsPrivatelink")
    def aws_privatelink(self) -> pulumi.Output[Optional['outputs.ConnectionConfluentSchemaRegistryAwsPrivatelink']]:
        """
        The AWS PrivateLink configuration for the Confluent Schema Registry.
        """
        return pulumi.get(self, "aws_privatelink")

    @property
    @pulumi.getter(name="connectionType")
    def connection_type(self) -> pulumi.Output[str]:
        """
        The type of connection.
        """
        return pulumi.get(self, "connection_type")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> pulumi.Output[Optional[str]]:
        """
        The identifier for the connection database.
        """
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The identifier for the connection.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[Optional['outputs.ConnectionConfluentSchemaRegistryPassword']]:
        """
        The password for the Confluent Schema Registry.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="qualifiedSqlName")
    def qualified_sql_name(self) -> pulumi.Output[str]:
        """
        The fully qualified name of the connection.
        """
        return pulumi.get(self, "qualified_sql_name")

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> pulumi.Output[Optional[str]]:
        """
        The identifier for the connection schema.
        """
        return pulumi.get(self, "schema_name")

    @property
    @pulumi.getter(name="sshTunnel")
    def ssh_tunnel(self) -> pulumi.Output[Optional['outputs.ConnectionConfluentSchemaRegistrySshTunnel']]:
        """
        The SSH tunnel configuration for the Confluent Schema Registry.
        """
        return pulumi.get(self, "ssh_tunnel")

    @property
    @pulumi.getter(name="sslCertificate")
    def ssl_certificate(self) -> pulumi.Output[Optional['outputs.ConnectionConfluentSchemaRegistrySslCertificate']]:
        """
        The client certificate for the Confluent Schema Registry.
        """
        return pulumi.get(self, "ssl_certificate")

    @property
    @pulumi.getter(name="sslCertificateAuthority")
    def ssl_certificate_authority(self) -> pulumi.Output[Optional['outputs.ConnectionConfluentSchemaRegistrySslCertificateAuthority']]:
        """
        The CA certificate for the Confluent Schema Registry.
        """
        return pulumi.get(self, "ssl_certificate_authority")

    @property
    @pulumi.getter(name="sslKey")
    def ssl_key(self) -> pulumi.Output[Optional['outputs.ConnectionConfluentSchemaRegistrySslKey']]:
        """
        The client key for the Confluent Schema Registry.
        """
        return pulumi.get(self, "ssl_key")

    @property
    @pulumi.getter
    def url(self) -> pulumi.Output[str]:
        """
        The URL of the Confluent Schema Registry.
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter
    def username(self) -> pulumi.Output[Optional['outputs.ConnectionConfluentSchemaRegistryUsername']]:
        """
        The username for the Confluent Schema Registry.
        """
        return pulumi.get(self, "username")

