# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'ConnectionConfluentSchemaRegistryAwsPrivatelinkArgs',
    'ConnectionConfluentSchemaRegistryPasswordArgs',
    'ConnectionConfluentSchemaRegistrySshTunnelArgs',
    'ConnectionConfluentSchemaRegistrySslCertificateArgs',
    'ConnectionConfluentSchemaRegistrySslCertificateAuthorityArgs',
    'ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretArgs',
    'ConnectionConfluentSchemaRegistrySslCertificateSecretArgs',
    'ConnectionConfluentSchemaRegistrySslKeyArgs',
    'ConnectionConfluentSchemaRegistryUsernameArgs',
    'ConnectionConfluentSchemaRegistryUsernameSecretArgs',
    'ConnectionKafkaKafkaBrokerArgs',
    'ConnectionKafkaKafkaBrokerPrivatelinkConnectionArgs',
    'ConnectionKafkaSaslPasswordArgs',
    'ConnectionKafkaSaslUsernameArgs',
    'ConnectionKafkaSaslUsernameSecretArgs',
    'ConnectionKafkaSshTunnelArgs',
    'ConnectionKafkaSslCertificateArgs',
    'ConnectionKafkaSslCertificateAuthorityArgs',
    'ConnectionKafkaSslCertificateAuthoritySecretArgs',
    'ConnectionKafkaSslCertificateSecretArgs',
    'ConnectionKafkaSslKeyArgs',
    'ConnectionPostgresAwsPrivatelinkArgs',
    'ConnectionPostgresPasswordArgs',
    'ConnectionPostgresSshTunnelArgs',
    'ConnectionPostgresSslCertificateArgs',
    'ConnectionPostgresSslCertificateAuthorityArgs',
    'ConnectionPostgresSslCertificateAuthoritySecretArgs',
    'ConnectionPostgresSslCertificateSecretArgs',
    'ConnectionPostgresSslKeyArgs',
    'ConnectionPostgresUserArgs',
    'ConnectionPostgresUserSecretArgs',
    'IndexColExprArgs',
    'IndexObjNameArgs',
    'SinkKafkaEnvelopeArgs',
    'SinkKafkaFormatArgs',
    'SinkKafkaFormatAvroArgs',
    'SinkKafkaFormatAvroSchemaRegistryConnectionArgs',
    'SinkKafkaFromArgs',
    'SinkKafkaKafkaConnectionArgs',
    'SourceKafkaEnvelopeArgs',
    'SourceKafkaFormatArgs',
    'SourceKafkaFormatAvroArgs',
    'SourceKafkaFormatAvroSchemaRegistryConnectionArgs',
    'SourceKafkaFormatCsvArgs',
    'SourceKafkaFormatProtobufArgs',
    'SourceKafkaFormatProtobufSchemaRegistryConnectionArgs',
    'SourceKafkaKafkaConnectionArgs',
    'SourceKafkaKeyFormatArgs',
    'SourceKafkaKeyFormatAvroArgs',
    'SourceKafkaKeyFormatAvroSchemaRegistryConnectionArgs',
    'SourceKafkaKeyFormatCsvArgs',
    'SourceKafkaKeyFormatProtobufArgs',
    'SourceKafkaKeyFormatProtobufSchemaRegistryConnectionArgs',
    'SourceKafkaValueFormatArgs',
    'SourceKafkaValueFormatAvroArgs',
    'SourceKafkaValueFormatAvroSchemaRegistryConnectionArgs',
    'SourceKafkaValueFormatCsvArgs',
    'SourceKafkaValueFormatProtobufArgs',
    'SourceKafkaValueFormatProtobufSchemaRegistryConnectionArgs',
    'SourceLoadgenAuctionOptionArgs',
    'SourceLoadgenAuctionOptionTableArgs',
    'SourceLoadgenCounterOptionArgs',
    'SourceLoadgenTpchOptionArgs',
    'SourceLoadgenTpchOptionTableArgs',
    'SourcePostgresPostgresConnectionArgs',
    'SourcePostgresTableArgs',
    'TableColumnArgs',
]

@pulumi.input_type
class ConnectionConfluentSchemaRegistryAwsPrivatelinkArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 database_name: Optional[pulumi.Input[str]] = None,
                 schema_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The aws_privatelink name.
        :param pulumi.Input[str] database_name: The aws_privatelink database name.
        :param pulumi.Input[str] schema_name: The aws_privatelink schema name.
        """
        pulumi.set(__self__, "name", name)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The aws_privatelink name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[pulumi.Input[str]]:
        """
        The aws_privatelink database name.
        """
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[pulumi.Input[str]]:
        """
        The aws_privatelink schema name.
        """
        return pulumi.get(self, "schema_name")

    @schema_name.setter
    def schema_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_name", value)


@pulumi.input_type
class ConnectionConfluentSchemaRegistryPasswordArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 database_name: Optional[pulumi.Input[str]] = None,
                 schema_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The password name.
        :param pulumi.Input[str] database_name: The password database name.
        :param pulumi.Input[str] schema_name: The password schema name.
        """
        pulumi.set(__self__, "name", name)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The password name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[pulumi.Input[str]]:
        """
        The password database name.
        """
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[pulumi.Input[str]]:
        """
        The password schema name.
        """
        return pulumi.get(self, "schema_name")

    @schema_name.setter
    def schema_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_name", value)


@pulumi.input_type
class ConnectionConfluentSchemaRegistrySshTunnelArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 database_name: Optional[pulumi.Input[str]] = None,
                 schema_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The ssh_tunnel name.
        :param pulumi.Input[str] database_name: The ssh_tunnel database name.
        :param pulumi.Input[str] schema_name: The ssh_tunnel schema name.
        """
        pulumi.set(__self__, "name", name)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The ssh_tunnel name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[pulumi.Input[str]]:
        """
        The ssh_tunnel database name.
        """
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[pulumi.Input[str]]:
        """
        The ssh_tunnel schema name.
        """
        return pulumi.get(self, "schema_name")

    @schema_name.setter
    def schema_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_name", value)


@pulumi.input_type
class ConnectionConfluentSchemaRegistrySslCertificateArgs:
    def __init__(__self__, *,
                 secret: Optional[pulumi.Input['ConnectionConfluentSchemaRegistrySslCertificateSecretArgs']] = None,
                 text: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['ConnectionConfluentSchemaRegistrySslCertificateSecretArgs'] secret: The ssl*certificate secret value.
        :param pulumi.Input[str] text: The ssl_certificate text value.
        """
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if text is not None:
            pulumi.set(__self__, "text", text)

    @property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input['ConnectionConfluentSchemaRegistrySslCertificateSecretArgs']]:
        """
        The ssl*certificate secret value.
        """
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input['ConnectionConfluentSchemaRegistrySslCertificateSecretArgs']]):
        pulumi.set(self, "secret", value)

    @property
    @pulumi.getter
    def text(self) -> Optional[pulumi.Input[str]]:
        """
        The ssl_certificate text value.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text", value)


@pulumi.input_type
class ConnectionConfluentSchemaRegistrySslCertificateAuthorityArgs:
    def __init__(__self__, *,
                 secret: Optional[pulumi.Input['ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretArgs']] = None,
                 text: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretArgs'] secret: The ssl*certificate*authority secret value.
        :param pulumi.Input[str] text: The ssl*certificate*authority text value.
        """
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if text is not None:
            pulumi.set(__self__, "text", text)

    @property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input['ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretArgs']]:
        """
        The ssl*certificate*authority secret value.
        """
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input['ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretArgs']]):
        pulumi.set(self, "secret", value)

    @property
    @pulumi.getter
    def text(self) -> Optional[pulumi.Input[str]]:
        """
        The ssl*certificate*authority text value.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text", value)


@pulumi.input_type
class ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 database_name: Optional[pulumi.Input[str]] = None,
                 schema_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The identifier for the connection.
        :param pulumi.Input[str] database_name: The identifier for the connection database.
        :param pulumi.Input[str] schema_name: The identifier for the connection schema.
        """
        pulumi.set(__self__, "name", name)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The identifier for the connection.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[pulumi.Input[str]]:
        """
        The identifier for the connection database.
        """
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[pulumi.Input[str]]:
        """
        The identifier for the connection schema.
        """
        return pulumi.get(self, "schema_name")

    @schema_name.setter
    def schema_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_name", value)


@pulumi.input_type
class ConnectionConfluentSchemaRegistrySslCertificateSecretArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 database_name: Optional[pulumi.Input[str]] = None,
                 schema_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The identifier for the connection.
        :param pulumi.Input[str] database_name: The identifier for the connection database.
        :param pulumi.Input[str] schema_name: The identifier for the connection schema.
        """
        pulumi.set(__self__, "name", name)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The identifier for the connection.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[pulumi.Input[str]]:
        """
        The identifier for the connection database.
        """
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[pulumi.Input[str]]:
        """
        The identifier for the connection schema.
        """
        return pulumi.get(self, "schema_name")

    @schema_name.setter
    def schema_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_name", value)


@pulumi.input_type
class ConnectionConfluentSchemaRegistrySslKeyArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 database_name: Optional[pulumi.Input[str]] = None,
                 schema_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The ssl_key name.
        :param pulumi.Input[str] database_name: The ssl_key database name.
        :param pulumi.Input[str] schema_name: The ssl_key schema name.
        """
        pulumi.set(__self__, "name", name)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The ssl_key name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[pulumi.Input[str]]:
        """
        The ssl_key database name.
        """
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[pulumi.Input[str]]:
        """
        The ssl_key schema name.
        """
        return pulumi.get(self, "schema_name")

    @schema_name.setter
    def schema_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_name", value)


@pulumi.input_type
class ConnectionConfluentSchemaRegistryUsernameArgs:
    def __init__(__self__, *,
                 secret: Optional[pulumi.Input['ConnectionConfluentSchemaRegistryUsernameSecretArgs']] = None,
                 text: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['ConnectionConfluentSchemaRegistryUsernameSecretArgs'] secret: The username secret value.
        :param pulumi.Input[str] text: The username text value.
        """
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if text is not None:
            pulumi.set(__self__, "text", text)

    @property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input['ConnectionConfluentSchemaRegistryUsernameSecretArgs']]:
        """
        The username secret value.
        """
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input['ConnectionConfluentSchemaRegistryUsernameSecretArgs']]):
        pulumi.set(self, "secret", value)

    @property
    @pulumi.getter
    def text(self) -> Optional[pulumi.Input[str]]:
        """
        The username text value.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text", value)


@pulumi.input_type
class ConnectionConfluentSchemaRegistryUsernameSecretArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 database_name: Optional[pulumi.Input[str]] = None,
                 schema_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The identifier for the connection.
        :param pulumi.Input[str] database_name: The identifier for the connection database.
        :param pulumi.Input[str] schema_name: The identifier for the connection schema.
        """
        pulumi.set(__self__, "name", name)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The identifier for the connection.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[pulumi.Input[str]]:
        """
        The identifier for the connection database.
        """
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[pulumi.Input[str]]:
        """
        The identifier for the connection schema.
        """
        return pulumi.get(self, "schema_name")

    @schema_name.setter
    def schema_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_name", value)


@pulumi.input_type
class ConnectionKafkaKafkaBrokerArgs:
    def __init__(__self__, *,
                 broker: pulumi.Input[str],
                 availability_zone: Optional[pulumi.Input[str]] = None,
                 privatelink_connection: Optional[pulumi.Input['ConnectionKafkaKafkaBrokerPrivatelinkConnectionArgs']] = None,
                 target_group_port: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] broker: The Kafka broker, in the form of `host:port`.
        :param pulumi.Input[str] availability_zone: The availability zone of the Kafka broker.
        :param pulumi.Input['ConnectionKafkaKafkaBrokerPrivatelinkConnectionArgs'] privatelink_connection: The AWS PrivateLink connection name in Materialize.
        :param pulumi.Input[int] target_group_port: The port of the target group associated with the Kafka broker.
        """
        pulumi.set(__self__, "broker", broker)
        if availability_zone is not None:
            pulumi.set(__self__, "availability_zone", availability_zone)
        if privatelink_connection is not None:
            pulumi.set(__self__, "privatelink_connection", privatelink_connection)
        if target_group_port is not None:
            pulumi.set(__self__, "target_group_port", target_group_port)

    @property
    @pulumi.getter
    def broker(self) -> pulumi.Input[str]:
        """
        The Kafka broker, in the form of `host:port`.
        """
        return pulumi.get(self, "broker")

    @broker.setter
    def broker(self, value: pulumi.Input[str]):
        pulumi.set(self, "broker", value)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[pulumi.Input[str]]:
        """
        The availability zone of the Kafka broker.
        """
        return pulumi.get(self, "availability_zone")

    @availability_zone.setter
    def availability_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "availability_zone", value)

    @property
    @pulumi.getter(name="privatelinkConnection")
    def privatelink_connection(self) -> Optional[pulumi.Input['ConnectionKafkaKafkaBrokerPrivatelinkConnectionArgs']]:
        """
        The AWS PrivateLink connection name in Materialize.
        """
        return pulumi.get(self, "privatelink_connection")

    @privatelink_connection.setter
    def privatelink_connection(self, value: Optional[pulumi.Input['ConnectionKafkaKafkaBrokerPrivatelinkConnectionArgs']]):
        pulumi.set(self, "privatelink_connection", value)

    @property
    @pulumi.getter(name="targetGroupPort")
    def target_group_port(self) -> Optional[pulumi.Input[int]]:
        """
        The port of the target group associated with the Kafka broker.
        """
        return pulumi.get(self, "target_group_port")

    @target_group_port.setter
    def target_group_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "target_group_port", value)


@pulumi.input_type
class ConnectionKafkaKafkaBrokerPrivatelinkConnectionArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 database_name: Optional[pulumi.Input[str]] = None,
                 schema_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The identifier for the connection.
        :param pulumi.Input[str] database_name: The identifier for the connection database.
        :param pulumi.Input[str] schema_name: The identifier for the connection schema.
        """
        pulumi.set(__self__, "name", name)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The identifier for the connection.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[pulumi.Input[str]]:
        """
        The identifier for the connection database.
        """
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[pulumi.Input[str]]:
        """
        The identifier for the connection schema.
        """
        return pulumi.get(self, "schema_name")

    @schema_name.setter
    def schema_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_name", value)


@pulumi.input_type
class ConnectionKafkaSaslPasswordArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 database_name: Optional[pulumi.Input[str]] = None,
                 schema_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The sasl_password name.
        :param pulumi.Input[str] database_name: The sasl_password database name.
        :param pulumi.Input[str] schema_name: The sasl_password schema name.
        """
        pulumi.set(__self__, "name", name)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The sasl_password name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[pulumi.Input[str]]:
        """
        The sasl_password database name.
        """
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[pulumi.Input[str]]:
        """
        The sasl_password schema name.
        """
        return pulumi.get(self, "schema_name")

    @schema_name.setter
    def schema_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_name", value)


@pulumi.input_type
class ConnectionKafkaSaslUsernameArgs:
    def __init__(__self__, *,
                 secret: Optional[pulumi.Input['ConnectionKafkaSaslUsernameSecretArgs']] = None,
                 text: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['ConnectionKafkaSaslUsernameSecretArgs'] secret: The sasl*username secret value.
        :param pulumi.Input[str] text: The sasl_username text value.
        """
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if text is not None:
            pulumi.set(__self__, "text", text)

    @property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input['ConnectionKafkaSaslUsernameSecretArgs']]:
        """
        The sasl*username secret value.
        """
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input['ConnectionKafkaSaslUsernameSecretArgs']]):
        pulumi.set(self, "secret", value)

    @property
    @pulumi.getter
    def text(self) -> Optional[pulumi.Input[str]]:
        """
        The sasl_username text value.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text", value)


@pulumi.input_type
class ConnectionKafkaSaslUsernameSecretArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 database_name: Optional[pulumi.Input[str]] = None,
                 schema_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The identifier for the connection.
        :param pulumi.Input[str] database_name: The identifier for the connection database.
        :param pulumi.Input[str] schema_name: The identifier for the connection schema.
        """
        pulumi.set(__self__, "name", name)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The identifier for the connection.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[pulumi.Input[str]]:
        """
        The identifier for the connection database.
        """
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[pulumi.Input[str]]:
        """
        The identifier for the connection schema.
        """
        return pulumi.get(self, "schema_name")

    @schema_name.setter
    def schema_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_name", value)


@pulumi.input_type
class ConnectionKafkaSshTunnelArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 database_name: Optional[pulumi.Input[str]] = None,
                 schema_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The ssh_tunnel name.
        :param pulumi.Input[str] database_name: The ssh_tunnel database name.
        :param pulumi.Input[str] schema_name: The ssh_tunnel schema name.
        """
        pulumi.set(__self__, "name", name)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The ssh_tunnel name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[pulumi.Input[str]]:
        """
        The ssh_tunnel database name.
        """
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[pulumi.Input[str]]:
        """
        The ssh_tunnel schema name.
        """
        return pulumi.get(self, "schema_name")

    @schema_name.setter
    def schema_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_name", value)


@pulumi.input_type
class ConnectionKafkaSslCertificateArgs:
    def __init__(__self__, *,
                 secret: Optional[pulumi.Input['ConnectionKafkaSslCertificateSecretArgs']] = None,
                 text: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['ConnectionKafkaSslCertificateSecretArgs'] secret: The ssl*certificate secret value.
        :param pulumi.Input[str] text: The ssl_certificate text value.
        """
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if text is not None:
            pulumi.set(__self__, "text", text)

    @property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input['ConnectionKafkaSslCertificateSecretArgs']]:
        """
        The ssl*certificate secret value.
        """
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input['ConnectionKafkaSslCertificateSecretArgs']]):
        pulumi.set(self, "secret", value)

    @property
    @pulumi.getter
    def text(self) -> Optional[pulumi.Input[str]]:
        """
        The ssl_certificate text value.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text", value)


@pulumi.input_type
class ConnectionKafkaSslCertificateAuthorityArgs:
    def __init__(__self__, *,
                 secret: Optional[pulumi.Input['ConnectionKafkaSslCertificateAuthoritySecretArgs']] = None,
                 text: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['ConnectionKafkaSslCertificateAuthoritySecretArgs'] secret: The ssl*certificate*authority secret value.
        :param pulumi.Input[str] text: The ssl*certificate*authority text value.
        """
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if text is not None:
            pulumi.set(__self__, "text", text)

    @property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input['ConnectionKafkaSslCertificateAuthoritySecretArgs']]:
        """
        The ssl*certificate*authority secret value.
        """
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input['ConnectionKafkaSslCertificateAuthoritySecretArgs']]):
        pulumi.set(self, "secret", value)

    @property
    @pulumi.getter
    def text(self) -> Optional[pulumi.Input[str]]:
        """
        The ssl*certificate*authority text value.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text", value)


@pulumi.input_type
class ConnectionKafkaSslCertificateAuthoritySecretArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 database_name: Optional[pulumi.Input[str]] = None,
                 schema_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The identifier for the connection.
        :param pulumi.Input[str] database_name: The identifier for the connection database.
        :param pulumi.Input[str] schema_name: The identifier for the connection schema.
        """
        pulumi.set(__self__, "name", name)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The identifier for the connection.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[pulumi.Input[str]]:
        """
        The identifier for the connection database.
        """
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[pulumi.Input[str]]:
        """
        The identifier for the connection schema.
        """
        return pulumi.get(self, "schema_name")

    @schema_name.setter
    def schema_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_name", value)


@pulumi.input_type
class ConnectionKafkaSslCertificateSecretArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 database_name: Optional[pulumi.Input[str]] = None,
                 schema_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The identifier for the connection.
        :param pulumi.Input[str] database_name: The identifier for the connection database.
        :param pulumi.Input[str] schema_name: The identifier for the connection schema.
        """
        pulumi.set(__self__, "name", name)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The identifier for the connection.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[pulumi.Input[str]]:
        """
        The identifier for the connection database.
        """
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[pulumi.Input[str]]:
        """
        The identifier for the connection schema.
        """
        return pulumi.get(self, "schema_name")

    @schema_name.setter
    def schema_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_name", value)


@pulumi.input_type
class ConnectionKafkaSslKeyArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 database_name: Optional[pulumi.Input[str]] = None,
                 schema_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The ssl_key name.
        :param pulumi.Input[str] database_name: The ssl_key database name.
        :param pulumi.Input[str] schema_name: The ssl_key schema name.
        """
        pulumi.set(__self__, "name", name)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The ssl_key name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[pulumi.Input[str]]:
        """
        The ssl_key database name.
        """
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[pulumi.Input[str]]:
        """
        The ssl_key schema name.
        """
        return pulumi.get(self, "schema_name")

    @schema_name.setter
    def schema_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_name", value)


@pulumi.input_type
class ConnectionPostgresAwsPrivatelinkArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 database_name: Optional[pulumi.Input[str]] = None,
                 schema_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The aws_privatelink name.
        :param pulumi.Input[str] database_name: The aws_privatelink database name.
        :param pulumi.Input[str] schema_name: The aws_privatelink schema name.
        """
        pulumi.set(__self__, "name", name)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The aws_privatelink name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[pulumi.Input[str]]:
        """
        The aws_privatelink database name.
        """
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[pulumi.Input[str]]:
        """
        The aws_privatelink schema name.
        """
        return pulumi.get(self, "schema_name")

    @schema_name.setter
    def schema_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_name", value)


@pulumi.input_type
class ConnectionPostgresPasswordArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 database_name: Optional[pulumi.Input[str]] = None,
                 schema_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The password name.
        :param pulumi.Input[str] database_name: The password database name.
        :param pulumi.Input[str] schema_name: The password schema name.
        """
        pulumi.set(__self__, "name", name)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The password name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[pulumi.Input[str]]:
        """
        The password database name.
        """
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[pulumi.Input[str]]:
        """
        The password schema name.
        """
        return pulumi.get(self, "schema_name")

    @schema_name.setter
    def schema_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_name", value)


@pulumi.input_type
class ConnectionPostgresSshTunnelArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 database_name: Optional[pulumi.Input[str]] = None,
                 schema_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The ssh_tunnel name.
        :param pulumi.Input[str] database_name: The ssh_tunnel database name.
        :param pulumi.Input[str] schema_name: The ssh_tunnel schema name.
        """
        pulumi.set(__self__, "name", name)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The ssh_tunnel name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[pulumi.Input[str]]:
        """
        The ssh_tunnel database name.
        """
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[pulumi.Input[str]]:
        """
        The ssh_tunnel schema name.
        """
        return pulumi.get(self, "schema_name")

    @schema_name.setter
    def schema_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_name", value)


@pulumi.input_type
class ConnectionPostgresSslCertificateArgs:
    def __init__(__self__, *,
                 secret: Optional[pulumi.Input['ConnectionPostgresSslCertificateSecretArgs']] = None,
                 text: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['ConnectionPostgresSslCertificateSecretArgs'] secret: The ssl*certificate secret value.
        :param pulumi.Input[str] text: The ssl_certificate text value.
        """
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if text is not None:
            pulumi.set(__self__, "text", text)

    @property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input['ConnectionPostgresSslCertificateSecretArgs']]:
        """
        The ssl*certificate secret value.
        """
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input['ConnectionPostgresSslCertificateSecretArgs']]):
        pulumi.set(self, "secret", value)

    @property
    @pulumi.getter
    def text(self) -> Optional[pulumi.Input[str]]:
        """
        The ssl_certificate text value.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text", value)


@pulumi.input_type
class ConnectionPostgresSslCertificateAuthorityArgs:
    def __init__(__self__, *,
                 secret: Optional[pulumi.Input['ConnectionPostgresSslCertificateAuthoritySecretArgs']] = None,
                 text: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['ConnectionPostgresSslCertificateAuthoritySecretArgs'] secret: The ssl*certificate*authority secret value.
        :param pulumi.Input[str] text: The ssl*certificate*authority text value.
        """
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if text is not None:
            pulumi.set(__self__, "text", text)

    @property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input['ConnectionPostgresSslCertificateAuthoritySecretArgs']]:
        """
        The ssl*certificate*authority secret value.
        """
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input['ConnectionPostgresSslCertificateAuthoritySecretArgs']]):
        pulumi.set(self, "secret", value)

    @property
    @pulumi.getter
    def text(self) -> Optional[pulumi.Input[str]]:
        """
        The ssl*certificate*authority text value.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text", value)


@pulumi.input_type
class ConnectionPostgresSslCertificateAuthoritySecretArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 database_name: Optional[pulumi.Input[str]] = None,
                 schema_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The identifier for the connection.
        :param pulumi.Input[str] database_name: The identifier for the connection database.
        :param pulumi.Input[str] schema_name: The identifier for the connection schema.
        """
        pulumi.set(__self__, "name", name)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The identifier for the connection.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[pulumi.Input[str]]:
        """
        The identifier for the connection database.
        """
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[pulumi.Input[str]]:
        """
        The identifier for the connection schema.
        """
        return pulumi.get(self, "schema_name")

    @schema_name.setter
    def schema_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_name", value)


@pulumi.input_type
class ConnectionPostgresSslCertificateSecretArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 database_name: Optional[pulumi.Input[str]] = None,
                 schema_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The identifier for the connection.
        :param pulumi.Input[str] database_name: The identifier for the connection database.
        :param pulumi.Input[str] schema_name: The identifier for the connection schema.
        """
        pulumi.set(__self__, "name", name)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The identifier for the connection.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[pulumi.Input[str]]:
        """
        The identifier for the connection database.
        """
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[pulumi.Input[str]]:
        """
        The identifier for the connection schema.
        """
        return pulumi.get(self, "schema_name")

    @schema_name.setter
    def schema_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_name", value)


@pulumi.input_type
class ConnectionPostgresSslKeyArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 database_name: Optional[pulumi.Input[str]] = None,
                 schema_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The ssl_key name.
        :param pulumi.Input[str] database_name: The ssl_key database name.
        :param pulumi.Input[str] schema_name: The ssl_key schema name.
        """
        pulumi.set(__self__, "name", name)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The ssl_key name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[pulumi.Input[str]]:
        """
        The ssl_key database name.
        """
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[pulumi.Input[str]]:
        """
        The ssl_key schema name.
        """
        return pulumi.get(self, "schema_name")

    @schema_name.setter
    def schema_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_name", value)


@pulumi.input_type
class ConnectionPostgresUserArgs:
    def __init__(__self__, *,
                 secret: Optional[pulumi.Input['ConnectionPostgresUserSecretArgs']] = None,
                 text: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['ConnectionPostgresUserSecretArgs'] secret: The user secret value.
        :param pulumi.Input[str] text: The user text value.
        """
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if text is not None:
            pulumi.set(__self__, "text", text)

    @property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input['ConnectionPostgresUserSecretArgs']]:
        """
        The user secret value.
        """
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input['ConnectionPostgresUserSecretArgs']]):
        pulumi.set(self, "secret", value)

    @property
    @pulumi.getter
    def text(self) -> Optional[pulumi.Input[str]]:
        """
        The user text value.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text", value)


@pulumi.input_type
class ConnectionPostgresUserSecretArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 database_name: Optional[pulumi.Input[str]] = None,
                 schema_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The identifier for the connection.
        :param pulumi.Input[str] database_name: The identifier for the connection database.
        :param pulumi.Input[str] schema_name: The identifier for the connection schema.
        """
        pulumi.set(__self__, "name", name)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The identifier for the connection.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[pulumi.Input[str]]:
        """
        The identifier for the connection database.
        """
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[pulumi.Input[str]]:
        """
        The identifier for the connection schema.
        """
        return pulumi.get(self, "schema_name")

    @schema_name.setter
    def schema_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_name", value)


@pulumi.input_type
class IndexColExprArgs:
    def __init__(__self__, *,
                 field: pulumi.Input[str],
                 val: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] field: The name of the option you want to set.
        :param pulumi.Input[str] val: The value for the option.
        """
        pulumi.set(__self__, "field", field)
        if val is not None:
            pulumi.set(__self__, "val", val)

    @property
    @pulumi.getter
    def field(self) -> pulumi.Input[str]:
        """
        The name of the option you want to set.
        """
        return pulumi.get(self, "field")

    @field.setter
    def field(self, value: pulumi.Input[str]):
        pulumi.set(self, "field", value)

    @property
    @pulumi.getter
    def val(self) -> Optional[pulumi.Input[str]]:
        """
        The value for the option.
        """
        return pulumi.get(self, "val")

    @val.setter
    def val(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "val", value)


@pulumi.input_type
class IndexObjNameArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 database_name: Optional[pulumi.Input[str]] = None,
                 schema_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The obj_name name.
        :param pulumi.Input[str] database_name: The obj_name database name.
        :param pulumi.Input[str] schema_name: The obj_name schema name.
        """
        pulumi.set(__self__, "name", name)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The obj_name name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[pulumi.Input[str]]:
        """
        The obj_name database name.
        """
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[pulumi.Input[str]]:
        """
        The obj_name schema name.
        """
        return pulumi.get(self, "schema_name")

    @schema_name.setter
    def schema_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_name", value)


@pulumi.input_type
class SinkKafkaEnvelopeArgs:
    def __init__(__self__, *,
                 debezium: Optional[pulumi.Input[bool]] = None,
                 upsert: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] debezium: The generated schemas have a Debezium-style diff envelope to capture changes in the input view or source.
        :param pulumi.Input[bool] upsert: The sink emits data with upsert semantics: updates and inserts for the given key are expressed as a value, and deletes are expressed as a null value payload in Kafka.
        """
        if debezium is not None:
            pulumi.set(__self__, "debezium", debezium)
        if upsert is not None:
            pulumi.set(__self__, "upsert", upsert)

    @property
    @pulumi.getter
    def debezium(self) -> Optional[pulumi.Input[bool]]:
        """
        The generated schemas have a Debezium-style diff envelope to capture changes in the input view or source.
        """
        return pulumi.get(self, "debezium")

    @debezium.setter
    def debezium(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "debezium", value)

    @property
    @pulumi.getter
    def upsert(self) -> Optional[pulumi.Input[bool]]:
        """
        The sink emits data with upsert semantics: updates and inserts for the given key are expressed as a value, and deletes are expressed as a null value payload in Kafka.
        """
        return pulumi.get(self, "upsert")

    @upsert.setter
    def upsert(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "upsert", value)


@pulumi.input_type
class SinkKafkaFormatArgs:
    def __init__(__self__, *,
                 avro: Optional[pulumi.Input['SinkKafkaFormatAvroArgs']] = None,
                 json: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input['SinkKafkaFormatAvroArgs'] avro: Avro format.
        :param pulumi.Input[bool] json: JSON format.
        """
        if avro is not None:
            pulumi.set(__self__, "avro", avro)
        if json is not None:
            pulumi.set(__self__, "json", json)

    @property
    @pulumi.getter
    def avro(self) -> Optional[pulumi.Input['SinkKafkaFormatAvroArgs']]:
        """
        Avro format.
        """
        return pulumi.get(self, "avro")

    @avro.setter
    def avro(self, value: Optional[pulumi.Input['SinkKafkaFormatAvroArgs']]):
        pulumi.set(self, "avro", value)

    @property
    @pulumi.getter
    def json(self) -> Optional[pulumi.Input[bool]]:
        """
        JSON format.
        """
        return pulumi.get(self, "json")

    @json.setter
    def json(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "json", value)


@pulumi.input_type
class SinkKafkaFormatAvroArgs:
    def __init__(__self__, *,
                 schema_registry_connection: pulumi.Input['SinkKafkaFormatAvroSchemaRegistryConnectionArgs'],
                 avro_key_fullname: Optional[pulumi.Input[str]] = None,
                 avro_value_fullname: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "schema_registry_connection", schema_registry_connection)
        if avro_key_fullname is not None:
            pulumi.set(__self__, "avro_key_fullname", avro_key_fullname)
        if avro_value_fullname is not None:
            pulumi.set(__self__, "avro_value_fullname", avro_value_fullname)

    @property
    @pulumi.getter(name="schemaRegistryConnection")
    def schema_registry_connection(self) -> pulumi.Input['SinkKafkaFormatAvroSchemaRegistryConnectionArgs']:
        return pulumi.get(self, "schema_registry_connection")

    @schema_registry_connection.setter
    def schema_registry_connection(self, value: pulumi.Input['SinkKafkaFormatAvroSchemaRegistryConnectionArgs']):
        pulumi.set(self, "schema_registry_connection", value)

    @property
    @pulumi.getter(name="avroKeyFullname")
    def avro_key_fullname(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "avro_key_fullname")

    @avro_key_fullname.setter
    def avro_key_fullname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "avro_key_fullname", value)

    @property
    @pulumi.getter(name="avroValueFullname")
    def avro_value_fullname(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "avro_value_fullname")

    @avro_value_fullname.setter
    def avro_value_fullname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "avro_value_fullname", value)


@pulumi.input_type
class SinkKafkaFormatAvroSchemaRegistryConnectionArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 database_name: Optional[pulumi.Input[str]] = None,
                 schema_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The identifier for the sink.
        :param pulumi.Input[str] database_name: The identifier for the sink database.
        :param pulumi.Input[str] schema_name: The identifier for the sink schema.
        """
        pulumi.set(__self__, "name", name)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The identifier for the sink.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[pulumi.Input[str]]:
        """
        The identifier for the sink database.
        """
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[pulumi.Input[str]]:
        """
        The identifier for the sink schema.
        """
        return pulumi.get(self, "schema_name")

    @schema_name.setter
    def schema_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_name", value)


@pulumi.input_type
class SinkKafkaFromArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 database_name: Optional[pulumi.Input[str]] = None,
                 schema_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The from name.
        :param pulumi.Input[str] database_name: The from database name.
        :param pulumi.Input[str] schema_name: The from schema name.
        """
        pulumi.set(__self__, "name", name)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The from name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[pulumi.Input[str]]:
        """
        The from database name.
        """
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[pulumi.Input[str]]:
        """
        The from schema name.
        """
        return pulumi.get(self, "schema_name")

    @schema_name.setter
    def schema_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_name", value)


@pulumi.input_type
class SinkKafkaKafkaConnectionArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 database_name: Optional[pulumi.Input[str]] = None,
                 schema_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The kafka_connection name.
        :param pulumi.Input[str] database_name: The kafka_connection database name.
        :param pulumi.Input[str] schema_name: The kafka_connection schema name.
        """
        pulumi.set(__self__, "name", name)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The kafka_connection name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[pulumi.Input[str]]:
        """
        The kafka_connection database name.
        """
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[pulumi.Input[str]]:
        """
        The kafka_connection schema name.
        """
        return pulumi.get(self, "schema_name")

    @schema_name.setter
    def schema_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_name", value)


@pulumi.input_type
class SourceKafkaEnvelopeArgs:
    def __init__(__self__, *,
                 debezium: Optional[pulumi.Input[bool]] = None,
                 none: Optional[pulumi.Input[bool]] = None,
                 upsert: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] debezium: Use the Debezium envelope, which uses a diff envelope to handle CRUD operations.
        :param pulumi.Input[bool] none: Use an append-only envelope. This means that records will only be appended and cannot be updated or deleted.
        :param pulumi.Input[bool] upsert: Use the upsert envelope, which uses message keys to handle CRUD operations.
        """
        if debezium is not None:
            pulumi.set(__self__, "debezium", debezium)
        if none is not None:
            pulumi.set(__self__, "none", none)
        if upsert is not None:
            pulumi.set(__self__, "upsert", upsert)

    @property
    @pulumi.getter
    def debezium(self) -> Optional[pulumi.Input[bool]]:
        """
        Use the Debezium envelope, which uses a diff envelope to handle CRUD operations.
        """
        return pulumi.get(self, "debezium")

    @debezium.setter
    def debezium(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "debezium", value)

    @property
    @pulumi.getter
    def none(self) -> Optional[pulumi.Input[bool]]:
        """
        Use an append-only envelope. This means that records will only be appended and cannot be updated or deleted.
        """
        return pulumi.get(self, "none")

    @none.setter
    def none(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "none", value)

    @property
    @pulumi.getter
    def upsert(self) -> Optional[pulumi.Input[bool]]:
        """
        Use the upsert envelope, which uses message keys to handle CRUD operations.
        """
        return pulumi.get(self, "upsert")

    @upsert.setter
    def upsert(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "upsert", value)


@pulumi.input_type
class SourceKafkaFormatArgs:
    def __init__(__self__, *,
                 avro: Optional[pulumi.Input['SourceKafkaFormatAvroArgs']] = None,
                 csvs: Optional[pulumi.Input[Sequence[pulumi.Input['SourceKafkaFormatCsvArgs']]]] = None,
                 json: Optional[pulumi.Input[bool]] = None,
                 protobuf: Optional[pulumi.Input['SourceKafkaFormatProtobufArgs']] = None,
                 text: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input['SourceKafkaFormatAvroArgs'] avro: Avro format.
        :param pulumi.Input[Sequence[pulumi.Input['SourceKafkaFormatCsvArgs']]] csvs: CSV format.
        :param pulumi.Input[bool] json: JSON format.
        :param pulumi.Input['SourceKafkaFormatProtobufArgs'] protobuf: Protobuf format.
        :param pulumi.Input[bool] text: Text format.
        """
        if avro is not None:
            pulumi.set(__self__, "avro", avro)
        if csvs is not None:
            pulumi.set(__self__, "csvs", csvs)
        if json is not None:
            pulumi.set(__self__, "json", json)
        if protobuf is not None:
            pulumi.set(__self__, "protobuf", protobuf)
        if text is not None:
            pulumi.set(__self__, "text", text)

    @property
    @pulumi.getter
    def avro(self) -> Optional[pulumi.Input['SourceKafkaFormatAvroArgs']]:
        """
        Avro format.
        """
        return pulumi.get(self, "avro")

    @avro.setter
    def avro(self, value: Optional[pulumi.Input['SourceKafkaFormatAvroArgs']]):
        pulumi.set(self, "avro", value)

    @property
    @pulumi.getter
    def csvs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SourceKafkaFormatCsvArgs']]]]:
        """
        CSV format.
        """
        return pulumi.get(self, "csvs")

    @csvs.setter
    def csvs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SourceKafkaFormatCsvArgs']]]]):
        pulumi.set(self, "csvs", value)

    @property
    @pulumi.getter
    def json(self) -> Optional[pulumi.Input[bool]]:
        """
        JSON format.
        """
        return pulumi.get(self, "json")

    @json.setter
    def json(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "json", value)

    @property
    @pulumi.getter
    def protobuf(self) -> Optional[pulumi.Input['SourceKafkaFormatProtobufArgs']]:
        """
        Protobuf format.
        """
        return pulumi.get(self, "protobuf")

    @protobuf.setter
    def protobuf(self, value: Optional[pulumi.Input['SourceKafkaFormatProtobufArgs']]):
        pulumi.set(self, "protobuf", value)

    @property
    @pulumi.getter
    def text(self) -> Optional[pulumi.Input[bool]]:
        """
        Text format.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "text", value)


@pulumi.input_type
class SourceKafkaFormatAvroArgs:
    def __init__(__self__, *,
                 schema_registry_connection: pulumi.Input['SourceKafkaFormatAvroSchemaRegistryConnectionArgs'],
                 key_strategy: Optional[pulumi.Input[str]] = None,
                 value_strategy: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "schema_registry_connection", schema_registry_connection)
        if key_strategy is not None:
            pulumi.set(__self__, "key_strategy", key_strategy)
        if value_strategy is not None:
            pulumi.set(__self__, "value_strategy", value_strategy)

    @property
    @pulumi.getter(name="schemaRegistryConnection")
    def schema_registry_connection(self) -> pulumi.Input['SourceKafkaFormatAvroSchemaRegistryConnectionArgs']:
        return pulumi.get(self, "schema_registry_connection")

    @schema_registry_connection.setter
    def schema_registry_connection(self, value: pulumi.Input['SourceKafkaFormatAvroSchemaRegistryConnectionArgs']):
        pulumi.set(self, "schema_registry_connection", value)

    @property
    @pulumi.getter(name="keyStrategy")
    def key_strategy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key_strategy")

    @key_strategy.setter
    def key_strategy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_strategy", value)

    @property
    @pulumi.getter(name="valueStrategy")
    def value_strategy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value_strategy")

    @value_strategy.setter
    def value_strategy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value_strategy", value)


@pulumi.input_type
class SourceKafkaFormatAvroSchemaRegistryConnectionArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 database_name: Optional[pulumi.Input[str]] = None,
                 schema_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The identifier for the source.
        :param pulumi.Input[str] database_name: The identifier for the source database.
        :param pulumi.Input[str] schema_name: The identifier for the source schema.
        """
        pulumi.set(__self__, "name", name)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The identifier for the source.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[pulumi.Input[str]]:
        """
        The identifier for the source database.
        """
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[pulumi.Input[str]]:
        """
        The identifier for the source schema.
        """
        return pulumi.get(self, "schema_name")

    @schema_name.setter
    def schema_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_name", value)


@pulumi.input_type
class SourceKafkaFormatCsvArgs:
    def __init__(__self__, *,
                 column: Optional[pulumi.Input[int]] = None,
                 delimited_by: Optional[pulumi.Input[str]] = None,
                 headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if column is not None:
            pulumi.set(__self__, "column", column)
        if delimited_by is not None:
            pulumi.set(__self__, "delimited_by", delimited_by)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)

    @property
    @pulumi.getter
    def column(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="delimitedBy")
    def delimited_by(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "delimited_by")

    @delimited_by.setter
    def delimited_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delimited_by", value)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "headers", value)


@pulumi.input_type
class SourceKafkaFormatProtobufArgs:
    def __init__(__self__, *,
                 message: pulumi.Input[str],
                 schema_registry_connection: pulumi.Input['SourceKafkaFormatProtobufSchemaRegistryConnectionArgs']):
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "schema_registry_connection", schema_registry_connection)

    @property
    @pulumi.getter
    def message(self) -> pulumi.Input[str]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: pulumi.Input[str]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter(name="schemaRegistryConnection")
    def schema_registry_connection(self) -> pulumi.Input['SourceKafkaFormatProtobufSchemaRegistryConnectionArgs']:
        return pulumi.get(self, "schema_registry_connection")

    @schema_registry_connection.setter
    def schema_registry_connection(self, value: pulumi.Input['SourceKafkaFormatProtobufSchemaRegistryConnectionArgs']):
        pulumi.set(self, "schema_registry_connection", value)


@pulumi.input_type
class SourceKafkaFormatProtobufSchemaRegistryConnectionArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 database_name: Optional[pulumi.Input[str]] = None,
                 schema_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The identifier for the source.
        :param pulumi.Input[str] database_name: The identifier for the source database.
        :param pulumi.Input[str] schema_name: The identifier for the source schema.
        """
        pulumi.set(__self__, "name", name)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The identifier for the source.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[pulumi.Input[str]]:
        """
        The identifier for the source database.
        """
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[pulumi.Input[str]]:
        """
        The identifier for the source schema.
        """
        return pulumi.get(self, "schema_name")

    @schema_name.setter
    def schema_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_name", value)


@pulumi.input_type
class SourceKafkaKafkaConnectionArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 database_name: Optional[pulumi.Input[str]] = None,
                 schema_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The kafka_connection name.
        :param pulumi.Input[str] database_name: The kafka_connection database name.
        :param pulumi.Input[str] schema_name: The kafka_connection schema name.
        """
        pulumi.set(__self__, "name", name)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The kafka_connection name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[pulumi.Input[str]]:
        """
        The kafka_connection database name.
        """
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[pulumi.Input[str]]:
        """
        The kafka_connection schema name.
        """
        return pulumi.get(self, "schema_name")

    @schema_name.setter
    def schema_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_name", value)


@pulumi.input_type
class SourceKafkaKeyFormatArgs:
    def __init__(__self__, *,
                 avro: Optional[pulumi.Input['SourceKafkaKeyFormatAvroArgs']] = None,
                 csvs: Optional[pulumi.Input[Sequence[pulumi.Input['SourceKafkaKeyFormatCsvArgs']]]] = None,
                 json: Optional[pulumi.Input[bool]] = None,
                 protobuf: Optional[pulumi.Input['SourceKafkaKeyFormatProtobufArgs']] = None,
                 text: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input['SourceKafkaKeyFormatAvroArgs'] avro: Avro format.
        :param pulumi.Input[Sequence[pulumi.Input['SourceKafkaKeyFormatCsvArgs']]] csvs: CSV format.
        :param pulumi.Input[bool] json: JSON format.
        :param pulumi.Input['SourceKafkaKeyFormatProtobufArgs'] protobuf: Protobuf format.
        :param pulumi.Input[bool] text: Text format.
        """
        if avro is not None:
            pulumi.set(__self__, "avro", avro)
        if csvs is not None:
            pulumi.set(__self__, "csvs", csvs)
        if json is not None:
            pulumi.set(__self__, "json", json)
        if protobuf is not None:
            pulumi.set(__self__, "protobuf", protobuf)
        if text is not None:
            pulumi.set(__self__, "text", text)

    @property
    @pulumi.getter
    def avro(self) -> Optional[pulumi.Input['SourceKafkaKeyFormatAvroArgs']]:
        """
        Avro format.
        """
        return pulumi.get(self, "avro")

    @avro.setter
    def avro(self, value: Optional[pulumi.Input['SourceKafkaKeyFormatAvroArgs']]):
        pulumi.set(self, "avro", value)

    @property
    @pulumi.getter
    def csvs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SourceKafkaKeyFormatCsvArgs']]]]:
        """
        CSV format.
        """
        return pulumi.get(self, "csvs")

    @csvs.setter
    def csvs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SourceKafkaKeyFormatCsvArgs']]]]):
        pulumi.set(self, "csvs", value)

    @property
    @pulumi.getter
    def json(self) -> Optional[pulumi.Input[bool]]:
        """
        JSON format.
        """
        return pulumi.get(self, "json")

    @json.setter
    def json(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "json", value)

    @property
    @pulumi.getter
    def protobuf(self) -> Optional[pulumi.Input['SourceKafkaKeyFormatProtobufArgs']]:
        """
        Protobuf format.
        """
        return pulumi.get(self, "protobuf")

    @protobuf.setter
    def protobuf(self, value: Optional[pulumi.Input['SourceKafkaKeyFormatProtobufArgs']]):
        pulumi.set(self, "protobuf", value)

    @property
    @pulumi.getter
    def text(self) -> Optional[pulumi.Input[bool]]:
        """
        Text format.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "text", value)


@pulumi.input_type
class SourceKafkaKeyFormatAvroArgs:
    def __init__(__self__, *,
                 schema_registry_connection: pulumi.Input['SourceKafkaKeyFormatAvroSchemaRegistryConnectionArgs'],
                 key_strategy: Optional[pulumi.Input[str]] = None,
                 value_strategy: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "schema_registry_connection", schema_registry_connection)
        if key_strategy is not None:
            pulumi.set(__self__, "key_strategy", key_strategy)
        if value_strategy is not None:
            pulumi.set(__self__, "value_strategy", value_strategy)

    @property
    @pulumi.getter(name="schemaRegistryConnection")
    def schema_registry_connection(self) -> pulumi.Input['SourceKafkaKeyFormatAvroSchemaRegistryConnectionArgs']:
        return pulumi.get(self, "schema_registry_connection")

    @schema_registry_connection.setter
    def schema_registry_connection(self, value: pulumi.Input['SourceKafkaKeyFormatAvroSchemaRegistryConnectionArgs']):
        pulumi.set(self, "schema_registry_connection", value)

    @property
    @pulumi.getter(name="keyStrategy")
    def key_strategy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key_strategy")

    @key_strategy.setter
    def key_strategy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_strategy", value)

    @property
    @pulumi.getter(name="valueStrategy")
    def value_strategy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value_strategy")

    @value_strategy.setter
    def value_strategy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value_strategy", value)


@pulumi.input_type
class SourceKafkaKeyFormatAvroSchemaRegistryConnectionArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 database_name: Optional[pulumi.Input[str]] = None,
                 schema_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The identifier for the source.
        :param pulumi.Input[str] database_name: The identifier for the source database.
        :param pulumi.Input[str] schema_name: The identifier for the source schema.
        """
        pulumi.set(__self__, "name", name)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The identifier for the source.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[pulumi.Input[str]]:
        """
        The identifier for the source database.
        """
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[pulumi.Input[str]]:
        """
        The identifier for the source schema.
        """
        return pulumi.get(self, "schema_name")

    @schema_name.setter
    def schema_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_name", value)


@pulumi.input_type
class SourceKafkaKeyFormatCsvArgs:
    def __init__(__self__, *,
                 column: Optional[pulumi.Input[int]] = None,
                 delimited_by: Optional[pulumi.Input[str]] = None,
                 headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if column is not None:
            pulumi.set(__self__, "column", column)
        if delimited_by is not None:
            pulumi.set(__self__, "delimited_by", delimited_by)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)

    @property
    @pulumi.getter
    def column(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="delimitedBy")
    def delimited_by(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "delimited_by")

    @delimited_by.setter
    def delimited_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delimited_by", value)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "headers", value)


@pulumi.input_type
class SourceKafkaKeyFormatProtobufArgs:
    def __init__(__self__, *,
                 message: pulumi.Input[str],
                 schema_registry_connection: pulumi.Input['SourceKafkaKeyFormatProtobufSchemaRegistryConnectionArgs']):
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "schema_registry_connection", schema_registry_connection)

    @property
    @pulumi.getter
    def message(self) -> pulumi.Input[str]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: pulumi.Input[str]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter(name="schemaRegistryConnection")
    def schema_registry_connection(self) -> pulumi.Input['SourceKafkaKeyFormatProtobufSchemaRegistryConnectionArgs']:
        return pulumi.get(self, "schema_registry_connection")

    @schema_registry_connection.setter
    def schema_registry_connection(self, value: pulumi.Input['SourceKafkaKeyFormatProtobufSchemaRegistryConnectionArgs']):
        pulumi.set(self, "schema_registry_connection", value)


@pulumi.input_type
class SourceKafkaKeyFormatProtobufSchemaRegistryConnectionArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 database_name: Optional[pulumi.Input[str]] = None,
                 schema_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The identifier for the source.
        :param pulumi.Input[str] database_name: The identifier for the source database.
        :param pulumi.Input[str] schema_name: The identifier for the source schema.
        """
        pulumi.set(__self__, "name", name)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The identifier for the source.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[pulumi.Input[str]]:
        """
        The identifier for the source database.
        """
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[pulumi.Input[str]]:
        """
        The identifier for the source schema.
        """
        return pulumi.get(self, "schema_name")

    @schema_name.setter
    def schema_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_name", value)


@pulumi.input_type
class SourceKafkaValueFormatArgs:
    def __init__(__self__, *,
                 avro: Optional[pulumi.Input['SourceKafkaValueFormatAvroArgs']] = None,
                 csvs: Optional[pulumi.Input[Sequence[pulumi.Input['SourceKafkaValueFormatCsvArgs']]]] = None,
                 json: Optional[pulumi.Input[bool]] = None,
                 protobuf: Optional[pulumi.Input['SourceKafkaValueFormatProtobufArgs']] = None,
                 text: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input['SourceKafkaValueFormatAvroArgs'] avro: Avro format.
        :param pulumi.Input[Sequence[pulumi.Input['SourceKafkaValueFormatCsvArgs']]] csvs: CSV format.
        :param pulumi.Input[bool] json: JSON format.
        :param pulumi.Input['SourceKafkaValueFormatProtobufArgs'] protobuf: Protobuf format.
        :param pulumi.Input[bool] text: Text format.
        """
        if avro is not None:
            pulumi.set(__self__, "avro", avro)
        if csvs is not None:
            pulumi.set(__self__, "csvs", csvs)
        if json is not None:
            pulumi.set(__self__, "json", json)
        if protobuf is not None:
            pulumi.set(__self__, "protobuf", protobuf)
        if text is not None:
            pulumi.set(__self__, "text", text)

    @property
    @pulumi.getter
    def avro(self) -> Optional[pulumi.Input['SourceKafkaValueFormatAvroArgs']]:
        """
        Avro format.
        """
        return pulumi.get(self, "avro")

    @avro.setter
    def avro(self, value: Optional[pulumi.Input['SourceKafkaValueFormatAvroArgs']]):
        pulumi.set(self, "avro", value)

    @property
    @pulumi.getter
    def csvs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SourceKafkaValueFormatCsvArgs']]]]:
        """
        CSV format.
        """
        return pulumi.get(self, "csvs")

    @csvs.setter
    def csvs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SourceKafkaValueFormatCsvArgs']]]]):
        pulumi.set(self, "csvs", value)

    @property
    @pulumi.getter
    def json(self) -> Optional[pulumi.Input[bool]]:
        """
        JSON format.
        """
        return pulumi.get(self, "json")

    @json.setter
    def json(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "json", value)

    @property
    @pulumi.getter
    def protobuf(self) -> Optional[pulumi.Input['SourceKafkaValueFormatProtobufArgs']]:
        """
        Protobuf format.
        """
        return pulumi.get(self, "protobuf")

    @protobuf.setter
    def protobuf(self, value: Optional[pulumi.Input['SourceKafkaValueFormatProtobufArgs']]):
        pulumi.set(self, "protobuf", value)

    @property
    @pulumi.getter
    def text(self) -> Optional[pulumi.Input[bool]]:
        """
        Text format.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "text", value)


@pulumi.input_type
class SourceKafkaValueFormatAvroArgs:
    def __init__(__self__, *,
                 schema_registry_connection: pulumi.Input['SourceKafkaValueFormatAvroSchemaRegistryConnectionArgs'],
                 key_strategy: Optional[pulumi.Input[str]] = None,
                 value_strategy: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "schema_registry_connection", schema_registry_connection)
        if key_strategy is not None:
            pulumi.set(__self__, "key_strategy", key_strategy)
        if value_strategy is not None:
            pulumi.set(__self__, "value_strategy", value_strategy)

    @property
    @pulumi.getter(name="schemaRegistryConnection")
    def schema_registry_connection(self) -> pulumi.Input['SourceKafkaValueFormatAvroSchemaRegistryConnectionArgs']:
        return pulumi.get(self, "schema_registry_connection")

    @schema_registry_connection.setter
    def schema_registry_connection(self, value: pulumi.Input['SourceKafkaValueFormatAvroSchemaRegistryConnectionArgs']):
        pulumi.set(self, "schema_registry_connection", value)

    @property
    @pulumi.getter(name="keyStrategy")
    def key_strategy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key_strategy")

    @key_strategy.setter
    def key_strategy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_strategy", value)

    @property
    @pulumi.getter(name="valueStrategy")
    def value_strategy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value_strategy")

    @value_strategy.setter
    def value_strategy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value_strategy", value)


@pulumi.input_type
class SourceKafkaValueFormatAvroSchemaRegistryConnectionArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 database_name: Optional[pulumi.Input[str]] = None,
                 schema_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The identifier for the source.
        :param pulumi.Input[str] database_name: The identifier for the source database.
        :param pulumi.Input[str] schema_name: The identifier for the source schema.
        """
        pulumi.set(__self__, "name", name)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The identifier for the source.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[pulumi.Input[str]]:
        """
        The identifier for the source database.
        """
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[pulumi.Input[str]]:
        """
        The identifier for the source schema.
        """
        return pulumi.get(self, "schema_name")

    @schema_name.setter
    def schema_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_name", value)


@pulumi.input_type
class SourceKafkaValueFormatCsvArgs:
    def __init__(__self__, *,
                 column: Optional[pulumi.Input[int]] = None,
                 delimited_by: Optional[pulumi.Input[str]] = None,
                 headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if column is not None:
            pulumi.set(__self__, "column", column)
        if delimited_by is not None:
            pulumi.set(__self__, "delimited_by", delimited_by)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)

    @property
    @pulumi.getter
    def column(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="delimitedBy")
    def delimited_by(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "delimited_by")

    @delimited_by.setter
    def delimited_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delimited_by", value)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "headers", value)


@pulumi.input_type
class SourceKafkaValueFormatProtobufArgs:
    def __init__(__self__, *,
                 message: pulumi.Input[str],
                 schema_registry_connection: pulumi.Input['SourceKafkaValueFormatProtobufSchemaRegistryConnectionArgs']):
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "schema_registry_connection", schema_registry_connection)

    @property
    @pulumi.getter
    def message(self) -> pulumi.Input[str]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: pulumi.Input[str]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter(name="schemaRegistryConnection")
    def schema_registry_connection(self) -> pulumi.Input['SourceKafkaValueFormatProtobufSchemaRegistryConnectionArgs']:
        return pulumi.get(self, "schema_registry_connection")

    @schema_registry_connection.setter
    def schema_registry_connection(self, value: pulumi.Input['SourceKafkaValueFormatProtobufSchemaRegistryConnectionArgs']):
        pulumi.set(self, "schema_registry_connection", value)


@pulumi.input_type
class SourceKafkaValueFormatProtobufSchemaRegistryConnectionArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 database_name: Optional[pulumi.Input[str]] = None,
                 schema_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The identifier for the source.
        :param pulumi.Input[str] database_name: The identifier for the source database.
        :param pulumi.Input[str] schema_name: The identifier for the source schema.
        """
        pulumi.set(__self__, "name", name)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The identifier for the source.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[pulumi.Input[str]]:
        """
        The identifier for the source database.
        """
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[pulumi.Input[str]]:
        """
        The identifier for the source schema.
        """
        return pulumi.get(self, "schema_name")

    @schema_name.setter
    def schema_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_name", value)


@pulumi.input_type
class SourceLoadgenAuctionOptionArgs:
    def __init__(__self__, *,
                 scale_factor: Optional[pulumi.Input[float]] = None,
                 tables: Optional[pulumi.Input[Sequence[pulumi.Input['SourceLoadgenAuctionOptionTableArgs']]]] = None,
                 tick_interval: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[float] scale_factor: The scale factor for the generator. Defaults to 0.01 (~ 10MB).
        :param pulumi.Input[Sequence[pulumi.Input['SourceLoadgenAuctionOptionTableArgs']]] tables: Creates subsources for specific tables.
        :param pulumi.Input[str] tick_interval: The interval at which the next datum should be emitted. Defaults to one second.
        """
        if scale_factor is not None:
            pulumi.set(__self__, "scale_factor", scale_factor)
        if tables is not None:
            pulumi.set(__self__, "tables", tables)
        if tick_interval is not None:
            pulumi.set(__self__, "tick_interval", tick_interval)

    @property
    @pulumi.getter(name="scaleFactor")
    def scale_factor(self) -> Optional[pulumi.Input[float]]:
        """
        The scale factor for the generator. Defaults to 0.01 (~ 10MB).
        """
        return pulumi.get(self, "scale_factor")

    @scale_factor.setter
    def scale_factor(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "scale_factor", value)

    @property
    @pulumi.getter
    def tables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SourceLoadgenAuctionOptionTableArgs']]]]:
        """
        Creates subsources for specific tables.
        """
        return pulumi.get(self, "tables")

    @tables.setter
    def tables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SourceLoadgenAuctionOptionTableArgs']]]]):
        pulumi.set(self, "tables", value)

    @property
    @pulumi.getter(name="tickInterval")
    def tick_interval(self) -> Optional[pulumi.Input[str]]:
        """
        The interval at which the next datum should be emitted. Defaults to one second.
        """
        return pulumi.get(self, "tick_interval")

    @tick_interval.setter
    def tick_interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tick_interval", value)


@pulumi.input_type
class SourceLoadgenAuctionOptionTableArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 alias: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The identifier for the source.
        """
        pulumi.set(__self__, "name", name)
        if alias is not None:
            pulumi.set(__self__, "alias", alias)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The identifier for the source.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def alias(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "alias")

    @alias.setter
    def alias(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alias", value)


@pulumi.input_type
class SourceLoadgenCounterOptionArgs:
    def __init__(__self__, *,
                 max_cardinality: Optional[pulumi.Input[int]] = None,
                 scale_factor: Optional[pulumi.Input[float]] = None,
                 tick_interval: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] max_cardinality: Causes the generator to delete old values to keep the collection at most a given size. Defaults to unlimited.
        :param pulumi.Input[float] scale_factor: The scale factor for the generator. Defaults to 0.01 (~ 10MB).
        :param pulumi.Input[str] tick_interval: The interval at which the next datum should be emitted. Defaults to one second.
        """
        if max_cardinality is not None:
            pulumi.set(__self__, "max_cardinality", max_cardinality)
        if scale_factor is not None:
            pulumi.set(__self__, "scale_factor", scale_factor)
        if tick_interval is not None:
            pulumi.set(__self__, "tick_interval", tick_interval)

    @property
    @pulumi.getter(name="maxCardinality")
    def max_cardinality(self) -> Optional[pulumi.Input[int]]:
        """
        Causes the generator to delete old values to keep the collection at most a given size. Defaults to unlimited.
        """
        return pulumi.get(self, "max_cardinality")

    @max_cardinality.setter
    def max_cardinality(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_cardinality", value)

    @property
    @pulumi.getter(name="scaleFactor")
    def scale_factor(self) -> Optional[pulumi.Input[float]]:
        """
        The scale factor for the generator. Defaults to 0.01 (~ 10MB).
        """
        return pulumi.get(self, "scale_factor")

    @scale_factor.setter
    def scale_factor(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "scale_factor", value)

    @property
    @pulumi.getter(name="tickInterval")
    def tick_interval(self) -> Optional[pulumi.Input[str]]:
        """
        The interval at which the next datum should be emitted. Defaults to one second.
        """
        return pulumi.get(self, "tick_interval")

    @tick_interval.setter
    def tick_interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tick_interval", value)


@pulumi.input_type
class SourceLoadgenTpchOptionArgs:
    def __init__(__self__, *,
                 scale_factor: Optional[pulumi.Input[float]] = None,
                 tables: Optional[pulumi.Input[Sequence[pulumi.Input['SourceLoadgenTpchOptionTableArgs']]]] = None,
                 tick_interval: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[float] scale_factor: The scale factor for the generator. Defaults to 0.01 (~ 10MB).
        :param pulumi.Input[Sequence[pulumi.Input['SourceLoadgenTpchOptionTableArgs']]] tables: Creates subsources for specific tables.
        :param pulumi.Input[str] tick_interval: The interval at which the next datum should be emitted. Defaults to one second.
        """
        if scale_factor is not None:
            pulumi.set(__self__, "scale_factor", scale_factor)
        if tables is not None:
            pulumi.set(__self__, "tables", tables)
        if tick_interval is not None:
            pulumi.set(__self__, "tick_interval", tick_interval)

    @property
    @pulumi.getter(name="scaleFactor")
    def scale_factor(self) -> Optional[pulumi.Input[float]]:
        """
        The scale factor for the generator. Defaults to 0.01 (~ 10MB).
        """
        return pulumi.get(self, "scale_factor")

    @scale_factor.setter
    def scale_factor(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "scale_factor", value)

    @property
    @pulumi.getter
    def tables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SourceLoadgenTpchOptionTableArgs']]]]:
        """
        Creates subsources for specific tables.
        """
        return pulumi.get(self, "tables")

    @tables.setter
    def tables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SourceLoadgenTpchOptionTableArgs']]]]):
        pulumi.set(self, "tables", value)

    @property
    @pulumi.getter(name="tickInterval")
    def tick_interval(self) -> Optional[pulumi.Input[str]]:
        """
        The interval at which the next datum should be emitted. Defaults to one second.
        """
        return pulumi.get(self, "tick_interval")

    @tick_interval.setter
    def tick_interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tick_interval", value)


@pulumi.input_type
class SourceLoadgenTpchOptionTableArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 alias: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The identifier for the source.
        """
        pulumi.set(__self__, "name", name)
        if alias is not None:
            pulumi.set(__self__, "alias", alias)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The identifier for the source.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def alias(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "alias")

    @alias.setter
    def alias(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alias", value)


@pulumi.input_type
class SourcePostgresPostgresConnectionArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 database_name: Optional[pulumi.Input[str]] = None,
                 schema_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The posgres_connection name.
        :param pulumi.Input[str] database_name: The posgres_connection database name.
        :param pulumi.Input[str] schema_name: The posgres_connection schema name.
        """
        pulumi.set(__self__, "name", name)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The posgres_connection name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[pulumi.Input[str]]:
        """
        The posgres_connection database name.
        """
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[pulumi.Input[str]]:
        """
        The posgres_connection schema name.
        """
        return pulumi.get(self, "schema_name")

    @schema_name.setter
    def schema_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_name", value)


@pulumi.input_type
class SourcePostgresTableArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 alias: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The name of the table.
        :param pulumi.Input[str] alias: The alias of the table.
        """
        pulumi.set(__self__, "name", name)
        if alias is not None:
            pulumi.set(__self__, "alias", alias)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the table.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def alias(self) -> Optional[pulumi.Input[str]]:
        """
        The alias of the table.
        """
        return pulumi.get(self, "alias")

    @alias.setter
    def alias(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alias", value)


@pulumi.input_type
class TableColumnArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 type: pulumi.Input[str],
                 nullable: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] name: The name of the column to be created in the table.
        :param pulumi.Input[str] type: The data type of the column indicated by name.
        :param pulumi.Input[bool] nullable: Do not allow the column to contain NULL values. Columns without this constraint can contain NULL values.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if nullable is not None:
            pulumi.set(__self__, "nullable", nullable)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the column to be created in the table.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        The data type of the column indicated by name.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def nullable(self) -> Optional[pulumi.Input[bool]]:
        """
        Do not allow the column to contain NULL values. Columns without this constraint can contain NULL values.
        """
        return pulumi.get(self, "nullable")

    @nullable.setter
    def nullable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "nullable", value)


