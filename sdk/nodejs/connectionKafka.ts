// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * The connection resource allows you to manage connections in Materialize.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as materialize from "@pulumi/materialize";
 *
 * // Create a Kafka Connection
 * const exampleKafkaConnection = new materialize.ConnectionKafka("example_kafka_connection", {
 *     kafkaBrokers: [{
 *         broker: "b-1.hostname-1:9096",
 *     }],
 *     progressTopic: "example",
 *     saslMechanisms: "SCRAM-SHA-256",
 *     saslPassword: {
 *         databaseName: "materialize",
 *         name: "kafka_password",
 *         schemaName: "public",
 *     },
 *     saslUsername: "example",
 * });
 * const exampleKafkaConnectionMultipleBrokers = new materialize.ConnectionKafka("example_kafka_connection_multiple_brokers", {
 *     kafkaBrokers: [
 *         {
 *             availabilityZone: "use1-az1",
 *             broker: "b-1.hostname-1:9096",
 *             privatelinkConnection: {
 *                 databaseName: "materialize",
 *                 name: "example_aws_privatelink_conn",
 *                 schemaName: "public",
 *             },
 *             targetGroupPort: 9001,
 *         },
 *         {
 *             availabilityZone: "use1-az2",
 *             broker: "b-2.hostname-2:9096",
 *             privatelinkConnection: {
 *                 databaseName: "materialize",
 *                 name: "example_aws_privatelink_conn",
 *                 schemaName: "public",
 *             },
 *             targetGroupPort: 9002,
 *         },
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * #Connections can be imported using the connection id
 *
 * ```sh
 *  $ pulumi import materialize:index/connectionKafka:ConnectionKafka example <connection_id>
 * ```
 */
export class ConnectionKafka extends pulumi.CustomResource {
    /**
     * Get an existing ConnectionKafka resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConnectionKafkaState, opts?: pulumi.CustomResourceOptions): ConnectionKafka {
        return new ConnectionKafka(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'materialize:index/connectionKafka:ConnectionKafka';

    /**
     * Returns true if the given object is an instance of ConnectionKafka.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ConnectionKafka {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConnectionKafka.__pulumiType;
    }

    /**
     * The type of connection.
     */
    public /*out*/ readonly connectionType!: pulumi.Output<string>;
    /**
     * The identifier for the connection database.
     */
    public readonly databaseName!: pulumi.Output<string | undefined>;
    /**
     * The Kafka brokers configuration.
     */
    public readonly kafkaBrokers!: pulumi.Output<outputs.ConnectionKafkaKafkaBroker[]>;
    /**
     * The identifier for the connection.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The name of a topic that Kafka sinks can use to track internal consistency metadata.
     */
    public readonly progressTopic!: pulumi.Output<string | undefined>;
    /**
     * The fully qualified name of the connection.
     */
    public /*out*/ readonly qualifiedSqlName!: pulumi.Output<string>;
    /**
     * The SASL mechanism for the Kafka broker.
     */
    public readonly saslMechanisms!: pulumi.Output<string | undefined>;
    /**
     * The SASL password for the Kafka broker.
     */
    public readonly saslPassword!: pulumi.Output<outputs.ConnectionKafkaSaslPassword | undefined>;
    /**
     * The SASL username for the Kafka broker.
     */
    public readonly saslUsername!: pulumi.Output<outputs.ConnectionKafkaSaslUsername | undefined>;
    /**
     * The identifier for the connection schema.
     */
    public readonly schemaName!: pulumi.Output<string | undefined>;
    /**
     * The SSH tunnel configuration for the Kafka broker.
     */
    public readonly sshTunnel!: pulumi.Output<outputs.ConnectionKafkaSshTunnel | undefined>;
    /**
     * The client certificate for the Kafka broker.
     */
    public readonly sslCertificate!: pulumi.Output<outputs.ConnectionKafkaSslCertificate | undefined>;
    /**
     * The CA certificate for the Kafka broker.
     */
    public readonly sslCertificateAuthority!: pulumi.Output<outputs.ConnectionKafkaSslCertificateAuthority | undefined>;
    /**
     * The client key for the Kafka broker.
     */
    public readonly sslKey!: pulumi.Output<outputs.ConnectionKafkaSslKey | undefined>;

    /**
     * Create a ConnectionKafka resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConnectionKafkaArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConnectionKafkaArgs | ConnectionKafkaState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConnectionKafkaState | undefined;
            resourceInputs["connectionType"] = state ? state.connectionType : undefined;
            resourceInputs["databaseName"] = state ? state.databaseName : undefined;
            resourceInputs["kafkaBrokers"] = state ? state.kafkaBrokers : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["progressTopic"] = state ? state.progressTopic : undefined;
            resourceInputs["qualifiedSqlName"] = state ? state.qualifiedSqlName : undefined;
            resourceInputs["saslMechanisms"] = state ? state.saslMechanisms : undefined;
            resourceInputs["saslPassword"] = state ? state.saslPassword : undefined;
            resourceInputs["saslUsername"] = state ? state.saslUsername : undefined;
            resourceInputs["schemaName"] = state ? state.schemaName : undefined;
            resourceInputs["sshTunnel"] = state ? state.sshTunnel : undefined;
            resourceInputs["sslCertificate"] = state ? state.sslCertificate : undefined;
            resourceInputs["sslCertificateAuthority"] = state ? state.sslCertificateAuthority : undefined;
            resourceInputs["sslKey"] = state ? state.sslKey : undefined;
        } else {
            const args = argsOrState as ConnectionKafkaArgs | undefined;
            if ((!args || args.kafkaBrokers === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kafkaBrokers'");
            }
            resourceInputs["databaseName"] = args ? args.databaseName : undefined;
            resourceInputs["kafkaBrokers"] = args ? args.kafkaBrokers : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["progressTopic"] = args ? args.progressTopic : undefined;
            resourceInputs["saslMechanisms"] = args ? args.saslMechanisms : undefined;
            resourceInputs["saslPassword"] = args ? args.saslPassword : undefined;
            resourceInputs["saslUsername"] = args ? args.saslUsername : undefined;
            resourceInputs["schemaName"] = args ? args.schemaName : undefined;
            resourceInputs["sshTunnel"] = args ? args.sshTunnel : undefined;
            resourceInputs["sslCertificate"] = args ? args.sslCertificate : undefined;
            resourceInputs["sslCertificateAuthority"] = args ? args.sslCertificateAuthority : undefined;
            resourceInputs["sslKey"] = args ? args.sslKey : undefined;
            resourceInputs["connectionType"] = undefined /*out*/;
            resourceInputs["qualifiedSqlName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ConnectionKafka.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ConnectionKafka resources.
 */
export interface ConnectionKafkaState {
    /**
     * The type of connection.
     */
    connectionType?: pulumi.Input<string>;
    /**
     * The identifier for the connection database.
     */
    databaseName?: pulumi.Input<string>;
    /**
     * The Kafka brokers configuration.
     */
    kafkaBrokers?: pulumi.Input<pulumi.Input<inputs.ConnectionKafkaKafkaBroker>[]>;
    /**
     * The identifier for the connection.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of a topic that Kafka sinks can use to track internal consistency metadata.
     */
    progressTopic?: pulumi.Input<string>;
    /**
     * The fully qualified name of the connection.
     */
    qualifiedSqlName?: pulumi.Input<string>;
    /**
     * The SASL mechanism for the Kafka broker.
     */
    saslMechanisms?: pulumi.Input<string>;
    /**
     * The SASL password for the Kafka broker.
     */
    saslPassword?: pulumi.Input<inputs.ConnectionKafkaSaslPassword>;
    /**
     * The SASL username for the Kafka broker.
     */
    saslUsername?: pulumi.Input<inputs.ConnectionKafkaSaslUsername>;
    /**
     * The identifier for the connection schema.
     */
    schemaName?: pulumi.Input<string>;
    /**
     * The SSH tunnel configuration for the Kafka broker.
     */
    sshTunnel?: pulumi.Input<inputs.ConnectionKafkaSshTunnel>;
    /**
     * The client certificate for the Kafka broker.
     */
    sslCertificate?: pulumi.Input<inputs.ConnectionKafkaSslCertificate>;
    /**
     * The CA certificate for the Kafka broker.
     */
    sslCertificateAuthority?: pulumi.Input<inputs.ConnectionKafkaSslCertificateAuthority>;
    /**
     * The client key for the Kafka broker.
     */
    sslKey?: pulumi.Input<inputs.ConnectionKafkaSslKey>;
}

/**
 * The set of arguments for constructing a ConnectionKafka resource.
 */
export interface ConnectionKafkaArgs {
    /**
     * The identifier for the connection database.
     */
    databaseName?: pulumi.Input<string>;
    /**
     * The Kafka brokers configuration.
     */
    kafkaBrokers: pulumi.Input<pulumi.Input<inputs.ConnectionKafkaKafkaBroker>[]>;
    /**
     * The identifier for the connection.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of a topic that Kafka sinks can use to track internal consistency metadata.
     */
    progressTopic?: pulumi.Input<string>;
    /**
     * The SASL mechanism for the Kafka broker.
     */
    saslMechanisms?: pulumi.Input<string>;
    /**
     * The SASL password for the Kafka broker.
     */
    saslPassword?: pulumi.Input<inputs.ConnectionKafkaSaslPassword>;
    /**
     * The SASL username for the Kafka broker.
     */
    saslUsername?: pulumi.Input<inputs.ConnectionKafkaSaslUsername>;
    /**
     * The identifier for the connection schema.
     */
    schemaName?: pulumi.Input<string>;
    /**
     * The SSH tunnel configuration for the Kafka broker.
     */
    sshTunnel?: pulumi.Input<inputs.ConnectionKafkaSshTunnel>;
    /**
     * The client certificate for the Kafka broker.
     */
    sslCertificate?: pulumi.Input<inputs.ConnectionKafkaSslCertificate>;
    /**
     * The CA certificate for the Kafka broker.
     */
    sslCertificateAuthority?: pulumi.Input<inputs.ConnectionKafkaSslCertificateAuthority>;
    /**
     * The client key for the Kafka broker.
     */
    sslKey?: pulumi.Input<inputs.ConnectionKafkaSslKey>;
}
