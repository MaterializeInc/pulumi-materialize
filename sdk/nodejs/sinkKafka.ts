// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * A sink describes an external system you want Materialize to write data to, and provides details about how to encode that data.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as materialize from "@pulumi/materialize";
 *
 * const exampleSinkKafka = new materialize.SinkKafka("example_sink_kafka", {
 *     envelope: {
 *         upsert: true,
 *     },
 *     format: {
 *         avro: {
 *             schemaRegistryConnection: {
 *                 databaseName: "database",
 *                 name: "csr_connection",
 *                 schemaName: "schema",
 *             },
 *         },
 *     },
 *     from: {
 *         name: "table",
 *     },
 *     kafkaConnection: {
 *         name: "kafka_connection",
 *     },
 *     schemaName: "schema",
 *     size: "3xsmall",
 *     topic: "test_avro_topic",
 * });
 * ```
 *
 * ## Import
 *
 * # Sinks can be imported using the sink id
 *
 * ```sh
 *  $ pulumi import materialize:index/sinkKafka:SinkKafka example_sink_kafka <sink_id>
 * ```
 */
export class SinkKafka extends pulumi.CustomResource {
    /**
     * Get an existing SinkKafka resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SinkKafkaState, opts?: pulumi.CustomResourceOptions): SinkKafka {
        return new SinkKafka(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'materialize:index/sinkKafka:SinkKafka';

    /**
     * Returns true if the given object is an instance of SinkKafka.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SinkKafka {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SinkKafka.__pulumiType;
    }

    /**
     * The cluster to maintain this sink. If not specified, the size option must be specified.
     */
    public readonly clusterName!: pulumi.Output<string>;
    /**
     * The identifier for the sink database.
     */
    public readonly databaseName!: pulumi.Output<string | undefined>;
    /**
     * How to interpret records (e.g. Debezium, Upsert).
     */
    public readonly envelope!: pulumi.Output<outputs.SinkKafkaEnvelope | undefined>;
    /**
     * How to decode raw bytes from different formats into data structures it can understand at runtime.
     */
    public readonly format!: pulumi.Output<outputs.SinkKafkaFormat | undefined>;
    /**
     * The name of the source, table or materialized view you want to send to the sink.
     */
    public readonly from!: pulumi.Output<outputs.SinkKafkaFrom>;
    /**
     * The name of the Kafka connection to use in the sink.
     */
    public readonly kafkaConnection!: pulumi.Output<outputs.SinkKafkaKafkaConnection>;
    /**
     * An optional list of columns to use for the Kafka key. If unspecified, the Kafka key is left unset.
     */
    public readonly keys!: pulumi.Output<string[] | undefined>;
    /**
     * The identifier for the sink.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The fully qualified name of the sink.
     */
    public /*out*/ readonly qualifiedSqlName!: pulumi.Output<string>;
    /**
     * The identifier for the sink schema.
     */
    public readonly schemaName!: pulumi.Output<string | undefined>;
    /**
     * The type of sink.
     */
    public /*out*/ readonly sinkType!: pulumi.Output<string>;
    /**
     * The size of the sink.
     */
    public readonly size!: pulumi.Output<string>;
    /**
     * Whether to emit the consolidated results of the query before the sink was created at the start of the sink.
     */
    public readonly snapshot!: pulumi.Output<boolean | undefined>;
    /**
     * The Kafka topic you want to subscribe to.
     */
    public readonly topic!: pulumi.Output<string>;

    /**
     * Create a SinkKafka resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SinkKafkaArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SinkKafkaArgs | SinkKafkaState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SinkKafkaState | undefined;
            resourceInputs["clusterName"] = state ? state.clusterName : undefined;
            resourceInputs["databaseName"] = state ? state.databaseName : undefined;
            resourceInputs["envelope"] = state ? state.envelope : undefined;
            resourceInputs["format"] = state ? state.format : undefined;
            resourceInputs["from"] = state ? state.from : undefined;
            resourceInputs["kafkaConnection"] = state ? state.kafkaConnection : undefined;
            resourceInputs["keys"] = state ? state.keys : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["qualifiedSqlName"] = state ? state.qualifiedSqlName : undefined;
            resourceInputs["schemaName"] = state ? state.schemaName : undefined;
            resourceInputs["sinkType"] = state ? state.sinkType : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["snapshot"] = state ? state.snapshot : undefined;
            resourceInputs["topic"] = state ? state.topic : undefined;
        } else {
            const args = argsOrState as SinkKafkaArgs | undefined;
            if ((!args || args.from === undefined) && !opts.urn) {
                throw new Error("Missing required property 'from'");
            }
            if ((!args || args.kafkaConnection === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kafkaConnection'");
            }
            if ((!args || args.topic === undefined) && !opts.urn) {
                throw new Error("Missing required property 'topic'");
            }
            resourceInputs["clusterName"] = args ? args.clusterName : undefined;
            resourceInputs["databaseName"] = args ? args.databaseName : undefined;
            resourceInputs["envelope"] = args ? args.envelope : undefined;
            resourceInputs["format"] = args ? args.format : undefined;
            resourceInputs["from"] = args ? args.from : undefined;
            resourceInputs["kafkaConnection"] = args ? args.kafkaConnection : undefined;
            resourceInputs["keys"] = args ? args.keys : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["schemaName"] = args ? args.schemaName : undefined;
            resourceInputs["size"] = args ? args.size : undefined;
            resourceInputs["snapshot"] = args ? args.snapshot : undefined;
            resourceInputs["topic"] = args ? args.topic : undefined;
            resourceInputs["qualifiedSqlName"] = undefined /*out*/;
            resourceInputs["sinkType"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SinkKafka.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SinkKafka resources.
 */
export interface SinkKafkaState {
    /**
     * The cluster to maintain this sink. If not specified, the size option must be specified.
     */
    clusterName?: pulumi.Input<string>;
    /**
     * The identifier for the sink database.
     */
    databaseName?: pulumi.Input<string>;
    /**
     * How to interpret records (e.g. Debezium, Upsert).
     */
    envelope?: pulumi.Input<inputs.SinkKafkaEnvelope>;
    /**
     * How to decode raw bytes from different formats into data structures it can understand at runtime.
     */
    format?: pulumi.Input<inputs.SinkKafkaFormat>;
    /**
     * The name of the source, table or materialized view you want to send to the sink.
     */
    from?: pulumi.Input<inputs.SinkKafkaFrom>;
    /**
     * The name of the Kafka connection to use in the sink.
     */
    kafkaConnection?: pulumi.Input<inputs.SinkKafkaKafkaConnection>;
    /**
     * An optional list of columns to use for the Kafka key. If unspecified, the Kafka key is left unset.
     */
    keys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The identifier for the sink.
     */
    name?: pulumi.Input<string>;
    /**
     * The fully qualified name of the sink.
     */
    qualifiedSqlName?: pulumi.Input<string>;
    /**
     * The identifier for the sink schema.
     */
    schemaName?: pulumi.Input<string>;
    /**
     * The type of sink.
     */
    sinkType?: pulumi.Input<string>;
    /**
     * The size of the sink.
     */
    size?: pulumi.Input<string>;
    /**
     * Whether to emit the consolidated results of the query before the sink was created at the start of the sink.
     */
    snapshot?: pulumi.Input<boolean>;
    /**
     * The Kafka topic you want to subscribe to.
     */
    topic?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SinkKafka resource.
 */
export interface SinkKafkaArgs {
    /**
     * The cluster to maintain this sink. If not specified, the size option must be specified.
     */
    clusterName?: pulumi.Input<string>;
    /**
     * The identifier for the sink database.
     */
    databaseName?: pulumi.Input<string>;
    /**
     * How to interpret records (e.g. Debezium, Upsert).
     */
    envelope?: pulumi.Input<inputs.SinkKafkaEnvelope>;
    /**
     * How to decode raw bytes from different formats into data structures it can understand at runtime.
     */
    format?: pulumi.Input<inputs.SinkKafkaFormat>;
    /**
     * The name of the source, table or materialized view you want to send to the sink.
     */
    from: pulumi.Input<inputs.SinkKafkaFrom>;
    /**
     * The name of the Kafka connection to use in the sink.
     */
    kafkaConnection: pulumi.Input<inputs.SinkKafkaKafkaConnection>;
    /**
     * An optional list of columns to use for the Kafka key. If unspecified, the Kafka key is left unset.
     */
    keys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The identifier for the sink.
     */
    name?: pulumi.Input<string>;
    /**
     * The identifier for the sink schema.
     */
    schemaName?: pulumi.Input<string>;
    /**
     * The size of the sink.
     */
    size?: pulumi.Input<string>;
    /**
     * Whether to emit the consolidated results of the query before the sink was created at the start of the sink.
     */
    snapshot?: pulumi.Input<boolean>;
    /**
     * The Kafka topic you want to subscribe to.
     */
    topic: pulumi.Input<string>;
}
