// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export * from "./cluster";
export * from "./clusterReplica";
export * from "./connectionAwsPrivatelink";
export * from "./connectionConfluentSchemaRegistry";
export * from "./connectionKafka";
export * from "./connectionPostgres";
export * from "./connectionSshTunnel";
export * from "./database";
export * from "./getClusterReplicas";
export * from "./getClusters";
export * from "./getConnections";
export * from "./getCurrentCluster";
export * from "./getCurrentDatabase";
export * from "./getDatabases";
export * from "./getIndexes";
export * from "./getMaterializedViews";
export * from "./getSchemas";
export * from "./getSecrets";
export * from "./getSinks";
export * from "./getSources";
export * from "./getTables";
export * from "./getViews";
export * from "./index_";
export * from "./materializedView";
export * from "./provider";
export * from "./schema";
export * from "./secret";
export * from "./sinkKafka";
export * from "./sourceKafka";
export * from "./sourceLoadgen";
export * from "./sourcePostgres";
export * from "./table";
export * from "./view";

// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

// Import resources to register:
import { Cluster } from "./cluster";
import { ClusterReplica } from "./clusterReplica";
import { ConnectionAwsPrivatelink } from "./connectionAwsPrivatelink";
import { ConnectionConfluentSchemaRegistry } from "./connectionConfluentSchemaRegistry";
import { ConnectionKafka } from "./connectionKafka";
import { ConnectionPostgres } from "./connectionPostgres";
import { ConnectionSshTunnel } from "./connectionSshTunnel";
import { Database } from "./database";
import { Index } from "./index_";
import { MaterializedView } from "./materializedView";
import { Schema } from "./schema";
import { Secret } from "./secret";
import { SinkKafka } from "./sinkKafka";
import { SourceKafka } from "./sourceKafka";
import { SourceLoadgen } from "./sourceLoadgen";
import { SourcePostgres } from "./sourcePostgres";
import { Table } from "./table";
import { View } from "./view";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "materialize:index/cluster:Cluster":
                return new Cluster(name, <any>undefined, { urn })
            case "materialize:index/clusterReplica:ClusterReplica":
                return new ClusterReplica(name, <any>undefined, { urn })
            case "materialize:index/connectionAwsPrivatelink:ConnectionAwsPrivatelink":
                return new ConnectionAwsPrivatelink(name, <any>undefined, { urn })
            case "materialize:index/connectionConfluentSchemaRegistry:ConnectionConfluentSchemaRegistry":
                return new ConnectionConfluentSchemaRegistry(name, <any>undefined, { urn })
            case "materialize:index/connectionKafka:ConnectionKafka":
                return new ConnectionKafka(name, <any>undefined, { urn })
            case "materialize:index/connectionPostgres:ConnectionPostgres":
                return new ConnectionPostgres(name, <any>undefined, { urn })
            case "materialize:index/connectionSshTunnel:ConnectionSshTunnel":
                return new ConnectionSshTunnel(name, <any>undefined, { urn })
            case "materialize:index/database:Database":
                return new Database(name, <any>undefined, { urn })
            case "materialize:index/index:Index":
                return new Index(name, <any>undefined, { urn })
            case "materialize:index/materializedView:MaterializedView":
                return new MaterializedView(name, <any>undefined, { urn })
            case "materialize:index/schema:Schema":
                return new Schema(name, <any>undefined, { urn })
            case "materialize:index/secret:Secret":
                return new Secret(name, <any>undefined, { urn })
            case "materialize:index/sinkKafka:SinkKafka":
                return new SinkKafka(name, <any>undefined, { urn })
            case "materialize:index/sourceKafka:SourceKafka":
                return new SourceKafka(name, <any>undefined, { urn })
            case "materialize:index/sourceLoadgen:SourceLoadgen":
                return new SourceLoadgen(name, <any>undefined, { urn })
            case "materialize:index/sourcePostgres:SourcePostgres":
                return new SourcePostgres(name, <any>undefined, { urn })
            case "materialize:index/table:Table":
                return new Table(name, <any>undefined, { urn })
            case "materialize:index/view:View":
                return new View(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("materialize", "index/cluster", _module)
pulumi.runtime.registerResourceModule("materialize", "index/clusterReplica", _module)
pulumi.runtime.registerResourceModule("materialize", "index/connectionAwsPrivatelink", _module)
pulumi.runtime.registerResourceModule("materialize", "index/connectionConfluentSchemaRegistry", _module)
pulumi.runtime.registerResourceModule("materialize", "index/connectionKafka", _module)
pulumi.runtime.registerResourceModule("materialize", "index/connectionPostgres", _module)
pulumi.runtime.registerResourceModule("materialize", "index/connectionSshTunnel", _module)
pulumi.runtime.registerResourceModule("materialize", "index/database", _module)
pulumi.runtime.registerResourceModule("materialize", "index/index", _module)
pulumi.runtime.registerResourceModule("materialize", "index/materializedView", _module)
pulumi.runtime.registerResourceModule("materialize", "index/schema", _module)
pulumi.runtime.registerResourceModule("materialize", "index/secret", _module)
pulumi.runtime.registerResourceModule("materialize", "index/sinkKafka", _module)
pulumi.runtime.registerResourceModule("materialize", "index/sourceKafka", _module)
pulumi.runtime.registerResourceModule("materialize", "index/sourceLoadgen", _module)
pulumi.runtime.registerResourceModule("materialize", "index/sourcePostgres", _module)
pulumi.runtime.registerResourceModule("materialize", "index/table", _module)
pulumi.runtime.registerResourceModule("materialize", "index/view", _module)

import { Provider } from "./provider";

pulumi.runtime.registerResourcePackage("materialize", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:materialize") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
