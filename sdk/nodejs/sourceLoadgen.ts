// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * A source describes an external system you want Materialize to read data from, and provides details about how to decode and interpret that data.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as materialize from "@pulumi/materialize";
 *
 * const exampleSourceLoadGenerator = new materialize.SourceLoadgen("example_source_load_generator", {
 *     loadGeneratorType: "COUNTER",
 *     scaleFactor: 0.01,
 *     schemaName: "schema",
 *     size: "3xsmall",
 *     tickInterval: "500ms",
 * });
 * ```
 *
 * ## Import
 *
 * # Sources can be imported using the source id
 *
 * ```sh
 *  $ pulumi import materialize:index/sourceLoadgen:SourceLoadgen example_source_load_generator <source_id>
 * ```
 */
export class SourceLoadgen extends pulumi.CustomResource {
    /**
     * Get an existing SourceLoadgen resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SourceLoadgenState, opts?: pulumi.CustomResourceOptions): SourceLoadgen {
        return new SourceLoadgen(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'materialize:index/sourceLoadgen:SourceLoadgen';

    /**
     * Returns true if the given object is an instance of SourceLoadgen.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SourceLoadgen {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SourceLoadgen.__pulumiType;
    }

    /**
     * Auction Options.
     */
    public readonly auctionOptions!: pulumi.Output<outputs.SourceLoadgenAuctionOption[] | undefined>;
    /**
     * The cluster to maintain this source. If not specified, the size option must be specified.
     */
    public readonly clusterName!: pulumi.Output<string>;
    /**
     * Counter Options.
     */
    public readonly counterOptions!: pulumi.Output<outputs.SourceLoadgenCounterOption[] | undefined>;
    /**
     * The identifier for the source database.
     */
    public readonly databaseName!: pulumi.Output<string | undefined>;
    /**
     * The load generator types: [AUCTION COUNTER TPCH].
     */
    public readonly loadGeneratorType!: pulumi.Output<string>;
    /**
     * The identifier for the source.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The fully qualified name of the source.
     */
    public /*out*/ readonly qualifiedSqlName!: pulumi.Output<string>;
    /**
     * The identifier for the source schema.
     */
    public readonly schemaName!: pulumi.Output<string | undefined>;
    /**
     * The size of the source.
     */
    public readonly size!: pulumi.Output<string>;
    /**
     * The type of source.
     */
    public /*out*/ readonly sourceType!: pulumi.Output<string>;
    /**
     * TPCH Options.
     */
    public readonly tpchOptions!: pulumi.Output<outputs.SourceLoadgenTpchOption[] | undefined>;

    /**
     * Create a SourceLoadgen resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SourceLoadgenArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SourceLoadgenArgs | SourceLoadgenState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SourceLoadgenState | undefined;
            resourceInputs["auctionOptions"] = state ? state.auctionOptions : undefined;
            resourceInputs["clusterName"] = state ? state.clusterName : undefined;
            resourceInputs["counterOptions"] = state ? state.counterOptions : undefined;
            resourceInputs["databaseName"] = state ? state.databaseName : undefined;
            resourceInputs["loadGeneratorType"] = state ? state.loadGeneratorType : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["qualifiedSqlName"] = state ? state.qualifiedSqlName : undefined;
            resourceInputs["schemaName"] = state ? state.schemaName : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["sourceType"] = state ? state.sourceType : undefined;
            resourceInputs["tpchOptions"] = state ? state.tpchOptions : undefined;
        } else {
            const args = argsOrState as SourceLoadgenArgs | undefined;
            if ((!args || args.loadGeneratorType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'loadGeneratorType'");
            }
            resourceInputs["auctionOptions"] = args ? args.auctionOptions : undefined;
            resourceInputs["clusterName"] = args ? args.clusterName : undefined;
            resourceInputs["counterOptions"] = args ? args.counterOptions : undefined;
            resourceInputs["databaseName"] = args ? args.databaseName : undefined;
            resourceInputs["loadGeneratorType"] = args ? args.loadGeneratorType : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["schemaName"] = args ? args.schemaName : undefined;
            resourceInputs["size"] = args ? args.size : undefined;
            resourceInputs["tpchOptions"] = args ? args.tpchOptions : undefined;
            resourceInputs["qualifiedSqlName"] = undefined /*out*/;
            resourceInputs["sourceType"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SourceLoadgen.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SourceLoadgen resources.
 */
export interface SourceLoadgenState {
    /**
     * Auction Options.
     */
    auctionOptions?: pulumi.Input<pulumi.Input<inputs.SourceLoadgenAuctionOption>[]>;
    /**
     * The cluster to maintain this source. If not specified, the size option must be specified.
     */
    clusterName?: pulumi.Input<string>;
    /**
     * Counter Options.
     */
    counterOptions?: pulumi.Input<pulumi.Input<inputs.SourceLoadgenCounterOption>[]>;
    /**
     * The identifier for the source database.
     */
    databaseName?: pulumi.Input<string>;
    /**
     * The load generator types: [AUCTION COUNTER TPCH].
     */
    loadGeneratorType?: pulumi.Input<string>;
    /**
     * The identifier for the source.
     */
    name?: pulumi.Input<string>;
    /**
     * The fully qualified name of the source.
     */
    qualifiedSqlName?: pulumi.Input<string>;
    /**
     * The identifier for the source schema.
     */
    schemaName?: pulumi.Input<string>;
    /**
     * The size of the source.
     */
    size?: pulumi.Input<string>;
    /**
     * The type of source.
     */
    sourceType?: pulumi.Input<string>;
    /**
     * TPCH Options.
     */
    tpchOptions?: pulumi.Input<pulumi.Input<inputs.SourceLoadgenTpchOption>[]>;
}

/**
 * The set of arguments for constructing a SourceLoadgen resource.
 */
export interface SourceLoadgenArgs {
    /**
     * Auction Options.
     */
    auctionOptions?: pulumi.Input<pulumi.Input<inputs.SourceLoadgenAuctionOption>[]>;
    /**
     * The cluster to maintain this source. If not specified, the size option must be specified.
     */
    clusterName?: pulumi.Input<string>;
    /**
     * Counter Options.
     */
    counterOptions?: pulumi.Input<pulumi.Input<inputs.SourceLoadgenCounterOption>[]>;
    /**
     * The identifier for the source database.
     */
    databaseName?: pulumi.Input<string>;
    /**
     * The load generator types: [AUCTION COUNTER TPCH].
     */
    loadGeneratorType: pulumi.Input<string>;
    /**
     * The identifier for the source.
     */
    name?: pulumi.Input<string>;
    /**
     * The identifier for the source schema.
     */
    schemaName?: pulumi.Input<string>;
    /**
     * The size of the source.
     */
    size?: pulumi.Input<string>;
    /**
     * TPCH Options.
     */
    tpchOptions?: pulumi.Input<pulumi.Input<inputs.SourceLoadgenTpchOption>[]>;
}
