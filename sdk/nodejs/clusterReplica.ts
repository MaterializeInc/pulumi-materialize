// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * A cluster replica is the physical resource which maintains dataflow-powered objects.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as materialize from "@pulumi/materialize";
 *
 * const exampleClusterReplica = new materialize.ClusterReplica("example_cluster_replica", {
 *     clusterName: "cluster",
 *     size: "2xsmall",
 * });
 * ```
 *
 * ## Import
 *
 * # Clusters can be imported using the cluster id
 *
 * ```sh
 *  $ pulumi import materialize:index/clusterReplica:ClusterReplica example_1_cluster_replica <cluster_replica_id>
 * ```
 */
export class ClusterReplica extends pulumi.CustomResource {
    /**
     * Get an existing ClusterReplica resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClusterReplicaState, opts?: pulumi.CustomResourceOptions): ClusterReplica {
        return new ClusterReplica(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'materialize:index/clusterReplica:ClusterReplica';

    /**
     * Returns true if the given object is an instance of ClusterReplica.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ClusterReplica {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ClusterReplica.__pulumiType;
    }

    /**
     * If you want the replica to reside in a specific availability zone.
     */
    public readonly availabilityZone!: pulumi.Output<string | undefined>;
    /**
     * The cluster whose resources you want to create an additional computation of.
     */
    public readonly clusterName!: pulumi.Output<string>;
    /**
     * The amount of effort the replica should exert on compacting arrangements during idle periods. This is an unstable option! It may be changed or removed at any time.
     */
    public readonly idleArrangementMergeEffort!: pulumi.Output<number | undefined>;
    /**
     * Whether to introspect the gathering of the introspection data.
     */
    public readonly introspectionDebugging!: pulumi.Output<boolean | undefined>;
    /**
     * The interval at which to collect introspection data.
     */
    public readonly introspectionInterval!: pulumi.Output<string | undefined>;
    /**
     * The identifier for the replica.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The size of the replica.
     */
    public readonly size!: pulumi.Output<string>;

    /**
     * Create a ClusterReplica resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClusterReplicaArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClusterReplicaArgs | ClusterReplicaState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ClusterReplicaState | undefined;
            resourceInputs["availabilityZone"] = state ? state.availabilityZone : undefined;
            resourceInputs["clusterName"] = state ? state.clusterName : undefined;
            resourceInputs["idleArrangementMergeEffort"] = state ? state.idleArrangementMergeEffort : undefined;
            resourceInputs["introspectionDebugging"] = state ? state.introspectionDebugging : undefined;
            resourceInputs["introspectionInterval"] = state ? state.introspectionInterval : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
        } else {
            const args = argsOrState as ClusterReplicaArgs | undefined;
            if ((!args || args.clusterName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterName'");
            }
            if ((!args || args.size === undefined) && !opts.urn) {
                throw new Error("Missing required property 'size'");
            }
            resourceInputs["availabilityZone"] = args ? args.availabilityZone : undefined;
            resourceInputs["clusterName"] = args ? args.clusterName : undefined;
            resourceInputs["idleArrangementMergeEffort"] = args ? args.idleArrangementMergeEffort : undefined;
            resourceInputs["introspectionDebugging"] = args ? args.introspectionDebugging : undefined;
            resourceInputs["introspectionInterval"] = args ? args.introspectionInterval : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["size"] = args ? args.size : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ClusterReplica.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ClusterReplica resources.
 */
export interface ClusterReplicaState {
    /**
     * If you want the replica to reside in a specific availability zone.
     */
    availabilityZone?: pulumi.Input<string>;
    /**
     * The cluster whose resources you want to create an additional computation of.
     */
    clusterName?: pulumi.Input<string>;
    /**
     * The amount of effort the replica should exert on compacting arrangements during idle periods. This is an unstable option! It may be changed or removed at any time.
     */
    idleArrangementMergeEffort?: pulumi.Input<number>;
    /**
     * Whether to introspect the gathering of the introspection data.
     */
    introspectionDebugging?: pulumi.Input<boolean>;
    /**
     * The interval at which to collect introspection data.
     */
    introspectionInterval?: pulumi.Input<string>;
    /**
     * The identifier for the replica.
     */
    name?: pulumi.Input<string>;
    /**
     * The size of the replica.
     */
    size?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ClusterReplica resource.
 */
export interface ClusterReplicaArgs {
    /**
     * If you want the replica to reside in a specific availability zone.
     */
    availabilityZone?: pulumi.Input<string>;
    /**
     * The cluster whose resources you want to create an additional computation of.
     */
    clusterName: pulumi.Input<string>;
    /**
     * The amount of effort the replica should exert on compacting arrangements during idle periods. This is an unstable option! It may be changed or removed at any time.
     */
    idleArrangementMergeEffort?: pulumi.Input<number>;
    /**
     * Whether to introspect the gathering of the introspection data.
     */
    introspectionDebugging?: pulumi.Input<boolean>;
    /**
     * The interval at which to collect introspection data.
     */
    introspectionInterval?: pulumi.Input<string>;
    /**
     * The identifier for the replica.
     */
    name?: pulumi.Input<string>;
    /**
     * The size of the replica.
     */
    size: pulumi.Input<string>;
}
