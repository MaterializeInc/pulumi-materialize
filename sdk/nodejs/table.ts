// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * A table persists in durable storage and can be written to, updated and seamlessly joined with other tables, views or sources.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as materialize from "@pulumi/materialize";
 *
 * const simpleTable = new materialize.Table("simpleTable", {
 *     schemaName: materialize_schema.schema.name,
 *     databaseName: materialize_database.database.name,
 *     columns: [
 *         {
 *             name: "column_1",
 *             type: "text",
 *         },
 *         {
 *             name: "column_2",
 *             type: "int",
 *         },
 *         {
 *             name: "column_3",
 *             type: "text",
 *             nullable: true,
 *         },
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * # Views can be imported using the table id
 *
 * ```sh
 *  $ pulumi import materialize:index/table:Table example_table <table_id>
 * ```
 */
export class Table extends pulumi.CustomResource {
    /**
     * Get an existing Table resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TableState, opts?: pulumi.CustomResourceOptions): Table {
        return new Table(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'materialize:index/table:Table';

    /**
     * Returns true if the given object is an instance of Table.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Table {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Table.__pulumiType;
    }

    /**
     * Column of the table.
     */
    public readonly columns!: pulumi.Output<outputs.TableColumn[] | undefined>;
    /**
     * The identifier for the table database.
     */
    public readonly databaseName!: pulumi.Output<string | undefined>;
    /**
     * The identifier for the table.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The fully qualified name of the table.
     */
    public /*out*/ readonly qualifiedSqlName!: pulumi.Output<string>;
    /**
     * The identifier for the table schema.
     */
    public readonly schemaName!: pulumi.Output<string | undefined>;

    /**
     * Create a Table resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: TableArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TableArgs | TableState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TableState | undefined;
            resourceInputs["columns"] = state ? state.columns : undefined;
            resourceInputs["databaseName"] = state ? state.databaseName : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["qualifiedSqlName"] = state ? state.qualifiedSqlName : undefined;
            resourceInputs["schemaName"] = state ? state.schemaName : undefined;
        } else {
            const args = argsOrState as TableArgs | undefined;
            resourceInputs["columns"] = args ? args.columns : undefined;
            resourceInputs["databaseName"] = args ? args.databaseName : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["schemaName"] = args ? args.schemaName : undefined;
            resourceInputs["qualifiedSqlName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Table.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Table resources.
 */
export interface TableState {
    /**
     * Column of the table.
     */
    columns?: pulumi.Input<pulumi.Input<inputs.TableColumn>[]>;
    /**
     * The identifier for the table database.
     */
    databaseName?: pulumi.Input<string>;
    /**
     * The identifier for the table.
     */
    name?: pulumi.Input<string>;
    /**
     * The fully qualified name of the table.
     */
    qualifiedSqlName?: pulumi.Input<string>;
    /**
     * The identifier for the table schema.
     */
    schemaName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Table resource.
 */
export interface TableArgs {
    /**
     * Column of the table.
     */
    columns?: pulumi.Input<pulumi.Input<inputs.TableColumn>[]>;
    /**
     * The identifier for the table database.
     */
    databaseName?: pulumi.Input<string>;
    /**
     * The identifier for the table.
     */
    name?: pulumi.Input<string>;
    /**
     * The identifier for the table schema.
     */
    schemaName?: pulumi.Input<string>;
}
