// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * A source describes an external system you want Materialize to read data from, and provides details about how to decode and interpret that data.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as materialize from "@pulumi/materialize";
 *
 * const exampleSourcePostgres = new materialize.SourcePostgres("example_source_postgres", {
 *     postgresConnection: {
 *         name: "pg_connection",
 *     },
 *     publication: "mz_source",
 *     schemaName: "schema",
 *     size: "3xsmall",
 *     tables: [{
 *         "schema1.table_1": "s1_table_1",
 *         schema2Table1: "s2_table_1",
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * # Sources can be imported using the source id
 *
 * ```sh
 *  $ pulumi import materialize:index/sourcePostgres:SourcePostgres example_source_postgres <source_id>
 * ```
 */
export class SourcePostgres extends pulumi.CustomResource {
    /**
     * Get an existing SourcePostgres resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SourcePostgresState, opts?: pulumi.CustomResourceOptions): SourcePostgres {
        return new SourcePostgres(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'materialize:index/sourcePostgres:SourcePostgres';

    /**
     * Returns true if the given object is an instance of SourcePostgres.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SourcePostgres {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SourcePostgres.__pulumiType;
    }

    /**
     * The cluster to maintain this source. If not specified, the size option must be specified.
     */
    public readonly clusterName!: pulumi.Output<string>;
    /**
     * The identifier for the source database.
     */
    public readonly databaseName!: pulumi.Output<string | undefined>;
    /**
     * The identifier for the source.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The PostgreSQL connection to use in the source.
     */
    public readonly postgresConnection!: pulumi.Output<outputs.SourcePostgresPostgresConnection>;
    /**
     * The PostgreSQL publication (the replication data set containing the tables to be streamed to Materialize).
     */
    public readonly publication!: pulumi.Output<string>;
    /**
     * The fully qualified name of the source.
     */
    public /*out*/ readonly qualifiedSqlName!: pulumi.Output<string>;
    /**
     * The identifier for the source schema.
     */
    public readonly schemaName!: pulumi.Output<string | undefined>;
    /**
     * The size of the source.
     */
    public readonly size!: pulumi.Output<string>;
    /**
     * The type of source.
     */
    public /*out*/ readonly sourceType!: pulumi.Output<string>;
    /**
     * Creates subsources for specific tables.
     */
    public readonly tables!: pulumi.Output<outputs.SourcePostgresTable[] | undefined>;
    /**
     * Decode data as text for specific columns that contain PostgreSQL types that are unsupported in Materialize.
     */
    public readonly textColumns!: pulumi.Output<string[] | undefined>;

    /**
     * Create a SourcePostgres resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SourcePostgresArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SourcePostgresArgs | SourcePostgresState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SourcePostgresState | undefined;
            resourceInputs["clusterName"] = state ? state.clusterName : undefined;
            resourceInputs["databaseName"] = state ? state.databaseName : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["postgresConnection"] = state ? state.postgresConnection : undefined;
            resourceInputs["publication"] = state ? state.publication : undefined;
            resourceInputs["qualifiedSqlName"] = state ? state.qualifiedSqlName : undefined;
            resourceInputs["schemaName"] = state ? state.schemaName : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["sourceType"] = state ? state.sourceType : undefined;
            resourceInputs["tables"] = state ? state.tables : undefined;
            resourceInputs["textColumns"] = state ? state.textColumns : undefined;
        } else {
            const args = argsOrState as SourcePostgresArgs | undefined;
            if ((!args || args.postgresConnection === undefined) && !opts.urn) {
                throw new Error("Missing required property 'postgresConnection'");
            }
            if ((!args || args.publication === undefined) && !opts.urn) {
                throw new Error("Missing required property 'publication'");
            }
            resourceInputs["clusterName"] = args ? args.clusterName : undefined;
            resourceInputs["databaseName"] = args ? args.databaseName : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["postgresConnection"] = args ? args.postgresConnection : undefined;
            resourceInputs["publication"] = args ? args.publication : undefined;
            resourceInputs["schemaName"] = args ? args.schemaName : undefined;
            resourceInputs["size"] = args ? args.size : undefined;
            resourceInputs["tables"] = args ? args.tables : undefined;
            resourceInputs["textColumns"] = args ? args.textColumns : undefined;
            resourceInputs["qualifiedSqlName"] = undefined /*out*/;
            resourceInputs["sourceType"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SourcePostgres.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SourcePostgres resources.
 */
export interface SourcePostgresState {
    /**
     * The cluster to maintain this source. If not specified, the size option must be specified.
     */
    clusterName?: pulumi.Input<string>;
    /**
     * The identifier for the source database.
     */
    databaseName?: pulumi.Input<string>;
    /**
     * The identifier for the source.
     */
    name?: pulumi.Input<string>;
    /**
     * The PostgreSQL connection to use in the source.
     */
    postgresConnection?: pulumi.Input<inputs.SourcePostgresPostgresConnection>;
    /**
     * The PostgreSQL publication (the replication data set containing the tables to be streamed to Materialize).
     */
    publication?: pulumi.Input<string>;
    /**
     * The fully qualified name of the source.
     */
    qualifiedSqlName?: pulumi.Input<string>;
    /**
     * The identifier for the source schema.
     */
    schemaName?: pulumi.Input<string>;
    /**
     * The size of the source.
     */
    size?: pulumi.Input<string>;
    /**
     * The type of source.
     */
    sourceType?: pulumi.Input<string>;
    /**
     * Creates subsources for specific tables.
     */
    tables?: pulumi.Input<pulumi.Input<inputs.SourcePostgresTable>[]>;
    /**
     * Decode data as text for specific columns that contain PostgreSQL types that are unsupported in Materialize.
     */
    textColumns?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a SourcePostgres resource.
 */
export interface SourcePostgresArgs {
    /**
     * The cluster to maintain this source. If not specified, the size option must be specified.
     */
    clusterName?: pulumi.Input<string>;
    /**
     * The identifier for the source database.
     */
    databaseName?: pulumi.Input<string>;
    /**
     * The identifier for the source.
     */
    name?: pulumi.Input<string>;
    /**
     * The PostgreSQL connection to use in the source.
     */
    postgresConnection: pulumi.Input<inputs.SourcePostgresPostgresConnection>;
    /**
     * The PostgreSQL publication (the replication data set containing the tables to be streamed to Materialize).
     */
    publication: pulumi.Input<string>;
    /**
     * The identifier for the source schema.
     */
    schemaName?: pulumi.Input<string>;
    /**
     * The size of the source.
     */
    size?: pulumi.Input<string>;
    /**
     * Creates subsources for specific tables.
     */
    tables?: pulumi.Input<pulumi.Input<inputs.SourcePostgresTable>[]>;
    /**
     * Decode data as text for specific columns that contain PostgreSQL types that are unsupported in Materialize.
     */
    textColumns?: pulumi.Input<pulumi.Input<string>[]>;
}
