// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * An in-memory index on a source, view, or materialized view.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as materialize from "@pulumi/materialize";
 *
 * const loadgenIndex = new materialize.Index("loadgen_index", {
 *     clusterName: "cluster",
 *     method: "ARRANGEMENT",
 *     objName: {
 *         databaseName: "database",
 *         name: "source",
 *         schemaName: "schema",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * # Indexes can be imported using the index id
 *
 * ```sh
 *  $ pulumi import materialize:index/index:Index example_index <index_id>
 * ```
 */
export class Index extends pulumi.CustomResource {
    /**
     * Get an existing Index resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IndexState, opts?: pulumi.CustomResourceOptions): Index {
        return new Index(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'materialize:index/index:Index';

    /**
     * Returns true if the given object is an instance of Index.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Index {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Index.__pulumiType;
    }

    /**
     * The cluster to maintain this index. If not specified, defaults to the active cluster.
     */
    public readonly clusterName!: pulumi.Output<string>;
    /**
     * The expressions to use as the key for the index.
     */
    public readonly colExprs!: pulumi.Output<outputs.IndexColExpr[] | undefined>;
    /**
     * The identifier for the index database.
     */
    public /*out*/ readonly databaseName!: pulumi.Output<string>;
    /**
     * Creates a default index using all inferred columns are used.
     */
    public readonly default!: pulumi.Output<boolean | undefined>;
    /**
     * The name of the index method to use.
     */
    public readonly method!: pulumi.Output<string | undefined>;
    /**
     * The identifier for the index.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The name of the source, view, or materialized view on which you want to create an index.
     */
    public readonly objName!: pulumi.Output<outputs.IndexObjName>;
    /**
     * The fully qualified name of the view.
     */
    public /*out*/ readonly qualifiedSqlName!: pulumi.Output<string>;
    /**
     * The identifier for the index schema.
     */
    public /*out*/ readonly schemaName!: pulumi.Output<string>;

    /**
     * Create a Index resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IndexArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IndexArgs | IndexState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IndexState | undefined;
            resourceInputs["clusterName"] = state ? state.clusterName : undefined;
            resourceInputs["colExprs"] = state ? state.colExprs : undefined;
            resourceInputs["databaseName"] = state ? state.databaseName : undefined;
            resourceInputs["default"] = state ? state.default : undefined;
            resourceInputs["method"] = state ? state.method : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["objName"] = state ? state.objName : undefined;
            resourceInputs["qualifiedSqlName"] = state ? state.qualifiedSqlName : undefined;
            resourceInputs["schemaName"] = state ? state.schemaName : undefined;
        } else {
            const args = argsOrState as IndexArgs | undefined;
            if ((!args || args.clusterName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterName'");
            }
            if ((!args || args.objName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'objName'");
            }
            resourceInputs["clusterName"] = args ? args.clusterName : undefined;
            resourceInputs["colExprs"] = args ? args.colExprs : undefined;
            resourceInputs["default"] = args ? args.default : undefined;
            resourceInputs["method"] = args ? args.method : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["objName"] = args ? args.objName : undefined;
            resourceInputs["databaseName"] = undefined /*out*/;
            resourceInputs["qualifiedSqlName"] = undefined /*out*/;
            resourceInputs["schemaName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Index.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Index resources.
 */
export interface IndexState {
    /**
     * The cluster to maintain this index. If not specified, defaults to the active cluster.
     */
    clusterName?: pulumi.Input<string>;
    /**
     * The expressions to use as the key for the index.
     */
    colExprs?: pulumi.Input<pulumi.Input<inputs.IndexColExpr>[]>;
    /**
     * The identifier for the index database.
     */
    databaseName?: pulumi.Input<string>;
    /**
     * Creates a default index using all inferred columns are used.
     */
    default?: pulumi.Input<boolean>;
    /**
     * The name of the index method to use.
     */
    method?: pulumi.Input<string>;
    /**
     * The identifier for the index.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the source, view, or materialized view on which you want to create an index.
     */
    objName?: pulumi.Input<inputs.IndexObjName>;
    /**
     * The fully qualified name of the view.
     */
    qualifiedSqlName?: pulumi.Input<string>;
    /**
     * The identifier for the index schema.
     */
    schemaName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Index resource.
 */
export interface IndexArgs {
    /**
     * The cluster to maintain this index. If not specified, defaults to the active cluster.
     */
    clusterName: pulumi.Input<string>;
    /**
     * The expressions to use as the key for the index.
     */
    colExprs?: pulumi.Input<pulumi.Input<inputs.IndexColExpr>[]>;
    /**
     * Creates a default index using all inferred columns are used.
     */
    default?: pulumi.Input<boolean>;
    /**
     * The name of the index method to use.
     */
    method?: pulumi.Input<string>;
    /**
     * The identifier for the index.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the source, view, or materialized view on which you want to create an index.
     */
    objName: pulumi.Input<inputs.IndexObjName>;
}
