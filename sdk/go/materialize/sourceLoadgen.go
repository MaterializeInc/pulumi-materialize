// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package materialize

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A source describes an external system you want Materialize to read data from, and provides details about how to decode and interpret that data.
//
// ## Import
//
// # Sources can be imported using the source id
//
// ```sh
//
//	$ pulumi import materialize:index/sourceLoadgen:SourceLoadgen example_source_load_generator <source_id>
//
// ```
type SourceLoadgen struct {
	pulumi.CustomResourceState

	// Auction Options.
	AuctionOptions SourceLoadgenAuctionOptionArrayOutput `pulumi:"auctionOptions"`
	// The cluster to maintain this source. If not specified, the size option must be specified.
	ClusterName pulumi.StringOutput `pulumi:"clusterName"`
	// Counter Options.
	CounterOptions SourceLoadgenCounterOptionArrayOutput `pulumi:"counterOptions"`
	// The identifier for the source database.
	DatabaseName pulumi.StringPtrOutput `pulumi:"databaseName"`
	// The load generator types: [AUCTION COUNTER TPCH].
	LoadGeneratorType pulumi.StringOutput `pulumi:"loadGeneratorType"`
	// The identifier for the source.
	Name pulumi.StringOutput `pulumi:"name"`
	// The fully qualified name of the source.
	QualifiedSqlName pulumi.StringOutput `pulumi:"qualifiedSqlName"`
	// The identifier for the source schema.
	SchemaName pulumi.StringPtrOutput `pulumi:"schemaName"`
	// The size of the source.
	Size pulumi.StringOutput `pulumi:"size"`
	// The type of source.
	SourceType pulumi.StringOutput `pulumi:"sourceType"`
	// TPCH Options.
	TpchOptions SourceLoadgenTpchOptionArrayOutput `pulumi:"tpchOptions"`
}

// NewSourceLoadgen registers a new resource with the given unique name, arguments, and options.
func NewSourceLoadgen(ctx *pulumi.Context,
	name string, args *SourceLoadgenArgs, opts ...pulumi.ResourceOption) (*SourceLoadgen, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LoadGeneratorType == nil {
		return nil, errors.New("invalid value for required argument 'LoadGeneratorType'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource SourceLoadgen
	err := ctx.RegisterResource("materialize:index/sourceLoadgen:SourceLoadgen", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSourceLoadgen gets an existing SourceLoadgen resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSourceLoadgen(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SourceLoadgenState, opts ...pulumi.ResourceOption) (*SourceLoadgen, error) {
	var resource SourceLoadgen
	err := ctx.ReadResource("materialize:index/sourceLoadgen:SourceLoadgen", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SourceLoadgen resources.
type sourceLoadgenState struct {
	// Auction Options.
	AuctionOptions []SourceLoadgenAuctionOption `pulumi:"auctionOptions"`
	// The cluster to maintain this source. If not specified, the size option must be specified.
	ClusterName *string `pulumi:"clusterName"`
	// Counter Options.
	CounterOptions []SourceLoadgenCounterOption `pulumi:"counterOptions"`
	// The identifier for the source database.
	DatabaseName *string `pulumi:"databaseName"`
	// The load generator types: [AUCTION COUNTER TPCH].
	LoadGeneratorType *string `pulumi:"loadGeneratorType"`
	// The identifier for the source.
	Name *string `pulumi:"name"`
	// The fully qualified name of the source.
	QualifiedSqlName *string `pulumi:"qualifiedSqlName"`
	// The identifier for the source schema.
	SchemaName *string `pulumi:"schemaName"`
	// The size of the source.
	Size *string `pulumi:"size"`
	// The type of source.
	SourceType *string `pulumi:"sourceType"`
	// TPCH Options.
	TpchOptions []SourceLoadgenTpchOption `pulumi:"tpchOptions"`
}

type SourceLoadgenState struct {
	// Auction Options.
	AuctionOptions SourceLoadgenAuctionOptionArrayInput
	// The cluster to maintain this source. If not specified, the size option must be specified.
	ClusterName pulumi.StringPtrInput
	// Counter Options.
	CounterOptions SourceLoadgenCounterOptionArrayInput
	// The identifier for the source database.
	DatabaseName pulumi.StringPtrInput
	// The load generator types: [AUCTION COUNTER TPCH].
	LoadGeneratorType pulumi.StringPtrInput
	// The identifier for the source.
	Name pulumi.StringPtrInput
	// The fully qualified name of the source.
	QualifiedSqlName pulumi.StringPtrInput
	// The identifier for the source schema.
	SchemaName pulumi.StringPtrInput
	// The size of the source.
	Size pulumi.StringPtrInput
	// The type of source.
	SourceType pulumi.StringPtrInput
	// TPCH Options.
	TpchOptions SourceLoadgenTpchOptionArrayInput
}

func (SourceLoadgenState) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceLoadgenState)(nil)).Elem()
}

type sourceLoadgenArgs struct {
	// Auction Options.
	AuctionOptions []SourceLoadgenAuctionOption `pulumi:"auctionOptions"`
	// The cluster to maintain this source. If not specified, the size option must be specified.
	ClusterName *string `pulumi:"clusterName"`
	// Counter Options.
	CounterOptions []SourceLoadgenCounterOption `pulumi:"counterOptions"`
	// The identifier for the source database.
	DatabaseName *string `pulumi:"databaseName"`
	// The load generator types: [AUCTION COUNTER TPCH].
	LoadGeneratorType string `pulumi:"loadGeneratorType"`
	// The identifier for the source.
	Name *string `pulumi:"name"`
	// The identifier for the source schema.
	SchemaName *string `pulumi:"schemaName"`
	// The size of the source.
	Size *string `pulumi:"size"`
	// TPCH Options.
	TpchOptions []SourceLoadgenTpchOption `pulumi:"tpchOptions"`
}

// The set of arguments for constructing a SourceLoadgen resource.
type SourceLoadgenArgs struct {
	// Auction Options.
	AuctionOptions SourceLoadgenAuctionOptionArrayInput
	// The cluster to maintain this source. If not specified, the size option must be specified.
	ClusterName pulumi.StringPtrInput
	// Counter Options.
	CounterOptions SourceLoadgenCounterOptionArrayInput
	// The identifier for the source database.
	DatabaseName pulumi.StringPtrInput
	// The load generator types: [AUCTION COUNTER TPCH].
	LoadGeneratorType pulumi.StringInput
	// The identifier for the source.
	Name pulumi.StringPtrInput
	// The identifier for the source schema.
	SchemaName pulumi.StringPtrInput
	// The size of the source.
	Size pulumi.StringPtrInput
	// TPCH Options.
	TpchOptions SourceLoadgenTpchOptionArrayInput
}

func (SourceLoadgenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceLoadgenArgs)(nil)).Elem()
}

type SourceLoadgenInput interface {
	pulumi.Input

	ToSourceLoadgenOutput() SourceLoadgenOutput
	ToSourceLoadgenOutputWithContext(ctx context.Context) SourceLoadgenOutput
}

func (*SourceLoadgen) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceLoadgen)(nil)).Elem()
}

func (i *SourceLoadgen) ToSourceLoadgenOutput() SourceLoadgenOutput {
	return i.ToSourceLoadgenOutputWithContext(context.Background())
}

func (i *SourceLoadgen) ToSourceLoadgenOutputWithContext(ctx context.Context) SourceLoadgenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceLoadgenOutput)
}

// SourceLoadgenArrayInput is an input type that accepts SourceLoadgenArray and SourceLoadgenArrayOutput values.
// You can construct a concrete instance of `SourceLoadgenArrayInput` via:
//
//	SourceLoadgenArray{ SourceLoadgenArgs{...} }
type SourceLoadgenArrayInput interface {
	pulumi.Input

	ToSourceLoadgenArrayOutput() SourceLoadgenArrayOutput
	ToSourceLoadgenArrayOutputWithContext(context.Context) SourceLoadgenArrayOutput
}

type SourceLoadgenArray []SourceLoadgenInput

func (SourceLoadgenArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceLoadgen)(nil)).Elem()
}

func (i SourceLoadgenArray) ToSourceLoadgenArrayOutput() SourceLoadgenArrayOutput {
	return i.ToSourceLoadgenArrayOutputWithContext(context.Background())
}

func (i SourceLoadgenArray) ToSourceLoadgenArrayOutputWithContext(ctx context.Context) SourceLoadgenArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceLoadgenArrayOutput)
}

// SourceLoadgenMapInput is an input type that accepts SourceLoadgenMap and SourceLoadgenMapOutput values.
// You can construct a concrete instance of `SourceLoadgenMapInput` via:
//
//	SourceLoadgenMap{ "key": SourceLoadgenArgs{...} }
type SourceLoadgenMapInput interface {
	pulumi.Input

	ToSourceLoadgenMapOutput() SourceLoadgenMapOutput
	ToSourceLoadgenMapOutputWithContext(context.Context) SourceLoadgenMapOutput
}

type SourceLoadgenMap map[string]SourceLoadgenInput

func (SourceLoadgenMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceLoadgen)(nil)).Elem()
}

func (i SourceLoadgenMap) ToSourceLoadgenMapOutput() SourceLoadgenMapOutput {
	return i.ToSourceLoadgenMapOutputWithContext(context.Background())
}

func (i SourceLoadgenMap) ToSourceLoadgenMapOutputWithContext(ctx context.Context) SourceLoadgenMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceLoadgenMapOutput)
}

type SourceLoadgenOutput struct{ *pulumi.OutputState }

func (SourceLoadgenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceLoadgen)(nil)).Elem()
}

func (o SourceLoadgenOutput) ToSourceLoadgenOutput() SourceLoadgenOutput {
	return o
}

func (o SourceLoadgenOutput) ToSourceLoadgenOutputWithContext(ctx context.Context) SourceLoadgenOutput {
	return o
}

// Auction Options.
func (o SourceLoadgenOutput) AuctionOptions() SourceLoadgenAuctionOptionArrayOutput {
	return o.ApplyT(func(v *SourceLoadgen) SourceLoadgenAuctionOptionArrayOutput { return v.AuctionOptions }).(SourceLoadgenAuctionOptionArrayOutput)
}

// The cluster to maintain this source. If not specified, the size option must be specified.
func (o SourceLoadgenOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceLoadgen) pulumi.StringOutput { return v.ClusterName }).(pulumi.StringOutput)
}

// Counter Options.
func (o SourceLoadgenOutput) CounterOptions() SourceLoadgenCounterOptionArrayOutput {
	return o.ApplyT(func(v *SourceLoadgen) SourceLoadgenCounterOptionArrayOutput { return v.CounterOptions }).(SourceLoadgenCounterOptionArrayOutput)
}

// The identifier for the source database.
func (o SourceLoadgenOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceLoadgen) pulumi.StringPtrOutput { return v.DatabaseName }).(pulumi.StringPtrOutput)
}

// The load generator types: [AUCTION COUNTER TPCH].
func (o SourceLoadgenOutput) LoadGeneratorType() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceLoadgen) pulumi.StringOutput { return v.LoadGeneratorType }).(pulumi.StringOutput)
}

// The identifier for the source.
func (o SourceLoadgenOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceLoadgen) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The fully qualified name of the source.
func (o SourceLoadgenOutput) QualifiedSqlName() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceLoadgen) pulumi.StringOutput { return v.QualifiedSqlName }).(pulumi.StringOutput)
}

// The identifier for the source schema.
func (o SourceLoadgenOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceLoadgen) pulumi.StringPtrOutput { return v.SchemaName }).(pulumi.StringPtrOutput)
}

// The size of the source.
func (o SourceLoadgenOutput) Size() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceLoadgen) pulumi.StringOutput { return v.Size }).(pulumi.StringOutput)
}

// The type of source.
func (o SourceLoadgenOutput) SourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceLoadgen) pulumi.StringOutput { return v.SourceType }).(pulumi.StringOutput)
}

// TPCH Options.
func (o SourceLoadgenOutput) TpchOptions() SourceLoadgenTpchOptionArrayOutput {
	return o.ApplyT(func(v *SourceLoadgen) SourceLoadgenTpchOptionArrayOutput { return v.TpchOptions }).(SourceLoadgenTpchOptionArrayOutput)
}

type SourceLoadgenArrayOutput struct{ *pulumi.OutputState }

func (SourceLoadgenArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceLoadgen)(nil)).Elem()
}

func (o SourceLoadgenArrayOutput) ToSourceLoadgenArrayOutput() SourceLoadgenArrayOutput {
	return o
}

func (o SourceLoadgenArrayOutput) ToSourceLoadgenArrayOutputWithContext(ctx context.Context) SourceLoadgenArrayOutput {
	return o
}

func (o SourceLoadgenArrayOutput) Index(i pulumi.IntInput) SourceLoadgenOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SourceLoadgen {
		return vs[0].([]*SourceLoadgen)[vs[1].(int)]
	}).(SourceLoadgenOutput)
}

type SourceLoadgenMapOutput struct{ *pulumi.OutputState }

func (SourceLoadgenMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceLoadgen)(nil)).Elem()
}

func (o SourceLoadgenMapOutput) ToSourceLoadgenMapOutput() SourceLoadgenMapOutput {
	return o
}

func (o SourceLoadgenMapOutput) ToSourceLoadgenMapOutputWithContext(ctx context.Context) SourceLoadgenMapOutput {
	return o
}

func (o SourceLoadgenMapOutput) MapIndex(k pulumi.StringInput) SourceLoadgenOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SourceLoadgen {
		return vs[0].(map[string]*SourceLoadgen)[vs[1].(string)]
	}).(SourceLoadgenOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SourceLoadgenInput)(nil)).Elem(), &SourceLoadgen{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceLoadgenArrayInput)(nil)).Elem(), SourceLoadgenArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceLoadgenMapInput)(nil)).Elem(), SourceLoadgenMap{})
	pulumi.RegisterOutputType(SourceLoadgenOutput{})
	pulumi.RegisterOutputType(SourceLoadgenArrayOutput{})
	pulumi.RegisterOutputType(SourceLoadgenMapOutput{})
}
