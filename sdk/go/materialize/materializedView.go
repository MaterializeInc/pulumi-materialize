// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package materialize

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A materialized view persists in durable storage and can be written to, updated and seamlessly joined with other views, views or sources.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-materialize/sdk/go/materialize"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := materialize.NewMaterializedView(ctx, "simpleMaterializedViewMaterializedView", &materialize.MaterializedViewArgs{
//				SchemaName:   pulumi.Any(materialize_schema.Schema.Name),
//				DatabaseName: pulumi.Any(materialize_database.Database.Name),
//				Statement:    pulumi.String(fmt.Sprintf("SELECT\n    *\nFROM\n    %v\n", materialize_table.Simple_table.Qualified_name)),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				materialize_table.Simple_table,
//			}))
//			if err != nil {
//				return err
//			}
//			_, err = materialize.NewMaterializedView(ctx, "simpleMaterializedViewIndex/materializedViewMaterializedView", &materialize.MaterializedViewArgs{
//				SchemaName:   pulumi.Any(materialize_schema.Schema.Name),
//				DatabaseName: pulumi.Any(materialize_database.Database.Name),
//				Statement:    pulumi.String("SELECT * FROM materialize.public.simple_table"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # Materialized views can be imported using the source id
//
// ```sh
//
//	$ pulumi import materialize:index/materializedView:MaterializedView example_materialize_view <view_id>
//
// ```
type MaterializedView struct {
	pulumi.CustomResourceState

	// The cluster to maintain the materialized view. If not specified, defaults to the default cluster.
	ClusterName pulumi.StringPtrOutput `pulumi:"clusterName"`
	// The identifier for the materialized view database.
	DatabaseName pulumi.StringPtrOutput `pulumi:"databaseName"`
	// The identifier for the materialized view.
	Name pulumi.StringOutput `pulumi:"name"`
	// The fully qualified name of the materialized view.
	QualifiedSqlName pulumi.StringOutput `pulumi:"qualifiedSqlName"`
	// The identifier for the materialized view schema.
	SchemaName pulumi.StringPtrOutput `pulumi:"schemaName"`
	// The SQL statement to create the materialized view.
	Statement pulumi.StringOutput `pulumi:"statement"`
}

// NewMaterializedView registers a new resource with the given unique name, arguments, and options.
func NewMaterializedView(ctx *pulumi.Context,
	name string, args *MaterializedViewArgs, opts ...pulumi.ResourceOption) (*MaterializedView, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Statement == nil {
		return nil, errors.New("invalid value for required argument 'Statement'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource MaterializedView
	err := ctx.RegisterResource("materialize:index/materializedView:MaterializedView", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMaterializedView gets an existing MaterializedView resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMaterializedView(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MaterializedViewState, opts ...pulumi.ResourceOption) (*MaterializedView, error) {
	var resource MaterializedView
	err := ctx.ReadResource("materialize:index/materializedView:MaterializedView", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MaterializedView resources.
type materializedViewState struct {
	// The cluster to maintain the materialized view. If not specified, defaults to the default cluster.
	ClusterName *string `pulumi:"clusterName"`
	// The identifier for the materialized view database.
	DatabaseName *string `pulumi:"databaseName"`
	// The identifier for the materialized view.
	Name *string `pulumi:"name"`
	// The fully qualified name of the materialized view.
	QualifiedSqlName *string `pulumi:"qualifiedSqlName"`
	// The identifier for the materialized view schema.
	SchemaName *string `pulumi:"schemaName"`
	// The SQL statement to create the materialized view.
	Statement *string `pulumi:"statement"`
}

type MaterializedViewState struct {
	// The cluster to maintain the materialized view. If not specified, defaults to the default cluster.
	ClusterName pulumi.StringPtrInput
	// The identifier for the materialized view database.
	DatabaseName pulumi.StringPtrInput
	// The identifier for the materialized view.
	Name pulumi.StringPtrInput
	// The fully qualified name of the materialized view.
	QualifiedSqlName pulumi.StringPtrInput
	// The identifier for the materialized view schema.
	SchemaName pulumi.StringPtrInput
	// The SQL statement to create the materialized view.
	Statement pulumi.StringPtrInput
}

func (MaterializedViewState) ElementType() reflect.Type {
	return reflect.TypeOf((*materializedViewState)(nil)).Elem()
}

type materializedViewArgs struct {
	// The cluster to maintain the materialized view. If not specified, defaults to the default cluster.
	ClusterName *string `pulumi:"clusterName"`
	// The identifier for the materialized view database.
	DatabaseName *string `pulumi:"databaseName"`
	// The identifier for the materialized view.
	Name *string `pulumi:"name"`
	// The identifier for the materialized view schema.
	SchemaName *string `pulumi:"schemaName"`
	// The SQL statement to create the materialized view.
	Statement string `pulumi:"statement"`
}

// The set of arguments for constructing a MaterializedView resource.
type MaterializedViewArgs struct {
	// The cluster to maintain the materialized view. If not specified, defaults to the default cluster.
	ClusterName pulumi.StringPtrInput
	// The identifier for the materialized view database.
	DatabaseName pulumi.StringPtrInput
	// The identifier for the materialized view.
	Name pulumi.StringPtrInput
	// The identifier for the materialized view schema.
	SchemaName pulumi.StringPtrInput
	// The SQL statement to create the materialized view.
	Statement pulumi.StringInput
}

func (MaterializedViewArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*materializedViewArgs)(nil)).Elem()
}

type MaterializedViewInput interface {
	pulumi.Input

	ToMaterializedViewOutput() MaterializedViewOutput
	ToMaterializedViewOutputWithContext(ctx context.Context) MaterializedViewOutput
}

func (*MaterializedView) ElementType() reflect.Type {
	return reflect.TypeOf((**MaterializedView)(nil)).Elem()
}

func (i *MaterializedView) ToMaterializedViewOutput() MaterializedViewOutput {
	return i.ToMaterializedViewOutputWithContext(context.Background())
}

func (i *MaterializedView) ToMaterializedViewOutputWithContext(ctx context.Context) MaterializedViewOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaterializedViewOutput)
}

// MaterializedViewArrayInput is an input type that accepts MaterializedViewArray and MaterializedViewArrayOutput values.
// You can construct a concrete instance of `MaterializedViewArrayInput` via:
//
//	MaterializedViewArray{ MaterializedViewArgs{...} }
type MaterializedViewArrayInput interface {
	pulumi.Input

	ToMaterializedViewArrayOutput() MaterializedViewArrayOutput
	ToMaterializedViewArrayOutputWithContext(context.Context) MaterializedViewArrayOutput
}

type MaterializedViewArray []MaterializedViewInput

func (MaterializedViewArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MaterializedView)(nil)).Elem()
}

func (i MaterializedViewArray) ToMaterializedViewArrayOutput() MaterializedViewArrayOutput {
	return i.ToMaterializedViewArrayOutputWithContext(context.Background())
}

func (i MaterializedViewArray) ToMaterializedViewArrayOutputWithContext(ctx context.Context) MaterializedViewArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaterializedViewArrayOutput)
}

// MaterializedViewMapInput is an input type that accepts MaterializedViewMap and MaterializedViewMapOutput values.
// You can construct a concrete instance of `MaterializedViewMapInput` via:
//
//	MaterializedViewMap{ "key": MaterializedViewArgs{...} }
type MaterializedViewMapInput interface {
	pulumi.Input

	ToMaterializedViewMapOutput() MaterializedViewMapOutput
	ToMaterializedViewMapOutputWithContext(context.Context) MaterializedViewMapOutput
}

type MaterializedViewMap map[string]MaterializedViewInput

func (MaterializedViewMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MaterializedView)(nil)).Elem()
}

func (i MaterializedViewMap) ToMaterializedViewMapOutput() MaterializedViewMapOutput {
	return i.ToMaterializedViewMapOutputWithContext(context.Background())
}

func (i MaterializedViewMap) ToMaterializedViewMapOutputWithContext(ctx context.Context) MaterializedViewMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaterializedViewMapOutput)
}

type MaterializedViewOutput struct{ *pulumi.OutputState }

func (MaterializedViewOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MaterializedView)(nil)).Elem()
}

func (o MaterializedViewOutput) ToMaterializedViewOutput() MaterializedViewOutput {
	return o
}

func (o MaterializedViewOutput) ToMaterializedViewOutputWithContext(ctx context.Context) MaterializedViewOutput {
	return o
}

// The cluster to maintain the materialized view. If not specified, defaults to the default cluster.
func (o MaterializedViewOutput) ClusterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MaterializedView) pulumi.StringPtrOutput { return v.ClusterName }).(pulumi.StringPtrOutput)
}

// The identifier for the materialized view database.
func (o MaterializedViewOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MaterializedView) pulumi.StringPtrOutput { return v.DatabaseName }).(pulumi.StringPtrOutput)
}

// The identifier for the materialized view.
func (o MaterializedViewOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MaterializedView) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The fully qualified name of the materialized view.
func (o MaterializedViewOutput) QualifiedSqlName() pulumi.StringOutput {
	return o.ApplyT(func(v *MaterializedView) pulumi.StringOutput { return v.QualifiedSqlName }).(pulumi.StringOutput)
}

// The identifier for the materialized view schema.
func (o MaterializedViewOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MaterializedView) pulumi.StringPtrOutput { return v.SchemaName }).(pulumi.StringPtrOutput)
}

// The SQL statement to create the materialized view.
func (o MaterializedViewOutput) Statement() pulumi.StringOutput {
	return o.ApplyT(func(v *MaterializedView) pulumi.StringOutput { return v.Statement }).(pulumi.StringOutput)
}

type MaterializedViewArrayOutput struct{ *pulumi.OutputState }

func (MaterializedViewArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MaterializedView)(nil)).Elem()
}

func (o MaterializedViewArrayOutput) ToMaterializedViewArrayOutput() MaterializedViewArrayOutput {
	return o
}

func (o MaterializedViewArrayOutput) ToMaterializedViewArrayOutputWithContext(ctx context.Context) MaterializedViewArrayOutput {
	return o
}

func (o MaterializedViewArrayOutput) Index(i pulumi.IntInput) MaterializedViewOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MaterializedView {
		return vs[0].([]*MaterializedView)[vs[1].(int)]
	}).(MaterializedViewOutput)
}

type MaterializedViewMapOutput struct{ *pulumi.OutputState }

func (MaterializedViewMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MaterializedView)(nil)).Elem()
}

func (o MaterializedViewMapOutput) ToMaterializedViewMapOutput() MaterializedViewMapOutput {
	return o
}

func (o MaterializedViewMapOutput) ToMaterializedViewMapOutputWithContext(ctx context.Context) MaterializedViewMapOutput {
	return o
}

func (o MaterializedViewMapOutput) MapIndex(k pulumi.StringInput) MaterializedViewOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MaterializedView {
		return vs[0].(map[string]*MaterializedView)[vs[1].(string)]
	}).(MaterializedViewOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MaterializedViewInput)(nil)).Elem(), &MaterializedView{})
	pulumi.RegisterInputType(reflect.TypeOf((*MaterializedViewArrayInput)(nil)).Elem(), MaterializedViewArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MaterializedViewMapInput)(nil)).Elem(), MaterializedViewMap{})
	pulumi.RegisterOutputType(MaterializedViewOutput{})
	pulumi.RegisterOutputType(MaterializedViewArrayOutput{})
	pulumi.RegisterOutputType(MaterializedViewMapOutput{})
}
