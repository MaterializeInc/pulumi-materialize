// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package materialize

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The connection resource allows you to manage connections in Materialize.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-materialize/sdk/go/materialize"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := materialize.NewConnectionPostgres(ctx, "examplePostgresConnection", &materialize.ConnectionPostgresArgs{
//				Database: pulumi.String("example"),
//				Host:     pulumi.String("instance.foo000.us-west-1.rds.amazonaws.com"),
//				Password: &ConnectionPostgresPasswordArgs{
//					DatabaseName: pulumi.String("database"),
//					Name:         pulumi.String("example"),
//					SchemaName:   pulumi.String("schema"),
//				},
//				Port: pulumi.Int(5432),
//				User: &ConnectionPostgresUserArgs{
//					Secret: &ConnectionPostgresUserSecretArgs{
//						DatabaseName: pulumi.String("database"),
//						Name:         pulumi.String("example"),
//						SchemaName:   pulumi.String("schema"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// #Connections can be imported using the connection id
//
// ```sh
//
//	$ pulumi import materialize:index/connectionPostgres:ConnectionPostgres example <connection_id>
//
// ```
type ConnectionPostgres struct {
	pulumi.CustomResourceState

	// The AWS PrivateLink configuration for the Postgres database.
	AwsPrivatelink ConnectionPostgresAwsPrivatelinkPtrOutput `pulumi:"awsPrivatelink"`
	// The type of connection.
	ConnectionType pulumi.StringOutput `pulumi:"connectionType"`
	// The target Postgres database.
	Database pulumi.StringOutput `pulumi:"database"`
	// The identifier for the connection database.
	DatabaseName pulumi.StringPtrOutput `pulumi:"databaseName"`
	// The Postgres database hostname.
	Host pulumi.StringOutput `pulumi:"host"`
	// The identifier for the connection.
	Name pulumi.StringOutput `pulumi:"name"`
	// The Postgres database password.
	Password ConnectionPostgresPasswordPtrOutput `pulumi:"password"`
	// The Postgres database port.
	Port pulumi.IntPtrOutput `pulumi:"port"`
	// The fully qualified name of the connection.
	QualifiedSqlName pulumi.StringOutput `pulumi:"qualifiedSqlName"`
	// The identifier for the connection schema.
	SchemaName pulumi.StringPtrOutput `pulumi:"schemaName"`
	// The SSH tunnel configuration for the Postgres database.
	SshTunnel ConnectionPostgresSshTunnelPtrOutput `pulumi:"sshTunnel"`
	// The client certificate for the Postgres database.
	SslCertificate ConnectionPostgresSslCertificatePtrOutput `pulumi:"sslCertificate"`
	// The CA certificate for the Postgres database.
	SslCertificateAuthority ConnectionPostgresSslCertificateAuthorityPtrOutput `pulumi:"sslCertificateAuthority"`
	// The client key for the Postgres database.
	SslKey ConnectionPostgresSslKeyPtrOutput `pulumi:"sslKey"`
	// The SSL mode for the Postgres database.
	SslMode pulumi.StringPtrOutput `pulumi:"sslMode"`
	// The Postgres database username.
	User ConnectionPostgresUserOutput `pulumi:"user"`
}

// NewConnectionPostgres registers a new resource with the given unique name, arguments, and options.
func NewConnectionPostgres(ctx *pulumi.Context,
	name string, args *ConnectionPostgresArgs, opts ...pulumi.ResourceOption) (*ConnectionPostgres, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Database == nil {
		return nil, errors.New("invalid value for required argument 'Database'")
	}
	if args.Host == nil {
		return nil, errors.New("invalid value for required argument 'Host'")
	}
	if args.User == nil {
		return nil, errors.New("invalid value for required argument 'User'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource ConnectionPostgres
	err := ctx.RegisterResource("materialize:index/connectionPostgres:ConnectionPostgres", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConnectionPostgres gets an existing ConnectionPostgres resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConnectionPostgres(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConnectionPostgresState, opts ...pulumi.ResourceOption) (*ConnectionPostgres, error) {
	var resource ConnectionPostgres
	err := ctx.ReadResource("materialize:index/connectionPostgres:ConnectionPostgres", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConnectionPostgres resources.
type connectionPostgresState struct {
	// The AWS PrivateLink configuration for the Postgres database.
	AwsPrivatelink *ConnectionPostgresAwsPrivatelink `pulumi:"awsPrivatelink"`
	// The type of connection.
	ConnectionType *string `pulumi:"connectionType"`
	// The target Postgres database.
	Database *string `pulumi:"database"`
	// The identifier for the connection database.
	DatabaseName *string `pulumi:"databaseName"`
	// The Postgres database hostname.
	Host *string `pulumi:"host"`
	// The identifier for the connection.
	Name *string `pulumi:"name"`
	// The Postgres database password.
	Password *ConnectionPostgresPassword `pulumi:"password"`
	// The Postgres database port.
	Port *int `pulumi:"port"`
	// The fully qualified name of the connection.
	QualifiedSqlName *string `pulumi:"qualifiedSqlName"`
	// The identifier for the connection schema.
	SchemaName *string `pulumi:"schemaName"`
	// The SSH tunnel configuration for the Postgres database.
	SshTunnel *ConnectionPostgresSshTunnel `pulumi:"sshTunnel"`
	// The client certificate for the Postgres database.
	SslCertificate *ConnectionPostgresSslCertificate `pulumi:"sslCertificate"`
	// The CA certificate for the Postgres database.
	SslCertificateAuthority *ConnectionPostgresSslCertificateAuthority `pulumi:"sslCertificateAuthority"`
	// The client key for the Postgres database.
	SslKey *ConnectionPostgresSslKey `pulumi:"sslKey"`
	// The SSL mode for the Postgres database.
	SslMode *string `pulumi:"sslMode"`
	// The Postgres database username.
	User *ConnectionPostgresUser `pulumi:"user"`
}

type ConnectionPostgresState struct {
	// The AWS PrivateLink configuration for the Postgres database.
	AwsPrivatelink ConnectionPostgresAwsPrivatelinkPtrInput
	// The type of connection.
	ConnectionType pulumi.StringPtrInput
	// The target Postgres database.
	Database pulumi.StringPtrInput
	// The identifier for the connection database.
	DatabaseName pulumi.StringPtrInput
	// The Postgres database hostname.
	Host pulumi.StringPtrInput
	// The identifier for the connection.
	Name pulumi.StringPtrInput
	// The Postgres database password.
	Password ConnectionPostgresPasswordPtrInput
	// The Postgres database port.
	Port pulumi.IntPtrInput
	// The fully qualified name of the connection.
	QualifiedSqlName pulumi.StringPtrInput
	// The identifier for the connection schema.
	SchemaName pulumi.StringPtrInput
	// The SSH tunnel configuration for the Postgres database.
	SshTunnel ConnectionPostgresSshTunnelPtrInput
	// The client certificate for the Postgres database.
	SslCertificate ConnectionPostgresSslCertificatePtrInput
	// The CA certificate for the Postgres database.
	SslCertificateAuthority ConnectionPostgresSslCertificateAuthorityPtrInput
	// The client key for the Postgres database.
	SslKey ConnectionPostgresSslKeyPtrInput
	// The SSL mode for the Postgres database.
	SslMode pulumi.StringPtrInput
	// The Postgres database username.
	User ConnectionPostgresUserPtrInput
}

func (ConnectionPostgresState) ElementType() reflect.Type {
	return reflect.TypeOf((*connectionPostgresState)(nil)).Elem()
}

type connectionPostgresArgs struct {
	// The AWS PrivateLink configuration for the Postgres database.
	AwsPrivatelink *ConnectionPostgresAwsPrivatelink `pulumi:"awsPrivatelink"`
	// The target Postgres database.
	Database string `pulumi:"database"`
	// The identifier for the connection database.
	DatabaseName *string `pulumi:"databaseName"`
	// The Postgres database hostname.
	Host string `pulumi:"host"`
	// The identifier for the connection.
	Name *string `pulumi:"name"`
	// The Postgres database password.
	Password *ConnectionPostgresPassword `pulumi:"password"`
	// The Postgres database port.
	Port *int `pulumi:"port"`
	// The identifier for the connection schema.
	SchemaName *string `pulumi:"schemaName"`
	// The SSH tunnel configuration for the Postgres database.
	SshTunnel *ConnectionPostgresSshTunnel `pulumi:"sshTunnel"`
	// The client certificate for the Postgres database.
	SslCertificate *ConnectionPostgresSslCertificate `pulumi:"sslCertificate"`
	// The CA certificate for the Postgres database.
	SslCertificateAuthority *ConnectionPostgresSslCertificateAuthority `pulumi:"sslCertificateAuthority"`
	// The client key for the Postgres database.
	SslKey *ConnectionPostgresSslKey `pulumi:"sslKey"`
	// The SSL mode for the Postgres database.
	SslMode *string `pulumi:"sslMode"`
	// The Postgres database username.
	User ConnectionPostgresUser `pulumi:"user"`
}

// The set of arguments for constructing a ConnectionPostgres resource.
type ConnectionPostgresArgs struct {
	// The AWS PrivateLink configuration for the Postgres database.
	AwsPrivatelink ConnectionPostgresAwsPrivatelinkPtrInput
	// The target Postgres database.
	Database pulumi.StringInput
	// The identifier for the connection database.
	DatabaseName pulumi.StringPtrInput
	// The Postgres database hostname.
	Host pulumi.StringInput
	// The identifier for the connection.
	Name pulumi.StringPtrInput
	// The Postgres database password.
	Password ConnectionPostgresPasswordPtrInput
	// The Postgres database port.
	Port pulumi.IntPtrInput
	// The identifier for the connection schema.
	SchemaName pulumi.StringPtrInput
	// The SSH tunnel configuration for the Postgres database.
	SshTunnel ConnectionPostgresSshTunnelPtrInput
	// The client certificate for the Postgres database.
	SslCertificate ConnectionPostgresSslCertificatePtrInput
	// The CA certificate for the Postgres database.
	SslCertificateAuthority ConnectionPostgresSslCertificateAuthorityPtrInput
	// The client key for the Postgres database.
	SslKey ConnectionPostgresSslKeyPtrInput
	// The SSL mode for the Postgres database.
	SslMode pulumi.StringPtrInput
	// The Postgres database username.
	User ConnectionPostgresUserInput
}

func (ConnectionPostgresArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*connectionPostgresArgs)(nil)).Elem()
}

type ConnectionPostgresInput interface {
	pulumi.Input

	ToConnectionPostgresOutput() ConnectionPostgresOutput
	ToConnectionPostgresOutputWithContext(ctx context.Context) ConnectionPostgresOutput
}

func (*ConnectionPostgres) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionPostgres)(nil)).Elem()
}

func (i *ConnectionPostgres) ToConnectionPostgresOutput() ConnectionPostgresOutput {
	return i.ToConnectionPostgresOutputWithContext(context.Background())
}

func (i *ConnectionPostgres) ToConnectionPostgresOutputWithContext(ctx context.Context) ConnectionPostgresOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionPostgresOutput)
}

// ConnectionPostgresArrayInput is an input type that accepts ConnectionPostgresArray and ConnectionPostgresArrayOutput values.
// You can construct a concrete instance of `ConnectionPostgresArrayInput` via:
//
//	ConnectionPostgresArray{ ConnectionPostgresArgs{...} }
type ConnectionPostgresArrayInput interface {
	pulumi.Input

	ToConnectionPostgresArrayOutput() ConnectionPostgresArrayOutput
	ToConnectionPostgresArrayOutputWithContext(context.Context) ConnectionPostgresArrayOutput
}

type ConnectionPostgresArray []ConnectionPostgresInput

func (ConnectionPostgresArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConnectionPostgres)(nil)).Elem()
}

func (i ConnectionPostgresArray) ToConnectionPostgresArrayOutput() ConnectionPostgresArrayOutput {
	return i.ToConnectionPostgresArrayOutputWithContext(context.Background())
}

func (i ConnectionPostgresArray) ToConnectionPostgresArrayOutputWithContext(ctx context.Context) ConnectionPostgresArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionPostgresArrayOutput)
}

// ConnectionPostgresMapInput is an input type that accepts ConnectionPostgresMap and ConnectionPostgresMapOutput values.
// You can construct a concrete instance of `ConnectionPostgresMapInput` via:
//
//	ConnectionPostgresMap{ "key": ConnectionPostgresArgs{...} }
type ConnectionPostgresMapInput interface {
	pulumi.Input

	ToConnectionPostgresMapOutput() ConnectionPostgresMapOutput
	ToConnectionPostgresMapOutputWithContext(context.Context) ConnectionPostgresMapOutput
}

type ConnectionPostgresMap map[string]ConnectionPostgresInput

func (ConnectionPostgresMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConnectionPostgres)(nil)).Elem()
}

func (i ConnectionPostgresMap) ToConnectionPostgresMapOutput() ConnectionPostgresMapOutput {
	return i.ToConnectionPostgresMapOutputWithContext(context.Background())
}

func (i ConnectionPostgresMap) ToConnectionPostgresMapOutputWithContext(ctx context.Context) ConnectionPostgresMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionPostgresMapOutput)
}

type ConnectionPostgresOutput struct{ *pulumi.OutputState }

func (ConnectionPostgresOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionPostgres)(nil)).Elem()
}

func (o ConnectionPostgresOutput) ToConnectionPostgresOutput() ConnectionPostgresOutput {
	return o
}

func (o ConnectionPostgresOutput) ToConnectionPostgresOutputWithContext(ctx context.Context) ConnectionPostgresOutput {
	return o
}

// The AWS PrivateLink configuration for the Postgres database.
func (o ConnectionPostgresOutput) AwsPrivatelink() ConnectionPostgresAwsPrivatelinkPtrOutput {
	return o.ApplyT(func(v *ConnectionPostgres) ConnectionPostgresAwsPrivatelinkPtrOutput { return v.AwsPrivatelink }).(ConnectionPostgresAwsPrivatelinkPtrOutput)
}

// The type of connection.
func (o ConnectionPostgresOutput) ConnectionType() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectionPostgres) pulumi.StringOutput { return v.ConnectionType }).(pulumi.StringOutput)
}

// The target Postgres database.
func (o ConnectionPostgresOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectionPostgres) pulumi.StringOutput { return v.Database }).(pulumi.StringOutput)
}

// The identifier for the connection database.
func (o ConnectionPostgresOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionPostgres) pulumi.StringPtrOutput { return v.DatabaseName }).(pulumi.StringPtrOutput)
}

// The Postgres database hostname.
func (o ConnectionPostgresOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectionPostgres) pulumi.StringOutput { return v.Host }).(pulumi.StringOutput)
}

// The identifier for the connection.
func (o ConnectionPostgresOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectionPostgres) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The Postgres database password.
func (o ConnectionPostgresOutput) Password() ConnectionPostgresPasswordPtrOutput {
	return o.ApplyT(func(v *ConnectionPostgres) ConnectionPostgresPasswordPtrOutput { return v.Password }).(ConnectionPostgresPasswordPtrOutput)
}

// The Postgres database port.
func (o ConnectionPostgresOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ConnectionPostgres) pulumi.IntPtrOutput { return v.Port }).(pulumi.IntPtrOutput)
}

// The fully qualified name of the connection.
func (o ConnectionPostgresOutput) QualifiedSqlName() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectionPostgres) pulumi.StringOutput { return v.QualifiedSqlName }).(pulumi.StringOutput)
}

// The identifier for the connection schema.
func (o ConnectionPostgresOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionPostgres) pulumi.StringPtrOutput { return v.SchemaName }).(pulumi.StringPtrOutput)
}

// The SSH tunnel configuration for the Postgres database.
func (o ConnectionPostgresOutput) SshTunnel() ConnectionPostgresSshTunnelPtrOutput {
	return o.ApplyT(func(v *ConnectionPostgres) ConnectionPostgresSshTunnelPtrOutput { return v.SshTunnel }).(ConnectionPostgresSshTunnelPtrOutput)
}

// The client certificate for the Postgres database.
func (o ConnectionPostgresOutput) SslCertificate() ConnectionPostgresSslCertificatePtrOutput {
	return o.ApplyT(func(v *ConnectionPostgres) ConnectionPostgresSslCertificatePtrOutput { return v.SslCertificate }).(ConnectionPostgresSslCertificatePtrOutput)
}

// The CA certificate for the Postgres database.
func (o ConnectionPostgresOutput) SslCertificateAuthority() ConnectionPostgresSslCertificateAuthorityPtrOutput {
	return o.ApplyT(func(v *ConnectionPostgres) ConnectionPostgresSslCertificateAuthorityPtrOutput {
		return v.SslCertificateAuthority
	}).(ConnectionPostgresSslCertificateAuthorityPtrOutput)
}

// The client key for the Postgres database.
func (o ConnectionPostgresOutput) SslKey() ConnectionPostgresSslKeyPtrOutput {
	return o.ApplyT(func(v *ConnectionPostgres) ConnectionPostgresSslKeyPtrOutput { return v.SslKey }).(ConnectionPostgresSslKeyPtrOutput)
}

// The SSL mode for the Postgres database.
func (o ConnectionPostgresOutput) SslMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionPostgres) pulumi.StringPtrOutput { return v.SslMode }).(pulumi.StringPtrOutput)
}

// The Postgres database username.
func (o ConnectionPostgresOutput) User() ConnectionPostgresUserOutput {
	return o.ApplyT(func(v *ConnectionPostgres) ConnectionPostgresUserOutput { return v.User }).(ConnectionPostgresUserOutput)
}

type ConnectionPostgresArrayOutput struct{ *pulumi.OutputState }

func (ConnectionPostgresArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConnectionPostgres)(nil)).Elem()
}

func (o ConnectionPostgresArrayOutput) ToConnectionPostgresArrayOutput() ConnectionPostgresArrayOutput {
	return o
}

func (o ConnectionPostgresArrayOutput) ToConnectionPostgresArrayOutputWithContext(ctx context.Context) ConnectionPostgresArrayOutput {
	return o
}

func (o ConnectionPostgresArrayOutput) Index(i pulumi.IntInput) ConnectionPostgresOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ConnectionPostgres {
		return vs[0].([]*ConnectionPostgres)[vs[1].(int)]
	}).(ConnectionPostgresOutput)
}

type ConnectionPostgresMapOutput struct{ *pulumi.OutputState }

func (ConnectionPostgresMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConnectionPostgres)(nil)).Elem()
}

func (o ConnectionPostgresMapOutput) ToConnectionPostgresMapOutput() ConnectionPostgresMapOutput {
	return o
}

func (o ConnectionPostgresMapOutput) ToConnectionPostgresMapOutputWithContext(ctx context.Context) ConnectionPostgresMapOutput {
	return o
}

func (o ConnectionPostgresMapOutput) MapIndex(k pulumi.StringInput) ConnectionPostgresOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ConnectionPostgres {
		return vs[0].(map[string]*ConnectionPostgres)[vs[1].(string)]
	}).(ConnectionPostgresOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionPostgresInput)(nil)).Elem(), &ConnectionPostgres{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionPostgresArrayInput)(nil)).Elem(), ConnectionPostgresArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionPostgresMapInput)(nil)).Elem(), ConnectionPostgresMap{})
	pulumi.RegisterOutputType(ConnectionPostgresOutput{})
	pulumi.RegisterOutputType(ConnectionPostgresArrayOutput{})
	pulumi.RegisterOutputType(ConnectionPostgresMapOutput{})
}
