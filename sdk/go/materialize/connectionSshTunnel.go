// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package materialize

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The connection resource allows you to manage connections in Materialize.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-materialize/sdk/go/materialize"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := materialize.NewConnectionSshTunnel(ctx, "exampleSshConnection", &materialize.ConnectionSshTunnelArgs{
//				Host:       pulumi.String("example.com"),
//				Port:       pulumi.Int(22),
//				SchemaName: pulumi.String("public"),
//				User:       pulumi.String("example"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// #Connections can be imported using the connection id
//
// ```sh
//
//	$ pulumi import materialize:index/connectionSshTunnel:ConnectionSshTunnel example <connection_id>
//
// ```
type ConnectionSshTunnel struct {
	pulumi.CustomResourceState

	// The type of connection.
	ConnectionType pulumi.StringOutput `pulumi:"connectionType"`
	// The identifier for the connection database.
	DatabaseName pulumi.StringPtrOutput `pulumi:"databaseName"`
	// The host of the SSH tunnel.
	Host pulumi.StringOutput `pulumi:"host"`
	// The identifier for the connection.
	Name pulumi.StringOutput `pulumi:"name"`
	// The port of the SSH tunnel.
	Port pulumi.IntOutput `pulumi:"port"`
	// The fully qualified name of the connection.
	QualifiedSqlName pulumi.StringOutput `pulumi:"qualifiedSqlName"`
	// The identifier for the connection schema.
	SchemaName pulumi.StringPtrOutput `pulumi:"schemaName"`
	// The user of the SSH tunnel.
	User pulumi.StringOutput `pulumi:"user"`
}

// NewConnectionSshTunnel registers a new resource with the given unique name, arguments, and options.
func NewConnectionSshTunnel(ctx *pulumi.Context,
	name string, args *ConnectionSshTunnelArgs, opts ...pulumi.ResourceOption) (*ConnectionSshTunnel, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Host == nil {
		return nil, errors.New("invalid value for required argument 'Host'")
	}
	if args.Port == nil {
		return nil, errors.New("invalid value for required argument 'Port'")
	}
	if args.User == nil {
		return nil, errors.New("invalid value for required argument 'User'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource ConnectionSshTunnel
	err := ctx.RegisterResource("materialize:index/connectionSshTunnel:ConnectionSshTunnel", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConnectionSshTunnel gets an existing ConnectionSshTunnel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConnectionSshTunnel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConnectionSshTunnelState, opts ...pulumi.ResourceOption) (*ConnectionSshTunnel, error) {
	var resource ConnectionSshTunnel
	err := ctx.ReadResource("materialize:index/connectionSshTunnel:ConnectionSshTunnel", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConnectionSshTunnel resources.
type connectionSshTunnelState struct {
	// The type of connection.
	ConnectionType *string `pulumi:"connectionType"`
	// The identifier for the connection database.
	DatabaseName *string `pulumi:"databaseName"`
	// The host of the SSH tunnel.
	Host *string `pulumi:"host"`
	// The identifier for the connection.
	Name *string `pulumi:"name"`
	// The port of the SSH tunnel.
	Port *int `pulumi:"port"`
	// The fully qualified name of the connection.
	QualifiedSqlName *string `pulumi:"qualifiedSqlName"`
	// The identifier for the connection schema.
	SchemaName *string `pulumi:"schemaName"`
	// The user of the SSH tunnel.
	User *string `pulumi:"user"`
}

type ConnectionSshTunnelState struct {
	// The type of connection.
	ConnectionType pulumi.StringPtrInput
	// The identifier for the connection database.
	DatabaseName pulumi.StringPtrInput
	// The host of the SSH tunnel.
	Host pulumi.StringPtrInput
	// The identifier for the connection.
	Name pulumi.StringPtrInput
	// The port of the SSH tunnel.
	Port pulumi.IntPtrInput
	// The fully qualified name of the connection.
	QualifiedSqlName pulumi.StringPtrInput
	// The identifier for the connection schema.
	SchemaName pulumi.StringPtrInput
	// The user of the SSH tunnel.
	User pulumi.StringPtrInput
}

func (ConnectionSshTunnelState) ElementType() reflect.Type {
	return reflect.TypeOf((*connectionSshTunnelState)(nil)).Elem()
}

type connectionSshTunnelArgs struct {
	// The identifier for the connection database.
	DatabaseName *string `pulumi:"databaseName"`
	// The host of the SSH tunnel.
	Host string `pulumi:"host"`
	// The identifier for the connection.
	Name *string `pulumi:"name"`
	// The port of the SSH tunnel.
	Port int `pulumi:"port"`
	// The identifier for the connection schema.
	SchemaName *string `pulumi:"schemaName"`
	// The user of the SSH tunnel.
	User string `pulumi:"user"`
}

// The set of arguments for constructing a ConnectionSshTunnel resource.
type ConnectionSshTunnelArgs struct {
	// The identifier for the connection database.
	DatabaseName pulumi.StringPtrInput
	// The host of the SSH tunnel.
	Host pulumi.StringInput
	// The identifier for the connection.
	Name pulumi.StringPtrInput
	// The port of the SSH tunnel.
	Port pulumi.IntInput
	// The identifier for the connection schema.
	SchemaName pulumi.StringPtrInput
	// The user of the SSH tunnel.
	User pulumi.StringInput
}

func (ConnectionSshTunnelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*connectionSshTunnelArgs)(nil)).Elem()
}

type ConnectionSshTunnelInput interface {
	pulumi.Input

	ToConnectionSshTunnelOutput() ConnectionSshTunnelOutput
	ToConnectionSshTunnelOutputWithContext(ctx context.Context) ConnectionSshTunnelOutput
}

func (*ConnectionSshTunnel) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionSshTunnel)(nil)).Elem()
}

func (i *ConnectionSshTunnel) ToConnectionSshTunnelOutput() ConnectionSshTunnelOutput {
	return i.ToConnectionSshTunnelOutputWithContext(context.Background())
}

func (i *ConnectionSshTunnel) ToConnectionSshTunnelOutputWithContext(ctx context.Context) ConnectionSshTunnelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionSshTunnelOutput)
}

// ConnectionSshTunnelArrayInput is an input type that accepts ConnectionSshTunnelArray and ConnectionSshTunnelArrayOutput values.
// You can construct a concrete instance of `ConnectionSshTunnelArrayInput` via:
//
//	ConnectionSshTunnelArray{ ConnectionSshTunnelArgs{...} }
type ConnectionSshTunnelArrayInput interface {
	pulumi.Input

	ToConnectionSshTunnelArrayOutput() ConnectionSshTunnelArrayOutput
	ToConnectionSshTunnelArrayOutputWithContext(context.Context) ConnectionSshTunnelArrayOutput
}

type ConnectionSshTunnelArray []ConnectionSshTunnelInput

func (ConnectionSshTunnelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConnectionSshTunnel)(nil)).Elem()
}

func (i ConnectionSshTunnelArray) ToConnectionSshTunnelArrayOutput() ConnectionSshTunnelArrayOutput {
	return i.ToConnectionSshTunnelArrayOutputWithContext(context.Background())
}

func (i ConnectionSshTunnelArray) ToConnectionSshTunnelArrayOutputWithContext(ctx context.Context) ConnectionSshTunnelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionSshTunnelArrayOutput)
}

// ConnectionSshTunnelMapInput is an input type that accepts ConnectionSshTunnelMap and ConnectionSshTunnelMapOutput values.
// You can construct a concrete instance of `ConnectionSshTunnelMapInput` via:
//
//	ConnectionSshTunnelMap{ "key": ConnectionSshTunnelArgs{...} }
type ConnectionSshTunnelMapInput interface {
	pulumi.Input

	ToConnectionSshTunnelMapOutput() ConnectionSshTunnelMapOutput
	ToConnectionSshTunnelMapOutputWithContext(context.Context) ConnectionSshTunnelMapOutput
}

type ConnectionSshTunnelMap map[string]ConnectionSshTunnelInput

func (ConnectionSshTunnelMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConnectionSshTunnel)(nil)).Elem()
}

func (i ConnectionSshTunnelMap) ToConnectionSshTunnelMapOutput() ConnectionSshTunnelMapOutput {
	return i.ToConnectionSshTunnelMapOutputWithContext(context.Background())
}

func (i ConnectionSshTunnelMap) ToConnectionSshTunnelMapOutputWithContext(ctx context.Context) ConnectionSshTunnelMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionSshTunnelMapOutput)
}

type ConnectionSshTunnelOutput struct{ *pulumi.OutputState }

func (ConnectionSshTunnelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionSshTunnel)(nil)).Elem()
}

func (o ConnectionSshTunnelOutput) ToConnectionSshTunnelOutput() ConnectionSshTunnelOutput {
	return o
}

func (o ConnectionSshTunnelOutput) ToConnectionSshTunnelOutputWithContext(ctx context.Context) ConnectionSshTunnelOutput {
	return o
}

// The type of connection.
func (o ConnectionSshTunnelOutput) ConnectionType() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectionSshTunnel) pulumi.StringOutput { return v.ConnectionType }).(pulumi.StringOutput)
}

// The identifier for the connection database.
func (o ConnectionSshTunnelOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionSshTunnel) pulumi.StringPtrOutput { return v.DatabaseName }).(pulumi.StringPtrOutput)
}

// The host of the SSH tunnel.
func (o ConnectionSshTunnelOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectionSshTunnel) pulumi.StringOutput { return v.Host }).(pulumi.StringOutput)
}

// The identifier for the connection.
func (o ConnectionSshTunnelOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectionSshTunnel) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The port of the SSH tunnel.
func (o ConnectionSshTunnelOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *ConnectionSshTunnel) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

// The fully qualified name of the connection.
func (o ConnectionSshTunnelOutput) QualifiedSqlName() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectionSshTunnel) pulumi.StringOutput { return v.QualifiedSqlName }).(pulumi.StringOutput)
}

// The identifier for the connection schema.
func (o ConnectionSshTunnelOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionSshTunnel) pulumi.StringPtrOutput { return v.SchemaName }).(pulumi.StringPtrOutput)
}

// The user of the SSH tunnel.
func (o ConnectionSshTunnelOutput) User() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectionSshTunnel) pulumi.StringOutput { return v.User }).(pulumi.StringOutput)
}

type ConnectionSshTunnelArrayOutput struct{ *pulumi.OutputState }

func (ConnectionSshTunnelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConnectionSshTunnel)(nil)).Elem()
}

func (o ConnectionSshTunnelArrayOutput) ToConnectionSshTunnelArrayOutput() ConnectionSshTunnelArrayOutput {
	return o
}

func (o ConnectionSshTunnelArrayOutput) ToConnectionSshTunnelArrayOutputWithContext(ctx context.Context) ConnectionSshTunnelArrayOutput {
	return o
}

func (o ConnectionSshTunnelArrayOutput) Index(i pulumi.IntInput) ConnectionSshTunnelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ConnectionSshTunnel {
		return vs[0].([]*ConnectionSshTunnel)[vs[1].(int)]
	}).(ConnectionSshTunnelOutput)
}

type ConnectionSshTunnelMapOutput struct{ *pulumi.OutputState }

func (ConnectionSshTunnelMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConnectionSshTunnel)(nil)).Elem()
}

func (o ConnectionSshTunnelMapOutput) ToConnectionSshTunnelMapOutput() ConnectionSshTunnelMapOutput {
	return o
}

func (o ConnectionSshTunnelMapOutput) ToConnectionSshTunnelMapOutputWithContext(ctx context.Context) ConnectionSshTunnelMapOutput {
	return o
}

func (o ConnectionSshTunnelMapOutput) MapIndex(k pulumi.StringInput) ConnectionSshTunnelOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ConnectionSshTunnel {
		return vs[0].(map[string]*ConnectionSshTunnel)[vs[1].(string)]
	}).(ConnectionSshTunnelOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionSshTunnelInput)(nil)).Elem(), &ConnectionSshTunnel{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionSshTunnelArrayInput)(nil)).Elem(), ConnectionSshTunnelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionSshTunnelMapInput)(nil)).Elem(), ConnectionSshTunnelMap{})
	pulumi.RegisterOutputType(ConnectionSshTunnelOutput{})
	pulumi.RegisterOutputType(ConnectionSshTunnelArrayOutput{})
	pulumi.RegisterOutputType(ConnectionSshTunnelMapOutput{})
}
