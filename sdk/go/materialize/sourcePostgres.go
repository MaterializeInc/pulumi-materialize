// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package materialize

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A source describes an external system you want Materialize to read data from, and provides details about how to decode and interpret that data.
//
// ## Import
//
// # Sources can be imported using the source id
//
// ```sh
//
//	$ pulumi import materialize:index/sourcePostgres:SourcePostgres example_source_postgres <source_id>
//
// ```
type SourcePostgres struct {
	pulumi.CustomResourceState

	// The cluster to maintain this source. If not specified, the size option must be specified.
	ClusterName pulumi.StringOutput `pulumi:"clusterName"`
	// The identifier for the source database.
	DatabaseName pulumi.StringPtrOutput `pulumi:"databaseName"`
	// The identifier for the source.
	Name pulumi.StringOutput `pulumi:"name"`
	// The PostgreSQL connection to use in the source.
	PostgresConnection SourcePostgresPostgresConnectionOutput `pulumi:"postgresConnection"`
	// The PostgreSQL publication (the replication data set containing the tables to be streamed to Materialize).
	Publication pulumi.StringOutput `pulumi:"publication"`
	// The fully qualified name of the source.
	QualifiedSqlName pulumi.StringOutput `pulumi:"qualifiedSqlName"`
	// The identifier for the source schema.
	SchemaName pulumi.StringPtrOutput `pulumi:"schemaName"`
	// The size of the source.
	Size pulumi.StringOutput `pulumi:"size"`
	// The type of source.
	SourceType pulumi.StringOutput `pulumi:"sourceType"`
	// Creates subsources for specific tables.
	Tables SourcePostgresTableArrayOutput `pulumi:"tables"`
	// Decode data as text for specific columns that contain PostgreSQL types that are unsupported in Materialize.
	TextColumns pulumi.StringArrayOutput `pulumi:"textColumns"`
}

// NewSourcePostgres registers a new resource with the given unique name, arguments, and options.
func NewSourcePostgres(ctx *pulumi.Context,
	name string, args *SourcePostgresArgs, opts ...pulumi.ResourceOption) (*SourcePostgres, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PostgresConnection == nil {
		return nil, errors.New("invalid value for required argument 'PostgresConnection'")
	}
	if args.Publication == nil {
		return nil, errors.New("invalid value for required argument 'Publication'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource SourcePostgres
	err := ctx.RegisterResource("materialize:index/sourcePostgres:SourcePostgres", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSourcePostgres gets an existing SourcePostgres resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSourcePostgres(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SourcePostgresState, opts ...pulumi.ResourceOption) (*SourcePostgres, error) {
	var resource SourcePostgres
	err := ctx.ReadResource("materialize:index/sourcePostgres:SourcePostgres", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SourcePostgres resources.
type sourcePostgresState struct {
	// The cluster to maintain this source. If not specified, the size option must be specified.
	ClusterName *string `pulumi:"clusterName"`
	// The identifier for the source database.
	DatabaseName *string `pulumi:"databaseName"`
	// The identifier for the source.
	Name *string `pulumi:"name"`
	// The PostgreSQL connection to use in the source.
	PostgresConnection *SourcePostgresPostgresConnection `pulumi:"postgresConnection"`
	// The PostgreSQL publication (the replication data set containing the tables to be streamed to Materialize).
	Publication *string `pulumi:"publication"`
	// The fully qualified name of the source.
	QualifiedSqlName *string `pulumi:"qualifiedSqlName"`
	// The identifier for the source schema.
	SchemaName *string `pulumi:"schemaName"`
	// The size of the source.
	Size *string `pulumi:"size"`
	// The type of source.
	SourceType *string `pulumi:"sourceType"`
	// Creates subsources for specific tables.
	Tables []SourcePostgresTable `pulumi:"tables"`
	// Decode data as text for specific columns that contain PostgreSQL types that are unsupported in Materialize.
	TextColumns []string `pulumi:"textColumns"`
}

type SourcePostgresState struct {
	// The cluster to maintain this source. If not specified, the size option must be specified.
	ClusterName pulumi.StringPtrInput
	// The identifier for the source database.
	DatabaseName pulumi.StringPtrInput
	// The identifier for the source.
	Name pulumi.StringPtrInput
	// The PostgreSQL connection to use in the source.
	PostgresConnection SourcePostgresPostgresConnectionPtrInput
	// The PostgreSQL publication (the replication data set containing the tables to be streamed to Materialize).
	Publication pulumi.StringPtrInput
	// The fully qualified name of the source.
	QualifiedSqlName pulumi.StringPtrInput
	// The identifier for the source schema.
	SchemaName pulumi.StringPtrInput
	// The size of the source.
	Size pulumi.StringPtrInput
	// The type of source.
	SourceType pulumi.StringPtrInput
	// Creates subsources for specific tables.
	Tables SourcePostgresTableArrayInput
	// Decode data as text for specific columns that contain PostgreSQL types that are unsupported in Materialize.
	TextColumns pulumi.StringArrayInput
}

func (SourcePostgresState) ElementType() reflect.Type {
	return reflect.TypeOf((*sourcePostgresState)(nil)).Elem()
}

type sourcePostgresArgs struct {
	// The cluster to maintain this source. If not specified, the size option must be specified.
	ClusterName *string `pulumi:"clusterName"`
	// The identifier for the source database.
	DatabaseName *string `pulumi:"databaseName"`
	// The identifier for the source.
	Name *string `pulumi:"name"`
	// The PostgreSQL connection to use in the source.
	PostgresConnection SourcePostgresPostgresConnection `pulumi:"postgresConnection"`
	// The PostgreSQL publication (the replication data set containing the tables to be streamed to Materialize).
	Publication string `pulumi:"publication"`
	// The identifier for the source schema.
	SchemaName *string `pulumi:"schemaName"`
	// The size of the source.
	Size *string `pulumi:"size"`
	// Creates subsources for specific tables.
	Tables []SourcePostgresTable `pulumi:"tables"`
	// Decode data as text for specific columns that contain PostgreSQL types that are unsupported in Materialize.
	TextColumns []string `pulumi:"textColumns"`
}

// The set of arguments for constructing a SourcePostgres resource.
type SourcePostgresArgs struct {
	// The cluster to maintain this source. If not specified, the size option must be specified.
	ClusterName pulumi.StringPtrInput
	// The identifier for the source database.
	DatabaseName pulumi.StringPtrInput
	// The identifier for the source.
	Name pulumi.StringPtrInput
	// The PostgreSQL connection to use in the source.
	PostgresConnection SourcePostgresPostgresConnectionInput
	// The PostgreSQL publication (the replication data set containing the tables to be streamed to Materialize).
	Publication pulumi.StringInput
	// The identifier for the source schema.
	SchemaName pulumi.StringPtrInput
	// The size of the source.
	Size pulumi.StringPtrInput
	// Creates subsources for specific tables.
	Tables SourcePostgresTableArrayInput
	// Decode data as text for specific columns that contain PostgreSQL types that are unsupported in Materialize.
	TextColumns pulumi.StringArrayInput
}

func (SourcePostgresArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sourcePostgresArgs)(nil)).Elem()
}

type SourcePostgresInput interface {
	pulumi.Input

	ToSourcePostgresOutput() SourcePostgresOutput
	ToSourcePostgresOutputWithContext(ctx context.Context) SourcePostgresOutput
}

func (*SourcePostgres) ElementType() reflect.Type {
	return reflect.TypeOf((**SourcePostgres)(nil)).Elem()
}

func (i *SourcePostgres) ToSourcePostgresOutput() SourcePostgresOutput {
	return i.ToSourcePostgresOutputWithContext(context.Background())
}

func (i *SourcePostgres) ToSourcePostgresOutputWithContext(ctx context.Context) SourcePostgresOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourcePostgresOutput)
}

// SourcePostgresArrayInput is an input type that accepts SourcePostgresArray and SourcePostgresArrayOutput values.
// You can construct a concrete instance of `SourcePostgresArrayInput` via:
//
//	SourcePostgresArray{ SourcePostgresArgs{...} }
type SourcePostgresArrayInput interface {
	pulumi.Input

	ToSourcePostgresArrayOutput() SourcePostgresArrayOutput
	ToSourcePostgresArrayOutputWithContext(context.Context) SourcePostgresArrayOutput
}

type SourcePostgresArray []SourcePostgresInput

func (SourcePostgresArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourcePostgres)(nil)).Elem()
}

func (i SourcePostgresArray) ToSourcePostgresArrayOutput() SourcePostgresArrayOutput {
	return i.ToSourcePostgresArrayOutputWithContext(context.Background())
}

func (i SourcePostgresArray) ToSourcePostgresArrayOutputWithContext(ctx context.Context) SourcePostgresArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourcePostgresArrayOutput)
}

// SourcePostgresMapInput is an input type that accepts SourcePostgresMap and SourcePostgresMapOutput values.
// You can construct a concrete instance of `SourcePostgresMapInput` via:
//
//	SourcePostgresMap{ "key": SourcePostgresArgs{...} }
type SourcePostgresMapInput interface {
	pulumi.Input

	ToSourcePostgresMapOutput() SourcePostgresMapOutput
	ToSourcePostgresMapOutputWithContext(context.Context) SourcePostgresMapOutput
}

type SourcePostgresMap map[string]SourcePostgresInput

func (SourcePostgresMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourcePostgres)(nil)).Elem()
}

func (i SourcePostgresMap) ToSourcePostgresMapOutput() SourcePostgresMapOutput {
	return i.ToSourcePostgresMapOutputWithContext(context.Background())
}

func (i SourcePostgresMap) ToSourcePostgresMapOutputWithContext(ctx context.Context) SourcePostgresMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourcePostgresMapOutput)
}

type SourcePostgresOutput struct{ *pulumi.OutputState }

func (SourcePostgresOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourcePostgres)(nil)).Elem()
}

func (o SourcePostgresOutput) ToSourcePostgresOutput() SourcePostgresOutput {
	return o
}

func (o SourcePostgresOutput) ToSourcePostgresOutputWithContext(ctx context.Context) SourcePostgresOutput {
	return o
}

// The cluster to maintain this source. If not specified, the size option must be specified.
func (o SourcePostgresOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v *SourcePostgres) pulumi.StringOutput { return v.ClusterName }).(pulumi.StringOutput)
}

// The identifier for the source database.
func (o SourcePostgresOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourcePostgres) pulumi.StringPtrOutput { return v.DatabaseName }).(pulumi.StringPtrOutput)
}

// The identifier for the source.
func (o SourcePostgresOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SourcePostgres) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The PostgreSQL connection to use in the source.
func (o SourcePostgresOutput) PostgresConnection() SourcePostgresPostgresConnectionOutput {
	return o.ApplyT(func(v *SourcePostgres) SourcePostgresPostgresConnectionOutput { return v.PostgresConnection }).(SourcePostgresPostgresConnectionOutput)
}

// The PostgreSQL publication (the replication data set containing the tables to be streamed to Materialize).
func (o SourcePostgresOutput) Publication() pulumi.StringOutput {
	return o.ApplyT(func(v *SourcePostgres) pulumi.StringOutput { return v.Publication }).(pulumi.StringOutput)
}

// The fully qualified name of the source.
func (o SourcePostgresOutput) QualifiedSqlName() pulumi.StringOutput {
	return o.ApplyT(func(v *SourcePostgres) pulumi.StringOutput { return v.QualifiedSqlName }).(pulumi.StringOutput)
}

// The identifier for the source schema.
func (o SourcePostgresOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourcePostgres) pulumi.StringPtrOutput { return v.SchemaName }).(pulumi.StringPtrOutput)
}

// The size of the source.
func (o SourcePostgresOutput) Size() pulumi.StringOutput {
	return o.ApplyT(func(v *SourcePostgres) pulumi.StringOutput { return v.Size }).(pulumi.StringOutput)
}

// The type of source.
func (o SourcePostgresOutput) SourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *SourcePostgres) pulumi.StringOutput { return v.SourceType }).(pulumi.StringOutput)
}

// Creates subsources for specific tables.
func (o SourcePostgresOutput) Tables() SourcePostgresTableArrayOutput {
	return o.ApplyT(func(v *SourcePostgres) SourcePostgresTableArrayOutput { return v.Tables }).(SourcePostgresTableArrayOutput)
}

// Decode data as text for specific columns that contain PostgreSQL types that are unsupported in Materialize.
func (o SourcePostgresOutput) TextColumns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SourcePostgres) pulumi.StringArrayOutput { return v.TextColumns }).(pulumi.StringArrayOutput)
}

type SourcePostgresArrayOutput struct{ *pulumi.OutputState }

func (SourcePostgresArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourcePostgres)(nil)).Elem()
}

func (o SourcePostgresArrayOutput) ToSourcePostgresArrayOutput() SourcePostgresArrayOutput {
	return o
}

func (o SourcePostgresArrayOutput) ToSourcePostgresArrayOutputWithContext(ctx context.Context) SourcePostgresArrayOutput {
	return o
}

func (o SourcePostgresArrayOutput) Index(i pulumi.IntInput) SourcePostgresOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SourcePostgres {
		return vs[0].([]*SourcePostgres)[vs[1].(int)]
	}).(SourcePostgresOutput)
}

type SourcePostgresMapOutput struct{ *pulumi.OutputState }

func (SourcePostgresMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourcePostgres)(nil)).Elem()
}

func (o SourcePostgresMapOutput) ToSourcePostgresMapOutput() SourcePostgresMapOutput {
	return o
}

func (o SourcePostgresMapOutput) ToSourcePostgresMapOutputWithContext(ctx context.Context) SourcePostgresMapOutput {
	return o
}

func (o SourcePostgresMapOutput) MapIndex(k pulumi.StringInput) SourcePostgresOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SourcePostgres {
		return vs[0].(map[string]*SourcePostgres)[vs[1].(string)]
	}).(SourcePostgresOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SourcePostgresInput)(nil)).Elem(), &SourcePostgres{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourcePostgresArrayInput)(nil)).Elem(), SourcePostgresArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourcePostgresMapInput)(nil)).Elem(), SourcePostgresMap{})
	pulumi.RegisterOutputType(SourcePostgresOutput{})
	pulumi.RegisterOutputType(SourcePostgresArrayOutput{})
	pulumi.RegisterOutputType(SourcePostgresMapOutput{})
}
