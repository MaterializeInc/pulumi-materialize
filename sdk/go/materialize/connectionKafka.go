// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package materialize

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The connection resource allows you to manage connections in Materialize.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-materialize/sdk/go/materialize"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := materialize.NewConnectionKafka(ctx, "exampleKafkaConnection", &materialize.ConnectionKafkaArgs{
//				KafkaBrokers: ConnectionKafkaKafkaBrokerArray{
//					&ConnectionKafkaKafkaBrokerArgs{
//						Broker: pulumi.String("b-1.hostname-1:9096"),
//					},
//				},
//				ProgressTopic:  pulumi.String("example"),
//				SaslMechanisms: pulumi.String("SCRAM-SHA-256"),
//				SaslPassword: &ConnectionKafkaSaslPasswordArgs{
//					DatabaseName: pulumi.String("materialize"),
//					Name:         pulumi.String("kafka_password"),
//					SchemaName:   pulumi.String("public"),
//				},
//				SaslUsername: "example",
//			})
//			if err != nil {
//				return err
//			}
//			_, err = materialize.NewConnectionKafka(ctx, "exampleKafkaConnectionMultipleBrokers", &materialize.ConnectionKafkaArgs{
//				KafkaBrokers: ConnectionKafkaKafkaBrokerArray{
//					&ConnectionKafkaKafkaBrokerArgs{
//						AvailabilityZone: pulumi.String("use1-az1"),
//						Broker:           pulumi.String("b-1.hostname-1:9096"),
//						PrivatelinkConnection: &ConnectionKafkaKafkaBrokerPrivatelinkConnectionArgs{
//							DatabaseName: pulumi.String("materialize"),
//							Name:         pulumi.String("example_aws_privatelink_conn"),
//							SchemaName:   pulumi.String("public"),
//						},
//						TargetGroupPort: pulumi.Int(9001),
//					},
//					&ConnectionKafkaKafkaBrokerArgs{
//						AvailabilityZone: pulumi.String("use1-az2"),
//						Broker:           pulumi.String("b-2.hostname-2:9096"),
//						PrivatelinkConnection: &ConnectionKafkaKafkaBrokerPrivatelinkConnectionArgs{
//							DatabaseName: pulumi.String("materialize"),
//							Name:         pulumi.String("example_aws_privatelink_conn"),
//							SchemaName:   pulumi.String("public"),
//						},
//						TargetGroupPort: pulumi.Int(9002),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// #Connections can be imported using the connection id
//
// ```sh
//
//	$ pulumi import materialize:index/connectionKafka:ConnectionKafka example <connection_id>
//
// ```
type ConnectionKafka struct {
	pulumi.CustomResourceState

	// The type of connection.
	ConnectionType pulumi.StringOutput `pulumi:"connectionType"`
	// The identifier for the connection database.
	DatabaseName pulumi.StringPtrOutput `pulumi:"databaseName"`
	// The Kafka brokers configuration.
	KafkaBrokers ConnectionKafkaKafkaBrokerArrayOutput `pulumi:"kafkaBrokers"`
	// The identifier for the connection.
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of a topic that Kafka sinks can use to track internal consistency metadata.
	ProgressTopic pulumi.StringPtrOutput `pulumi:"progressTopic"`
	// The fully qualified name of the connection.
	QualifiedSqlName pulumi.StringOutput `pulumi:"qualifiedSqlName"`
	// The SASL mechanism for the Kafka broker.
	SaslMechanisms pulumi.StringPtrOutput `pulumi:"saslMechanisms"`
	// The SASL password for the Kafka broker.
	SaslPassword ConnectionKafkaSaslPasswordPtrOutput `pulumi:"saslPassword"`
	// The SASL username for the Kafka broker.
	SaslUsername ConnectionKafkaSaslUsernamePtrOutput `pulumi:"saslUsername"`
	// The identifier for the connection schema.
	SchemaName pulumi.StringPtrOutput `pulumi:"schemaName"`
	// The SSH tunnel configuration for the Kafka broker.
	SshTunnel ConnectionKafkaSshTunnelPtrOutput `pulumi:"sshTunnel"`
	// The client certificate for the Kafka broker.
	SslCertificate ConnectionKafkaSslCertificatePtrOutput `pulumi:"sslCertificate"`
	// The CA certificate for the Kafka broker.
	SslCertificateAuthority ConnectionKafkaSslCertificateAuthorityPtrOutput `pulumi:"sslCertificateAuthority"`
	// The client key for the Kafka broker.
	SslKey ConnectionKafkaSslKeyPtrOutput `pulumi:"sslKey"`
}

// NewConnectionKafka registers a new resource with the given unique name, arguments, and options.
func NewConnectionKafka(ctx *pulumi.Context,
	name string, args *ConnectionKafkaArgs, opts ...pulumi.ResourceOption) (*ConnectionKafka, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.KafkaBrokers == nil {
		return nil, errors.New("invalid value for required argument 'KafkaBrokers'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource ConnectionKafka
	err := ctx.RegisterResource("materialize:index/connectionKafka:ConnectionKafka", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConnectionKafka gets an existing ConnectionKafka resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConnectionKafka(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConnectionKafkaState, opts ...pulumi.ResourceOption) (*ConnectionKafka, error) {
	var resource ConnectionKafka
	err := ctx.ReadResource("materialize:index/connectionKafka:ConnectionKafka", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConnectionKafka resources.
type connectionKafkaState struct {
	// The type of connection.
	ConnectionType *string `pulumi:"connectionType"`
	// The identifier for the connection database.
	DatabaseName *string `pulumi:"databaseName"`
	// The Kafka brokers configuration.
	KafkaBrokers []ConnectionKafkaKafkaBroker `pulumi:"kafkaBrokers"`
	// The identifier for the connection.
	Name *string `pulumi:"name"`
	// The name of a topic that Kafka sinks can use to track internal consistency metadata.
	ProgressTopic *string `pulumi:"progressTopic"`
	// The fully qualified name of the connection.
	QualifiedSqlName *string `pulumi:"qualifiedSqlName"`
	// The SASL mechanism for the Kafka broker.
	SaslMechanisms *string `pulumi:"saslMechanisms"`
	// The SASL password for the Kafka broker.
	SaslPassword *ConnectionKafkaSaslPassword `pulumi:"saslPassword"`
	// The SASL username for the Kafka broker.
	SaslUsername *ConnectionKafkaSaslUsername `pulumi:"saslUsername"`
	// The identifier for the connection schema.
	SchemaName *string `pulumi:"schemaName"`
	// The SSH tunnel configuration for the Kafka broker.
	SshTunnel *ConnectionKafkaSshTunnel `pulumi:"sshTunnel"`
	// The client certificate for the Kafka broker.
	SslCertificate *ConnectionKafkaSslCertificate `pulumi:"sslCertificate"`
	// The CA certificate for the Kafka broker.
	SslCertificateAuthority *ConnectionKafkaSslCertificateAuthority `pulumi:"sslCertificateAuthority"`
	// The client key for the Kafka broker.
	SslKey *ConnectionKafkaSslKey `pulumi:"sslKey"`
}

type ConnectionKafkaState struct {
	// The type of connection.
	ConnectionType pulumi.StringPtrInput
	// The identifier for the connection database.
	DatabaseName pulumi.StringPtrInput
	// The Kafka brokers configuration.
	KafkaBrokers ConnectionKafkaKafkaBrokerArrayInput
	// The identifier for the connection.
	Name pulumi.StringPtrInput
	// The name of a topic that Kafka sinks can use to track internal consistency metadata.
	ProgressTopic pulumi.StringPtrInput
	// The fully qualified name of the connection.
	QualifiedSqlName pulumi.StringPtrInput
	// The SASL mechanism for the Kafka broker.
	SaslMechanisms pulumi.StringPtrInput
	// The SASL password for the Kafka broker.
	SaslPassword ConnectionKafkaSaslPasswordPtrInput
	// The SASL username for the Kafka broker.
	SaslUsername ConnectionKafkaSaslUsernamePtrInput
	// The identifier for the connection schema.
	SchemaName pulumi.StringPtrInput
	// The SSH tunnel configuration for the Kafka broker.
	SshTunnel ConnectionKafkaSshTunnelPtrInput
	// The client certificate for the Kafka broker.
	SslCertificate ConnectionKafkaSslCertificatePtrInput
	// The CA certificate for the Kafka broker.
	SslCertificateAuthority ConnectionKafkaSslCertificateAuthorityPtrInput
	// The client key for the Kafka broker.
	SslKey ConnectionKafkaSslKeyPtrInput
}

func (ConnectionKafkaState) ElementType() reflect.Type {
	return reflect.TypeOf((*connectionKafkaState)(nil)).Elem()
}

type connectionKafkaArgs struct {
	// The identifier for the connection database.
	DatabaseName *string `pulumi:"databaseName"`
	// The Kafka brokers configuration.
	KafkaBrokers []ConnectionKafkaKafkaBroker `pulumi:"kafkaBrokers"`
	// The identifier for the connection.
	Name *string `pulumi:"name"`
	// The name of a topic that Kafka sinks can use to track internal consistency metadata.
	ProgressTopic *string `pulumi:"progressTopic"`
	// The SASL mechanism for the Kafka broker.
	SaslMechanisms *string `pulumi:"saslMechanisms"`
	// The SASL password for the Kafka broker.
	SaslPassword *ConnectionKafkaSaslPassword `pulumi:"saslPassword"`
	// The SASL username for the Kafka broker.
	SaslUsername *ConnectionKafkaSaslUsername `pulumi:"saslUsername"`
	// The identifier for the connection schema.
	SchemaName *string `pulumi:"schemaName"`
	// The SSH tunnel configuration for the Kafka broker.
	SshTunnel *ConnectionKafkaSshTunnel `pulumi:"sshTunnel"`
	// The client certificate for the Kafka broker.
	SslCertificate *ConnectionKafkaSslCertificate `pulumi:"sslCertificate"`
	// The CA certificate for the Kafka broker.
	SslCertificateAuthority *ConnectionKafkaSslCertificateAuthority `pulumi:"sslCertificateAuthority"`
	// The client key for the Kafka broker.
	SslKey *ConnectionKafkaSslKey `pulumi:"sslKey"`
}

// The set of arguments for constructing a ConnectionKafka resource.
type ConnectionKafkaArgs struct {
	// The identifier for the connection database.
	DatabaseName pulumi.StringPtrInput
	// The Kafka brokers configuration.
	KafkaBrokers ConnectionKafkaKafkaBrokerArrayInput
	// The identifier for the connection.
	Name pulumi.StringPtrInput
	// The name of a topic that Kafka sinks can use to track internal consistency metadata.
	ProgressTopic pulumi.StringPtrInput
	// The SASL mechanism for the Kafka broker.
	SaslMechanisms pulumi.StringPtrInput
	// The SASL password for the Kafka broker.
	SaslPassword ConnectionKafkaSaslPasswordPtrInput
	// The SASL username for the Kafka broker.
	SaslUsername ConnectionKafkaSaslUsernamePtrInput
	// The identifier for the connection schema.
	SchemaName pulumi.StringPtrInput
	// The SSH tunnel configuration for the Kafka broker.
	SshTunnel ConnectionKafkaSshTunnelPtrInput
	// The client certificate for the Kafka broker.
	SslCertificate ConnectionKafkaSslCertificatePtrInput
	// The CA certificate for the Kafka broker.
	SslCertificateAuthority ConnectionKafkaSslCertificateAuthorityPtrInput
	// The client key for the Kafka broker.
	SslKey ConnectionKafkaSslKeyPtrInput
}

func (ConnectionKafkaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*connectionKafkaArgs)(nil)).Elem()
}

type ConnectionKafkaInput interface {
	pulumi.Input

	ToConnectionKafkaOutput() ConnectionKafkaOutput
	ToConnectionKafkaOutputWithContext(ctx context.Context) ConnectionKafkaOutput
}

func (*ConnectionKafka) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionKafka)(nil)).Elem()
}

func (i *ConnectionKafka) ToConnectionKafkaOutput() ConnectionKafkaOutput {
	return i.ToConnectionKafkaOutputWithContext(context.Background())
}

func (i *ConnectionKafka) ToConnectionKafkaOutputWithContext(ctx context.Context) ConnectionKafkaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionKafkaOutput)
}

// ConnectionKafkaArrayInput is an input type that accepts ConnectionKafkaArray and ConnectionKafkaArrayOutput values.
// You can construct a concrete instance of `ConnectionKafkaArrayInput` via:
//
//	ConnectionKafkaArray{ ConnectionKafkaArgs{...} }
type ConnectionKafkaArrayInput interface {
	pulumi.Input

	ToConnectionKafkaArrayOutput() ConnectionKafkaArrayOutput
	ToConnectionKafkaArrayOutputWithContext(context.Context) ConnectionKafkaArrayOutput
}

type ConnectionKafkaArray []ConnectionKafkaInput

func (ConnectionKafkaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConnectionKafka)(nil)).Elem()
}

func (i ConnectionKafkaArray) ToConnectionKafkaArrayOutput() ConnectionKafkaArrayOutput {
	return i.ToConnectionKafkaArrayOutputWithContext(context.Background())
}

func (i ConnectionKafkaArray) ToConnectionKafkaArrayOutputWithContext(ctx context.Context) ConnectionKafkaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionKafkaArrayOutput)
}

// ConnectionKafkaMapInput is an input type that accepts ConnectionKafkaMap and ConnectionKafkaMapOutput values.
// You can construct a concrete instance of `ConnectionKafkaMapInput` via:
//
//	ConnectionKafkaMap{ "key": ConnectionKafkaArgs{...} }
type ConnectionKafkaMapInput interface {
	pulumi.Input

	ToConnectionKafkaMapOutput() ConnectionKafkaMapOutput
	ToConnectionKafkaMapOutputWithContext(context.Context) ConnectionKafkaMapOutput
}

type ConnectionKafkaMap map[string]ConnectionKafkaInput

func (ConnectionKafkaMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConnectionKafka)(nil)).Elem()
}

func (i ConnectionKafkaMap) ToConnectionKafkaMapOutput() ConnectionKafkaMapOutput {
	return i.ToConnectionKafkaMapOutputWithContext(context.Background())
}

func (i ConnectionKafkaMap) ToConnectionKafkaMapOutputWithContext(ctx context.Context) ConnectionKafkaMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionKafkaMapOutput)
}

type ConnectionKafkaOutput struct{ *pulumi.OutputState }

func (ConnectionKafkaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionKafka)(nil)).Elem()
}

func (o ConnectionKafkaOutput) ToConnectionKafkaOutput() ConnectionKafkaOutput {
	return o
}

func (o ConnectionKafkaOutput) ToConnectionKafkaOutputWithContext(ctx context.Context) ConnectionKafkaOutput {
	return o
}

// The type of connection.
func (o ConnectionKafkaOutput) ConnectionType() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectionKafka) pulumi.StringOutput { return v.ConnectionType }).(pulumi.StringOutput)
}

// The identifier for the connection database.
func (o ConnectionKafkaOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionKafka) pulumi.StringPtrOutput { return v.DatabaseName }).(pulumi.StringPtrOutput)
}

// The Kafka brokers configuration.
func (o ConnectionKafkaOutput) KafkaBrokers() ConnectionKafkaKafkaBrokerArrayOutput {
	return o.ApplyT(func(v *ConnectionKafka) ConnectionKafkaKafkaBrokerArrayOutput { return v.KafkaBrokers }).(ConnectionKafkaKafkaBrokerArrayOutput)
}

// The identifier for the connection.
func (o ConnectionKafkaOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectionKafka) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name of a topic that Kafka sinks can use to track internal consistency metadata.
func (o ConnectionKafkaOutput) ProgressTopic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionKafka) pulumi.StringPtrOutput { return v.ProgressTopic }).(pulumi.StringPtrOutput)
}

// The fully qualified name of the connection.
func (o ConnectionKafkaOutput) QualifiedSqlName() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectionKafka) pulumi.StringOutput { return v.QualifiedSqlName }).(pulumi.StringOutput)
}

// The SASL mechanism for the Kafka broker.
func (o ConnectionKafkaOutput) SaslMechanisms() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionKafka) pulumi.StringPtrOutput { return v.SaslMechanisms }).(pulumi.StringPtrOutput)
}

// The SASL password for the Kafka broker.
func (o ConnectionKafkaOutput) SaslPassword() ConnectionKafkaSaslPasswordPtrOutput {
	return o.ApplyT(func(v *ConnectionKafka) ConnectionKafkaSaslPasswordPtrOutput { return v.SaslPassword }).(ConnectionKafkaSaslPasswordPtrOutput)
}

// The SASL username for the Kafka broker.
func (o ConnectionKafkaOutput) SaslUsername() ConnectionKafkaSaslUsernamePtrOutput {
	return o.ApplyT(func(v *ConnectionKafka) ConnectionKafkaSaslUsernamePtrOutput { return v.SaslUsername }).(ConnectionKafkaSaslUsernamePtrOutput)
}

// The identifier for the connection schema.
func (o ConnectionKafkaOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionKafka) pulumi.StringPtrOutput { return v.SchemaName }).(pulumi.StringPtrOutput)
}

// The SSH tunnel configuration for the Kafka broker.
func (o ConnectionKafkaOutput) SshTunnel() ConnectionKafkaSshTunnelPtrOutput {
	return o.ApplyT(func(v *ConnectionKafka) ConnectionKafkaSshTunnelPtrOutput { return v.SshTunnel }).(ConnectionKafkaSshTunnelPtrOutput)
}

// The client certificate for the Kafka broker.
func (o ConnectionKafkaOutput) SslCertificate() ConnectionKafkaSslCertificatePtrOutput {
	return o.ApplyT(func(v *ConnectionKafka) ConnectionKafkaSslCertificatePtrOutput { return v.SslCertificate }).(ConnectionKafkaSslCertificatePtrOutput)
}

// The CA certificate for the Kafka broker.
func (o ConnectionKafkaOutput) SslCertificateAuthority() ConnectionKafkaSslCertificateAuthorityPtrOutput {
	return o.ApplyT(func(v *ConnectionKafka) ConnectionKafkaSslCertificateAuthorityPtrOutput {
		return v.SslCertificateAuthority
	}).(ConnectionKafkaSslCertificateAuthorityPtrOutput)
}

// The client key for the Kafka broker.
func (o ConnectionKafkaOutput) SslKey() ConnectionKafkaSslKeyPtrOutput {
	return o.ApplyT(func(v *ConnectionKafka) ConnectionKafkaSslKeyPtrOutput { return v.SslKey }).(ConnectionKafkaSslKeyPtrOutput)
}

type ConnectionKafkaArrayOutput struct{ *pulumi.OutputState }

func (ConnectionKafkaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConnectionKafka)(nil)).Elem()
}

func (o ConnectionKafkaArrayOutput) ToConnectionKafkaArrayOutput() ConnectionKafkaArrayOutput {
	return o
}

func (o ConnectionKafkaArrayOutput) ToConnectionKafkaArrayOutputWithContext(ctx context.Context) ConnectionKafkaArrayOutput {
	return o
}

func (o ConnectionKafkaArrayOutput) Index(i pulumi.IntInput) ConnectionKafkaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ConnectionKafka {
		return vs[0].([]*ConnectionKafka)[vs[1].(int)]
	}).(ConnectionKafkaOutput)
}

type ConnectionKafkaMapOutput struct{ *pulumi.OutputState }

func (ConnectionKafkaMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConnectionKafka)(nil)).Elem()
}

func (o ConnectionKafkaMapOutput) ToConnectionKafkaMapOutput() ConnectionKafkaMapOutput {
	return o
}

func (o ConnectionKafkaMapOutput) ToConnectionKafkaMapOutputWithContext(ctx context.Context) ConnectionKafkaMapOutput {
	return o
}

func (o ConnectionKafkaMapOutput) MapIndex(k pulumi.StringInput) ConnectionKafkaOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ConnectionKafka {
		return vs[0].(map[string]*ConnectionKafka)[vs[1].(string)]
	}).(ConnectionKafkaOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionKafkaInput)(nil)).Elem(), &ConnectionKafka{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionKafkaArrayInput)(nil)).Elem(), ConnectionKafkaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionKafkaMapInput)(nil)).Elem(), ConnectionKafkaMap{})
	pulumi.RegisterOutputType(ConnectionKafkaOutput{})
	pulumi.RegisterOutputType(ConnectionKafkaArrayOutput{})
	pulumi.RegisterOutputType(ConnectionKafkaMapOutput{})
}
