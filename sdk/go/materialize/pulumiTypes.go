// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package materialize

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ConnectionConfluentSchemaRegistryAwsPrivatelink struct {
	// The awsPrivatelink database name.
	DatabaseName *string `pulumi:"databaseName"`
	// The awsPrivatelink name.
	Name string `pulumi:"name"`
	// The awsPrivatelink schema name.
	SchemaName *string `pulumi:"schemaName"`
}

// ConnectionConfluentSchemaRegistryAwsPrivatelinkInput is an input type that accepts ConnectionConfluentSchemaRegistryAwsPrivatelinkArgs and ConnectionConfluentSchemaRegistryAwsPrivatelinkOutput values.
// You can construct a concrete instance of `ConnectionConfluentSchemaRegistryAwsPrivatelinkInput` via:
//
//	ConnectionConfluentSchemaRegistryAwsPrivatelinkArgs{...}
type ConnectionConfluentSchemaRegistryAwsPrivatelinkInput interface {
	pulumi.Input

	ToConnectionConfluentSchemaRegistryAwsPrivatelinkOutput() ConnectionConfluentSchemaRegistryAwsPrivatelinkOutput
	ToConnectionConfluentSchemaRegistryAwsPrivatelinkOutputWithContext(context.Context) ConnectionConfluentSchemaRegistryAwsPrivatelinkOutput
}

type ConnectionConfluentSchemaRegistryAwsPrivatelinkArgs struct {
	// The awsPrivatelink database name.
	DatabaseName pulumi.StringPtrInput `pulumi:"databaseName"`
	// The awsPrivatelink name.
	Name pulumi.StringInput `pulumi:"name"`
	// The awsPrivatelink schema name.
	SchemaName pulumi.StringPtrInput `pulumi:"schemaName"`
}

func (ConnectionConfluentSchemaRegistryAwsPrivatelinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionConfluentSchemaRegistryAwsPrivatelink)(nil)).Elem()
}

func (i ConnectionConfluentSchemaRegistryAwsPrivatelinkArgs) ToConnectionConfluentSchemaRegistryAwsPrivatelinkOutput() ConnectionConfluentSchemaRegistryAwsPrivatelinkOutput {
	return i.ToConnectionConfluentSchemaRegistryAwsPrivatelinkOutputWithContext(context.Background())
}

func (i ConnectionConfluentSchemaRegistryAwsPrivatelinkArgs) ToConnectionConfluentSchemaRegistryAwsPrivatelinkOutputWithContext(ctx context.Context) ConnectionConfluentSchemaRegistryAwsPrivatelinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionConfluentSchemaRegistryAwsPrivatelinkOutput)
}

func (i ConnectionConfluentSchemaRegistryAwsPrivatelinkArgs) ToConnectionConfluentSchemaRegistryAwsPrivatelinkPtrOutput() ConnectionConfluentSchemaRegistryAwsPrivatelinkPtrOutput {
	return i.ToConnectionConfluentSchemaRegistryAwsPrivatelinkPtrOutputWithContext(context.Background())
}

func (i ConnectionConfluentSchemaRegistryAwsPrivatelinkArgs) ToConnectionConfluentSchemaRegistryAwsPrivatelinkPtrOutputWithContext(ctx context.Context) ConnectionConfluentSchemaRegistryAwsPrivatelinkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionConfluentSchemaRegistryAwsPrivatelinkOutput).ToConnectionConfluentSchemaRegistryAwsPrivatelinkPtrOutputWithContext(ctx)
}

// ConnectionConfluentSchemaRegistryAwsPrivatelinkPtrInput is an input type that accepts ConnectionConfluentSchemaRegistryAwsPrivatelinkArgs, ConnectionConfluentSchemaRegistryAwsPrivatelinkPtr and ConnectionConfluentSchemaRegistryAwsPrivatelinkPtrOutput values.
// You can construct a concrete instance of `ConnectionConfluentSchemaRegistryAwsPrivatelinkPtrInput` via:
//
//	        ConnectionConfluentSchemaRegistryAwsPrivatelinkArgs{...}
//
//	or:
//
//	        nil
type ConnectionConfluentSchemaRegistryAwsPrivatelinkPtrInput interface {
	pulumi.Input

	ToConnectionConfluentSchemaRegistryAwsPrivatelinkPtrOutput() ConnectionConfluentSchemaRegistryAwsPrivatelinkPtrOutput
	ToConnectionConfluentSchemaRegistryAwsPrivatelinkPtrOutputWithContext(context.Context) ConnectionConfluentSchemaRegistryAwsPrivatelinkPtrOutput
}

type connectionConfluentSchemaRegistryAwsPrivatelinkPtrType ConnectionConfluentSchemaRegistryAwsPrivatelinkArgs

func ConnectionConfluentSchemaRegistryAwsPrivatelinkPtr(v *ConnectionConfluentSchemaRegistryAwsPrivatelinkArgs) ConnectionConfluentSchemaRegistryAwsPrivatelinkPtrInput {
	return (*connectionConfluentSchemaRegistryAwsPrivatelinkPtrType)(v)
}

func (*connectionConfluentSchemaRegistryAwsPrivatelinkPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionConfluentSchemaRegistryAwsPrivatelink)(nil)).Elem()
}

func (i *connectionConfluentSchemaRegistryAwsPrivatelinkPtrType) ToConnectionConfluentSchemaRegistryAwsPrivatelinkPtrOutput() ConnectionConfluentSchemaRegistryAwsPrivatelinkPtrOutput {
	return i.ToConnectionConfluentSchemaRegistryAwsPrivatelinkPtrOutputWithContext(context.Background())
}

func (i *connectionConfluentSchemaRegistryAwsPrivatelinkPtrType) ToConnectionConfluentSchemaRegistryAwsPrivatelinkPtrOutputWithContext(ctx context.Context) ConnectionConfluentSchemaRegistryAwsPrivatelinkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionConfluentSchemaRegistryAwsPrivatelinkPtrOutput)
}

type ConnectionConfluentSchemaRegistryAwsPrivatelinkOutput struct{ *pulumi.OutputState }

func (ConnectionConfluentSchemaRegistryAwsPrivatelinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionConfluentSchemaRegistryAwsPrivatelink)(nil)).Elem()
}

func (o ConnectionConfluentSchemaRegistryAwsPrivatelinkOutput) ToConnectionConfluentSchemaRegistryAwsPrivatelinkOutput() ConnectionConfluentSchemaRegistryAwsPrivatelinkOutput {
	return o
}

func (o ConnectionConfluentSchemaRegistryAwsPrivatelinkOutput) ToConnectionConfluentSchemaRegistryAwsPrivatelinkOutputWithContext(ctx context.Context) ConnectionConfluentSchemaRegistryAwsPrivatelinkOutput {
	return o
}

func (o ConnectionConfluentSchemaRegistryAwsPrivatelinkOutput) ToConnectionConfluentSchemaRegistryAwsPrivatelinkPtrOutput() ConnectionConfluentSchemaRegistryAwsPrivatelinkPtrOutput {
	return o.ToConnectionConfluentSchemaRegistryAwsPrivatelinkPtrOutputWithContext(context.Background())
}

func (o ConnectionConfluentSchemaRegistryAwsPrivatelinkOutput) ToConnectionConfluentSchemaRegistryAwsPrivatelinkPtrOutputWithContext(ctx context.Context) ConnectionConfluentSchemaRegistryAwsPrivatelinkPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionConfluentSchemaRegistryAwsPrivatelink) *ConnectionConfluentSchemaRegistryAwsPrivatelink {
		return &v
	}).(ConnectionConfluentSchemaRegistryAwsPrivatelinkPtrOutput)
}

// The awsPrivatelink database name.
func (o ConnectionConfluentSchemaRegistryAwsPrivatelinkOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionConfluentSchemaRegistryAwsPrivatelink) *string { return v.DatabaseName }).(pulumi.StringPtrOutput)
}

// The awsPrivatelink name.
func (o ConnectionConfluentSchemaRegistryAwsPrivatelinkOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionConfluentSchemaRegistryAwsPrivatelink) string { return v.Name }).(pulumi.StringOutput)
}

// The awsPrivatelink schema name.
func (o ConnectionConfluentSchemaRegistryAwsPrivatelinkOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionConfluentSchemaRegistryAwsPrivatelink) *string { return v.SchemaName }).(pulumi.StringPtrOutput)
}

type ConnectionConfluentSchemaRegistryAwsPrivatelinkPtrOutput struct{ *pulumi.OutputState }

func (ConnectionConfluentSchemaRegistryAwsPrivatelinkPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionConfluentSchemaRegistryAwsPrivatelink)(nil)).Elem()
}

func (o ConnectionConfluentSchemaRegistryAwsPrivatelinkPtrOutput) ToConnectionConfluentSchemaRegistryAwsPrivatelinkPtrOutput() ConnectionConfluentSchemaRegistryAwsPrivatelinkPtrOutput {
	return o
}

func (o ConnectionConfluentSchemaRegistryAwsPrivatelinkPtrOutput) ToConnectionConfluentSchemaRegistryAwsPrivatelinkPtrOutputWithContext(ctx context.Context) ConnectionConfluentSchemaRegistryAwsPrivatelinkPtrOutput {
	return o
}

func (o ConnectionConfluentSchemaRegistryAwsPrivatelinkPtrOutput) Elem() ConnectionConfluentSchemaRegistryAwsPrivatelinkOutput {
	return o.ApplyT(func(v *ConnectionConfluentSchemaRegistryAwsPrivatelink) ConnectionConfluentSchemaRegistryAwsPrivatelink {
		if v != nil {
			return *v
		}
		var ret ConnectionConfluentSchemaRegistryAwsPrivatelink
		return ret
	}).(ConnectionConfluentSchemaRegistryAwsPrivatelinkOutput)
}

// The awsPrivatelink database name.
func (o ConnectionConfluentSchemaRegistryAwsPrivatelinkPtrOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionConfluentSchemaRegistryAwsPrivatelink) *string {
		if v == nil {
			return nil
		}
		return v.DatabaseName
	}).(pulumi.StringPtrOutput)
}

// The awsPrivatelink name.
func (o ConnectionConfluentSchemaRegistryAwsPrivatelinkPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionConfluentSchemaRegistryAwsPrivatelink) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The awsPrivatelink schema name.
func (o ConnectionConfluentSchemaRegistryAwsPrivatelinkPtrOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionConfluentSchemaRegistryAwsPrivatelink) *string {
		if v == nil {
			return nil
		}
		return v.SchemaName
	}).(pulumi.StringPtrOutput)
}

type ConnectionConfluentSchemaRegistryPassword struct {
	// The password database name.
	DatabaseName *string `pulumi:"databaseName"`
	// The password name.
	Name string `pulumi:"name"`
	// The password schema name.
	SchemaName *string `pulumi:"schemaName"`
}

// ConnectionConfluentSchemaRegistryPasswordInput is an input type that accepts ConnectionConfluentSchemaRegistryPasswordArgs and ConnectionConfluentSchemaRegistryPasswordOutput values.
// You can construct a concrete instance of `ConnectionConfluentSchemaRegistryPasswordInput` via:
//
//	ConnectionConfluentSchemaRegistryPasswordArgs{...}
type ConnectionConfluentSchemaRegistryPasswordInput interface {
	pulumi.Input

	ToConnectionConfluentSchemaRegistryPasswordOutput() ConnectionConfluentSchemaRegistryPasswordOutput
	ToConnectionConfluentSchemaRegistryPasswordOutputWithContext(context.Context) ConnectionConfluentSchemaRegistryPasswordOutput
}

type ConnectionConfluentSchemaRegistryPasswordArgs struct {
	// The password database name.
	DatabaseName pulumi.StringPtrInput `pulumi:"databaseName"`
	// The password name.
	Name pulumi.StringInput `pulumi:"name"`
	// The password schema name.
	SchemaName pulumi.StringPtrInput `pulumi:"schemaName"`
}

func (ConnectionConfluentSchemaRegistryPasswordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionConfluentSchemaRegistryPassword)(nil)).Elem()
}

func (i ConnectionConfluentSchemaRegistryPasswordArgs) ToConnectionConfluentSchemaRegistryPasswordOutput() ConnectionConfluentSchemaRegistryPasswordOutput {
	return i.ToConnectionConfluentSchemaRegistryPasswordOutputWithContext(context.Background())
}

func (i ConnectionConfluentSchemaRegistryPasswordArgs) ToConnectionConfluentSchemaRegistryPasswordOutputWithContext(ctx context.Context) ConnectionConfluentSchemaRegistryPasswordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionConfluentSchemaRegistryPasswordOutput)
}

func (i ConnectionConfluentSchemaRegistryPasswordArgs) ToConnectionConfluentSchemaRegistryPasswordPtrOutput() ConnectionConfluentSchemaRegistryPasswordPtrOutput {
	return i.ToConnectionConfluentSchemaRegistryPasswordPtrOutputWithContext(context.Background())
}

func (i ConnectionConfluentSchemaRegistryPasswordArgs) ToConnectionConfluentSchemaRegistryPasswordPtrOutputWithContext(ctx context.Context) ConnectionConfluentSchemaRegistryPasswordPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionConfluentSchemaRegistryPasswordOutput).ToConnectionConfluentSchemaRegistryPasswordPtrOutputWithContext(ctx)
}

// ConnectionConfluentSchemaRegistryPasswordPtrInput is an input type that accepts ConnectionConfluentSchemaRegistryPasswordArgs, ConnectionConfluentSchemaRegistryPasswordPtr and ConnectionConfluentSchemaRegistryPasswordPtrOutput values.
// You can construct a concrete instance of `ConnectionConfluentSchemaRegistryPasswordPtrInput` via:
//
//	        ConnectionConfluentSchemaRegistryPasswordArgs{...}
//
//	or:
//
//	        nil
type ConnectionConfluentSchemaRegistryPasswordPtrInput interface {
	pulumi.Input

	ToConnectionConfluentSchemaRegistryPasswordPtrOutput() ConnectionConfluentSchemaRegistryPasswordPtrOutput
	ToConnectionConfluentSchemaRegistryPasswordPtrOutputWithContext(context.Context) ConnectionConfluentSchemaRegistryPasswordPtrOutput
}

type connectionConfluentSchemaRegistryPasswordPtrType ConnectionConfluentSchemaRegistryPasswordArgs

func ConnectionConfluentSchemaRegistryPasswordPtr(v *ConnectionConfluentSchemaRegistryPasswordArgs) ConnectionConfluentSchemaRegistryPasswordPtrInput {
	return (*connectionConfluentSchemaRegistryPasswordPtrType)(v)
}

func (*connectionConfluentSchemaRegistryPasswordPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionConfluentSchemaRegistryPassword)(nil)).Elem()
}

func (i *connectionConfluentSchemaRegistryPasswordPtrType) ToConnectionConfluentSchemaRegistryPasswordPtrOutput() ConnectionConfluentSchemaRegistryPasswordPtrOutput {
	return i.ToConnectionConfluentSchemaRegistryPasswordPtrOutputWithContext(context.Background())
}

func (i *connectionConfluentSchemaRegistryPasswordPtrType) ToConnectionConfluentSchemaRegistryPasswordPtrOutputWithContext(ctx context.Context) ConnectionConfluentSchemaRegistryPasswordPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionConfluentSchemaRegistryPasswordPtrOutput)
}

type ConnectionConfluentSchemaRegistryPasswordOutput struct{ *pulumi.OutputState }

func (ConnectionConfluentSchemaRegistryPasswordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionConfluentSchemaRegistryPassword)(nil)).Elem()
}

func (o ConnectionConfluentSchemaRegistryPasswordOutput) ToConnectionConfluentSchemaRegistryPasswordOutput() ConnectionConfluentSchemaRegistryPasswordOutput {
	return o
}

func (o ConnectionConfluentSchemaRegistryPasswordOutput) ToConnectionConfluentSchemaRegistryPasswordOutputWithContext(ctx context.Context) ConnectionConfluentSchemaRegistryPasswordOutput {
	return o
}

func (o ConnectionConfluentSchemaRegistryPasswordOutput) ToConnectionConfluentSchemaRegistryPasswordPtrOutput() ConnectionConfluentSchemaRegistryPasswordPtrOutput {
	return o.ToConnectionConfluentSchemaRegistryPasswordPtrOutputWithContext(context.Background())
}

func (o ConnectionConfluentSchemaRegistryPasswordOutput) ToConnectionConfluentSchemaRegistryPasswordPtrOutputWithContext(ctx context.Context) ConnectionConfluentSchemaRegistryPasswordPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionConfluentSchemaRegistryPassword) *ConnectionConfluentSchemaRegistryPassword {
		return &v
	}).(ConnectionConfluentSchemaRegistryPasswordPtrOutput)
}

// The password database name.
func (o ConnectionConfluentSchemaRegistryPasswordOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionConfluentSchemaRegistryPassword) *string { return v.DatabaseName }).(pulumi.StringPtrOutput)
}

// The password name.
func (o ConnectionConfluentSchemaRegistryPasswordOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionConfluentSchemaRegistryPassword) string { return v.Name }).(pulumi.StringOutput)
}

// The password schema name.
func (o ConnectionConfluentSchemaRegistryPasswordOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionConfluentSchemaRegistryPassword) *string { return v.SchemaName }).(pulumi.StringPtrOutput)
}

type ConnectionConfluentSchemaRegistryPasswordPtrOutput struct{ *pulumi.OutputState }

func (ConnectionConfluentSchemaRegistryPasswordPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionConfluentSchemaRegistryPassword)(nil)).Elem()
}

func (o ConnectionConfluentSchemaRegistryPasswordPtrOutput) ToConnectionConfluentSchemaRegistryPasswordPtrOutput() ConnectionConfluentSchemaRegistryPasswordPtrOutput {
	return o
}

func (o ConnectionConfluentSchemaRegistryPasswordPtrOutput) ToConnectionConfluentSchemaRegistryPasswordPtrOutputWithContext(ctx context.Context) ConnectionConfluentSchemaRegistryPasswordPtrOutput {
	return o
}

func (o ConnectionConfluentSchemaRegistryPasswordPtrOutput) Elem() ConnectionConfluentSchemaRegistryPasswordOutput {
	return o.ApplyT(func(v *ConnectionConfluentSchemaRegistryPassword) ConnectionConfluentSchemaRegistryPassword {
		if v != nil {
			return *v
		}
		var ret ConnectionConfluentSchemaRegistryPassword
		return ret
	}).(ConnectionConfluentSchemaRegistryPasswordOutput)
}

// The password database name.
func (o ConnectionConfluentSchemaRegistryPasswordPtrOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionConfluentSchemaRegistryPassword) *string {
		if v == nil {
			return nil
		}
		return v.DatabaseName
	}).(pulumi.StringPtrOutput)
}

// The password name.
func (o ConnectionConfluentSchemaRegistryPasswordPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionConfluentSchemaRegistryPassword) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The password schema name.
func (o ConnectionConfluentSchemaRegistryPasswordPtrOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionConfluentSchemaRegistryPassword) *string {
		if v == nil {
			return nil
		}
		return v.SchemaName
	}).(pulumi.StringPtrOutput)
}

type ConnectionConfluentSchemaRegistrySshTunnel struct {
	// The sshTunnel database name.
	DatabaseName *string `pulumi:"databaseName"`
	// The sshTunnel name.
	Name string `pulumi:"name"`
	// The sshTunnel schema name.
	SchemaName *string `pulumi:"schemaName"`
}

// ConnectionConfluentSchemaRegistrySshTunnelInput is an input type that accepts ConnectionConfluentSchemaRegistrySshTunnelArgs and ConnectionConfluentSchemaRegistrySshTunnelOutput values.
// You can construct a concrete instance of `ConnectionConfluentSchemaRegistrySshTunnelInput` via:
//
//	ConnectionConfluentSchemaRegistrySshTunnelArgs{...}
type ConnectionConfluentSchemaRegistrySshTunnelInput interface {
	pulumi.Input

	ToConnectionConfluentSchemaRegistrySshTunnelOutput() ConnectionConfluentSchemaRegistrySshTunnelOutput
	ToConnectionConfluentSchemaRegistrySshTunnelOutputWithContext(context.Context) ConnectionConfluentSchemaRegistrySshTunnelOutput
}

type ConnectionConfluentSchemaRegistrySshTunnelArgs struct {
	// The sshTunnel database name.
	DatabaseName pulumi.StringPtrInput `pulumi:"databaseName"`
	// The sshTunnel name.
	Name pulumi.StringInput `pulumi:"name"`
	// The sshTunnel schema name.
	SchemaName pulumi.StringPtrInput `pulumi:"schemaName"`
}

func (ConnectionConfluentSchemaRegistrySshTunnelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionConfluentSchemaRegistrySshTunnel)(nil)).Elem()
}

func (i ConnectionConfluentSchemaRegistrySshTunnelArgs) ToConnectionConfluentSchemaRegistrySshTunnelOutput() ConnectionConfluentSchemaRegistrySshTunnelOutput {
	return i.ToConnectionConfluentSchemaRegistrySshTunnelOutputWithContext(context.Background())
}

func (i ConnectionConfluentSchemaRegistrySshTunnelArgs) ToConnectionConfluentSchemaRegistrySshTunnelOutputWithContext(ctx context.Context) ConnectionConfluentSchemaRegistrySshTunnelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionConfluentSchemaRegistrySshTunnelOutput)
}

func (i ConnectionConfluentSchemaRegistrySshTunnelArgs) ToConnectionConfluentSchemaRegistrySshTunnelPtrOutput() ConnectionConfluentSchemaRegistrySshTunnelPtrOutput {
	return i.ToConnectionConfluentSchemaRegistrySshTunnelPtrOutputWithContext(context.Background())
}

func (i ConnectionConfluentSchemaRegistrySshTunnelArgs) ToConnectionConfluentSchemaRegistrySshTunnelPtrOutputWithContext(ctx context.Context) ConnectionConfluentSchemaRegistrySshTunnelPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionConfluentSchemaRegistrySshTunnelOutput).ToConnectionConfluentSchemaRegistrySshTunnelPtrOutputWithContext(ctx)
}

// ConnectionConfluentSchemaRegistrySshTunnelPtrInput is an input type that accepts ConnectionConfluentSchemaRegistrySshTunnelArgs, ConnectionConfluentSchemaRegistrySshTunnelPtr and ConnectionConfluentSchemaRegistrySshTunnelPtrOutput values.
// You can construct a concrete instance of `ConnectionConfluentSchemaRegistrySshTunnelPtrInput` via:
//
//	        ConnectionConfluentSchemaRegistrySshTunnelArgs{...}
//
//	or:
//
//	        nil
type ConnectionConfluentSchemaRegistrySshTunnelPtrInput interface {
	pulumi.Input

	ToConnectionConfluentSchemaRegistrySshTunnelPtrOutput() ConnectionConfluentSchemaRegistrySshTunnelPtrOutput
	ToConnectionConfluentSchemaRegistrySshTunnelPtrOutputWithContext(context.Context) ConnectionConfluentSchemaRegistrySshTunnelPtrOutput
}

type connectionConfluentSchemaRegistrySshTunnelPtrType ConnectionConfluentSchemaRegistrySshTunnelArgs

func ConnectionConfluentSchemaRegistrySshTunnelPtr(v *ConnectionConfluentSchemaRegistrySshTunnelArgs) ConnectionConfluentSchemaRegistrySshTunnelPtrInput {
	return (*connectionConfluentSchemaRegistrySshTunnelPtrType)(v)
}

func (*connectionConfluentSchemaRegistrySshTunnelPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionConfluentSchemaRegistrySshTunnel)(nil)).Elem()
}

func (i *connectionConfluentSchemaRegistrySshTunnelPtrType) ToConnectionConfluentSchemaRegistrySshTunnelPtrOutput() ConnectionConfluentSchemaRegistrySshTunnelPtrOutput {
	return i.ToConnectionConfluentSchemaRegistrySshTunnelPtrOutputWithContext(context.Background())
}

func (i *connectionConfluentSchemaRegistrySshTunnelPtrType) ToConnectionConfluentSchemaRegistrySshTunnelPtrOutputWithContext(ctx context.Context) ConnectionConfluentSchemaRegistrySshTunnelPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionConfluentSchemaRegistrySshTunnelPtrOutput)
}

type ConnectionConfluentSchemaRegistrySshTunnelOutput struct{ *pulumi.OutputState }

func (ConnectionConfluentSchemaRegistrySshTunnelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionConfluentSchemaRegistrySshTunnel)(nil)).Elem()
}

func (o ConnectionConfluentSchemaRegistrySshTunnelOutput) ToConnectionConfluentSchemaRegistrySshTunnelOutput() ConnectionConfluentSchemaRegistrySshTunnelOutput {
	return o
}

func (o ConnectionConfluentSchemaRegistrySshTunnelOutput) ToConnectionConfluentSchemaRegistrySshTunnelOutputWithContext(ctx context.Context) ConnectionConfluentSchemaRegistrySshTunnelOutput {
	return o
}

func (o ConnectionConfluentSchemaRegistrySshTunnelOutput) ToConnectionConfluentSchemaRegistrySshTunnelPtrOutput() ConnectionConfluentSchemaRegistrySshTunnelPtrOutput {
	return o.ToConnectionConfluentSchemaRegistrySshTunnelPtrOutputWithContext(context.Background())
}

func (o ConnectionConfluentSchemaRegistrySshTunnelOutput) ToConnectionConfluentSchemaRegistrySshTunnelPtrOutputWithContext(ctx context.Context) ConnectionConfluentSchemaRegistrySshTunnelPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionConfluentSchemaRegistrySshTunnel) *ConnectionConfluentSchemaRegistrySshTunnel {
		return &v
	}).(ConnectionConfluentSchemaRegistrySshTunnelPtrOutput)
}

// The sshTunnel database name.
func (o ConnectionConfluentSchemaRegistrySshTunnelOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionConfluentSchemaRegistrySshTunnel) *string { return v.DatabaseName }).(pulumi.StringPtrOutput)
}

// The sshTunnel name.
func (o ConnectionConfluentSchemaRegistrySshTunnelOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionConfluentSchemaRegistrySshTunnel) string { return v.Name }).(pulumi.StringOutput)
}

// The sshTunnel schema name.
func (o ConnectionConfluentSchemaRegistrySshTunnelOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionConfluentSchemaRegistrySshTunnel) *string { return v.SchemaName }).(pulumi.StringPtrOutput)
}

type ConnectionConfluentSchemaRegistrySshTunnelPtrOutput struct{ *pulumi.OutputState }

func (ConnectionConfluentSchemaRegistrySshTunnelPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionConfluentSchemaRegistrySshTunnel)(nil)).Elem()
}

func (o ConnectionConfluentSchemaRegistrySshTunnelPtrOutput) ToConnectionConfluentSchemaRegistrySshTunnelPtrOutput() ConnectionConfluentSchemaRegistrySshTunnelPtrOutput {
	return o
}

func (o ConnectionConfluentSchemaRegistrySshTunnelPtrOutput) ToConnectionConfluentSchemaRegistrySshTunnelPtrOutputWithContext(ctx context.Context) ConnectionConfluentSchemaRegistrySshTunnelPtrOutput {
	return o
}

func (o ConnectionConfluentSchemaRegistrySshTunnelPtrOutput) Elem() ConnectionConfluentSchemaRegistrySshTunnelOutput {
	return o.ApplyT(func(v *ConnectionConfluentSchemaRegistrySshTunnel) ConnectionConfluentSchemaRegistrySshTunnel {
		if v != nil {
			return *v
		}
		var ret ConnectionConfluentSchemaRegistrySshTunnel
		return ret
	}).(ConnectionConfluentSchemaRegistrySshTunnelOutput)
}

// The sshTunnel database name.
func (o ConnectionConfluentSchemaRegistrySshTunnelPtrOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionConfluentSchemaRegistrySshTunnel) *string {
		if v == nil {
			return nil
		}
		return v.DatabaseName
	}).(pulumi.StringPtrOutput)
}

// The sshTunnel name.
func (o ConnectionConfluentSchemaRegistrySshTunnelPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionConfluentSchemaRegistrySshTunnel) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The sshTunnel schema name.
func (o ConnectionConfluentSchemaRegistrySshTunnelPtrOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionConfluentSchemaRegistrySshTunnel) *string {
		if v == nil {
			return nil
		}
		return v.SchemaName
	}).(pulumi.StringPtrOutput)
}

type ConnectionConfluentSchemaRegistrySslCertificate struct {
	// The ssl*certificate secret value.
	Secret *ConnectionConfluentSchemaRegistrySslCertificateSecret `pulumi:"secret"`
	// The sslCertificate text value.
	Text *string `pulumi:"text"`
}

// ConnectionConfluentSchemaRegistrySslCertificateInput is an input type that accepts ConnectionConfluentSchemaRegistrySslCertificateArgs and ConnectionConfluentSchemaRegistrySslCertificateOutput values.
// You can construct a concrete instance of `ConnectionConfluentSchemaRegistrySslCertificateInput` via:
//
//	ConnectionConfluentSchemaRegistrySslCertificateArgs{...}
type ConnectionConfluentSchemaRegistrySslCertificateInput interface {
	pulumi.Input

	ToConnectionConfluentSchemaRegistrySslCertificateOutput() ConnectionConfluentSchemaRegistrySslCertificateOutput
	ToConnectionConfluentSchemaRegistrySslCertificateOutputWithContext(context.Context) ConnectionConfluentSchemaRegistrySslCertificateOutput
}

type ConnectionConfluentSchemaRegistrySslCertificateArgs struct {
	// The ssl*certificate secret value.
	Secret ConnectionConfluentSchemaRegistrySslCertificateSecretPtrInput `pulumi:"secret"`
	// The sslCertificate text value.
	Text pulumi.StringPtrInput `pulumi:"text"`
}

func (ConnectionConfluentSchemaRegistrySslCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionConfluentSchemaRegistrySslCertificate)(nil)).Elem()
}

func (i ConnectionConfluentSchemaRegistrySslCertificateArgs) ToConnectionConfluentSchemaRegistrySslCertificateOutput() ConnectionConfluentSchemaRegistrySslCertificateOutput {
	return i.ToConnectionConfluentSchemaRegistrySslCertificateOutputWithContext(context.Background())
}

func (i ConnectionConfluentSchemaRegistrySslCertificateArgs) ToConnectionConfluentSchemaRegistrySslCertificateOutputWithContext(ctx context.Context) ConnectionConfluentSchemaRegistrySslCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionConfluentSchemaRegistrySslCertificateOutput)
}

func (i ConnectionConfluentSchemaRegistrySslCertificateArgs) ToConnectionConfluentSchemaRegistrySslCertificatePtrOutput() ConnectionConfluentSchemaRegistrySslCertificatePtrOutput {
	return i.ToConnectionConfluentSchemaRegistrySslCertificatePtrOutputWithContext(context.Background())
}

func (i ConnectionConfluentSchemaRegistrySslCertificateArgs) ToConnectionConfluentSchemaRegistrySslCertificatePtrOutputWithContext(ctx context.Context) ConnectionConfluentSchemaRegistrySslCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionConfluentSchemaRegistrySslCertificateOutput).ToConnectionConfluentSchemaRegistrySslCertificatePtrOutputWithContext(ctx)
}

// ConnectionConfluentSchemaRegistrySslCertificatePtrInput is an input type that accepts ConnectionConfluentSchemaRegistrySslCertificateArgs, ConnectionConfluentSchemaRegistrySslCertificatePtr and ConnectionConfluentSchemaRegistrySslCertificatePtrOutput values.
// You can construct a concrete instance of `ConnectionConfluentSchemaRegistrySslCertificatePtrInput` via:
//
//	        ConnectionConfluentSchemaRegistrySslCertificateArgs{...}
//
//	or:
//
//	        nil
type ConnectionConfluentSchemaRegistrySslCertificatePtrInput interface {
	pulumi.Input

	ToConnectionConfluentSchemaRegistrySslCertificatePtrOutput() ConnectionConfluentSchemaRegistrySslCertificatePtrOutput
	ToConnectionConfluentSchemaRegistrySslCertificatePtrOutputWithContext(context.Context) ConnectionConfluentSchemaRegistrySslCertificatePtrOutput
}

type connectionConfluentSchemaRegistrySslCertificatePtrType ConnectionConfluentSchemaRegistrySslCertificateArgs

func ConnectionConfluentSchemaRegistrySslCertificatePtr(v *ConnectionConfluentSchemaRegistrySslCertificateArgs) ConnectionConfluentSchemaRegistrySslCertificatePtrInput {
	return (*connectionConfluentSchemaRegistrySslCertificatePtrType)(v)
}

func (*connectionConfluentSchemaRegistrySslCertificatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionConfluentSchemaRegistrySslCertificate)(nil)).Elem()
}

func (i *connectionConfluentSchemaRegistrySslCertificatePtrType) ToConnectionConfluentSchemaRegistrySslCertificatePtrOutput() ConnectionConfluentSchemaRegistrySslCertificatePtrOutput {
	return i.ToConnectionConfluentSchemaRegistrySslCertificatePtrOutputWithContext(context.Background())
}

func (i *connectionConfluentSchemaRegistrySslCertificatePtrType) ToConnectionConfluentSchemaRegistrySslCertificatePtrOutputWithContext(ctx context.Context) ConnectionConfluentSchemaRegistrySslCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionConfluentSchemaRegistrySslCertificatePtrOutput)
}

type ConnectionConfluentSchemaRegistrySslCertificateOutput struct{ *pulumi.OutputState }

func (ConnectionConfluentSchemaRegistrySslCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionConfluentSchemaRegistrySslCertificate)(nil)).Elem()
}

func (o ConnectionConfluentSchemaRegistrySslCertificateOutput) ToConnectionConfluentSchemaRegistrySslCertificateOutput() ConnectionConfluentSchemaRegistrySslCertificateOutput {
	return o
}

func (o ConnectionConfluentSchemaRegistrySslCertificateOutput) ToConnectionConfluentSchemaRegistrySslCertificateOutputWithContext(ctx context.Context) ConnectionConfluentSchemaRegistrySslCertificateOutput {
	return o
}

func (o ConnectionConfluentSchemaRegistrySslCertificateOutput) ToConnectionConfluentSchemaRegistrySslCertificatePtrOutput() ConnectionConfluentSchemaRegistrySslCertificatePtrOutput {
	return o.ToConnectionConfluentSchemaRegistrySslCertificatePtrOutputWithContext(context.Background())
}

func (o ConnectionConfluentSchemaRegistrySslCertificateOutput) ToConnectionConfluentSchemaRegistrySslCertificatePtrOutputWithContext(ctx context.Context) ConnectionConfluentSchemaRegistrySslCertificatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionConfluentSchemaRegistrySslCertificate) *ConnectionConfluentSchemaRegistrySslCertificate {
		return &v
	}).(ConnectionConfluentSchemaRegistrySslCertificatePtrOutput)
}

// The ssl*certificate secret value.
func (o ConnectionConfluentSchemaRegistrySslCertificateOutput) Secret() ConnectionConfluentSchemaRegistrySslCertificateSecretPtrOutput {
	return o.ApplyT(func(v ConnectionConfluentSchemaRegistrySslCertificate) *ConnectionConfluentSchemaRegistrySslCertificateSecret {
		return v.Secret
	}).(ConnectionConfluentSchemaRegistrySslCertificateSecretPtrOutput)
}

// The sslCertificate text value.
func (o ConnectionConfluentSchemaRegistrySslCertificateOutput) Text() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionConfluentSchemaRegistrySslCertificate) *string { return v.Text }).(pulumi.StringPtrOutput)
}

type ConnectionConfluentSchemaRegistrySslCertificatePtrOutput struct{ *pulumi.OutputState }

func (ConnectionConfluentSchemaRegistrySslCertificatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionConfluentSchemaRegistrySslCertificate)(nil)).Elem()
}

func (o ConnectionConfluentSchemaRegistrySslCertificatePtrOutput) ToConnectionConfluentSchemaRegistrySslCertificatePtrOutput() ConnectionConfluentSchemaRegistrySslCertificatePtrOutput {
	return o
}

func (o ConnectionConfluentSchemaRegistrySslCertificatePtrOutput) ToConnectionConfluentSchemaRegistrySslCertificatePtrOutputWithContext(ctx context.Context) ConnectionConfluentSchemaRegistrySslCertificatePtrOutput {
	return o
}

func (o ConnectionConfluentSchemaRegistrySslCertificatePtrOutput) Elem() ConnectionConfluentSchemaRegistrySslCertificateOutput {
	return o.ApplyT(func(v *ConnectionConfluentSchemaRegistrySslCertificate) ConnectionConfluentSchemaRegistrySslCertificate {
		if v != nil {
			return *v
		}
		var ret ConnectionConfluentSchemaRegistrySslCertificate
		return ret
	}).(ConnectionConfluentSchemaRegistrySslCertificateOutput)
}

// The ssl*certificate secret value.
func (o ConnectionConfluentSchemaRegistrySslCertificatePtrOutput) Secret() ConnectionConfluentSchemaRegistrySslCertificateSecretPtrOutput {
	return o.ApplyT(func(v *ConnectionConfluentSchemaRegistrySslCertificate) *ConnectionConfluentSchemaRegistrySslCertificateSecret {
		if v == nil {
			return nil
		}
		return v.Secret
	}).(ConnectionConfluentSchemaRegistrySslCertificateSecretPtrOutput)
}

// The sslCertificate text value.
func (o ConnectionConfluentSchemaRegistrySslCertificatePtrOutput) Text() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionConfluentSchemaRegistrySslCertificate) *string {
		if v == nil {
			return nil
		}
		return v.Text
	}).(pulumi.StringPtrOutput)
}

type ConnectionConfluentSchemaRegistrySslCertificateAuthority struct {
	// The ssl*certificate*authority secret value.
	Secret *ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecret `pulumi:"secret"`
	// The ssl*certificate*authority text value.
	Text *string `pulumi:"text"`
}

// ConnectionConfluentSchemaRegistrySslCertificateAuthorityInput is an input type that accepts ConnectionConfluentSchemaRegistrySslCertificateAuthorityArgs and ConnectionConfluentSchemaRegistrySslCertificateAuthorityOutput values.
// You can construct a concrete instance of `ConnectionConfluentSchemaRegistrySslCertificateAuthorityInput` via:
//
//	ConnectionConfluentSchemaRegistrySslCertificateAuthorityArgs{...}
type ConnectionConfluentSchemaRegistrySslCertificateAuthorityInput interface {
	pulumi.Input

	ToConnectionConfluentSchemaRegistrySslCertificateAuthorityOutput() ConnectionConfluentSchemaRegistrySslCertificateAuthorityOutput
	ToConnectionConfluentSchemaRegistrySslCertificateAuthorityOutputWithContext(context.Context) ConnectionConfluentSchemaRegistrySslCertificateAuthorityOutput
}

type ConnectionConfluentSchemaRegistrySslCertificateAuthorityArgs struct {
	// The ssl*certificate*authority secret value.
	Secret ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretPtrInput `pulumi:"secret"`
	// The ssl*certificate*authority text value.
	Text pulumi.StringPtrInput `pulumi:"text"`
}

func (ConnectionConfluentSchemaRegistrySslCertificateAuthorityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionConfluentSchemaRegistrySslCertificateAuthority)(nil)).Elem()
}

func (i ConnectionConfluentSchemaRegistrySslCertificateAuthorityArgs) ToConnectionConfluentSchemaRegistrySslCertificateAuthorityOutput() ConnectionConfluentSchemaRegistrySslCertificateAuthorityOutput {
	return i.ToConnectionConfluentSchemaRegistrySslCertificateAuthorityOutputWithContext(context.Background())
}

func (i ConnectionConfluentSchemaRegistrySslCertificateAuthorityArgs) ToConnectionConfluentSchemaRegistrySslCertificateAuthorityOutputWithContext(ctx context.Context) ConnectionConfluentSchemaRegistrySslCertificateAuthorityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionConfluentSchemaRegistrySslCertificateAuthorityOutput)
}

func (i ConnectionConfluentSchemaRegistrySslCertificateAuthorityArgs) ToConnectionConfluentSchemaRegistrySslCertificateAuthorityPtrOutput() ConnectionConfluentSchemaRegistrySslCertificateAuthorityPtrOutput {
	return i.ToConnectionConfluentSchemaRegistrySslCertificateAuthorityPtrOutputWithContext(context.Background())
}

func (i ConnectionConfluentSchemaRegistrySslCertificateAuthorityArgs) ToConnectionConfluentSchemaRegistrySslCertificateAuthorityPtrOutputWithContext(ctx context.Context) ConnectionConfluentSchemaRegistrySslCertificateAuthorityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionConfluentSchemaRegistrySslCertificateAuthorityOutput).ToConnectionConfluentSchemaRegistrySslCertificateAuthorityPtrOutputWithContext(ctx)
}

// ConnectionConfluentSchemaRegistrySslCertificateAuthorityPtrInput is an input type that accepts ConnectionConfluentSchemaRegistrySslCertificateAuthorityArgs, ConnectionConfluentSchemaRegistrySslCertificateAuthorityPtr and ConnectionConfluentSchemaRegistrySslCertificateAuthorityPtrOutput values.
// You can construct a concrete instance of `ConnectionConfluentSchemaRegistrySslCertificateAuthorityPtrInput` via:
//
//	        ConnectionConfluentSchemaRegistrySslCertificateAuthorityArgs{...}
//
//	or:
//
//	        nil
type ConnectionConfluentSchemaRegistrySslCertificateAuthorityPtrInput interface {
	pulumi.Input

	ToConnectionConfluentSchemaRegistrySslCertificateAuthorityPtrOutput() ConnectionConfluentSchemaRegistrySslCertificateAuthorityPtrOutput
	ToConnectionConfluentSchemaRegistrySslCertificateAuthorityPtrOutputWithContext(context.Context) ConnectionConfluentSchemaRegistrySslCertificateAuthorityPtrOutput
}

type connectionConfluentSchemaRegistrySslCertificateAuthorityPtrType ConnectionConfluentSchemaRegistrySslCertificateAuthorityArgs

func ConnectionConfluentSchemaRegistrySslCertificateAuthorityPtr(v *ConnectionConfluentSchemaRegistrySslCertificateAuthorityArgs) ConnectionConfluentSchemaRegistrySslCertificateAuthorityPtrInput {
	return (*connectionConfluentSchemaRegistrySslCertificateAuthorityPtrType)(v)
}

func (*connectionConfluentSchemaRegistrySslCertificateAuthorityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionConfluentSchemaRegistrySslCertificateAuthority)(nil)).Elem()
}

func (i *connectionConfluentSchemaRegistrySslCertificateAuthorityPtrType) ToConnectionConfluentSchemaRegistrySslCertificateAuthorityPtrOutput() ConnectionConfluentSchemaRegistrySslCertificateAuthorityPtrOutput {
	return i.ToConnectionConfluentSchemaRegistrySslCertificateAuthorityPtrOutputWithContext(context.Background())
}

func (i *connectionConfluentSchemaRegistrySslCertificateAuthorityPtrType) ToConnectionConfluentSchemaRegistrySslCertificateAuthorityPtrOutputWithContext(ctx context.Context) ConnectionConfluentSchemaRegistrySslCertificateAuthorityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionConfluentSchemaRegistrySslCertificateAuthorityPtrOutput)
}

type ConnectionConfluentSchemaRegistrySslCertificateAuthorityOutput struct{ *pulumi.OutputState }

func (ConnectionConfluentSchemaRegistrySslCertificateAuthorityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionConfluentSchemaRegistrySslCertificateAuthority)(nil)).Elem()
}

func (o ConnectionConfluentSchemaRegistrySslCertificateAuthorityOutput) ToConnectionConfluentSchemaRegistrySslCertificateAuthorityOutput() ConnectionConfluentSchemaRegistrySslCertificateAuthorityOutput {
	return o
}

func (o ConnectionConfluentSchemaRegistrySslCertificateAuthorityOutput) ToConnectionConfluentSchemaRegistrySslCertificateAuthorityOutputWithContext(ctx context.Context) ConnectionConfluentSchemaRegistrySslCertificateAuthorityOutput {
	return o
}

func (o ConnectionConfluentSchemaRegistrySslCertificateAuthorityOutput) ToConnectionConfluentSchemaRegistrySslCertificateAuthorityPtrOutput() ConnectionConfluentSchemaRegistrySslCertificateAuthorityPtrOutput {
	return o.ToConnectionConfluentSchemaRegistrySslCertificateAuthorityPtrOutputWithContext(context.Background())
}

func (o ConnectionConfluentSchemaRegistrySslCertificateAuthorityOutput) ToConnectionConfluentSchemaRegistrySslCertificateAuthorityPtrOutputWithContext(ctx context.Context) ConnectionConfluentSchemaRegistrySslCertificateAuthorityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionConfluentSchemaRegistrySslCertificateAuthority) *ConnectionConfluentSchemaRegistrySslCertificateAuthority {
		return &v
	}).(ConnectionConfluentSchemaRegistrySslCertificateAuthorityPtrOutput)
}

// The ssl*certificate*authority secret value.
func (o ConnectionConfluentSchemaRegistrySslCertificateAuthorityOutput) Secret() ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretPtrOutput {
	return o.ApplyT(func(v ConnectionConfluentSchemaRegistrySslCertificateAuthority) *ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecret {
		return v.Secret
	}).(ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretPtrOutput)
}

// The ssl*certificate*authority text value.
func (o ConnectionConfluentSchemaRegistrySslCertificateAuthorityOutput) Text() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionConfluentSchemaRegistrySslCertificateAuthority) *string { return v.Text }).(pulumi.StringPtrOutput)
}

type ConnectionConfluentSchemaRegistrySslCertificateAuthorityPtrOutput struct{ *pulumi.OutputState }

func (ConnectionConfluentSchemaRegistrySslCertificateAuthorityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionConfluentSchemaRegistrySslCertificateAuthority)(nil)).Elem()
}

func (o ConnectionConfluentSchemaRegistrySslCertificateAuthorityPtrOutput) ToConnectionConfluentSchemaRegistrySslCertificateAuthorityPtrOutput() ConnectionConfluentSchemaRegistrySslCertificateAuthorityPtrOutput {
	return o
}

func (o ConnectionConfluentSchemaRegistrySslCertificateAuthorityPtrOutput) ToConnectionConfluentSchemaRegistrySslCertificateAuthorityPtrOutputWithContext(ctx context.Context) ConnectionConfluentSchemaRegistrySslCertificateAuthorityPtrOutput {
	return o
}

func (o ConnectionConfluentSchemaRegistrySslCertificateAuthorityPtrOutput) Elem() ConnectionConfluentSchemaRegistrySslCertificateAuthorityOutput {
	return o.ApplyT(func(v *ConnectionConfluentSchemaRegistrySslCertificateAuthority) ConnectionConfluentSchemaRegistrySslCertificateAuthority {
		if v != nil {
			return *v
		}
		var ret ConnectionConfluentSchemaRegistrySslCertificateAuthority
		return ret
	}).(ConnectionConfluentSchemaRegistrySslCertificateAuthorityOutput)
}

// The ssl*certificate*authority secret value.
func (o ConnectionConfluentSchemaRegistrySslCertificateAuthorityPtrOutput) Secret() ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretPtrOutput {
	return o.ApplyT(func(v *ConnectionConfluentSchemaRegistrySslCertificateAuthority) *ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecret {
		if v == nil {
			return nil
		}
		return v.Secret
	}).(ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretPtrOutput)
}

// The ssl*certificate*authority text value.
func (o ConnectionConfluentSchemaRegistrySslCertificateAuthorityPtrOutput) Text() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionConfluentSchemaRegistrySslCertificateAuthority) *string {
		if v == nil {
			return nil
		}
		return v.Text
	}).(pulumi.StringPtrOutput)
}

type ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecret struct {
	// The identifier for the connection database.
	DatabaseName *string `pulumi:"databaseName"`
	// The identifier for the connection.
	Name string `pulumi:"name"`
	// The identifier for the connection schema.
	SchemaName *string `pulumi:"schemaName"`
}

// ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretInput is an input type that accepts ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretArgs and ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretOutput values.
// You can construct a concrete instance of `ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretInput` via:
//
//	ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretArgs{...}
type ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretInput interface {
	pulumi.Input

	ToConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretOutput() ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretOutput
	ToConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretOutputWithContext(context.Context) ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretOutput
}

type ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretArgs struct {
	// The identifier for the connection database.
	DatabaseName pulumi.StringPtrInput `pulumi:"databaseName"`
	// The identifier for the connection.
	Name pulumi.StringInput `pulumi:"name"`
	// The identifier for the connection schema.
	SchemaName pulumi.StringPtrInput `pulumi:"schemaName"`
}

func (ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecret)(nil)).Elem()
}

func (i ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretArgs) ToConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretOutput() ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretOutput {
	return i.ToConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretOutputWithContext(context.Background())
}

func (i ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretArgs) ToConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretOutputWithContext(ctx context.Context) ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretOutput)
}

func (i ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretArgs) ToConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretPtrOutput() ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretPtrOutput {
	return i.ToConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretPtrOutputWithContext(context.Background())
}

func (i ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretArgs) ToConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretPtrOutputWithContext(ctx context.Context) ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretOutput).ToConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretPtrOutputWithContext(ctx)
}

// ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretPtrInput is an input type that accepts ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretArgs, ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretPtr and ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretPtrOutput values.
// You can construct a concrete instance of `ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretPtrInput` via:
//
//	        ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretArgs{...}
//
//	or:
//
//	        nil
type ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretPtrInput interface {
	pulumi.Input

	ToConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretPtrOutput() ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretPtrOutput
	ToConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretPtrOutputWithContext(context.Context) ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretPtrOutput
}

type connectionConfluentSchemaRegistrySslCertificateAuthoritySecretPtrType ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretArgs

func ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretPtr(v *ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretArgs) ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretPtrInput {
	return (*connectionConfluentSchemaRegistrySslCertificateAuthoritySecretPtrType)(v)
}

func (*connectionConfluentSchemaRegistrySslCertificateAuthoritySecretPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecret)(nil)).Elem()
}

func (i *connectionConfluentSchemaRegistrySslCertificateAuthoritySecretPtrType) ToConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretPtrOutput() ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretPtrOutput {
	return i.ToConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretPtrOutputWithContext(context.Background())
}

func (i *connectionConfluentSchemaRegistrySslCertificateAuthoritySecretPtrType) ToConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretPtrOutputWithContext(ctx context.Context) ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretPtrOutput)
}

type ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretOutput struct{ *pulumi.OutputState }

func (ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecret)(nil)).Elem()
}

func (o ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretOutput) ToConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretOutput() ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretOutput {
	return o
}

func (o ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretOutput) ToConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretOutputWithContext(ctx context.Context) ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretOutput {
	return o
}

func (o ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretOutput) ToConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretPtrOutput() ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretPtrOutput {
	return o.ToConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretPtrOutputWithContext(context.Background())
}

func (o ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretOutput) ToConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretPtrOutputWithContext(ctx context.Context) ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecret) *ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecret {
		return &v
	}).(ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretPtrOutput)
}

// The identifier for the connection database.
func (o ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecret) *string { return v.DatabaseName }).(pulumi.StringPtrOutput)
}

// The identifier for the connection.
func (o ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecret) string { return v.Name }).(pulumi.StringOutput)
}

// The identifier for the connection schema.
func (o ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecret) *string { return v.SchemaName }).(pulumi.StringPtrOutput)
}

type ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretPtrOutput struct{ *pulumi.OutputState }

func (ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecret)(nil)).Elem()
}

func (o ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretPtrOutput) ToConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretPtrOutput() ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretPtrOutput {
	return o
}

func (o ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretPtrOutput) ToConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretPtrOutputWithContext(ctx context.Context) ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretPtrOutput {
	return o
}

func (o ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretPtrOutput) Elem() ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretOutput {
	return o.ApplyT(func(v *ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecret) ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecret {
		if v != nil {
			return *v
		}
		var ret ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecret
		return ret
	}).(ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretOutput)
}

// The identifier for the connection database.
func (o ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretPtrOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecret) *string {
		if v == nil {
			return nil
		}
		return v.DatabaseName
	}).(pulumi.StringPtrOutput)
}

// The identifier for the connection.
func (o ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecret) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The identifier for the connection schema.
func (o ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretPtrOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecret) *string {
		if v == nil {
			return nil
		}
		return v.SchemaName
	}).(pulumi.StringPtrOutput)
}

type ConnectionConfluentSchemaRegistrySslCertificateSecret struct {
	// The identifier for the connection database.
	DatabaseName *string `pulumi:"databaseName"`
	// The identifier for the connection.
	Name string `pulumi:"name"`
	// The identifier for the connection schema.
	SchemaName *string `pulumi:"schemaName"`
}

// ConnectionConfluentSchemaRegistrySslCertificateSecretInput is an input type that accepts ConnectionConfluentSchemaRegistrySslCertificateSecretArgs and ConnectionConfluentSchemaRegistrySslCertificateSecretOutput values.
// You can construct a concrete instance of `ConnectionConfluentSchemaRegistrySslCertificateSecretInput` via:
//
//	ConnectionConfluentSchemaRegistrySslCertificateSecretArgs{...}
type ConnectionConfluentSchemaRegistrySslCertificateSecretInput interface {
	pulumi.Input

	ToConnectionConfluentSchemaRegistrySslCertificateSecretOutput() ConnectionConfluentSchemaRegistrySslCertificateSecretOutput
	ToConnectionConfluentSchemaRegistrySslCertificateSecretOutputWithContext(context.Context) ConnectionConfluentSchemaRegistrySslCertificateSecretOutput
}

type ConnectionConfluentSchemaRegistrySslCertificateSecretArgs struct {
	// The identifier for the connection database.
	DatabaseName pulumi.StringPtrInput `pulumi:"databaseName"`
	// The identifier for the connection.
	Name pulumi.StringInput `pulumi:"name"`
	// The identifier for the connection schema.
	SchemaName pulumi.StringPtrInput `pulumi:"schemaName"`
}

func (ConnectionConfluentSchemaRegistrySslCertificateSecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionConfluentSchemaRegistrySslCertificateSecret)(nil)).Elem()
}

func (i ConnectionConfluentSchemaRegistrySslCertificateSecretArgs) ToConnectionConfluentSchemaRegistrySslCertificateSecretOutput() ConnectionConfluentSchemaRegistrySslCertificateSecretOutput {
	return i.ToConnectionConfluentSchemaRegistrySslCertificateSecretOutputWithContext(context.Background())
}

func (i ConnectionConfluentSchemaRegistrySslCertificateSecretArgs) ToConnectionConfluentSchemaRegistrySslCertificateSecretOutputWithContext(ctx context.Context) ConnectionConfluentSchemaRegistrySslCertificateSecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionConfluentSchemaRegistrySslCertificateSecretOutput)
}

func (i ConnectionConfluentSchemaRegistrySslCertificateSecretArgs) ToConnectionConfluentSchemaRegistrySslCertificateSecretPtrOutput() ConnectionConfluentSchemaRegistrySslCertificateSecretPtrOutput {
	return i.ToConnectionConfluentSchemaRegistrySslCertificateSecretPtrOutputWithContext(context.Background())
}

func (i ConnectionConfluentSchemaRegistrySslCertificateSecretArgs) ToConnectionConfluentSchemaRegistrySslCertificateSecretPtrOutputWithContext(ctx context.Context) ConnectionConfluentSchemaRegistrySslCertificateSecretPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionConfluentSchemaRegistrySslCertificateSecretOutput).ToConnectionConfluentSchemaRegistrySslCertificateSecretPtrOutputWithContext(ctx)
}

// ConnectionConfluentSchemaRegistrySslCertificateSecretPtrInput is an input type that accepts ConnectionConfluentSchemaRegistrySslCertificateSecretArgs, ConnectionConfluentSchemaRegistrySslCertificateSecretPtr and ConnectionConfluentSchemaRegistrySslCertificateSecretPtrOutput values.
// You can construct a concrete instance of `ConnectionConfluentSchemaRegistrySslCertificateSecretPtrInput` via:
//
//	        ConnectionConfluentSchemaRegistrySslCertificateSecretArgs{...}
//
//	or:
//
//	        nil
type ConnectionConfluentSchemaRegistrySslCertificateSecretPtrInput interface {
	pulumi.Input

	ToConnectionConfluentSchemaRegistrySslCertificateSecretPtrOutput() ConnectionConfluentSchemaRegistrySslCertificateSecretPtrOutput
	ToConnectionConfluentSchemaRegistrySslCertificateSecretPtrOutputWithContext(context.Context) ConnectionConfluentSchemaRegistrySslCertificateSecretPtrOutput
}

type connectionConfluentSchemaRegistrySslCertificateSecretPtrType ConnectionConfluentSchemaRegistrySslCertificateSecretArgs

func ConnectionConfluentSchemaRegistrySslCertificateSecretPtr(v *ConnectionConfluentSchemaRegistrySslCertificateSecretArgs) ConnectionConfluentSchemaRegistrySslCertificateSecretPtrInput {
	return (*connectionConfluentSchemaRegistrySslCertificateSecretPtrType)(v)
}

func (*connectionConfluentSchemaRegistrySslCertificateSecretPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionConfluentSchemaRegistrySslCertificateSecret)(nil)).Elem()
}

func (i *connectionConfluentSchemaRegistrySslCertificateSecretPtrType) ToConnectionConfluentSchemaRegistrySslCertificateSecretPtrOutput() ConnectionConfluentSchemaRegistrySslCertificateSecretPtrOutput {
	return i.ToConnectionConfluentSchemaRegistrySslCertificateSecretPtrOutputWithContext(context.Background())
}

func (i *connectionConfluentSchemaRegistrySslCertificateSecretPtrType) ToConnectionConfluentSchemaRegistrySslCertificateSecretPtrOutputWithContext(ctx context.Context) ConnectionConfluentSchemaRegistrySslCertificateSecretPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionConfluentSchemaRegistrySslCertificateSecretPtrOutput)
}

type ConnectionConfluentSchemaRegistrySslCertificateSecretOutput struct{ *pulumi.OutputState }

func (ConnectionConfluentSchemaRegistrySslCertificateSecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionConfluentSchemaRegistrySslCertificateSecret)(nil)).Elem()
}

func (o ConnectionConfluentSchemaRegistrySslCertificateSecretOutput) ToConnectionConfluentSchemaRegistrySslCertificateSecretOutput() ConnectionConfluentSchemaRegistrySslCertificateSecretOutput {
	return o
}

func (o ConnectionConfluentSchemaRegistrySslCertificateSecretOutput) ToConnectionConfluentSchemaRegistrySslCertificateSecretOutputWithContext(ctx context.Context) ConnectionConfluentSchemaRegistrySslCertificateSecretOutput {
	return o
}

func (o ConnectionConfluentSchemaRegistrySslCertificateSecretOutput) ToConnectionConfluentSchemaRegistrySslCertificateSecretPtrOutput() ConnectionConfluentSchemaRegistrySslCertificateSecretPtrOutput {
	return o.ToConnectionConfluentSchemaRegistrySslCertificateSecretPtrOutputWithContext(context.Background())
}

func (o ConnectionConfluentSchemaRegistrySslCertificateSecretOutput) ToConnectionConfluentSchemaRegistrySslCertificateSecretPtrOutputWithContext(ctx context.Context) ConnectionConfluentSchemaRegistrySslCertificateSecretPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionConfluentSchemaRegistrySslCertificateSecret) *ConnectionConfluentSchemaRegistrySslCertificateSecret {
		return &v
	}).(ConnectionConfluentSchemaRegistrySslCertificateSecretPtrOutput)
}

// The identifier for the connection database.
func (o ConnectionConfluentSchemaRegistrySslCertificateSecretOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionConfluentSchemaRegistrySslCertificateSecret) *string { return v.DatabaseName }).(pulumi.StringPtrOutput)
}

// The identifier for the connection.
func (o ConnectionConfluentSchemaRegistrySslCertificateSecretOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionConfluentSchemaRegistrySslCertificateSecret) string { return v.Name }).(pulumi.StringOutput)
}

// The identifier for the connection schema.
func (o ConnectionConfluentSchemaRegistrySslCertificateSecretOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionConfluentSchemaRegistrySslCertificateSecret) *string { return v.SchemaName }).(pulumi.StringPtrOutput)
}

type ConnectionConfluentSchemaRegistrySslCertificateSecretPtrOutput struct{ *pulumi.OutputState }

func (ConnectionConfluentSchemaRegistrySslCertificateSecretPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionConfluentSchemaRegistrySslCertificateSecret)(nil)).Elem()
}

func (o ConnectionConfluentSchemaRegistrySslCertificateSecretPtrOutput) ToConnectionConfluentSchemaRegistrySslCertificateSecretPtrOutput() ConnectionConfluentSchemaRegistrySslCertificateSecretPtrOutput {
	return o
}

func (o ConnectionConfluentSchemaRegistrySslCertificateSecretPtrOutput) ToConnectionConfluentSchemaRegistrySslCertificateSecretPtrOutputWithContext(ctx context.Context) ConnectionConfluentSchemaRegistrySslCertificateSecretPtrOutput {
	return o
}

func (o ConnectionConfluentSchemaRegistrySslCertificateSecretPtrOutput) Elem() ConnectionConfluentSchemaRegistrySslCertificateSecretOutput {
	return o.ApplyT(func(v *ConnectionConfluentSchemaRegistrySslCertificateSecret) ConnectionConfluentSchemaRegistrySslCertificateSecret {
		if v != nil {
			return *v
		}
		var ret ConnectionConfluentSchemaRegistrySslCertificateSecret
		return ret
	}).(ConnectionConfluentSchemaRegistrySslCertificateSecretOutput)
}

// The identifier for the connection database.
func (o ConnectionConfluentSchemaRegistrySslCertificateSecretPtrOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionConfluentSchemaRegistrySslCertificateSecret) *string {
		if v == nil {
			return nil
		}
		return v.DatabaseName
	}).(pulumi.StringPtrOutput)
}

// The identifier for the connection.
func (o ConnectionConfluentSchemaRegistrySslCertificateSecretPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionConfluentSchemaRegistrySslCertificateSecret) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The identifier for the connection schema.
func (o ConnectionConfluentSchemaRegistrySslCertificateSecretPtrOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionConfluentSchemaRegistrySslCertificateSecret) *string {
		if v == nil {
			return nil
		}
		return v.SchemaName
	}).(pulumi.StringPtrOutput)
}

type ConnectionConfluentSchemaRegistrySslKey struct {
	// The sslKey database name.
	DatabaseName *string `pulumi:"databaseName"`
	// The sslKey name.
	Name string `pulumi:"name"`
	// The sslKey schema name.
	SchemaName *string `pulumi:"schemaName"`
}

// ConnectionConfluentSchemaRegistrySslKeyInput is an input type that accepts ConnectionConfluentSchemaRegistrySslKeyArgs and ConnectionConfluentSchemaRegistrySslKeyOutput values.
// You can construct a concrete instance of `ConnectionConfluentSchemaRegistrySslKeyInput` via:
//
//	ConnectionConfluentSchemaRegistrySslKeyArgs{...}
type ConnectionConfluentSchemaRegistrySslKeyInput interface {
	pulumi.Input

	ToConnectionConfluentSchemaRegistrySslKeyOutput() ConnectionConfluentSchemaRegistrySslKeyOutput
	ToConnectionConfluentSchemaRegistrySslKeyOutputWithContext(context.Context) ConnectionConfluentSchemaRegistrySslKeyOutput
}

type ConnectionConfluentSchemaRegistrySslKeyArgs struct {
	// The sslKey database name.
	DatabaseName pulumi.StringPtrInput `pulumi:"databaseName"`
	// The sslKey name.
	Name pulumi.StringInput `pulumi:"name"`
	// The sslKey schema name.
	SchemaName pulumi.StringPtrInput `pulumi:"schemaName"`
}

func (ConnectionConfluentSchemaRegistrySslKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionConfluentSchemaRegistrySslKey)(nil)).Elem()
}

func (i ConnectionConfluentSchemaRegistrySslKeyArgs) ToConnectionConfluentSchemaRegistrySslKeyOutput() ConnectionConfluentSchemaRegistrySslKeyOutput {
	return i.ToConnectionConfluentSchemaRegistrySslKeyOutputWithContext(context.Background())
}

func (i ConnectionConfluentSchemaRegistrySslKeyArgs) ToConnectionConfluentSchemaRegistrySslKeyOutputWithContext(ctx context.Context) ConnectionConfluentSchemaRegistrySslKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionConfluentSchemaRegistrySslKeyOutput)
}

func (i ConnectionConfluentSchemaRegistrySslKeyArgs) ToConnectionConfluentSchemaRegistrySslKeyPtrOutput() ConnectionConfluentSchemaRegistrySslKeyPtrOutput {
	return i.ToConnectionConfluentSchemaRegistrySslKeyPtrOutputWithContext(context.Background())
}

func (i ConnectionConfluentSchemaRegistrySslKeyArgs) ToConnectionConfluentSchemaRegistrySslKeyPtrOutputWithContext(ctx context.Context) ConnectionConfluentSchemaRegistrySslKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionConfluentSchemaRegistrySslKeyOutput).ToConnectionConfluentSchemaRegistrySslKeyPtrOutputWithContext(ctx)
}

// ConnectionConfluentSchemaRegistrySslKeyPtrInput is an input type that accepts ConnectionConfluentSchemaRegistrySslKeyArgs, ConnectionConfluentSchemaRegistrySslKeyPtr and ConnectionConfluentSchemaRegistrySslKeyPtrOutput values.
// You can construct a concrete instance of `ConnectionConfluentSchemaRegistrySslKeyPtrInput` via:
//
//	        ConnectionConfluentSchemaRegistrySslKeyArgs{...}
//
//	or:
//
//	        nil
type ConnectionConfluentSchemaRegistrySslKeyPtrInput interface {
	pulumi.Input

	ToConnectionConfluentSchemaRegistrySslKeyPtrOutput() ConnectionConfluentSchemaRegistrySslKeyPtrOutput
	ToConnectionConfluentSchemaRegistrySslKeyPtrOutputWithContext(context.Context) ConnectionConfluentSchemaRegistrySslKeyPtrOutput
}

type connectionConfluentSchemaRegistrySslKeyPtrType ConnectionConfluentSchemaRegistrySslKeyArgs

func ConnectionConfluentSchemaRegistrySslKeyPtr(v *ConnectionConfluentSchemaRegistrySslKeyArgs) ConnectionConfluentSchemaRegistrySslKeyPtrInput {
	return (*connectionConfluentSchemaRegistrySslKeyPtrType)(v)
}

func (*connectionConfluentSchemaRegistrySslKeyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionConfluentSchemaRegistrySslKey)(nil)).Elem()
}

func (i *connectionConfluentSchemaRegistrySslKeyPtrType) ToConnectionConfluentSchemaRegistrySslKeyPtrOutput() ConnectionConfluentSchemaRegistrySslKeyPtrOutput {
	return i.ToConnectionConfluentSchemaRegistrySslKeyPtrOutputWithContext(context.Background())
}

func (i *connectionConfluentSchemaRegistrySslKeyPtrType) ToConnectionConfluentSchemaRegistrySslKeyPtrOutputWithContext(ctx context.Context) ConnectionConfluentSchemaRegistrySslKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionConfluentSchemaRegistrySslKeyPtrOutput)
}

type ConnectionConfluentSchemaRegistrySslKeyOutput struct{ *pulumi.OutputState }

func (ConnectionConfluentSchemaRegistrySslKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionConfluentSchemaRegistrySslKey)(nil)).Elem()
}

func (o ConnectionConfluentSchemaRegistrySslKeyOutput) ToConnectionConfluentSchemaRegistrySslKeyOutput() ConnectionConfluentSchemaRegistrySslKeyOutput {
	return o
}

func (o ConnectionConfluentSchemaRegistrySslKeyOutput) ToConnectionConfluentSchemaRegistrySslKeyOutputWithContext(ctx context.Context) ConnectionConfluentSchemaRegistrySslKeyOutput {
	return o
}

func (o ConnectionConfluentSchemaRegistrySslKeyOutput) ToConnectionConfluentSchemaRegistrySslKeyPtrOutput() ConnectionConfluentSchemaRegistrySslKeyPtrOutput {
	return o.ToConnectionConfluentSchemaRegistrySslKeyPtrOutputWithContext(context.Background())
}

func (o ConnectionConfluentSchemaRegistrySslKeyOutput) ToConnectionConfluentSchemaRegistrySslKeyPtrOutputWithContext(ctx context.Context) ConnectionConfluentSchemaRegistrySslKeyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionConfluentSchemaRegistrySslKey) *ConnectionConfluentSchemaRegistrySslKey {
		return &v
	}).(ConnectionConfluentSchemaRegistrySslKeyPtrOutput)
}

// The sslKey database name.
func (o ConnectionConfluentSchemaRegistrySslKeyOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionConfluentSchemaRegistrySslKey) *string { return v.DatabaseName }).(pulumi.StringPtrOutput)
}

// The sslKey name.
func (o ConnectionConfluentSchemaRegistrySslKeyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionConfluentSchemaRegistrySslKey) string { return v.Name }).(pulumi.StringOutput)
}

// The sslKey schema name.
func (o ConnectionConfluentSchemaRegistrySslKeyOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionConfluentSchemaRegistrySslKey) *string { return v.SchemaName }).(pulumi.StringPtrOutput)
}

type ConnectionConfluentSchemaRegistrySslKeyPtrOutput struct{ *pulumi.OutputState }

func (ConnectionConfluentSchemaRegistrySslKeyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionConfluentSchemaRegistrySslKey)(nil)).Elem()
}

func (o ConnectionConfluentSchemaRegistrySslKeyPtrOutput) ToConnectionConfluentSchemaRegistrySslKeyPtrOutput() ConnectionConfluentSchemaRegistrySslKeyPtrOutput {
	return o
}

func (o ConnectionConfluentSchemaRegistrySslKeyPtrOutput) ToConnectionConfluentSchemaRegistrySslKeyPtrOutputWithContext(ctx context.Context) ConnectionConfluentSchemaRegistrySslKeyPtrOutput {
	return o
}

func (o ConnectionConfluentSchemaRegistrySslKeyPtrOutput) Elem() ConnectionConfluentSchemaRegistrySslKeyOutput {
	return o.ApplyT(func(v *ConnectionConfluentSchemaRegistrySslKey) ConnectionConfluentSchemaRegistrySslKey {
		if v != nil {
			return *v
		}
		var ret ConnectionConfluentSchemaRegistrySslKey
		return ret
	}).(ConnectionConfluentSchemaRegistrySslKeyOutput)
}

// The sslKey database name.
func (o ConnectionConfluentSchemaRegistrySslKeyPtrOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionConfluentSchemaRegistrySslKey) *string {
		if v == nil {
			return nil
		}
		return v.DatabaseName
	}).(pulumi.StringPtrOutput)
}

// The sslKey name.
func (o ConnectionConfluentSchemaRegistrySslKeyPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionConfluentSchemaRegistrySslKey) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The sslKey schema name.
func (o ConnectionConfluentSchemaRegistrySslKeyPtrOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionConfluentSchemaRegistrySslKey) *string {
		if v == nil {
			return nil
		}
		return v.SchemaName
	}).(pulumi.StringPtrOutput)
}

type ConnectionConfluentSchemaRegistryUsername struct {
	// The username secret value.
	Secret *ConnectionConfluentSchemaRegistryUsernameSecret `pulumi:"secret"`
	// The username text value.
	Text *string `pulumi:"text"`
}

// ConnectionConfluentSchemaRegistryUsernameInput is an input type that accepts ConnectionConfluentSchemaRegistryUsernameArgs and ConnectionConfluentSchemaRegistryUsernameOutput values.
// You can construct a concrete instance of `ConnectionConfluentSchemaRegistryUsernameInput` via:
//
//	ConnectionConfluentSchemaRegistryUsernameArgs{...}
type ConnectionConfluentSchemaRegistryUsernameInput interface {
	pulumi.Input

	ToConnectionConfluentSchemaRegistryUsernameOutput() ConnectionConfluentSchemaRegistryUsernameOutput
	ToConnectionConfluentSchemaRegistryUsernameOutputWithContext(context.Context) ConnectionConfluentSchemaRegistryUsernameOutput
}

type ConnectionConfluentSchemaRegistryUsernameArgs struct {
	// The username secret value.
	Secret ConnectionConfluentSchemaRegistryUsernameSecretPtrInput `pulumi:"secret"`
	// The username text value.
	Text pulumi.StringPtrInput `pulumi:"text"`
}

func (ConnectionConfluentSchemaRegistryUsernameArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionConfluentSchemaRegistryUsername)(nil)).Elem()
}

func (i ConnectionConfluentSchemaRegistryUsernameArgs) ToConnectionConfluentSchemaRegistryUsernameOutput() ConnectionConfluentSchemaRegistryUsernameOutput {
	return i.ToConnectionConfluentSchemaRegistryUsernameOutputWithContext(context.Background())
}

func (i ConnectionConfluentSchemaRegistryUsernameArgs) ToConnectionConfluentSchemaRegistryUsernameOutputWithContext(ctx context.Context) ConnectionConfluentSchemaRegistryUsernameOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionConfluentSchemaRegistryUsernameOutput)
}

func (i ConnectionConfluentSchemaRegistryUsernameArgs) ToConnectionConfluentSchemaRegistryUsernamePtrOutput() ConnectionConfluentSchemaRegistryUsernamePtrOutput {
	return i.ToConnectionConfluentSchemaRegistryUsernamePtrOutputWithContext(context.Background())
}

func (i ConnectionConfluentSchemaRegistryUsernameArgs) ToConnectionConfluentSchemaRegistryUsernamePtrOutputWithContext(ctx context.Context) ConnectionConfluentSchemaRegistryUsernamePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionConfluentSchemaRegistryUsernameOutput).ToConnectionConfluentSchemaRegistryUsernamePtrOutputWithContext(ctx)
}

// ConnectionConfluentSchemaRegistryUsernamePtrInput is an input type that accepts ConnectionConfluentSchemaRegistryUsernameArgs, ConnectionConfluentSchemaRegistryUsernamePtr and ConnectionConfluentSchemaRegistryUsernamePtrOutput values.
// You can construct a concrete instance of `ConnectionConfluentSchemaRegistryUsernamePtrInput` via:
//
//	        ConnectionConfluentSchemaRegistryUsernameArgs{...}
//
//	or:
//
//	        nil
type ConnectionConfluentSchemaRegistryUsernamePtrInput interface {
	pulumi.Input

	ToConnectionConfluentSchemaRegistryUsernamePtrOutput() ConnectionConfluentSchemaRegistryUsernamePtrOutput
	ToConnectionConfluentSchemaRegistryUsernamePtrOutputWithContext(context.Context) ConnectionConfluentSchemaRegistryUsernamePtrOutput
}

type connectionConfluentSchemaRegistryUsernamePtrType ConnectionConfluentSchemaRegistryUsernameArgs

func ConnectionConfluentSchemaRegistryUsernamePtr(v *ConnectionConfluentSchemaRegistryUsernameArgs) ConnectionConfluentSchemaRegistryUsernamePtrInput {
	return (*connectionConfluentSchemaRegistryUsernamePtrType)(v)
}

func (*connectionConfluentSchemaRegistryUsernamePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionConfluentSchemaRegistryUsername)(nil)).Elem()
}

func (i *connectionConfluentSchemaRegistryUsernamePtrType) ToConnectionConfluentSchemaRegistryUsernamePtrOutput() ConnectionConfluentSchemaRegistryUsernamePtrOutput {
	return i.ToConnectionConfluentSchemaRegistryUsernamePtrOutputWithContext(context.Background())
}

func (i *connectionConfluentSchemaRegistryUsernamePtrType) ToConnectionConfluentSchemaRegistryUsernamePtrOutputWithContext(ctx context.Context) ConnectionConfluentSchemaRegistryUsernamePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionConfluentSchemaRegistryUsernamePtrOutput)
}

type ConnectionConfluentSchemaRegistryUsernameOutput struct{ *pulumi.OutputState }

func (ConnectionConfluentSchemaRegistryUsernameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionConfluentSchemaRegistryUsername)(nil)).Elem()
}

func (o ConnectionConfluentSchemaRegistryUsernameOutput) ToConnectionConfluentSchemaRegistryUsernameOutput() ConnectionConfluentSchemaRegistryUsernameOutput {
	return o
}

func (o ConnectionConfluentSchemaRegistryUsernameOutput) ToConnectionConfluentSchemaRegistryUsernameOutputWithContext(ctx context.Context) ConnectionConfluentSchemaRegistryUsernameOutput {
	return o
}

func (o ConnectionConfluentSchemaRegistryUsernameOutput) ToConnectionConfluentSchemaRegistryUsernamePtrOutput() ConnectionConfluentSchemaRegistryUsernamePtrOutput {
	return o.ToConnectionConfluentSchemaRegistryUsernamePtrOutputWithContext(context.Background())
}

func (o ConnectionConfluentSchemaRegistryUsernameOutput) ToConnectionConfluentSchemaRegistryUsernamePtrOutputWithContext(ctx context.Context) ConnectionConfluentSchemaRegistryUsernamePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionConfluentSchemaRegistryUsername) *ConnectionConfluentSchemaRegistryUsername {
		return &v
	}).(ConnectionConfluentSchemaRegistryUsernamePtrOutput)
}

// The username secret value.
func (o ConnectionConfluentSchemaRegistryUsernameOutput) Secret() ConnectionConfluentSchemaRegistryUsernameSecretPtrOutput {
	return o.ApplyT(func(v ConnectionConfluentSchemaRegistryUsername) *ConnectionConfluentSchemaRegistryUsernameSecret {
		return v.Secret
	}).(ConnectionConfluentSchemaRegistryUsernameSecretPtrOutput)
}

// The username text value.
func (o ConnectionConfluentSchemaRegistryUsernameOutput) Text() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionConfluentSchemaRegistryUsername) *string { return v.Text }).(pulumi.StringPtrOutput)
}

type ConnectionConfluentSchemaRegistryUsernamePtrOutput struct{ *pulumi.OutputState }

func (ConnectionConfluentSchemaRegistryUsernamePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionConfluentSchemaRegistryUsername)(nil)).Elem()
}

func (o ConnectionConfluentSchemaRegistryUsernamePtrOutput) ToConnectionConfluentSchemaRegistryUsernamePtrOutput() ConnectionConfluentSchemaRegistryUsernamePtrOutput {
	return o
}

func (o ConnectionConfluentSchemaRegistryUsernamePtrOutput) ToConnectionConfluentSchemaRegistryUsernamePtrOutputWithContext(ctx context.Context) ConnectionConfluentSchemaRegistryUsernamePtrOutput {
	return o
}

func (o ConnectionConfluentSchemaRegistryUsernamePtrOutput) Elem() ConnectionConfluentSchemaRegistryUsernameOutput {
	return o.ApplyT(func(v *ConnectionConfluentSchemaRegistryUsername) ConnectionConfluentSchemaRegistryUsername {
		if v != nil {
			return *v
		}
		var ret ConnectionConfluentSchemaRegistryUsername
		return ret
	}).(ConnectionConfluentSchemaRegistryUsernameOutput)
}

// The username secret value.
func (o ConnectionConfluentSchemaRegistryUsernamePtrOutput) Secret() ConnectionConfluentSchemaRegistryUsernameSecretPtrOutput {
	return o.ApplyT(func(v *ConnectionConfluentSchemaRegistryUsername) *ConnectionConfluentSchemaRegistryUsernameSecret {
		if v == nil {
			return nil
		}
		return v.Secret
	}).(ConnectionConfluentSchemaRegistryUsernameSecretPtrOutput)
}

// The username text value.
func (o ConnectionConfluentSchemaRegistryUsernamePtrOutput) Text() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionConfluentSchemaRegistryUsername) *string {
		if v == nil {
			return nil
		}
		return v.Text
	}).(pulumi.StringPtrOutput)
}

type ConnectionConfluentSchemaRegistryUsernameSecret struct {
	// The identifier for the connection database.
	DatabaseName *string `pulumi:"databaseName"`
	// The identifier for the connection.
	Name string `pulumi:"name"`
	// The identifier for the connection schema.
	SchemaName *string `pulumi:"schemaName"`
}

// ConnectionConfluentSchemaRegistryUsernameSecretInput is an input type that accepts ConnectionConfluentSchemaRegistryUsernameSecretArgs and ConnectionConfluentSchemaRegistryUsernameSecretOutput values.
// You can construct a concrete instance of `ConnectionConfluentSchemaRegistryUsernameSecretInput` via:
//
//	ConnectionConfluentSchemaRegistryUsernameSecretArgs{...}
type ConnectionConfluentSchemaRegistryUsernameSecretInput interface {
	pulumi.Input

	ToConnectionConfluentSchemaRegistryUsernameSecretOutput() ConnectionConfluentSchemaRegistryUsernameSecretOutput
	ToConnectionConfluentSchemaRegistryUsernameSecretOutputWithContext(context.Context) ConnectionConfluentSchemaRegistryUsernameSecretOutput
}

type ConnectionConfluentSchemaRegistryUsernameSecretArgs struct {
	// The identifier for the connection database.
	DatabaseName pulumi.StringPtrInput `pulumi:"databaseName"`
	// The identifier for the connection.
	Name pulumi.StringInput `pulumi:"name"`
	// The identifier for the connection schema.
	SchemaName pulumi.StringPtrInput `pulumi:"schemaName"`
}

func (ConnectionConfluentSchemaRegistryUsernameSecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionConfluentSchemaRegistryUsernameSecret)(nil)).Elem()
}

func (i ConnectionConfluentSchemaRegistryUsernameSecretArgs) ToConnectionConfluentSchemaRegistryUsernameSecretOutput() ConnectionConfluentSchemaRegistryUsernameSecretOutput {
	return i.ToConnectionConfluentSchemaRegistryUsernameSecretOutputWithContext(context.Background())
}

func (i ConnectionConfluentSchemaRegistryUsernameSecretArgs) ToConnectionConfluentSchemaRegistryUsernameSecretOutputWithContext(ctx context.Context) ConnectionConfluentSchemaRegistryUsernameSecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionConfluentSchemaRegistryUsernameSecretOutput)
}

func (i ConnectionConfluentSchemaRegistryUsernameSecretArgs) ToConnectionConfluentSchemaRegistryUsernameSecretPtrOutput() ConnectionConfluentSchemaRegistryUsernameSecretPtrOutput {
	return i.ToConnectionConfluentSchemaRegistryUsernameSecretPtrOutputWithContext(context.Background())
}

func (i ConnectionConfluentSchemaRegistryUsernameSecretArgs) ToConnectionConfluentSchemaRegistryUsernameSecretPtrOutputWithContext(ctx context.Context) ConnectionConfluentSchemaRegistryUsernameSecretPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionConfluentSchemaRegistryUsernameSecretOutput).ToConnectionConfluentSchemaRegistryUsernameSecretPtrOutputWithContext(ctx)
}

// ConnectionConfluentSchemaRegistryUsernameSecretPtrInput is an input type that accepts ConnectionConfluentSchemaRegistryUsernameSecretArgs, ConnectionConfluentSchemaRegistryUsernameSecretPtr and ConnectionConfluentSchemaRegistryUsernameSecretPtrOutput values.
// You can construct a concrete instance of `ConnectionConfluentSchemaRegistryUsernameSecretPtrInput` via:
//
//	        ConnectionConfluentSchemaRegistryUsernameSecretArgs{...}
//
//	or:
//
//	        nil
type ConnectionConfluentSchemaRegistryUsernameSecretPtrInput interface {
	pulumi.Input

	ToConnectionConfluentSchemaRegistryUsernameSecretPtrOutput() ConnectionConfluentSchemaRegistryUsernameSecretPtrOutput
	ToConnectionConfluentSchemaRegistryUsernameSecretPtrOutputWithContext(context.Context) ConnectionConfluentSchemaRegistryUsernameSecretPtrOutput
}

type connectionConfluentSchemaRegistryUsernameSecretPtrType ConnectionConfluentSchemaRegistryUsernameSecretArgs

func ConnectionConfluentSchemaRegistryUsernameSecretPtr(v *ConnectionConfluentSchemaRegistryUsernameSecretArgs) ConnectionConfluentSchemaRegistryUsernameSecretPtrInput {
	return (*connectionConfluentSchemaRegistryUsernameSecretPtrType)(v)
}

func (*connectionConfluentSchemaRegistryUsernameSecretPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionConfluentSchemaRegistryUsernameSecret)(nil)).Elem()
}

func (i *connectionConfluentSchemaRegistryUsernameSecretPtrType) ToConnectionConfluentSchemaRegistryUsernameSecretPtrOutput() ConnectionConfluentSchemaRegistryUsernameSecretPtrOutput {
	return i.ToConnectionConfluentSchemaRegistryUsernameSecretPtrOutputWithContext(context.Background())
}

func (i *connectionConfluentSchemaRegistryUsernameSecretPtrType) ToConnectionConfluentSchemaRegistryUsernameSecretPtrOutputWithContext(ctx context.Context) ConnectionConfluentSchemaRegistryUsernameSecretPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionConfluentSchemaRegistryUsernameSecretPtrOutput)
}

type ConnectionConfluentSchemaRegistryUsernameSecretOutput struct{ *pulumi.OutputState }

func (ConnectionConfluentSchemaRegistryUsernameSecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionConfluentSchemaRegistryUsernameSecret)(nil)).Elem()
}

func (o ConnectionConfluentSchemaRegistryUsernameSecretOutput) ToConnectionConfluentSchemaRegistryUsernameSecretOutput() ConnectionConfluentSchemaRegistryUsernameSecretOutput {
	return o
}

func (o ConnectionConfluentSchemaRegistryUsernameSecretOutput) ToConnectionConfluentSchemaRegistryUsernameSecretOutputWithContext(ctx context.Context) ConnectionConfluentSchemaRegistryUsernameSecretOutput {
	return o
}

func (o ConnectionConfluentSchemaRegistryUsernameSecretOutput) ToConnectionConfluentSchemaRegistryUsernameSecretPtrOutput() ConnectionConfluentSchemaRegistryUsernameSecretPtrOutput {
	return o.ToConnectionConfluentSchemaRegistryUsernameSecretPtrOutputWithContext(context.Background())
}

func (o ConnectionConfluentSchemaRegistryUsernameSecretOutput) ToConnectionConfluentSchemaRegistryUsernameSecretPtrOutputWithContext(ctx context.Context) ConnectionConfluentSchemaRegistryUsernameSecretPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionConfluentSchemaRegistryUsernameSecret) *ConnectionConfluentSchemaRegistryUsernameSecret {
		return &v
	}).(ConnectionConfluentSchemaRegistryUsernameSecretPtrOutput)
}

// The identifier for the connection database.
func (o ConnectionConfluentSchemaRegistryUsernameSecretOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionConfluentSchemaRegistryUsernameSecret) *string { return v.DatabaseName }).(pulumi.StringPtrOutput)
}

// The identifier for the connection.
func (o ConnectionConfluentSchemaRegistryUsernameSecretOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionConfluentSchemaRegistryUsernameSecret) string { return v.Name }).(pulumi.StringOutput)
}

// The identifier for the connection schema.
func (o ConnectionConfluentSchemaRegistryUsernameSecretOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionConfluentSchemaRegistryUsernameSecret) *string { return v.SchemaName }).(pulumi.StringPtrOutput)
}

type ConnectionConfluentSchemaRegistryUsernameSecretPtrOutput struct{ *pulumi.OutputState }

func (ConnectionConfluentSchemaRegistryUsernameSecretPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionConfluentSchemaRegistryUsernameSecret)(nil)).Elem()
}

func (o ConnectionConfluentSchemaRegistryUsernameSecretPtrOutput) ToConnectionConfluentSchemaRegistryUsernameSecretPtrOutput() ConnectionConfluentSchemaRegistryUsernameSecretPtrOutput {
	return o
}

func (o ConnectionConfluentSchemaRegistryUsernameSecretPtrOutput) ToConnectionConfluentSchemaRegistryUsernameSecretPtrOutputWithContext(ctx context.Context) ConnectionConfluentSchemaRegistryUsernameSecretPtrOutput {
	return o
}

func (o ConnectionConfluentSchemaRegistryUsernameSecretPtrOutput) Elem() ConnectionConfluentSchemaRegistryUsernameSecretOutput {
	return o.ApplyT(func(v *ConnectionConfluentSchemaRegistryUsernameSecret) ConnectionConfluentSchemaRegistryUsernameSecret {
		if v != nil {
			return *v
		}
		var ret ConnectionConfluentSchemaRegistryUsernameSecret
		return ret
	}).(ConnectionConfluentSchemaRegistryUsernameSecretOutput)
}

// The identifier for the connection database.
func (o ConnectionConfluentSchemaRegistryUsernameSecretPtrOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionConfluentSchemaRegistryUsernameSecret) *string {
		if v == nil {
			return nil
		}
		return v.DatabaseName
	}).(pulumi.StringPtrOutput)
}

// The identifier for the connection.
func (o ConnectionConfluentSchemaRegistryUsernameSecretPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionConfluentSchemaRegistryUsernameSecret) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The identifier for the connection schema.
func (o ConnectionConfluentSchemaRegistryUsernameSecretPtrOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionConfluentSchemaRegistryUsernameSecret) *string {
		if v == nil {
			return nil
		}
		return v.SchemaName
	}).(pulumi.StringPtrOutput)
}

type ConnectionKafkaKafkaBroker struct {
	// The availability zone of the Kafka broker.
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// The Kafka broker, in the form of `host:port`.
	Broker string `pulumi:"broker"`
	// The AWS PrivateLink connection name in Materialize.
	PrivatelinkConnection *ConnectionKafkaKafkaBrokerPrivatelinkConnection `pulumi:"privatelinkConnection"`
	// The port of the target group associated with the Kafka broker.
	TargetGroupPort *int `pulumi:"targetGroupPort"`
}

// ConnectionKafkaKafkaBrokerInput is an input type that accepts ConnectionKafkaKafkaBrokerArgs and ConnectionKafkaKafkaBrokerOutput values.
// You can construct a concrete instance of `ConnectionKafkaKafkaBrokerInput` via:
//
//	ConnectionKafkaKafkaBrokerArgs{...}
type ConnectionKafkaKafkaBrokerInput interface {
	pulumi.Input

	ToConnectionKafkaKafkaBrokerOutput() ConnectionKafkaKafkaBrokerOutput
	ToConnectionKafkaKafkaBrokerOutputWithContext(context.Context) ConnectionKafkaKafkaBrokerOutput
}

type ConnectionKafkaKafkaBrokerArgs struct {
	// The availability zone of the Kafka broker.
	AvailabilityZone pulumi.StringPtrInput `pulumi:"availabilityZone"`
	// The Kafka broker, in the form of `host:port`.
	Broker pulumi.StringInput `pulumi:"broker"`
	// The AWS PrivateLink connection name in Materialize.
	PrivatelinkConnection ConnectionKafkaKafkaBrokerPrivatelinkConnectionPtrInput `pulumi:"privatelinkConnection"`
	// The port of the target group associated with the Kafka broker.
	TargetGroupPort pulumi.IntPtrInput `pulumi:"targetGroupPort"`
}

func (ConnectionKafkaKafkaBrokerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionKafkaKafkaBroker)(nil)).Elem()
}

func (i ConnectionKafkaKafkaBrokerArgs) ToConnectionKafkaKafkaBrokerOutput() ConnectionKafkaKafkaBrokerOutput {
	return i.ToConnectionKafkaKafkaBrokerOutputWithContext(context.Background())
}

func (i ConnectionKafkaKafkaBrokerArgs) ToConnectionKafkaKafkaBrokerOutputWithContext(ctx context.Context) ConnectionKafkaKafkaBrokerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionKafkaKafkaBrokerOutput)
}

// ConnectionKafkaKafkaBrokerArrayInput is an input type that accepts ConnectionKafkaKafkaBrokerArray and ConnectionKafkaKafkaBrokerArrayOutput values.
// You can construct a concrete instance of `ConnectionKafkaKafkaBrokerArrayInput` via:
//
//	ConnectionKafkaKafkaBrokerArray{ ConnectionKafkaKafkaBrokerArgs{...} }
type ConnectionKafkaKafkaBrokerArrayInput interface {
	pulumi.Input

	ToConnectionKafkaKafkaBrokerArrayOutput() ConnectionKafkaKafkaBrokerArrayOutput
	ToConnectionKafkaKafkaBrokerArrayOutputWithContext(context.Context) ConnectionKafkaKafkaBrokerArrayOutput
}

type ConnectionKafkaKafkaBrokerArray []ConnectionKafkaKafkaBrokerInput

func (ConnectionKafkaKafkaBrokerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectionKafkaKafkaBroker)(nil)).Elem()
}

func (i ConnectionKafkaKafkaBrokerArray) ToConnectionKafkaKafkaBrokerArrayOutput() ConnectionKafkaKafkaBrokerArrayOutput {
	return i.ToConnectionKafkaKafkaBrokerArrayOutputWithContext(context.Background())
}

func (i ConnectionKafkaKafkaBrokerArray) ToConnectionKafkaKafkaBrokerArrayOutputWithContext(ctx context.Context) ConnectionKafkaKafkaBrokerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionKafkaKafkaBrokerArrayOutput)
}

type ConnectionKafkaKafkaBrokerOutput struct{ *pulumi.OutputState }

func (ConnectionKafkaKafkaBrokerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionKafkaKafkaBroker)(nil)).Elem()
}

func (o ConnectionKafkaKafkaBrokerOutput) ToConnectionKafkaKafkaBrokerOutput() ConnectionKafkaKafkaBrokerOutput {
	return o
}

func (o ConnectionKafkaKafkaBrokerOutput) ToConnectionKafkaKafkaBrokerOutputWithContext(ctx context.Context) ConnectionKafkaKafkaBrokerOutput {
	return o
}

// The availability zone of the Kafka broker.
func (o ConnectionKafkaKafkaBrokerOutput) AvailabilityZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionKafkaKafkaBroker) *string { return v.AvailabilityZone }).(pulumi.StringPtrOutput)
}

// The Kafka broker, in the form of `host:port`.
func (o ConnectionKafkaKafkaBrokerOutput) Broker() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionKafkaKafkaBroker) string { return v.Broker }).(pulumi.StringOutput)
}

// The AWS PrivateLink connection name in Materialize.
func (o ConnectionKafkaKafkaBrokerOutput) PrivatelinkConnection() ConnectionKafkaKafkaBrokerPrivatelinkConnectionPtrOutput {
	return o.ApplyT(func(v ConnectionKafkaKafkaBroker) *ConnectionKafkaKafkaBrokerPrivatelinkConnection {
		return v.PrivatelinkConnection
	}).(ConnectionKafkaKafkaBrokerPrivatelinkConnectionPtrOutput)
}

// The port of the target group associated with the Kafka broker.
func (o ConnectionKafkaKafkaBrokerOutput) TargetGroupPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ConnectionKafkaKafkaBroker) *int { return v.TargetGroupPort }).(pulumi.IntPtrOutput)
}

type ConnectionKafkaKafkaBrokerArrayOutput struct{ *pulumi.OutputState }

func (ConnectionKafkaKafkaBrokerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectionKafkaKafkaBroker)(nil)).Elem()
}

func (o ConnectionKafkaKafkaBrokerArrayOutput) ToConnectionKafkaKafkaBrokerArrayOutput() ConnectionKafkaKafkaBrokerArrayOutput {
	return o
}

func (o ConnectionKafkaKafkaBrokerArrayOutput) ToConnectionKafkaKafkaBrokerArrayOutputWithContext(ctx context.Context) ConnectionKafkaKafkaBrokerArrayOutput {
	return o
}

func (o ConnectionKafkaKafkaBrokerArrayOutput) Index(i pulumi.IntInput) ConnectionKafkaKafkaBrokerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConnectionKafkaKafkaBroker {
		return vs[0].([]ConnectionKafkaKafkaBroker)[vs[1].(int)]
	}).(ConnectionKafkaKafkaBrokerOutput)
}

type ConnectionKafkaKafkaBrokerPrivatelinkConnection struct {
	// The identifier for the connection database.
	DatabaseName *string `pulumi:"databaseName"`
	// The identifier for the connection.
	Name string `pulumi:"name"`
	// The identifier for the connection schema.
	SchemaName *string `pulumi:"schemaName"`
}

// ConnectionKafkaKafkaBrokerPrivatelinkConnectionInput is an input type that accepts ConnectionKafkaKafkaBrokerPrivatelinkConnectionArgs and ConnectionKafkaKafkaBrokerPrivatelinkConnectionOutput values.
// You can construct a concrete instance of `ConnectionKafkaKafkaBrokerPrivatelinkConnectionInput` via:
//
//	ConnectionKafkaKafkaBrokerPrivatelinkConnectionArgs{...}
type ConnectionKafkaKafkaBrokerPrivatelinkConnectionInput interface {
	pulumi.Input

	ToConnectionKafkaKafkaBrokerPrivatelinkConnectionOutput() ConnectionKafkaKafkaBrokerPrivatelinkConnectionOutput
	ToConnectionKafkaKafkaBrokerPrivatelinkConnectionOutputWithContext(context.Context) ConnectionKafkaKafkaBrokerPrivatelinkConnectionOutput
}

type ConnectionKafkaKafkaBrokerPrivatelinkConnectionArgs struct {
	// The identifier for the connection database.
	DatabaseName pulumi.StringPtrInput `pulumi:"databaseName"`
	// The identifier for the connection.
	Name pulumi.StringInput `pulumi:"name"`
	// The identifier for the connection schema.
	SchemaName pulumi.StringPtrInput `pulumi:"schemaName"`
}

func (ConnectionKafkaKafkaBrokerPrivatelinkConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionKafkaKafkaBrokerPrivatelinkConnection)(nil)).Elem()
}

func (i ConnectionKafkaKafkaBrokerPrivatelinkConnectionArgs) ToConnectionKafkaKafkaBrokerPrivatelinkConnectionOutput() ConnectionKafkaKafkaBrokerPrivatelinkConnectionOutput {
	return i.ToConnectionKafkaKafkaBrokerPrivatelinkConnectionOutputWithContext(context.Background())
}

func (i ConnectionKafkaKafkaBrokerPrivatelinkConnectionArgs) ToConnectionKafkaKafkaBrokerPrivatelinkConnectionOutputWithContext(ctx context.Context) ConnectionKafkaKafkaBrokerPrivatelinkConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionKafkaKafkaBrokerPrivatelinkConnectionOutput)
}

func (i ConnectionKafkaKafkaBrokerPrivatelinkConnectionArgs) ToConnectionKafkaKafkaBrokerPrivatelinkConnectionPtrOutput() ConnectionKafkaKafkaBrokerPrivatelinkConnectionPtrOutput {
	return i.ToConnectionKafkaKafkaBrokerPrivatelinkConnectionPtrOutputWithContext(context.Background())
}

func (i ConnectionKafkaKafkaBrokerPrivatelinkConnectionArgs) ToConnectionKafkaKafkaBrokerPrivatelinkConnectionPtrOutputWithContext(ctx context.Context) ConnectionKafkaKafkaBrokerPrivatelinkConnectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionKafkaKafkaBrokerPrivatelinkConnectionOutput).ToConnectionKafkaKafkaBrokerPrivatelinkConnectionPtrOutputWithContext(ctx)
}

// ConnectionKafkaKafkaBrokerPrivatelinkConnectionPtrInput is an input type that accepts ConnectionKafkaKafkaBrokerPrivatelinkConnectionArgs, ConnectionKafkaKafkaBrokerPrivatelinkConnectionPtr and ConnectionKafkaKafkaBrokerPrivatelinkConnectionPtrOutput values.
// You can construct a concrete instance of `ConnectionKafkaKafkaBrokerPrivatelinkConnectionPtrInput` via:
//
//	        ConnectionKafkaKafkaBrokerPrivatelinkConnectionArgs{...}
//
//	or:
//
//	        nil
type ConnectionKafkaKafkaBrokerPrivatelinkConnectionPtrInput interface {
	pulumi.Input

	ToConnectionKafkaKafkaBrokerPrivatelinkConnectionPtrOutput() ConnectionKafkaKafkaBrokerPrivatelinkConnectionPtrOutput
	ToConnectionKafkaKafkaBrokerPrivatelinkConnectionPtrOutputWithContext(context.Context) ConnectionKafkaKafkaBrokerPrivatelinkConnectionPtrOutput
}

type connectionKafkaKafkaBrokerPrivatelinkConnectionPtrType ConnectionKafkaKafkaBrokerPrivatelinkConnectionArgs

func ConnectionKafkaKafkaBrokerPrivatelinkConnectionPtr(v *ConnectionKafkaKafkaBrokerPrivatelinkConnectionArgs) ConnectionKafkaKafkaBrokerPrivatelinkConnectionPtrInput {
	return (*connectionKafkaKafkaBrokerPrivatelinkConnectionPtrType)(v)
}

func (*connectionKafkaKafkaBrokerPrivatelinkConnectionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionKafkaKafkaBrokerPrivatelinkConnection)(nil)).Elem()
}

func (i *connectionKafkaKafkaBrokerPrivatelinkConnectionPtrType) ToConnectionKafkaKafkaBrokerPrivatelinkConnectionPtrOutput() ConnectionKafkaKafkaBrokerPrivatelinkConnectionPtrOutput {
	return i.ToConnectionKafkaKafkaBrokerPrivatelinkConnectionPtrOutputWithContext(context.Background())
}

func (i *connectionKafkaKafkaBrokerPrivatelinkConnectionPtrType) ToConnectionKafkaKafkaBrokerPrivatelinkConnectionPtrOutputWithContext(ctx context.Context) ConnectionKafkaKafkaBrokerPrivatelinkConnectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionKafkaKafkaBrokerPrivatelinkConnectionPtrOutput)
}

type ConnectionKafkaKafkaBrokerPrivatelinkConnectionOutput struct{ *pulumi.OutputState }

func (ConnectionKafkaKafkaBrokerPrivatelinkConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionKafkaKafkaBrokerPrivatelinkConnection)(nil)).Elem()
}

func (o ConnectionKafkaKafkaBrokerPrivatelinkConnectionOutput) ToConnectionKafkaKafkaBrokerPrivatelinkConnectionOutput() ConnectionKafkaKafkaBrokerPrivatelinkConnectionOutput {
	return o
}

func (o ConnectionKafkaKafkaBrokerPrivatelinkConnectionOutput) ToConnectionKafkaKafkaBrokerPrivatelinkConnectionOutputWithContext(ctx context.Context) ConnectionKafkaKafkaBrokerPrivatelinkConnectionOutput {
	return o
}

func (o ConnectionKafkaKafkaBrokerPrivatelinkConnectionOutput) ToConnectionKafkaKafkaBrokerPrivatelinkConnectionPtrOutput() ConnectionKafkaKafkaBrokerPrivatelinkConnectionPtrOutput {
	return o.ToConnectionKafkaKafkaBrokerPrivatelinkConnectionPtrOutputWithContext(context.Background())
}

func (o ConnectionKafkaKafkaBrokerPrivatelinkConnectionOutput) ToConnectionKafkaKafkaBrokerPrivatelinkConnectionPtrOutputWithContext(ctx context.Context) ConnectionKafkaKafkaBrokerPrivatelinkConnectionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionKafkaKafkaBrokerPrivatelinkConnection) *ConnectionKafkaKafkaBrokerPrivatelinkConnection {
		return &v
	}).(ConnectionKafkaKafkaBrokerPrivatelinkConnectionPtrOutput)
}

// The identifier for the connection database.
func (o ConnectionKafkaKafkaBrokerPrivatelinkConnectionOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionKafkaKafkaBrokerPrivatelinkConnection) *string { return v.DatabaseName }).(pulumi.StringPtrOutput)
}

// The identifier for the connection.
func (o ConnectionKafkaKafkaBrokerPrivatelinkConnectionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionKafkaKafkaBrokerPrivatelinkConnection) string { return v.Name }).(pulumi.StringOutput)
}

// The identifier for the connection schema.
func (o ConnectionKafkaKafkaBrokerPrivatelinkConnectionOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionKafkaKafkaBrokerPrivatelinkConnection) *string { return v.SchemaName }).(pulumi.StringPtrOutput)
}

type ConnectionKafkaKafkaBrokerPrivatelinkConnectionPtrOutput struct{ *pulumi.OutputState }

func (ConnectionKafkaKafkaBrokerPrivatelinkConnectionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionKafkaKafkaBrokerPrivatelinkConnection)(nil)).Elem()
}

func (o ConnectionKafkaKafkaBrokerPrivatelinkConnectionPtrOutput) ToConnectionKafkaKafkaBrokerPrivatelinkConnectionPtrOutput() ConnectionKafkaKafkaBrokerPrivatelinkConnectionPtrOutput {
	return o
}

func (o ConnectionKafkaKafkaBrokerPrivatelinkConnectionPtrOutput) ToConnectionKafkaKafkaBrokerPrivatelinkConnectionPtrOutputWithContext(ctx context.Context) ConnectionKafkaKafkaBrokerPrivatelinkConnectionPtrOutput {
	return o
}

func (o ConnectionKafkaKafkaBrokerPrivatelinkConnectionPtrOutput) Elem() ConnectionKafkaKafkaBrokerPrivatelinkConnectionOutput {
	return o.ApplyT(func(v *ConnectionKafkaKafkaBrokerPrivatelinkConnection) ConnectionKafkaKafkaBrokerPrivatelinkConnection {
		if v != nil {
			return *v
		}
		var ret ConnectionKafkaKafkaBrokerPrivatelinkConnection
		return ret
	}).(ConnectionKafkaKafkaBrokerPrivatelinkConnectionOutput)
}

// The identifier for the connection database.
func (o ConnectionKafkaKafkaBrokerPrivatelinkConnectionPtrOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionKafkaKafkaBrokerPrivatelinkConnection) *string {
		if v == nil {
			return nil
		}
		return v.DatabaseName
	}).(pulumi.StringPtrOutput)
}

// The identifier for the connection.
func (o ConnectionKafkaKafkaBrokerPrivatelinkConnectionPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionKafkaKafkaBrokerPrivatelinkConnection) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The identifier for the connection schema.
func (o ConnectionKafkaKafkaBrokerPrivatelinkConnectionPtrOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionKafkaKafkaBrokerPrivatelinkConnection) *string {
		if v == nil {
			return nil
		}
		return v.SchemaName
	}).(pulumi.StringPtrOutput)
}

type ConnectionKafkaSaslPassword struct {
	// The saslPassword database name.
	DatabaseName *string `pulumi:"databaseName"`
	// The saslPassword name.
	Name string `pulumi:"name"`
	// The saslPassword schema name.
	SchemaName *string `pulumi:"schemaName"`
}

// ConnectionKafkaSaslPasswordInput is an input type that accepts ConnectionKafkaSaslPasswordArgs and ConnectionKafkaSaslPasswordOutput values.
// You can construct a concrete instance of `ConnectionKafkaSaslPasswordInput` via:
//
//	ConnectionKafkaSaslPasswordArgs{...}
type ConnectionKafkaSaslPasswordInput interface {
	pulumi.Input

	ToConnectionKafkaSaslPasswordOutput() ConnectionKafkaSaslPasswordOutput
	ToConnectionKafkaSaslPasswordOutputWithContext(context.Context) ConnectionKafkaSaslPasswordOutput
}

type ConnectionKafkaSaslPasswordArgs struct {
	// The saslPassword database name.
	DatabaseName pulumi.StringPtrInput `pulumi:"databaseName"`
	// The saslPassword name.
	Name pulumi.StringInput `pulumi:"name"`
	// The saslPassword schema name.
	SchemaName pulumi.StringPtrInput `pulumi:"schemaName"`
}

func (ConnectionKafkaSaslPasswordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionKafkaSaslPassword)(nil)).Elem()
}

func (i ConnectionKafkaSaslPasswordArgs) ToConnectionKafkaSaslPasswordOutput() ConnectionKafkaSaslPasswordOutput {
	return i.ToConnectionKafkaSaslPasswordOutputWithContext(context.Background())
}

func (i ConnectionKafkaSaslPasswordArgs) ToConnectionKafkaSaslPasswordOutputWithContext(ctx context.Context) ConnectionKafkaSaslPasswordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionKafkaSaslPasswordOutput)
}

func (i ConnectionKafkaSaslPasswordArgs) ToConnectionKafkaSaslPasswordPtrOutput() ConnectionKafkaSaslPasswordPtrOutput {
	return i.ToConnectionKafkaSaslPasswordPtrOutputWithContext(context.Background())
}

func (i ConnectionKafkaSaslPasswordArgs) ToConnectionKafkaSaslPasswordPtrOutputWithContext(ctx context.Context) ConnectionKafkaSaslPasswordPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionKafkaSaslPasswordOutput).ToConnectionKafkaSaslPasswordPtrOutputWithContext(ctx)
}

// ConnectionKafkaSaslPasswordPtrInput is an input type that accepts ConnectionKafkaSaslPasswordArgs, ConnectionKafkaSaslPasswordPtr and ConnectionKafkaSaslPasswordPtrOutput values.
// You can construct a concrete instance of `ConnectionKafkaSaslPasswordPtrInput` via:
//
//	        ConnectionKafkaSaslPasswordArgs{...}
//
//	or:
//
//	        nil
type ConnectionKafkaSaslPasswordPtrInput interface {
	pulumi.Input

	ToConnectionKafkaSaslPasswordPtrOutput() ConnectionKafkaSaslPasswordPtrOutput
	ToConnectionKafkaSaslPasswordPtrOutputWithContext(context.Context) ConnectionKafkaSaslPasswordPtrOutput
}

type connectionKafkaSaslPasswordPtrType ConnectionKafkaSaslPasswordArgs

func ConnectionKafkaSaslPasswordPtr(v *ConnectionKafkaSaslPasswordArgs) ConnectionKafkaSaslPasswordPtrInput {
	return (*connectionKafkaSaslPasswordPtrType)(v)
}

func (*connectionKafkaSaslPasswordPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionKafkaSaslPassword)(nil)).Elem()
}

func (i *connectionKafkaSaslPasswordPtrType) ToConnectionKafkaSaslPasswordPtrOutput() ConnectionKafkaSaslPasswordPtrOutput {
	return i.ToConnectionKafkaSaslPasswordPtrOutputWithContext(context.Background())
}

func (i *connectionKafkaSaslPasswordPtrType) ToConnectionKafkaSaslPasswordPtrOutputWithContext(ctx context.Context) ConnectionKafkaSaslPasswordPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionKafkaSaslPasswordPtrOutput)
}

type ConnectionKafkaSaslPasswordOutput struct{ *pulumi.OutputState }

func (ConnectionKafkaSaslPasswordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionKafkaSaslPassword)(nil)).Elem()
}

func (o ConnectionKafkaSaslPasswordOutput) ToConnectionKafkaSaslPasswordOutput() ConnectionKafkaSaslPasswordOutput {
	return o
}

func (o ConnectionKafkaSaslPasswordOutput) ToConnectionKafkaSaslPasswordOutputWithContext(ctx context.Context) ConnectionKafkaSaslPasswordOutput {
	return o
}

func (o ConnectionKafkaSaslPasswordOutput) ToConnectionKafkaSaslPasswordPtrOutput() ConnectionKafkaSaslPasswordPtrOutput {
	return o.ToConnectionKafkaSaslPasswordPtrOutputWithContext(context.Background())
}

func (o ConnectionKafkaSaslPasswordOutput) ToConnectionKafkaSaslPasswordPtrOutputWithContext(ctx context.Context) ConnectionKafkaSaslPasswordPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionKafkaSaslPassword) *ConnectionKafkaSaslPassword {
		return &v
	}).(ConnectionKafkaSaslPasswordPtrOutput)
}

// The saslPassword database name.
func (o ConnectionKafkaSaslPasswordOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionKafkaSaslPassword) *string { return v.DatabaseName }).(pulumi.StringPtrOutput)
}

// The saslPassword name.
func (o ConnectionKafkaSaslPasswordOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionKafkaSaslPassword) string { return v.Name }).(pulumi.StringOutput)
}

// The saslPassword schema name.
func (o ConnectionKafkaSaslPasswordOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionKafkaSaslPassword) *string { return v.SchemaName }).(pulumi.StringPtrOutput)
}

type ConnectionKafkaSaslPasswordPtrOutput struct{ *pulumi.OutputState }

func (ConnectionKafkaSaslPasswordPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionKafkaSaslPassword)(nil)).Elem()
}

func (o ConnectionKafkaSaslPasswordPtrOutput) ToConnectionKafkaSaslPasswordPtrOutput() ConnectionKafkaSaslPasswordPtrOutput {
	return o
}

func (o ConnectionKafkaSaslPasswordPtrOutput) ToConnectionKafkaSaslPasswordPtrOutputWithContext(ctx context.Context) ConnectionKafkaSaslPasswordPtrOutput {
	return o
}

func (o ConnectionKafkaSaslPasswordPtrOutput) Elem() ConnectionKafkaSaslPasswordOutput {
	return o.ApplyT(func(v *ConnectionKafkaSaslPassword) ConnectionKafkaSaslPassword {
		if v != nil {
			return *v
		}
		var ret ConnectionKafkaSaslPassword
		return ret
	}).(ConnectionKafkaSaslPasswordOutput)
}

// The saslPassword database name.
func (o ConnectionKafkaSaslPasswordPtrOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionKafkaSaslPassword) *string {
		if v == nil {
			return nil
		}
		return v.DatabaseName
	}).(pulumi.StringPtrOutput)
}

// The saslPassword name.
func (o ConnectionKafkaSaslPasswordPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionKafkaSaslPassword) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The saslPassword schema name.
func (o ConnectionKafkaSaslPasswordPtrOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionKafkaSaslPassword) *string {
		if v == nil {
			return nil
		}
		return v.SchemaName
	}).(pulumi.StringPtrOutput)
}

type ConnectionKafkaSaslUsername struct {
	// The sasl*username secret value.
	Secret *ConnectionKafkaSaslUsernameSecret `pulumi:"secret"`
	// The saslUsername text value.
	Text *string `pulumi:"text"`
}

// ConnectionKafkaSaslUsernameInput is an input type that accepts ConnectionKafkaSaslUsernameArgs and ConnectionKafkaSaslUsernameOutput values.
// You can construct a concrete instance of `ConnectionKafkaSaslUsernameInput` via:
//
//	ConnectionKafkaSaslUsernameArgs{...}
type ConnectionKafkaSaslUsernameInput interface {
	pulumi.Input

	ToConnectionKafkaSaslUsernameOutput() ConnectionKafkaSaslUsernameOutput
	ToConnectionKafkaSaslUsernameOutputWithContext(context.Context) ConnectionKafkaSaslUsernameOutput
}

type ConnectionKafkaSaslUsernameArgs struct {
	// The sasl*username secret value.
	Secret ConnectionKafkaSaslUsernameSecretPtrInput `pulumi:"secret"`
	// The saslUsername text value.
	Text pulumi.StringPtrInput `pulumi:"text"`
}

func (ConnectionKafkaSaslUsernameArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionKafkaSaslUsername)(nil)).Elem()
}

func (i ConnectionKafkaSaslUsernameArgs) ToConnectionKafkaSaslUsernameOutput() ConnectionKafkaSaslUsernameOutput {
	return i.ToConnectionKafkaSaslUsernameOutputWithContext(context.Background())
}

func (i ConnectionKafkaSaslUsernameArgs) ToConnectionKafkaSaslUsernameOutputWithContext(ctx context.Context) ConnectionKafkaSaslUsernameOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionKafkaSaslUsernameOutput)
}

func (i ConnectionKafkaSaslUsernameArgs) ToConnectionKafkaSaslUsernamePtrOutput() ConnectionKafkaSaslUsernamePtrOutput {
	return i.ToConnectionKafkaSaslUsernamePtrOutputWithContext(context.Background())
}

func (i ConnectionKafkaSaslUsernameArgs) ToConnectionKafkaSaslUsernamePtrOutputWithContext(ctx context.Context) ConnectionKafkaSaslUsernamePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionKafkaSaslUsernameOutput).ToConnectionKafkaSaslUsernamePtrOutputWithContext(ctx)
}

// ConnectionKafkaSaslUsernamePtrInput is an input type that accepts ConnectionKafkaSaslUsernameArgs, ConnectionKafkaSaslUsernamePtr and ConnectionKafkaSaslUsernamePtrOutput values.
// You can construct a concrete instance of `ConnectionKafkaSaslUsernamePtrInput` via:
//
//	        ConnectionKafkaSaslUsernameArgs{...}
//
//	or:
//
//	        nil
type ConnectionKafkaSaslUsernamePtrInput interface {
	pulumi.Input

	ToConnectionKafkaSaslUsernamePtrOutput() ConnectionKafkaSaslUsernamePtrOutput
	ToConnectionKafkaSaslUsernamePtrOutputWithContext(context.Context) ConnectionKafkaSaslUsernamePtrOutput
}

type connectionKafkaSaslUsernamePtrType ConnectionKafkaSaslUsernameArgs

func ConnectionKafkaSaslUsernamePtr(v *ConnectionKafkaSaslUsernameArgs) ConnectionKafkaSaslUsernamePtrInput {
	return (*connectionKafkaSaslUsernamePtrType)(v)
}

func (*connectionKafkaSaslUsernamePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionKafkaSaslUsername)(nil)).Elem()
}

func (i *connectionKafkaSaslUsernamePtrType) ToConnectionKafkaSaslUsernamePtrOutput() ConnectionKafkaSaslUsernamePtrOutput {
	return i.ToConnectionKafkaSaslUsernamePtrOutputWithContext(context.Background())
}

func (i *connectionKafkaSaslUsernamePtrType) ToConnectionKafkaSaslUsernamePtrOutputWithContext(ctx context.Context) ConnectionKafkaSaslUsernamePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionKafkaSaslUsernamePtrOutput)
}

type ConnectionKafkaSaslUsernameOutput struct{ *pulumi.OutputState }

func (ConnectionKafkaSaslUsernameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionKafkaSaslUsername)(nil)).Elem()
}

func (o ConnectionKafkaSaslUsernameOutput) ToConnectionKafkaSaslUsernameOutput() ConnectionKafkaSaslUsernameOutput {
	return o
}

func (o ConnectionKafkaSaslUsernameOutput) ToConnectionKafkaSaslUsernameOutputWithContext(ctx context.Context) ConnectionKafkaSaslUsernameOutput {
	return o
}

func (o ConnectionKafkaSaslUsernameOutput) ToConnectionKafkaSaslUsernamePtrOutput() ConnectionKafkaSaslUsernamePtrOutput {
	return o.ToConnectionKafkaSaslUsernamePtrOutputWithContext(context.Background())
}

func (o ConnectionKafkaSaslUsernameOutput) ToConnectionKafkaSaslUsernamePtrOutputWithContext(ctx context.Context) ConnectionKafkaSaslUsernamePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionKafkaSaslUsername) *ConnectionKafkaSaslUsername {
		return &v
	}).(ConnectionKafkaSaslUsernamePtrOutput)
}

// The sasl*username secret value.
func (o ConnectionKafkaSaslUsernameOutput) Secret() ConnectionKafkaSaslUsernameSecretPtrOutput {
	return o.ApplyT(func(v ConnectionKafkaSaslUsername) *ConnectionKafkaSaslUsernameSecret { return v.Secret }).(ConnectionKafkaSaslUsernameSecretPtrOutput)
}

// The saslUsername text value.
func (o ConnectionKafkaSaslUsernameOutput) Text() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionKafkaSaslUsername) *string { return v.Text }).(pulumi.StringPtrOutput)
}

type ConnectionKafkaSaslUsernamePtrOutput struct{ *pulumi.OutputState }

func (ConnectionKafkaSaslUsernamePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionKafkaSaslUsername)(nil)).Elem()
}

func (o ConnectionKafkaSaslUsernamePtrOutput) ToConnectionKafkaSaslUsernamePtrOutput() ConnectionKafkaSaslUsernamePtrOutput {
	return o
}

func (o ConnectionKafkaSaslUsernamePtrOutput) ToConnectionKafkaSaslUsernamePtrOutputWithContext(ctx context.Context) ConnectionKafkaSaslUsernamePtrOutput {
	return o
}

func (o ConnectionKafkaSaslUsernamePtrOutput) Elem() ConnectionKafkaSaslUsernameOutput {
	return o.ApplyT(func(v *ConnectionKafkaSaslUsername) ConnectionKafkaSaslUsername {
		if v != nil {
			return *v
		}
		var ret ConnectionKafkaSaslUsername
		return ret
	}).(ConnectionKafkaSaslUsernameOutput)
}

// The sasl*username secret value.
func (o ConnectionKafkaSaslUsernamePtrOutput) Secret() ConnectionKafkaSaslUsernameSecretPtrOutput {
	return o.ApplyT(func(v *ConnectionKafkaSaslUsername) *ConnectionKafkaSaslUsernameSecret {
		if v == nil {
			return nil
		}
		return v.Secret
	}).(ConnectionKafkaSaslUsernameSecretPtrOutput)
}

// The saslUsername text value.
func (o ConnectionKafkaSaslUsernamePtrOutput) Text() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionKafkaSaslUsername) *string {
		if v == nil {
			return nil
		}
		return v.Text
	}).(pulumi.StringPtrOutput)
}

type ConnectionKafkaSaslUsernameSecret struct {
	// The identifier for the connection database.
	DatabaseName *string `pulumi:"databaseName"`
	// The identifier for the connection.
	Name string `pulumi:"name"`
	// The identifier for the connection schema.
	SchemaName *string `pulumi:"schemaName"`
}

// ConnectionKafkaSaslUsernameSecretInput is an input type that accepts ConnectionKafkaSaslUsernameSecretArgs and ConnectionKafkaSaslUsernameSecretOutput values.
// You can construct a concrete instance of `ConnectionKafkaSaslUsernameSecretInput` via:
//
//	ConnectionKafkaSaslUsernameSecretArgs{...}
type ConnectionKafkaSaslUsernameSecretInput interface {
	pulumi.Input

	ToConnectionKafkaSaslUsernameSecretOutput() ConnectionKafkaSaslUsernameSecretOutput
	ToConnectionKafkaSaslUsernameSecretOutputWithContext(context.Context) ConnectionKafkaSaslUsernameSecretOutput
}

type ConnectionKafkaSaslUsernameSecretArgs struct {
	// The identifier for the connection database.
	DatabaseName pulumi.StringPtrInput `pulumi:"databaseName"`
	// The identifier for the connection.
	Name pulumi.StringInput `pulumi:"name"`
	// The identifier for the connection schema.
	SchemaName pulumi.StringPtrInput `pulumi:"schemaName"`
}

func (ConnectionKafkaSaslUsernameSecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionKafkaSaslUsernameSecret)(nil)).Elem()
}

func (i ConnectionKafkaSaslUsernameSecretArgs) ToConnectionKafkaSaslUsernameSecretOutput() ConnectionKafkaSaslUsernameSecretOutput {
	return i.ToConnectionKafkaSaslUsernameSecretOutputWithContext(context.Background())
}

func (i ConnectionKafkaSaslUsernameSecretArgs) ToConnectionKafkaSaslUsernameSecretOutputWithContext(ctx context.Context) ConnectionKafkaSaslUsernameSecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionKafkaSaslUsernameSecretOutput)
}

func (i ConnectionKafkaSaslUsernameSecretArgs) ToConnectionKafkaSaslUsernameSecretPtrOutput() ConnectionKafkaSaslUsernameSecretPtrOutput {
	return i.ToConnectionKafkaSaslUsernameSecretPtrOutputWithContext(context.Background())
}

func (i ConnectionKafkaSaslUsernameSecretArgs) ToConnectionKafkaSaslUsernameSecretPtrOutputWithContext(ctx context.Context) ConnectionKafkaSaslUsernameSecretPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionKafkaSaslUsernameSecretOutput).ToConnectionKafkaSaslUsernameSecretPtrOutputWithContext(ctx)
}

// ConnectionKafkaSaslUsernameSecretPtrInput is an input type that accepts ConnectionKafkaSaslUsernameSecretArgs, ConnectionKafkaSaslUsernameSecretPtr and ConnectionKafkaSaslUsernameSecretPtrOutput values.
// You can construct a concrete instance of `ConnectionKafkaSaslUsernameSecretPtrInput` via:
//
//	        ConnectionKafkaSaslUsernameSecretArgs{...}
//
//	or:
//
//	        nil
type ConnectionKafkaSaslUsernameSecretPtrInput interface {
	pulumi.Input

	ToConnectionKafkaSaslUsernameSecretPtrOutput() ConnectionKafkaSaslUsernameSecretPtrOutput
	ToConnectionKafkaSaslUsernameSecretPtrOutputWithContext(context.Context) ConnectionKafkaSaslUsernameSecretPtrOutput
}

type connectionKafkaSaslUsernameSecretPtrType ConnectionKafkaSaslUsernameSecretArgs

func ConnectionKafkaSaslUsernameSecretPtr(v *ConnectionKafkaSaslUsernameSecretArgs) ConnectionKafkaSaslUsernameSecretPtrInput {
	return (*connectionKafkaSaslUsernameSecretPtrType)(v)
}

func (*connectionKafkaSaslUsernameSecretPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionKafkaSaslUsernameSecret)(nil)).Elem()
}

func (i *connectionKafkaSaslUsernameSecretPtrType) ToConnectionKafkaSaslUsernameSecretPtrOutput() ConnectionKafkaSaslUsernameSecretPtrOutput {
	return i.ToConnectionKafkaSaslUsernameSecretPtrOutputWithContext(context.Background())
}

func (i *connectionKafkaSaslUsernameSecretPtrType) ToConnectionKafkaSaslUsernameSecretPtrOutputWithContext(ctx context.Context) ConnectionKafkaSaslUsernameSecretPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionKafkaSaslUsernameSecretPtrOutput)
}

type ConnectionKafkaSaslUsernameSecretOutput struct{ *pulumi.OutputState }

func (ConnectionKafkaSaslUsernameSecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionKafkaSaslUsernameSecret)(nil)).Elem()
}

func (o ConnectionKafkaSaslUsernameSecretOutput) ToConnectionKafkaSaslUsernameSecretOutput() ConnectionKafkaSaslUsernameSecretOutput {
	return o
}

func (o ConnectionKafkaSaslUsernameSecretOutput) ToConnectionKafkaSaslUsernameSecretOutputWithContext(ctx context.Context) ConnectionKafkaSaslUsernameSecretOutput {
	return o
}

func (o ConnectionKafkaSaslUsernameSecretOutput) ToConnectionKafkaSaslUsernameSecretPtrOutput() ConnectionKafkaSaslUsernameSecretPtrOutput {
	return o.ToConnectionKafkaSaslUsernameSecretPtrOutputWithContext(context.Background())
}

func (o ConnectionKafkaSaslUsernameSecretOutput) ToConnectionKafkaSaslUsernameSecretPtrOutputWithContext(ctx context.Context) ConnectionKafkaSaslUsernameSecretPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionKafkaSaslUsernameSecret) *ConnectionKafkaSaslUsernameSecret {
		return &v
	}).(ConnectionKafkaSaslUsernameSecretPtrOutput)
}

// The identifier for the connection database.
func (o ConnectionKafkaSaslUsernameSecretOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionKafkaSaslUsernameSecret) *string { return v.DatabaseName }).(pulumi.StringPtrOutput)
}

// The identifier for the connection.
func (o ConnectionKafkaSaslUsernameSecretOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionKafkaSaslUsernameSecret) string { return v.Name }).(pulumi.StringOutput)
}

// The identifier for the connection schema.
func (o ConnectionKafkaSaslUsernameSecretOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionKafkaSaslUsernameSecret) *string { return v.SchemaName }).(pulumi.StringPtrOutput)
}

type ConnectionKafkaSaslUsernameSecretPtrOutput struct{ *pulumi.OutputState }

func (ConnectionKafkaSaslUsernameSecretPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionKafkaSaslUsernameSecret)(nil)).Elem()
}

func (o ConnectionKafkaSaslUsernameSecretPtrOutput) ToConnectionKafkaSaslUsernameSecretPtrOutput() ConnectionKafkaSaslUsernameSecretPtrOutput {
	return o
}

func (o ConnectionKafkaSaslUsernameSecretPtrOutput) ToConnectionKafkaSaslUsernameSecretPtrOutputWithContext(ctx context.Context) ConnectionKafkaSaslUsernameSecretPtrOutput {
	return o
}

func (o ConnectionKafkaSaslUsernameSecretPtrOutput) Elem() ConnectionKafkaSaslUsernameSecretOutput {
	return o.ApplyT(func(v *ConnectionKafkaSaslUsernameSecret) ConnectionKafkaSaslUsernameSecret {
		if v != nil {
			return *v
		}
		var ret ConnectionKafkaSaslUsernameSecret
		return ret
	}).(ConnectionKafkaSaslUsernameSecretOutput)
}

// The identifier for the connection database.
func (o ConnectionKafkaSaslUsernameSecretPtrOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionKafkaSaslUsernameSecret) *string {
		if v == nil {
			return nil
		}
		return v.DatabaseName
	}).(pulumi.StringPtrOutput)
}

// The identifier for the connection.
func (o ConnectionKafkaSaslUsernameSecretPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionKafkaSaslUsernameSecret) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The identifier for the connection schema.
func (o ConnectionKafkaSaslUsernameSecretPtrOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionKafkaSaslUsernameSecret) *string {
		if v == nil {
			return nil
		}
		return v.SchemaName
	}).(pulumi.StringPtrOutput)
}

type ConnectionKafkaSshTunnel struct {
	// The sshTunnel database name.
	DatabaseName *string `pulumi:"databaseName"`
	// The sshTunnel name.
	Name string `pulumi:"name"`
	// The sshTunnel schema name.
	SchemaName *string `pulumi:"schemaName"`
}

// ConnectionKafkaSshTunnelInput is an input type that accepts ConnectionKafkaSshTunnelArgs and ConnectionKafkaSshTunnelOutput values.
// You can construct a concrete instance of `ConnectionKafkaSshTunnelInput` via:
//
//	ConnectionKafkaSshTunnelArgs{...}
type ConnectionKafkaSshTunnelInput interface {
	pulumi.Input

	ToConnectionKafkaSshTunnelOutput() ConnectionKafkaSshTunnelOutput
	ToConnectionKafkaSshTunnelOutputWithContext(context.Context) ConnectionKafkaSshTunnelOutput
}

type ConnectionKafkaSshTunnelArgs struct {
	// The sshTunnel database name.
	DatabaseName pulumi.StringPtrInput `pulumi:"databaseName"`
	// The sshTunnel name.
	Name pulumi.StringInput `pulumi:"name"`
	// The sshTunnel schema name.
	SchemaName pulumi.StringPtrInput `pulumi:"schemaName"`
}

func (ConnectionKafkaSshTunnelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionKafkaSshTunnel)(nil)).Elem()
}

func (i ConnectionKafkaSshTunnelArgs) ToConnectionKafkaSshTunnelOutput() ConnectionKafkaSshTunnelOutput {
	return i.ToConnectionKafkaSshTunnelOutputWithContext(context.Background())
}

func (i ConnectionKafkaSshTunnelArgs) ToConnectionKafkaSshTunnelOutputWithContext(ctx context.Context) ConnectionKafkaSshTunnelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionKafkaSshTunnelOutput)
}

func (i ConnectionKafkaSshTunnelArgs) ToConnectionKafkaSshTunnelPtrOutput() ConnectionKafkaSshTunnelPtrOutput {
	return i.ToConnectionKafkaSshTunnelPtrOutputWithContext(context.Background())
}

func (i ConnectionKafkaSshTunnelArgs) ToConnectionKafkaSshTunnelPtrOutputWithContext(ctx context.Context) ConnectionKafkaSshTunnelPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionKafkaSshTunnelOutput).ToConnectionKafkaSshTunnelPtrOutputWithContext(ctx)
}

// ConnectionKafkaSshTunnelPtrInput is an input type that accepts ConnectionKafkaSshTunnelArgs, ConnectionKafkaSshTunnelPtr and ConnectionKafkaSshTunnelPtrOutput values.
// You can construct a concrete instance of `ConnectionKafkaSshTunnelPtrInput` via:
//
//	        ConnectionKafkaSshTunnelArgs{...}
//
//	or:
//
//	        nil
type ConnectionKafkaSshTunnelPtrInput interface {
	pulumi.Input

	ToConnectionKafkaSshTunnelPtrOutput() ConnectionKafkaSshTunnelPtrOutput
	ToConnectionKafkaSshTunnelPtrOutputWithContext(context.Context) ConnectionKafkaSshTunnelPtrOutput
}

type connectionKafkaSshTunnelPtrType ConnectionKafkaSshTunnelArgs

func ConnectionKafkaSshTunnelPtr(v *ConnectionKafkaSshTunnelArgs) ConnectionKafkaSshTunnelPtrInput {
	return (*connectionKafkaSshTunnelPtrType)(v)
}

func (*connectionKafkaSshTunnelPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionKafkaSshTunnel)(nil)).Elem()
}

func (i *connectionKafkaSshTunnelPtrType) ToConnectionKafkaSshTunnelPtrOutput() ConnectionKafkaSshTunnelPtrOutput {
	return i.ToConnectionKafkaSshTunnelPtrOutputWithContext(context.Background())
}

func (i *connectionKafkaSshTunnelPtrType) ToConnectionKafkaSshTunnelPtrOutputWithContext(ctx context.Context) ConnectionKafkaSshTunnelPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionKafkaSshTunnelPtrOutput)
}

type ConnectionKafkaSshTunnelOutput struct{ *pulumi.OutputState }

func (ConnectionKafkaSshTunnelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionKafkaSshTunnel)(nil)).Elem()
}

func (o ConnectionKafkaSshTunnelOutput) ToConnectionKafkaSshTunnelOutput() ConnectionKafkaSshTunnelOutput {
	return o
}

func (o ConnectionKafkaSshTunnelOutput) ToConnectionKafkaSshTunnelOutputWithContext(ctx context.Context) ConnectionKafkaSshTunnelOutput {
	return o
}

func (o ConnectionKafkaSshTunnelOutput) ToConnectionKafkaSshTunnelPtrOutput() ConnectionKafkaSshTunnelPtrOutput {
	return o.ToConnectionKafkaSshTunnelPtrOutputWithContext(context.Background())
}

func (o ConnectionKafkaSshTunnelOutput) ToConnectionKafkaSshTunnelPtrOutputWithContext(ctx context.Context) ConnectionKafkaSshTunnelPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionKafkaSshTunnel) *ConnectionKafkaSshTunnel {
		return &v
	}).(ConnectionKafkaSshTunnelPtrOutput)
}

// The sshTunnel database name.
func (o ConnectionKafkaSshTunnelOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionKafkaSshTunnel) *string { return v.DatabaseName }).(pulumi.StringPtrOutput)
}

// The sshTunnel name.
func (o ConnectionKafkaSshTunnelOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionKafkaSshTunnel) string { return v.Name }).(pulumi.StringOutput)
}

// The sshTunnel schema name.
func (o ConnectionKafkaSshTunnelOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionKafkaSshTunnel) *string { return v.SchemaName }).(pulumi.StringPtrOutput)
}

type ConnectionKafkaSshTunnelPtrOutput struct{ *pulumi.OutputState }

func (ConnectionKafkaSshTunnelPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionKafkaSshTunnel)(nil)).Elem()
}

func (o ConnectionKafkaSshTunnelPtrOutput) ToConnectionKafkaSshTunnelPtrOutput() ConnectionKafkaSshTunnelPtrOutput {
	return o
}

func (o ConnectionKafkaSshTunnelPtrOutput) ToConnectionKafkaSshTunnelPtrOutputWithContext(ctx context.Context) ConnectionKafkaSshTunnelPtrOutput {
	return o
}

func (o ConnectionKafkaSshTunnelPtrOutput) Elem() ConnectionKafkaSshTunnelOutput {
	return o.ApplyT(func(v *ConnectionKafkaSshTunnel) ConnectionKafkaSshTunnel {
		if v != nil {
			return *v
		}
		var ret ConnectionKafkaSshTunnel
		return ret
	}).(ConnectionKafkaSshTunnelOutput)
}

// The sshTunnel database name.
func (o ConnectionKafkaSshTunnelPtrOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionKafkaSshTunnel) *string {
		if v == nil {
			return nil
		}
		return v.DatabaseName
	}).(pulumi.StringPtrOutput)
}

// The sshTunnel name.
func (o ConnectionKafkaSshTunnelPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionKafkaSshTunnel) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The sshTunnel schema name.
func (o ConnectionKafkaSshTunnelPtrOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionKafkaSshTunnel) *string {
		if v == nil {
			return nil
		}
		return v.SchemaName
	}).(pulumi.StringPtrOutput)
}

type ConnectionKafkaSslCertificate struct {
	// The ssl*certificate secret value.
	Secret *ConnectionKafkaSslCertificateSecret `pulumi:"secret"`
	// The sslCertificate text value.
	Text *string `pulumi:"text"`
}

// ConnectionKafkaSslCertificateInput is an input type that accepts ConnectionKafkaSslCertificateArgs and ConnectionKafkaSslCertificateOutput values.
// You can construct a concrete instance of `ConnectionKafkaSslCertificateInput` via:
//
//	ConnectionKafkaSslCertificateArgs{...}
type ConnectionKafkaSslCertificateInput interface {
	pulumi.Input

	ToConnectionKafkaSslCertificateOutput() ConnectionKafkaSslCertificateOutput
	ToConnectionKafkaSslCertificateOutputWithContext(context.Context) ConnectionKafkaSslCertificateOutput
}

type ConnectionKafkaSslCertificateArgs struct {
	// The ssl*certificate secret value.
	Secret ConnectionKafkaSslCertificateSecretPtrInput `pulumi:"secret"`
	// The sslCertificate text value.
	Text pulumi.StringPtrInput `pulumi:"text"`
}

func (ConnectionKafkaSslCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionKafkaSslCertificate)(nil)).Elem()
}

func (i ConnectionKafkaSslCertificateArgs) ToConnectionKafkaSslCertificateOutput() ConnectionKafkaSslCertificateOutput {
	return i.ToConnectionKafkaSslCertificateOutputWithContext(context.Background())
}

func (i ConnectionKafkaSslCertificateArgs) ToConnectionKafkaSslCertificateOutputWithContext(ctx context.Context) ConnectionKafkaSslCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionKafkaSslCertificateOutput)
}

func (i ConnectionKafkaSslCertificateArgs) ToConnectionKafkaSslCertificatePtrOutput() ConnectionKafkaSslCertificatePtrOutput {
	return i.ToConnectionKafkaSslCertificatePtrOutputWithContext(context.Background())
}

func (i ConnectionKafkaSslCertificateArgs) ToConnectionKafkaSslCertificatePtrOutputWithContext(ctx context.Context) ConnectionKafkaSslCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionKafkaSslCertificateOutput).ToConnectionKafkaSslCertificatePtrOutputWithContext(ctx)
}

// ConnectionKafkaSslCertificatePtrInput is an input type that accepts ConnectionKafkaSslCertificateArgs, ConnectionKafkaSslCertificatePtr and ConnectionKafkaSslCertificatePtrOutput values.
// You can construct a concrete instance of `ConnectionKafkaSslCertificatePtrInput` via:
//
//	        ConnectionKafkaSslCertificateArgs{...}
//
//	or:
//
//	        nil
type ConnectionKafkaSslCertificatePtrInput interface {
	pulumi.Input

	ToConnectionKafkaSslCertificatePtrOutput() ConnectionKafkaSslCertificatePtrOutput
	ToConnectionKafkaSslCertificatePtrOutputWithContext(context.Context) ConnectionKafkaSslCertificatePtrOutput
}

type connectionKafkaSslCertificatePtrType ConnectionKafkaSslCertificateArgs

func ConnectionKafkaSslCertificatePtr(v *ConnectionKafkaSslCertificateArgs) ConnectionKafkaSslCertificatePtrInput {
	return (*connectionKafkaSslCertificatePtrType)(v)
}

func (*connectionKafkaSslCertificatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionKafkaSslCertificate)(nil)).Elem()
}

func (i *connectionKafkaSslCertificatePtrType) ToConnectionKafkaSslCertificatePtrOutput() ConnectionKafkaSslCertificatePtrOutput {
	return i.ToConnectionKafkaSslCertificatePtrOutputWithContext(context.Background())
}

func (i *connectionKafkaSslCertificatePtrType) ToConnectionKafkaSslCertificatePtrOutputWithContext(ctx context.Context) ConnectionKafkaSslCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionKafkaSslCertificatePtrOutput)
}

type ConnectionKafkaSslCertificateOutput struct{ *pulumi.OutputState }

func (ConnectionKafkaSslCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionKafkaSslCertificate)(nil)).Elem()
}

func (o ConnectionKafkaSslCertificateOutput) ToConnectionKafkaSslCertificateOutput() ConnectionKafkaSslCertificateOutput {
	return o
}

func (o ConnectionKafkaSslCertificateOutput) ToConnectionKafkaSslCertificateOutputWithContext(ctx context.Context) ConnectionKafkaSslCertificateOutput {
	return o
}

func (o ConnectionKafkaSslCertificateOutput) ToConnectionKafkaSslCertificatePtrOutput() ConnectionKafkaSslCertificatePtrOutput {
	return o.ToConnectionKafkaSslCertificatePtrOutputWithContext(context.Background())
}

func (o ConnectionKafkaSslCertificateOutput) ToConnectionKafkaSslCertificatePtrOutputWithContext(ctx context.Context) ConnectionKafkaSslCertificatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionKafkaSslCertificate) *ConnectionKafkaSslCertificate {
		return &v
	}).(ConnectionKafkaSslCertificatePtrOutput)
}

// The ssl*certificate secret value.
func (o ConnectionKafkaSslCertificateOutput) Secret() ConnectionKafkaSslCertificateSecretPtrOutput {
	return o.ApplyT(func(v ConnectionKafkaSslCertificate) *ConnectionKafkaSslCertificateSecret { return v.Secret }).(ConnectionKafkaSslCertificateSecretPtrOutput)
}

// The sslCertificate text value.
func (o ConnectionKafkaSslCertificateOutput) Text() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionKafkaSslCertificate) *string { return v.Text }).(pulumi.StringPtrOutput)
}

type ConnectionKafkaSslCertificatePtrOutput struct{ *pulumi.OutputState }

func (ConnectionKafkaSslCertificatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionKafkaSslCertificate)(nil)).Elem()
}

func (o ConnectionKafkaSslCertificatePtrOutput) ToConnectionKafkaSslCertificatePtrOutput() ConnectionKafkaSslCertificatePtrOutput {
	return o
}

func (o ConnectionKafkaSslCertificatePtrOutput) ToConnectionKafkaSslCertificatePtrOutputWithContext(ctx context.Context) ConnectionKafkaSslCertificatePtrOutput {
	return o
}

func (o ConnectionKafkaSslCertificatePtrOutput) Elem() ConnectionKafkaSslCertificateOutput {
	return o.ApplyT(func(v *ConnectionKafkaSslCertificate) ConnectionKafkaSslCertificate {
		if v != nil {
			return *v
		}
		var ret ConnectionKafkaSslCertificate
		return ret
	}).(ConnectionKafkaSslCertificateOutput)
}

// The ssl*certificate secret value.
func (o ConnectionKafkaSslCertificatePtrOutput) Secret() ConnectionKafkaSslCertificateSecretPtrOutput {
	return o.ApplyT(func(v *ConnectionKafkaSslCertificate) *ConnectionKafkaSslCertificateSecret {
		if v == nil {
			return nil
		}
		return v.Secret
	}).(ConnectionKafkaSslCertificateSecretPtrOutput)
}

// The sslCertificate text value.
func (o ConnectionKafkaSslCertificatePtrOutput) Text() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionKafkaSslCertificate) *string {
		if v == nil {
			return nil
		}
		return v.Text
	}).(pulumi.StringPtrOutput)
}

type ConnectionKafkaSslCertificateAuthority struct {
	// The ssl*certificate*authority secret value.
	Secret *ConnectionKafkaSslCertificateAuthoritySecret `pulumi:"secret"`
	// The ssl*certificate*authority text value.
	Text *string `pulumi:"text"`
}

// ConnectionKafkaSslCertificateAuthorityInput is an input type that accepts ConnectionKafkaSslCertificateAuthorityArgs and ConnectionKafkaSslCertificateAuthorityOutput values.
// You can construct a concrete instance of `ConnectionKafkaSslCertificateAuthorityInput` via:
//
//	ConnectionKafkaSslCertificateAuthorityArgs{...}
type ConnectionKafkaSslCertificateAuthorityInput interface {
	pulumi.Input

	ToConnectionKafkaSslCertificateAuthorityOutput() ConnectionKafkaSslCertificateAuthorityOutput
	ToConnectionKafkaSslCertificateAuthorityOutputWithContext(context.Context) ConnectionKafkaSslCertificateAuthorityOutput
}

type ConnectionKafkaSslCertificateAuthorityArgs struct {
	// The ssl*certificate*authority secret value.
	Secret ConnectionKafkaSslCertificateAuthoritySecretPtrInput `pulumi:"secret"`
	// The ssl*certificate*authority text value.
	Text pulumi.StringPtrInput `pulumi:"text"`
}

func (ConnectionKafkaSslCertificateAuthorityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionKafkaSslCertificateAuthority)(nil)).Elem()
}

func (i ConnectionKafkaSslCertificateAuthorityArgs) ToConnectionKafkaSslCertificateAuthorityOutput() ConnectionKafkaSslCertificateAuthorityOutput {
	return i.ToConnectionKafkaSslCertificateAuthorityOutputWithContext(context.Background())
}

func (i ConnectionKafkaSslCertificateAuthorityArgs) ToConnectionKafkaSslCertificateAuthorityOutputWithContext(ctx context.Context) ConnectionKafkaSslCertificateAuthorityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionKafkaSslCertificateAuthorityOutput)
}

func (i ConnectionKafkaSslCertificateAuthorityArgs) ToConnectionKafkaSslCertificateAuthorityPtrOutput() ConnectionKafkaSslCertificateAuthorityPtrOutput {
	return i.ToConnectionKafkaSslCertificateAuthorityPtrOutputWithContext(context.Background())
}

func (i ConnectionKafkaSslCertificateAuthorityArgs) ToConnectionKafkaSslCertificateAuthorityPtrOutputWithContext(ctx context.Context) ConnectionKafkaSslCertificateAuthorityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionKafkaSslCertificateAuthorityOutput).ToConnectionKafkaSslCertificateAuthorityPtrOutputWithContext(ctx)
}

// ConnectionKafkaSslCertificateAuthorityPtrInput is an input type that accepts ConnectionKafkaSslCertificateAuthorityArgs, ConnectionKafkaSslCertificateAuthorityPtr and ConnectionKafkaSslCertificateAuthorityPtrOutput values.
// You can construct a concrete instance of `ConnectionKafkaSslCertificateAuthorityPtrInput` via:
//
//	        ConnectionKafkaSslCertificateAuthorityArgs{...}
//
//	or:
//
//	        nil
type ConnectionKafkaSslCertificateAuthorityPtrInput interface {
	pulumi.Input

	ToConnectionKafkaSslCertificateAuthorityPtrOutput() ConnectionKafkaSslCertificateAuthorityPtrOutput
	ToConnectionKafkaSslCertificateAuthorityPtrOutputWithContext(context.Context) ConnectionKafkaSslCertificateAuthorityPtrOutput
}

type connectionKafkaSslCertificateAuthorityPtrType ConnectionKafkaSslCertificateAuthorityArgs

func ConnectionKafkaSslCertificateAuthorityPtr(v *ConnectionKafkaSslCertificateAuthorityArgs) ConnectionKafkaSslCertificateAuthorityPtrInput {
	return (*connectionKafkaSslCertificateAuthorityPtrType)(v)
}

func (*connectionKafkaSslCertificateAuthorityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionKafkaSslCertificateAuthority)(nil)).Elem()
}

func (i *connectionKafkaSslCertificateAuthorityPtrType) ToConnectionKafkaSslCertificateAuthorityPtrOutput() ConnectionKafkaSslCertificateAuthorityPtrOutput {
	return i.ToConnectionKafkaSslCertificateAuthorityPtrOutputWithContext(context.Background())
}

func (i *connectionKafkaSslCertificateAuthorityPtrType) ToConnectionKafkaSslCertificateAuthorityPtrOutputWithContext(ctx context.Context) ConnectionKafkaSslCertificateAuthorityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionKafkaSslCertificateAuthorityPtrOutput)
}

type ConnectionKafkaSslCertificateAuthorityOutput struct{ *pulumi.OutputState }

func (ConnectionKafkaSslCertificateAuthorityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionKafkaSslCertificateAuthority)(nil)).Elem()
}

func (o ConnectionKafkaSslCertificateAuthorityOutput) ToConnectionKafkaSslCertificateAuthorityOutput() ConnectionKafkaSslCertificateAuthorityOutput {
	return o
}

func (o ConnectionKafkaSslCertificateAuthorityOutput) ToConnectionKafkaSslCertificateAuthorityOutputWithContext(ctx context.Context) ConnectionKafkaSslCertificateAuthorityOutput {
	return o
}

func (o ConnectionKafkaSslCertificateAuthorityOutput) ToConnectionKafkaSslCertificateAuthorityPtrOutput() ConnectionKafkaSslCertificateAuthorityPtrOutput {
	return o.ToConnectionKafkaSslCertificateAuthorityPtrOutputWithContext(context.Background())
}

func (o ConnectionKafkaSslCertificateAuthorityOutput) ToConnectionKafkaSslCertificateAuthorityPtrOutputWithContext(ctx context.Context) ConnectionKafkaSslCertificateAuthorityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionKafkaSslCertificateAuthority) *ConnectionKafkaSslCertificateAuthority {
		return &v
	}).(ConnectionKafkaSslCertificateAuthorityPtrOutput)
}

// The ssl*certificate*authority secret value.
func (o ConnectionKafkaSslCertificateAuthorityOutput) Secret() ConnectionKafkaSslCertificateAuthoritySecretPtrOutput {
	return o.ApplyT(func(v ConnectionKafkaSslCertificateAuthority) *ConnectionKafkaSslCertificateAuthoritySecret {
		return v.Secret
	}).(ConnectionKafkaSslCertificateAuthoritySecretPtrOutput)
}

// The ssl*certificate*authority text value.
func (o ConnectionKafkaSslCertificateAuthorityOutput) Text() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionKafkaSslCertificateAuthority) *string { return v.Text }).(pulumi.StringPtrOutput)
}

type ConnectionKafkaSslCertificateAuthorityPtrOutput struct{ *pulumi.OutputState }

func (ConnectionKafkaSslCertificateAuthorityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionKafkaSslCertificateAuthority)(nil)).Elem()
}

func (o ConnectionKafkaSslCertificateAuthorityPtrOutput) ToConnectionKafkaSslCertificateAuthorityPtrOutput() ConnectionKafkaSslCertificateAuthorityPtrOutput {
	return o
}

func (o ConnectionKafkaSslCertificateAuthorityPtrOutput) ToConnectionKafkaSslCertificateAuthorityPtrOutputWithContext(ctx context.Context) ConnectionKafkaSslCertificateAuthorityPtrOutput {
	return o
}

func (o ConnectionKafkaSslCertificateAuthorityPtrOutput) Elem() ConnectionKafkaSslCertificateAuthorityOutput {
	return o.ApplyT(func(v *ConnectionKafkaSslCertificateAuthority) ConnectionKafkaSslCertificateAuthority {
		if v != nil {
			return *v
		}
		var ret ConnectionKafkaSslCertificateAuthority
		return ret
	}).(ConnectionKafkaSslCertificateAuthorityOutput)
}

// The ssl*certificate*authority secret value.
func (o ConnectionKafkaSslCertificateAuthorityPtrOutput) Secret() ConnectionKafkaSslCertificateAuthoritySecretPtrOutput {
	return o.ApplyT(func(v *ConnectionKafkaSslCertificateAuthority) *ConnectionKafkaSslCertificateAuthoritySecret {
		if v == nil {
			return nil
		}
		return v.Secret
	}).(ConnectionKafkaSslCertificateAuthoritySecretPtrOutput)
}

// The ssl*certificate*authority text value.
func (o ConnectionKafkaSslCertificateAuthorityPtrOutput) Text() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionKafkaSslCertificateAuthority) *string {
		if v == nil {
			return nil
		}
		return v.Text
	}).(pulumi.StringPtrOutput)
}

type ConnectionKafkaSslCertificateAuthoritySecret struct {
	// The identifier for the connection database.
	DatabaseName *string `pulumi:"databaseName"`
	// The identifier for the connection.
	Name string `pulumi:"name"`
	// The identifier for the connection schema.
	SchemaName *string `pulumi:"schemaName"`
}

// ConnectionKafkaSslCertificateAuthoritySecretInput is an input type that accepts ConnectionKafkaSslCertificateAuthoritySecretArgs and ConnectionKafkaSslCertificateAuthoritySecretOutput values.
// You can construct a concrete instance of `ConnectionKafkaSslCertificateAuthoritySecretInput` via:
//
//	ConnectionKafkaSslCertificateAuthoritySecretArgs{...}
type ConnectionKafkaSslCertificateAuthoritySecretInput interface {
	pulumi.Input

	ToConnectionKafkaSslCertificateAuthoritySecretOutput() ConnectionKafkaSslCertificateAuthoritySecretOutput
	ToConnectionKafkaSslCertificateAuthoritySecretOutputWithContext(context.Context) ConnectionKafkaSslCertificateAuthoritySecretOutput
}

type ConnectionKafkaSslCertificateAuthoritySecretArgs struct {
	// The identifier for the connection database.
	DatabaseName pulumi.StringPtrInput `pulumi:"databaseName"`
	// The identifier for the connection.
	Name pulumi.StringInput `pulumi:"name"`
	// The identifier for the connection schema.
	SchemaName pulumi.StringPtrInput `pulumi:"schemaName"`
}

func (ConnectionKafkaSslCertificateAuthoritySecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionKafkaSslCertificateAuthoritySecret)(nil)).Elem()
}

func (i ConnectionKafkaSslCertificateAuthoritySecretArgs) ToConnectionKafkaSslCertificateAuthoritySecretOutput() ConnectionKafkaSslCertificateAuthoritySecretOutput {
	return i.ToConnectionKafkaSslCertificateAuthoritySecretOutputWithContext(context.Background())
}

func (i ConnectionKafkaSslCertificateAuthoritySecretArgs) ToConnectionKafkaSslCertificateAuthoritySecretOutputWithContext(ctx context.Context) ConnectionKafkaSslCertificateAuthoritySecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionKafkaSslCertificateAuthoritySecretOutput)
}

func (i ConnectionKafkaSslCertificateAuthoritySecretArgs) ToConnectionKafkaSslCertificateAuthoritySecretPtrOutput() ConnectionKafkaSslCertificateAuthoritySecretPtrOutput {
	return i.ToConnectionKafkaSslCertificateAuthoritySecretPtrOutputWithContext(context.Background())
}

func (i ConnectionKafkaSslCertificateAuthoritySecretArgs) ToConnectionKafkaSslCertificateAuthoritySecretPtrOutputWithContext(ctx context.Context) ConnectionKafkaSslCertificateAuthoritySecretPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionKafkaSslCertificateAuthoritySecretOutput).ToConnectionKafkaSslCertificateAuthoritySecretPtrOutputWithContext(ctx)
}

// ConnectionKafkaSslCertificateAuthoritySecretPtrInput is an input type that accepts ConnectionKafkaSslCertificateAuthoritySecretArgs, ConnectionKafkaSslCertificateAuthoritySecretPtr and ConnectionKafkaSslCertificateAuthoritySecretPtrOutput values.
// You can construct a concrete instance of `ConnectionKafkaSslCertificateAuthoritySecretPtrInput` via:
//
//	        ConnectionKafkaSslCertificateAuthoritySecretArgs{...}
//
//	or:
//
//	        nil
type ConnectionKafkaSslCertificateAuthoritySecretPtrInput interface {
	pulumi.Input

	ToConnectionKafkaSslCertificateAuthoritySecretPtrOutput() ConnectionKafkaSslCertificateAuthoritySecretPtrOutput
	ToConnectionKafkaSslCertificateAuthoritySecretPtrOutputWithContext(context.Context) ConnectionKafkaSslCertificateAuthoritySecretPtrOutput
}

type connectionKafkaSslCertificateAuthoritySecretPtrType ConnectionKafkaSslCertificateAuthoritySecretArgs

func ConnectionKafkaSslCertificateAuthoritySecretPtr(v *ConnectionKafkaSslCertificateAuthoritySecretArgs) ConnectionKafkaSslCertificateAuthoritySecretPtrInput {
	return (*connectionKafkaSslCertificateAuthoritySecretPtrType)(v)
}

func (*connectionKafkaSslCertificateAuthoritySecretPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionKafkaSslCertificateAuthoritySecret)(nil)).Elem()
}

func (i *connectionKafkaSslCertificateAuthoritySecretPtrType) ToConnectionKafkaSslCertificateAuthoritySecretPtrOutput() ConnectionKafkaSslCertificateAuthoritySecretPtrOutput {
	return i.ToConnectionKafkaSslCertificateAuthoritySecretPtrOutputWithContext(context.Background())
}

func (i *connectionKafkaSslCertificateAuthoritySecretPtrType) ToConnectionKafkaSslCertificateAuthoritySecretPtrOutputWithContext(ctx context.Context) ConnectionKafkaSslCertificateAuthoritySecretPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionKafkaSslCertificateAuthoritySecretPtrOutput)
}

type ConnectionKafkaSslCertificateAuthoritySecretOutput struct{ *pulumi.OutputState }

func (ConnectionKafkaSslCertificateAuthoritySecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionKafkaSslCertificateAuthoritySecret)(nil)).Elem()
}

func (o ConnectionKafkaSslCertificateAuthoritySecretOutput) ToConnectionKafkaSslCertificateAuthoritySecretOutput() ConnectionKafkaSslCertificateAuthoritySecretOutput {
	return o
}

func (o ConnectionKafkaSslCertificateAuthoritySecretOutput) ToConnectionKafkaSslCertificateAuthoritySecretOutputWithContext(ctx context.Context) ConnectionKafkaSslCertificateAuthoritySecretOutput {
	return o
}

func (o ConnectionKafkaSslCertificateAuthoritySecretOutput) ToConnectionKafkaSslCertificateAuthoritySecretPtrOutput() ConnectionKafkaSslCertificateAuthoritySecretPtrOutput {
	return o.ToConnectionKafkaSslCertificateAuthoritySecretPtrOutputWithContext(context.Background())
}

func (o ConnectionKafkaSslCertificateAuthoritySecretOutput) ToConnectionKafkaSslCertificateAuthoritySecretPtrOutputWithContext(ctx context.Context) ConnectionKafkaSslCertificateAuthoritySecretPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionKafkaSslCertificateAuthoritySecret) *ConnectionKafkaSslCertificateAuthoritySecret {
		return &v
	}).(ConnectionKafkaSslCertificateAuthoritySecretPtrOutput)
}

// The identifier for the connection database.
func (o ConnectionKafkaSslCertificateAuthoritySecretOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionKafkaSslCertificateAuthoritySecret) *string { return v.DatabaseName }).(pulumi.StringPtrOutput)
}

// The identifier for the connection.
func (o ConnectionKafkaSslCertificateAuthoritySecretOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionKafkaSslCertificateAuthoritySecret) string { return v.Name }).(pulumi.StringOutput)
}

// The identifier for the connection schema.
func (o ConnectionKafkaSslCertificateAuthoritySecretOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionKafkaSslCertificateAuthoritySecret) *string { return v.SchemaName }).(pulumi.StringPtrOutput)
}

type ConnectionKafkaSslCertificateAuthoritySecretPtrOutput struct{ *pulumi.OutputState }

func (ConnectionKafkaSslCertificateAuthoritySecretPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionKafkaSslCertificateAuthoritySecret)(nil)).Elem()
}

func (o ConnectionKafkaSslCertificateAuthoritySecretPtrOutput) ToConnectionKafkaSslCertificateAuthoritySecretPtrOutput() ConnectionKafkaSslCertificateAuthoritySecretPtrOutput {
	return o
}

func (o ConnectionKafkaSslCertificateAuthoritySecretPtrOutput) ToConnectionKafkaSslCertificateAuthoritySecretPtrOutputWithContext(ctx context.Context) ConnectionKafkaSslCertificateAuthoritySecretPtrOutput {
	return o
}

func (o ConnectionKafkaSslCertificateAuthoritySecretPtrOutput) Elem() ConnectionKafkaSslCertificateAuthoritySecretOutput {
	return o.ApplyT(func(v *ConnectionKafkaSslCertificateAuthoritySecret) ConnectionKafkaSslCertificateAuthoritySecret {
		if v != nil {
			return *v
		}
		var ret ConnectionKafkaSslCertificateAuthoritySecret
		return ret
	}).(ConnectionKafkaSslCertificateAuthoritySecretOutput)
}

// The identifier for the connection database.
func (o ConnectionKafkaSslCertificateAuthoritySecretPtrOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionKafkaSslCertificateAuthoritySecret) *string {
		if v == nil {
			return nil
		}
		return v.DatabaseName
	}).(pulumi.StringPtrOutput)
}

// The identifier for the connection.
func (o ConnectionKafkaSslCertificateAuthoritySecretPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionKafkaSslCertificateAuthoritySecret) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The identifier for the connection schema.
func (o ConnectionKafkaSslCertificateAuthoritySecretPtrOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionKafkaSslCertificateAuthoritySecret) *string {
		if v == nil {
			return nil
		}
		return v.SchemaName
	}).(pulumi.StringPtrOutput)
}

type ConnectionKafkaSslCertificateSecret struct {
	// The identifier for the connection database.
	DatabaseName *string `pulumi:"databaseName"`
	// The identifier for the connection.
	Name string `pulumi:"name"`
	// The identifier for the connection schema.
	SchemaName *string `pulumi:"schemaName"`
}

// ConnectionKafkaSslCertificateSecretInput is an input type that accepts ConnectionKafkaSslCertificateSecretArgs and ConnectionKafkaSslCertificateSecretOutput values.
// You can construct a concrete instance of `ConnectionKafkaSslCertificateSecretInput` via:
//
//	ConnectionKafkaSslCertificateSecretArgs{...}
type ConnectionKafkaSslCertificateSecretInput interface {
	pulumi.Input

	ToConnectionKafkaSslCertificateSecretOutput() ConnectionKafkaSslCertificateSecretOutput
	ToConnectionKafkaSslCertificateSecretOutputWithContext(context.Context) ConnectionKafkaSslCertificateSecretOutput
}

type ConnectionKafkaSslCertificateSecretArgs struct {
	// The identifier for the connection database.
	DatabaseName pulumi.StringPtrInput `pulumi:"databaseName"`
	// The identifier for the connection.
	Name pulumi.StringInput `pulumi:"name"`
	// The identifier for the connection schema.
	SchemaName pulumi.StringPtrInput `pulumi:"schemaName"`
}

func (ConnectionKafkaSslCertificateSecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionKafkaSslCertificateSecret)(nil)).Elem()
}

func (i ConnectionKafkaSslCertificateSecretArgs) ToConnectionKafkaSslCertificateSecretOutput() ConnectionKafkaSslCertificateSecretOutput {
	return i.ToConnectionKafkaSslCertificateSecretOutputWithContext(context.Background())
}

func (i ConnectionKafkaSslCertificateSecretArgs) ToConnectionKafkaSslCertificateSecretOutputWithContext(ctx context.Context) ConnectionKafkaSslCertificateSecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionKafkaSslCertificateSecretOutput)
}

func (i ConnectionKafkaSslCertificateSecretArgs) ToConnectionKafkaSslCertificateSecretPtrOutput() ConnectionKafkaSslCertificateSecretPtrOutput {
	return i.ToConnectionKafkaSslCertificateSecretPtrOutputWithContext(context.Background())
}

func (i ConnectionKafkaSslCertificateSecretArgs) ToConnectionKafkaSslCertificateSecretPtrOutputWithContext(ctx context.Context) ConnectionKafkaSslCertificateSecretPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionKafkaSslCertificateSecretOutput).ToConnectionKafkaSslCertificateSecretPtrOutputWithContext(ctx)
}

// ConnectionKafkaSslCertificateSecretPtrInput is an input type that accepts ConnectionKafkaSslCertificateSecretArgs, ConnectionKafkaSslCertificateSecretPtr and ConnectionKafkaSslCertificateSecretPtrOutput values.
// You can construct a concrete instance of `ConnectionKafkaSslCertificateSecretPtrInput` via:
//
//	        ConnectionKafkaSslCertificateSecretArgs{...}
//
//	or:
//
//	        nil
type ConnectionKafkaSslCertificateSecretPtrInput interface {
	pulumi.Input

	ToConnectionKafkaSslCertificateSecretPtrOutput() ConnectionKafkaSslCertificateSecretPtrOutput
	ToConnectionKafkaSslCertificateSecretPtrOutputWithContext(context.Context) ConnectionKafkaSslCertificateSecretPtrOutput
}

type connectionKafkaSslCertificateSecretPtrType ConnectionKafkaSslCertificateSecretArgs

func ConnectionKafkaSslCertificateSecretPtr(v *ConnectionKafkaSslCertificateSecretArgs) ConnectionKafkaSslCertificateSecretPtrInput {
	return (*connectionKafkaSslCertificateSecretPtrType)(v)
}

func (*connectionKafkaSslCertificateSecretPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionKafkaSslCertificateSecret)(nil)).Elem()
}

func (i *connectionKafkaSslCertificateSecretPtrType) ToConnectionKafkaSslCertificateSecretPtrOutput() ConnectionKafkaSslCertificateSecretPtrOutput {
	return i.ToConnectionKafkaSslCertificateSecretPtrOutputWithContext(context.Background())
}

func (i *connectionKafkaSslCertificateSecretPtrType) ToConnectionKafkaSslCertificateSecretPtrOutputWithContext(ctx context.Context) ConnectionKafkaSslCertificateSecretPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionKafkaSslCertificateSecretPtrOutput)
}

type ConnectionKafkaSslCertificateSecretOutput struct{ *pulumi.OutputState }

func (ConnectionKafkaSslCertificateSecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionKafkaSslCertificateSecret)(nil)).Elem()
}

func (o ConnectionKafkaSslCertificateSecretOutput) ToConnectionKafkaSslCertificateSecretOutput() ConnectionKafkaSslCertificateSecretOutput {
	return o
}

func (o ConnectionKafkaSslCertificateSecretOutput) ToConnectionKafkaSslCertificateSecretOutputWithContext(ctx context.Context) ConnectionKafkaSslCertificateSecretOutput {
	return o
}

func (o ConnectionKafkaSslCertificateSecretOutput) ToConnectionKafkaSslCertificateSecretPtrOutput() ConnectionKafkaSslCertificateSecretPtrOutput {
	return o.ToConnectionKafkaSslCertificateSecretPtrOutputWithContext(context.Background())
}

func (o ConnectionKafkaSslCertificateSecretOutput) ToConnectionKafkaSslCertificateSecretPtrOutputWithContext(ctx context.Context) ConnectionKafkaSslCertificateSecretPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionKafkaSslCertificateSecret) *ConnectionKafkaSslCertificateSecret {
		return &v
	}).(ConnectionKafkaSslCertificateSecretPtrOutput)
}

// The identifier for the connection database.
func (o ConnectionKafkaSslCertificateSecretOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionKafkaSslCertificateSecret) *string { return v.DatabaseName }).(pulumi.StringPtrOutput)
}

// The identifier for the connection.
func (o ConnectionKafkaSslCertificateSecretOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionKafkaSslCertificateSecret) string { return v.Name }).(pulumi.StringOutput)
}

// The identifier for the connection schema.
func (o ConnectionKafkaSslCertificateSecretOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionKafkaSslCertificateSecret) *string { return v.SchemaName }).(pulumi.StringPtrOutput)
}

type ConnectionKafkaSslCertificateSecretPtrOutput struct{ *pulumi.OutputState }

func (ConnectionKafkaSslCertificateSecretPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionKafkaSslCertificateSecret)(nil)).Elem()
}

func (o ConnectionKafkaSslCertificateSecretPtrOutput) ToConnectionKafkaSslCertificateSecretPtrOutput() ConnectionKafkaSslCertificateSecretPtrOutput {
	return o
}

func (o ConnectionKafkaSslCertificateSecretPtrOutput) ToConnectionKafkaSslCertificateSecretPtrOutputWithContext(ctx context.Context) ConnectionKafkaSslCertificateSecretPtrOutput {
	return o
}

func (o ConnectionKafkaSslCertificateSecretPtrOutput) Elem() ConnectionKafkaSslCertificateSecretOutput {
	return o.ApplyT(func(v *ConnectionKafkaSslCertificateSecret) ConnectionKafkaSslCertificateSecret {
		if v != nil {
			return *v
		}
		var ret ConnectionKafkaSslCertificateSecret
		return ret
	}).(ConnectionKafkaSslCertificateSecretOutput)
}

// The identifier for the connection database.
func (o ConnectionKafkaSslCertificateSecretPtrOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionKafkaSslCertificateSecret) *string {
		if v == nil {
			return nil
		}
		return v.DatabaseName
	}).(pulumi.StringPtrOutput)
}

// The identifier for the connection.
func (o ConnectionKafkaSslCertificateSecretPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionKafkaSslCertificateSecret) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The identifier for the connection schema.
func (o ConnectionKafkaSslCertificateSecretPtrOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionKafkaSslCertificateSecret) *string {
		if v == nil {
			return nil
		}
		return v.SchemaName
	}).(pulumi.StringPtrOutput)
}

type ConnectionKafkaSslKey struct {
	// The sslKey database name.
	DatabaseName *string `pulumi:"databaseName"`
	// The sslKey name.
	Name string `pulumi:"name"`
	// The sslKey schema name.
	SchemaName *string `pulumi:"schemaName"`
}

// ConnectionKafkaSslKeyInput is an input type that accepts ConnectionKafkaSslKeyArgs and ConnectionKafkaSslKeyOutput values.
// You can construct a concrete instance of `ConnectionKafkaSslKeyInput` via:
//
//	ConnectionKafkaSslKeyArgs{...}
type ConnectionKafkaSslKeyInput interface {
	pulumi.Input

	ToConnectionKafkaSslKeyOutput() ConnectionKafkaSslKeyOutput
	ToConnectionKafkaSslKeyOutputWithContext(context.Context) ConnectionKafkaSslKeyOutput
}

type ConnectionKafkaSslKeyArgs struct {
	// The sslKey database name.
	DatabaseName pulumi.StringPtrInput `pulumi:"databaseName"`
	// The sslKey name.
	Name pulumi.StringInput `pulumi:"name"`
	// The sslKey schema name.
	SchemaName pulumi.StringPtrInput `pulumi:"schemaName"`
}

func (ConnectionKafkaSslKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionKafkaSslKey)(nil)).Elem()
}

func (i ConnectionKafkaSslKeyArgs) ToConnectionKafkaSslKeyOutput() ConnectionKafkaSslKeyOutput {
	return i.ToConnectionKafkaSslKeyOutputWithContext(context.Background())
}

func (i ConnectionKafkaSslKeyArgs) ToConnectionKafkaSslKeyOutputWithContext(ctx context.Context) ConnectionKafkaSslKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionKafkaSslKeyOutput)
}

func (i ConnectionKafkaSslKeyArgs) ToConnectionKafkaSslKeyPtrOutput() ConnectionKafkaSslKeyPtrOutput {
	return i.ToConnectionKafkaSslKeyPtrOutputWithContext(context.Background())
}

func (i ConnectionKafkaSslKeyArgs) ToConnectionKafkaSslKeyPtrOutputWithContext(ctx context.Context) ConnectionKafkaSslKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionKafkaSslKeyOutput).ToConnectionKafkaSslKeyPtrOutputWithContext(ctx)
}

// ConnectionKafkaSslKeyPtrInput is an input type that accepts ConnectionKafkaSslKeyArgs, ConnectionKafkaSslKeyPtr and ConnectionKafkaSslKeyPtrOutput values.
// You can construct a concrete instance of `ConnectionKafkaSslKeyPtrInput` via:
//
//	        ConnectionKafkaSslKeyArgs{...}
//
//	or:
//
//	        nil
type ConnectionKafkaSslKeyPtrInput interface {
	pulumi.Input

	ToConnectionKafkaSslKeyPtrOutput() ConnectionKafkaSslKeyPtrOutput
	ToConnectionKafkaSslKeyPtrOutputWithContext(context.Context) ConnectionKafkaSslKeyPtrOutput
}

type connectionKafkaSslKeyPtrType ConnectionKafkaSslKeyArgs

func ConnectionKafkaSslKeyPtr(v *ConnectionKafkaSslKeyArgs) ConnectionKafkaSslKeyPtrInput {
	return (*connectionKafkaSslKeyPtrType)(v)
}

func (*connectionKafkaSslKeyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionKafkaSslKey)(nil)).Elem()
}

func (i *connectionKafkaSslKeyPtrType) ToConnectionKafkaSslKeyPtrOutput() ConnectionKafkaSslKeyPtrOutput {
	return i.ToConnectionKafkaSslKeyPtrOutputWithContext(context.Background())
}

func (i *connectionKafkaSslKeyPtrType) ToConnectionKafkaSslKeyPtrOutputWithContext(ctx context.Context) ConnectionKafkaSslKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionKafkaSslKeyPtrOutput)
}

type ConnectionKafkaSslKeyOutput struct{ *pulumi.OutputState }

func (ConnectionKafkaSslKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionKafkaSslKey)(nil)).Elem()
}

func (o ConnectionKafkaSslKeyOutput) ToConnectionKafkaSslKeyOutput() ConnectionKafkaSslKeyOutput {
	return o
}

func (o ConnectionKafkaSslKeyOutput) ToConnectionKafkaSslKeyOutputWithContext(ctx context.Context) ConnectionKafkaSslKeyOutput {
	return o
}

func (o ConnectionKafkaSslKeyOutput) ToConnectionKafkaSslKeyPtrOutput() ConnectionKafkaSslKeyPtrOutput {
	return o.ToConnectionKafkaSslKeyPtrOutputWithContext(context.Background())
}

func (o ConnectionKafkaSslKeyOutput) ToConnectionKafkaSslKeyPtrOutputWithContext(ctx context.Context) ConnectionKafkaSslKeyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionKafkaSslKey) *ConnectionKafkaSslKey {
		return &v
	}).(ConnectionKafkaSslKeyPtrOutput)
}

// The sslKey database name.
func (o ConnectionKafkaSslKeyOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionKafkaSslKey) *string { return v.DatabaseName }).(pulumi.StringPtrOutput)
}

// The sslKey name.
func (o ConnectionKafkaSslKeyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionKafkaSslKey) string { return v.Name }).(pulumi.StringOutput)
}

// The sslKey schema name.
func (o ConnectionKafkaSslKeyOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionKafkaSslKey) *string { return v.SchemaName }).(pulumi.StringPtrOutput)
}

type ConnectionKafkaSslKeyPtrOutput struct{ *pulumi.OutputState }

func (ConnectionKafkaSslKeyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionKafkaSslKey)(nil)).Elem()
}

func (o ConnectionKafkaSslKeyPtrOutput) ToConnectionKafkaSslKeyPtrOutput() ConnectionKafkaSslKeyPtrOutput {
	return o
}

func (o ConnectionKafkaSslKeyPtrOutput) ToConnectionKafkaSslKeyPtrOutputWithContext(ctx context.Context) ConnectionKafkaSslKeyPtrOutput {
	return o
}

func (o ConnectionKafkaSslKeyPtrOutput) Elem() ConnectionKafkaSslKeyOutput {
	return o.ApplyT(func(v *ConnectionKafkaSslKey) ConnectionKafkaSslKey {
		if v != nil {
			return *v
		}
		var ret ConnectionKafkaSslKey
		return ret
	}).(ConnectionKafkaSslKeyOutput)
}

// The sslKey database name.
func (o ConnectionKafkaSslKeyPtrOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionKafkaSslKey) *string {
		if v == nil {
			return nil
		}
		return v.DatabaseName
	}).(pulumi.StringPtrOutput)
}

// The sslKey name.
func (o ConnectionKafkaSslKeyPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionKafkaSslKey) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The sslKey schema name.
func (o ConnectionKafkaSslKeyPtrOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionKafkaSslKey) *string {
		if v == nil {
			return nil
		}
		return v.SchemaName
	}).(pulumi.StringPtrOutput)
}

type ConnectionPostgresAwsPrivatelink struct {
	// The awsPrivatelink database name.
	DatabaseName *string `pulumi:"databaseName"`
	// The awsPrivatelink name.
	Name string `pulumi:"name"`
	// The awsPrivatelink schema name.
	SchemaName *string `pulumi:"schemaName"`
}

// ConnectionPostgresAwsPrivatelinkInput is an input type that accepts ConnectionPostgresAwsPrivatelinkArgs and ConnectionPostgresAwsPrivatelinkOutput values.
// You can construct a concrete instance of `ConnectionPostgresAwsPrivatelinkInput` via:
//
//	ConnectionPostgresAwsPrivatelinkArgs{...}
type ConnectionPostgresAwsPrivatelinkInput interface {
	pulumi.Input

	ToConnectionPostgresAwsPrivatelinkOutput() ConnectionPostgresAwsPrivatelinkOutput
	ToConnectionPostgresAwsPrivatelinkOutputWithContext(context.Context) ConnectionPostgresAwsPrivatelinkOutput
}

type ConnectionPostgresAwsPrivatelinkArgs struct {
	// The awsPrivatelink database name.
	DatabaseName pulumi.StringPtrInput `pulumi:"databaseName"`
	// The awsPrivatelink name.
	Name pulumi.StringInput `pulumi:"name"`
	// The awsPrivatelink schema name.
	SchemaName pulumi.StringPtrInput `pulumi:"schemaName"`
}

func (ConnectionPostgresAwsPrivatelinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionPostgresAwsPrivatelink)(nil)).Elem()
}

func (i ConnectionPostgresAwsPrivatelinkArgs) ToConnectionPostgresAwsPrivatelinkOutput() ConnectionPostgresAwsPrivatelinkOutput {
	return i.ToConnectionPostgresAwsPrivatelinkOutputWithContext(context.Background())
}

func (i ConnectionPostgresAwsPrivatelinkArgs) ToConnectionPostgresAwsPrivatelinkOutputWithContext(ctx context.Context) ConnectionPostgresAwsPrivatelinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionPostgresAwsPrivatelinkOutput)
}

func (i ConnectionPostgresAwsPrivatelinkArgs) ToConnectionPostgresAwsPrivatelinkPtrOutput() ConnectionPostgresAwsPrivatelinkPtrOutput {
	return i.ToConnectionPostgresAwsPrivatelinkPtrOutputWithContext(context.Background())
}

func (i ConnectionPostgresAwsPrivatelinkArgs) ToConnectionPostgresAwsPrivatelinkPtrOutputWithContext(ctx context.Context) ConnectionPostgresAwsPrivatelinkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionPostgresAwsPrivatelinkOutput).ToConnectionPostgresAwsPrivatelinkPtrOutputWithContext(ctx)
}

// ConnectionPostgresAwsPrivatelinkPtrInput is an input type that accepts ConnectionPostgresAwsPrivatelinkArgs, ConnectionPostgresAwsPrivatelinkPtr and ConnectionPostgresAwsPrivatelinkPtrOutput values.
// You can construct a concrete instance of `ConnectionPostgresAwsPrivatelinkPtrInput` via:
//
//	        ConnectionPostgresAwsPrivatelinkArgs{...}
//
//	or:
//
//	        nil
type ConnectionPostgresAwsPrivatelinkPtrInput interface {
	pulumi.Input

	ToConnectionPostgresAwsPrivatelinkPtrOutput() ConnectionPostgresAwsPrivatelinkPtrOutput
	ToConnectionPostgresAwsPrivatelinkPtrOutputWithContext(context.Context) ConnectionPostgresAwsPrivatelinkPtrOutput
}

type connectionPostgresAwsPrivatelinkPtrType ConnectionPostgresAwsPrivatelinkArgs

func ConnectionPostgresAwsPrivatelinkPtr(v *ConnectionPostgresAwsPrivatelinkArgs) ConnectionPostgresAwsPrivatelinkPtrInput {
	return (*connectionPostgresAwsPrivatelinkPtrType)(v)
}

func (*connectionPostgresAwsPrivatelinkPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionPostgresAwsPrivatelink)(nil)).Elem()
}

func (i *connectionPostgresAwsPrivatelinkPtrType) ToConnectionPostgresAwsPrivatelinkPtrOutput() ConnectionPostgresAwsPrivatelinkPtrOutput {
	return i.ToConnectionPostgresAwsPrivatelinkPtrOutputWithContext(context.Background())
}

func (i *connectionPostgresAwsPrivatelinkPtrType) ToConnectionPostgresAwsPrivatelinkPtrOutputWithContext(ctx context.Context) ConnectionPostgresAwsPrivatelinkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionPostgresAwsPrivatelinkPtrOutput)
}

type ConnectionPostgresAwsPrivatelinkOutput struct{ *pulumi.OutputState }

func (ConnectionPostgresAwsPrivatelinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionPostgresAwsPrivatelink)(nil)).Elem()
}

func (o ConnectionPostgresAwsPrivatelinkOutput) ToConnectionPostgresAwsPrivatelinkOutput() ConnectionPostgresAwsPrivatelinkOutput {
	return o
}

func (o ConnectionPostgresAwsPrivatelinkOutput) ToConnectionPostgresAwsPrivatelinkOutputWithContext(ctx context.Context) ConnectionPostgresAwsPrivatelinkOutput {
	return o
}

func (o ConnectionPostgresAwsPrivatelinkOutput) ToConnectionPostgresAwsPrivatelinkPtrOutput() ConnectionPostgresAwsPrivatelinkPtrOutput {
	return o.ToConnectionPostgresAwsPrivatelinkPtrOutputWithContext(context.Background())
}

func (o ConnectionPostgresAwsPrivatelinkOutput) ToConnectionPostgresAwsPrivatelinkPtrOutputWithContext(ctx context.Context) ConnectionPostgresAwsPrivatelinkPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionPostgresAwsPrivatelink) *ConnectionPostgresAwsPrivatelink {
		return &v
	}).(ConnectionPostgresAwsPrivatelinkPtrOutput)
}

// The awsPrivatelink database name.
func (o ConnectionPostgresAwsPrivatelinkOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionPostgresAwsPrivatelink) *string { return v.DatabaseName }).(pulumi.StringPtrOutput)
}

// The awsPrivatelink name.
func (o ConnectionPostgresAwsPrivatelinkOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionPostgresAwsPrivatelink) string { return v.Name }).(pulumi.StringOutput)
}

// The awsPrivatelink schema name.
func (o ConnectionPostgresAwsPrivatelinkOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionPostgresAwsPrivatelink) *string { return v.SchemaName }).(pulumi.StringPtrOutput)
}

type ConnectionPostgresAwsPrivatelinkPtrOutput struct{ *pulumi.OutputState }

func (ConnectionPostgresAwsPrivatelinkPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionPostgresAwsPrivatelink)(nil)).Elem()
}

func (o ConnectionPostgresAwsPrivatelinkPtrOutput) ToConnectionPostgresAwsPrivatelinkPtrOutput() ConnectionPostgresAwsPrivatelinkPtrOutput {
	return o
}

func (o ConnectionPostgresAwsPrivatelinkPtrOutput) ToConnectionPostgresAwsPrivatelinkPtrOutputWithContext(ctx context.Context) ConnectionPostgresAwsPrivatelinkPtrOutput {
	return o
}

func (o ConnectionPostgresAwsPrivatelinkPtrOutput) Elem() ConnectionPostgresAwsPrivatelinkOutput {
	return o.ApplyT(func(v *ConnectionPostgresAwsPrivatelink) ConnectionPostgresAwsPrivatelink {
		if v != nil {
			return *v
		}
		var ret ConnectionPostgresAwsPrivatelink
		return ret
	}).(ConnectionPostgresAwsPrivatelinkOutput)
}

// The awsPrivatelink database name.
func (o ConnectionPostgresAwsPrivatelinkPtrOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionPostgresAwsPrivatelink) *string {
		if v == nil {
			return nil
		}
		return v.DatabaseName
	}).(pulumi.StringPtrOutput)
}

// The awsPrivatelink name.
func (o ConnectionPostgresAwsPrivatelinkPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionPostgresAwsPrivatelink) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The awsPrivatelink schema name.
func (o ConnectionPostgresAwsPrivatelinkPtrOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionPostgresAwsPrivatelink) *string {
		if v == nil {
			return nil
		}
		return v.SchemaName
	}).(pulumi.StringPtrOutput)
}

type ConnectionPostgresPassword struct {
	// The password database name.
	DatabaseName *string `pulumi:"databaseName"`
	// The password name.
	Name string `pulumi:"name"`
	// The password schema name.
	SchemaName *string `pulumi:"schemaName"`
}

// ConnectionPostgresPasswordInput is an input type that accepts ConnectionPostgresPasswordArgs and ConnectionPostgresPasswordOutput values.
// You can construct a concrete instance of `ConnectionPostgresPasswordInput` via:
//
//	ConnectionPostgresPasswordArgs{...}
type ConnectionPostgresPasswordInput interface {
	pulumi.Input

	ToConnectionPostgresPasswordOutput() ConnectionPostgresPasswordOutput
	ToConnectionPostgresPasswordOutputWithContext(context.Context) ConnectionPostgresPasswordOutput
}

type ConnectionPostgresPasswordArgs struct {
	// The password database name.
	DatabaseName pulumi.StringPtrInput `pulumi:"databaseName"`
	// The password name.
	Name pulumi.StringInput `pulumi:"name"`
	// The password schema name.
	SchemaName pulumi.StringPtrInput `pulumi:"schemaName"`
}

func (ConnectionPostgresPasswordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionPostgresPassword)(nil)).Elem()
}

func (i ConnectionPostgresPasswordArgs) ToConnectionPostgresPasswordOutput() ConnectionPostgresPasswordOutput {
	return i.ToConnectionPostgresPasswordOutputWithContext(context.Background())
}

func (i ConnectionPostgresPasswordArgs) ToConnectionPostgresPasswordOutputWithContext(ctx context.Context) ConnectionPostgresPasswordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionPostgresPasswordOutput)
}

func (i ConnectionPostgresPasswordArgs) ToConnectionPostgresPasswordPtrOutput() ConnectionPostgresPasswordPtrOutput {
	return i.ToConnectionPostgresPasswordPtrOutputWithContext(context.Background())
}

func (i ConnectionPostgresPasswordArgs) ToConnectionPostgresPasswordPtrOutputWithContext(ctx context.Context) ConnectionPostgresPasswordPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionPostgresPasswordOutput).ToConnectionPostgresPasswordPtrOutputWithContext(ctx)
}

// ConnectionPostgresPasswordPtrInput is an input type that accepts ConnectionPostgresPasswordArgs, ConnectionPostgresPasswordPtr and ConnectionPostgresPasswordPtrOutput values.
// You can construct a concrete instance of `ConnectionPostgresPasswordPtrInput` via:
//
//	        ConnectionPostgresPasswordArgs{...}
//
//	or:
//
//	        nil
type ConnectionPostgresPasswordPtrInput interface {
	pulumi.Input

	ToConnectionPostgresPasswordPtrOutput() ConnectionPostgresPasswordPtrOutput
	ToConnectionPostgresPasswordPtrOutputWithContext(context.Context) ConnectionPostgresPasswordPtrOutput
}

type connectionPostgresPasswordPtrType ConnectionPostgresPasswordArgs

func ConnectionPostgresPasswordPtr(v *ConnectionPostgresPasswordArgs) ConnectionPostgresPasswordPtrInput {
	return (*connectionPostgresPasswordPtrType)(v)
}

func (*connectionPostgresPasswordPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionPostgresPassword)(nil)).Elem()
}

func (i *connectionPostgresPasswordPtrType) ToConnectionPostgresPasswordPtrOutput() ConnectionPostgresPasswordPtrOutput {
	return i.ToConnectionPostgresPasswordPtrOutputWithContext(context.Background())
}

func (i *connectionPostgresPasswordPtrType) ToConnectionPostgresPasswordPtrOutputWithContext(ctx context.Context) ConnectionPostgresPasswordPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionPostgresPasswordPtrOutput)
}

type ConnectionPostgresPasswordOutput struct{ *pulumi.OutputState }

func (ConnectionPostgresPasswordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionPostgresPassword)(nil)).Elem()
}

func (o ConnectionPostgresPasswordOutput) ToConnectionPostgresPasswordOutput() ConnectionPostgresPasswordOutput {
	return o
}

func (o ConnectionPostgresPasswordOutput) ToConnectionPostgresPasswordOutputWithContext(ctx context.Context) ConnectionPostgresPasswordOutput {
	return o
}

func (o ConnectionPostgresPasswordOutput) ToConnectionPostgresPasswordPtrOutput() ConnectionPostgresPasswordPtrOutput {
	return o.ToConnectionPostgresPasswordPtrOutputWithContext(context.Background())
}

func (o ConnectionPostgresPasswordOutput) ToConnectionPostgresPasswordPtrOutputWithContext(ctx context.Context) ConnectionPostgresPasswordPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionPostgresPassword) *ConnectionPostgresPassword {
		return &v
	}).(ConnectionPostgresPasswordPtrOutput)
}

// The password database name.
func (o ConnectionPostgresPasswordOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionPostgresPassword) *string { return v.DatabaseName }).(pulumi.StringPtrOutput)
}

// The password name.
func (o ConnectionPostgresPasswordOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionPostgresPassword) string { return v.Name }).(pulumi.StringOutput)
}

// The password schema name.
func (o ConnectionPostgresPasswordOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionPostgresPassword) *string { return v.SchemaName }).(pulumi.StringPtrOutput)
}

type ConnectionPostgresPasswordPtrOutput struct{ *pulumi.OutputState }

func (ConnectionPostgresPasswordPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionPostgresPassword)(nil)).Elem()
}

func (o ConnectionPostgresPasswordPtrOutput) ToConnectionPostgresPasswordPtrOutput() ConnectionPostgresPasswordPtrOutput {
	return o
}

func (o ConnectionPostgresPasswordPtrOutput) ToConnectionPostgresPasswordPtrOutputWithContext(ctx context.Context) ConnectionPostgresPasswordPtrOutput {
	return o
}

func (o ConnectionPostgresPasswordPtrOutput) Elem() ConnectionPostgresPasswordOutput {
	return o.ApplyT(func(v *ConnectionPostgresPassword) ConnectionPostgresPassword {
		if v != nil {
			return *v
		}
		var ret ConnectionPostgresPassword
		return ret
	}).(ConnectionPostgresPasswordOutput)
}

// The password database name.
func (o ConnectionPostgresPasswordPtrOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionPostgresPassword) *string {
		if v == nil {
			return nil
		}
		return v.DatabaseName
	}).(pulumi.StringPtrOutput)
}

// The password name.
func (o ConnectionPostgresPasswordPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionPostgresPassword) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The password schema name.
func (o ConnectionPostgresPasswordPtrOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionPostgresPassword) *string {
		if v == nil {
			return nil
		}
		return v.SchemaName
	}).(pulumi.StringPtrOutput)
}

type ConnectionPostgresSshTunnel struct {
	// The sshTunnel database name.
	DatabaseName *string `pulumi:"databaseName"`
	// The sshTunnel name.
	Name string `pulumi:"name"`
	// The sshTunnel schema name.
	SchemaName *string `pulumi:"schemaName"`
}

// ConnectionPostgresSshTunnelInput is an input type that accepts ConnectionPostgresSshTunnelArgs and ConnectionPostgresSshTunnelOutput values.
// You can construct a concrete instance of `ConnectionPostgresSshTunnelInput` via:
//
//	ConnectionPostgresSshTunnelArgs{...}
type ConnectionPostgresSshTunnelInput interface {
	pulumi.Input

	ToConnectionPostgresSshTunnelOutput() ConnectionPostgresSshTunnelOutput
	ToConnectionPostgresSshTunnelOutputWithContext(context.Context) ConnectionPostgresSshTunnelOutput
}

type ConnectionPostgresSshTunnelArgs struct {
	// The sshTunnel database name.
	DatabaseName pulumi.StringPtrInput `pulumi:"databaseName"`
	// The sshTunnel name.
	Name pulumi.StringInput `pulumi:"name"`
	// The sshTunnel schema name.
	SchemaName pulumi.StringPtrInput `pulumi:"schemaName"`
}

func (ConnectionPostgresSshTunnelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionPostgresSshTunnel)(nil)).Elem()
}

func (i ConnectionPostgresSshTunnelArgs) ToConnectionPostgresSshTunnelOutput() ConnectionPostgresSshTunnelOutput {
	return i.ToConnectionPostgresSshTunnelOutputWithContext(context.Background())
}

func (i ConnectionPostgresSshTunnelArgs) ToConnectionPostgresSshTunnelOutputWithContext(ctx context.Context) ConnectionPostgresSshTunnelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionPostgresSshTunnelOutput)
}

func (i ConnectionPostgresSshTunnelArgs) ToConnectionPostgresSshTunnelPtrOutput() ConnectionPostgresSshTunnelPtrOutput {
	return i.ToConnectionPostgresSshTunnelPtrOutputWithContext(context.Background())
}

func (i ConnectionPostgresSshTunnelArgs) ToConnectionPostgresSshTunnelPtrOutputWithContext(ctx context.Context) ConnectionPostgresSshTunnelPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionPostgresSshTunnelOutput).ToConnectionPostgresSshTunnelPtrOutputWithContext(ctx)
}

// ConnectionPostgresSshTunnelPtrInput is an input type that accepts ConnectionPostgresSshTunnelArgs, ConnectionPostgresSshTunnelPtr and ConnectionPostgresSshTunnelPtrOutput values.
// You can construct a concrete instance of `ConnectionPostgresSshTunnelPtrInput` via:
//
//	        ConnectionPostgresSshTunnelArgs{...}
//
//	or:
//
//	        nil
type ConnectionPostgresSshTunnelPtrInput interface {
	pulumi.Input

	ToConnectionPostgresSshTunnelPtrOutput() ConnectionPostgresSshTunnelPtrOutput
	ToConnectionPostgresSshTunnelPtrOutputWithContext(context.Context) ConnectionPostgresSshTunnelPtrOutput
}

type connectionPostgresSshTunnelPtrType ConnectionPostgresSshTunnelArgs

func ConnectionPostgresSshTunnelPtr(v *ConnectionPostgresSshTunnelArgs) ConnectionPostgresSshTunnelPtrInput {
	return (*connectionPostgresSshTunnelPtrType)(v)
}

func (*connectionPostgresSshTunnelPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionPostgresSshTunnel)(nil)).Elem()
}

func (i *connectionPostgresSshTunnelPtrType) ToConnectionPostgresSshTunnelPtrOutput() ConnectionPostgresSshTunnelPtrOutput {
	return i.ToConnectionPostgresSshTunnelPtrOutputWithContext(context.Background())
}

func (i *connectionPostgresSshTunnelPtrType) ToConnectionPostgresSshTunnelPtrOutputWithContext(ctx context.Context) ConnectionPostgresSshTunnelPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionPostgresSshTunnelPtrOutput)
}

type ConnectionPostgresSshTunnelOutput struct{ *pulumi.OutputState }

func (ConnectionPostgresSshTunnelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionPostgresSshTunnel)(nil)).Elem()
}

func (o ConnectionPostgresSshTunnelOutput) ToConnectionPostgresSshTunnelOutput() ConnectionPostgresSshTunnelOutput {
	return o
}

func (o ConnectionPostgresSshTunnelOutput) ToConnectionPostgresSshTunnelOutputWithContext(ctx context.Context) ConnectionPostgresSshTunnelOutput {
	return o
}

func (o ConnectionPostgresSshTunnelOutput) ToConnectionPostgresSshTunnelPtrOutput() ConnectionPostgresSshTunnelPtrOutput {
	return o.ToConnectionPostgresSshTunnelPtrOutputWithContext(context.Background())
}

func (o ConnectionPostgresSshTunnelOutput) ToConnectionPostgresSshTunnelPtrOutputWithContext(ctx context.Context) ConnectionPostgresSshTunnelPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionPostgresSshTunnel) *ConnectionPostgresSshTunnel {
		return &v
	}).(ConnectionPostgresSshTunnelPtrOutput)
}

// The sshTunnel database name.
func (o ConnectionPostgresSshTunnelOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionPostgresSshTunnel) *string { return v.DatabaseName }).(pulumi.StringPtrOutput)
}

// The sshTunnel name.
func (o ConnectionPostgresSshTunnelOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionPostgresSshTunnel) string { return v.Name }).(pulumi.StringOutput)
}

// The sshTunnel schema name.
func (o ConnectionPostgresSshTunnelOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionPostgresSshTunnel) *string { return v.SchemaName }).(pulumi.StringPtrOutput)
}

type ConnectionPostgresSshTunnelPtrOutput struct{ *pulumi.OutputState }

func (ConnectionPostgresSshTunnelPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionPostgresSshTunnel)(nil)).Elem()
}

func (o ConnectionPostgresSshTunnelPtrOutput) ToConnectionPostgresSshTunnelPtrOutput() ConnectionPostgresSshTunnelPtrOutput {
	return o
}

func (o ConnectionPostgresSshTunnelPtrOutput) ToConnectionPostgresSshTunnelPtrOutputWithContext(ctx context.Context) ConnectionPostgresSshTunnelPtrOutput {
	return o
}

func (o ConnectionPostgresSshTunnelPtrOutput) Elem() ConnectionPostgresSshTunnelOutput {
	return o.ApplyT(func(v *ConnectionPostgresSshTunnel) ConnectionPostgresSshTunnel {
		if v != nil {
			return *v
		}
		var ret ConnectionPostgresSshTunnel
		return ret
	}).(ConnectionPostgresSshTunnelOutput)
}

// The sshTunnel database name.
func (o ConnectionPostgresSshTunnelPtrOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionPostgresSshTunnel) *string {
		if v == nil {
			return nil
		}
		return v.DatabaseName
	}).(pulumi.StringPtrOutput)
}

// The sshTunnel name.
func (o ConnectionPostgresSshTunnelPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionPostgresSshTunnel) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The sshTunnel schema name.
func (o ConnectionPostgresSshTunnelPtrOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionPostgresSshTunnel) *string {
		if v == nil {
			return nil
		}
		return v.SchemaName
	}).(pulumi.StringPtrOutput)
}

type ConnectionPostgresSslCertificate struct {
	// The ssl*certificate secret value.
	Secret *ConnectionPostgresSslCertificateSecret `pulumi:"secret"`
	// The sslCertificate text value.
	Text *string `pulumi:"text"`
}

// ConnectionPostgresSslCertificateInput is an input type that accepts ConnectionPostgresSslCertificateArgs and ConnectionPostgresSslCertificateOutput values.
// You can construct a concrete instance of `ConnectionPostgresSslCertificateInput` via:
//
//	ConnectionPostgresSslCertificateArgs{...}
type ConnectionPostgresSslCertificateInput interface {
	pulumi.Input

	ToConnectionPostgresSslCertificateOutput() ConnectionPostgresSslCertificateOutput
	ToConnectionPostgresSslCertificateOutputWithContext(context.Context) ConnectionPostgresSslCertificateOutput
}

type ConnectionPostgresSslCertificateArgs struct {
	// The ssl*certificate secret value.
	Secret ConnectionPostgresSslCertificateSecretPtrInput `pulumi:"secret"`
	// The sslCertificate text value.
	Text pulumi.StringPtrInput `pulumi:"text"`
}

func (ConnectionPostgresSslCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionPostgresSslCertificate)(nil)).Elem()
}

func (i ConnectionPostgresSslCertificateArgs) ToConnectionPostgresSslCertificateOutput() ConnectionPostgresSslCertificateOutput {
	return i.ToConnectionPostgresSslCertificateOutputWithContext(context.Background())
}

func (i ConnectionPostgresSslCertificateArgs) ToConnectionPostgresSslCertificateOutputWithContext(ctx context.Context) ConnectionPostgresSslCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionPostgresSslCertificateOutput)
}

func (i ConnectionPostgresSslCertificateArgs) ToConnectionPostgresSslCertificatePtrOutput() ConnectionPostgresSslCertificatePtrOutput {
	return i.ToConnectionPostgresSslCertificatePtrOutputWithContext(context.Background())
}

func (i ConnectionPostgresSslCertificateArgs) ToConnectionPostgresSslCertificatePtrOutputWithContext(ctx context.Context) ConnectionPostgresSslCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionPostgresSslCertificateOutput).ToConnectionPostgresSslCertificatePtrOutputWithContext(ctx)
}

// ConnectionPostgresSslCertificatePtrInput is an input type that accepts ConnectionPostgresSslCertificateArgs, ConnectionPostgresSslCertificatePtr and ConnectionPostgresSslCertificatePtrOutput values.
// You can construct a concrete instance of `ConnectionPostgresSslCertificatePtrInput` via:
//
//	        ConnectionPostgresSslCertificateArgs{...}
//
//	or:
//
//	        nil
type ConnectionPostgresSslCertificatePtrInput interface {
	pulumi.Input

	ToConnectionPostgresSslCertificatePtrOutput() ConnectionPostgresSslCertificatePtrOutput
	ToConnectionPostgresSslCertificatePtrOutputWithContext(context.Context) ConnectionPostgresSslCertificatePtrOutput
}

type connectionPostgresSslCertificatePtrType ConnectionPostgresSslCertificateArgs

func ConnectionPostgresSslCertificatePtr(v *ConnectionPostgresSslCertificateArgs) ConnectionPostgresSslCertificatePtrInput {
	return (*connectionPostgresSslCertificatePtrType)(v)
}

func (*connectionPostgresSslCertificatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionPostgresSslCertificate)(nil)).Elem()
}

func (i *connectionPostgresSslCertificatePtrType) ToConnectionPostgresSslCertificatePtrOutput() ConnectionPostgresSslCertificatePtrOutput {
	return i.ToConnectionPostgresSslCertificatePtrOutputWithContext(context.Background())
}

func (i *connectionPostgresSslCertificatePtrType) ToConnectionPostgresSslCertificatePtrOutputWithContext(ctx context.Context) ConnectionPostgresSslCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionPostgresSslCertificatePtrOutput)
}

type ConnectionPostgresSslCertificateOutput struct{ *pulumi.OutputState }

func (ConnectionPostgresSslCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionPostgresSslCertificate)(nil)).Elem()
}

func (o ConnectionPostgresSslCertificateOutput) ToConnectionPostgresSslCertificateOutput() ConnectionPostgresSslCertificateOutput {
	return o
}

func (o ConnectionPostgresSslCertificateOutput) ToConnectionPostgresSslCertificateOutputWithContext(ctx context.Context) ConnectionPostgresSslCertificateOutput {
	return o
}

func (o ConnectionPostgresSslCertificateOutput) ToConnectionPostgresSslCertificatePtrOutput() ConnectionPostgresSslCertificatePtrOutput {
	return o.ToConnectionPostgresSslCertificatePtrOutputWithContext(context.Background())
}

func (o ConnectionPostgresSslCertificateOutput) ToConnectionPostgresSslCertificatePtrOutputWithContext(ctx context.Context) ConnectionPostgresSslCertificatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionPostgresSslCertificate) *ConnectionPostgresSslCertificate {
		return &v
	}).(ConnectionPostgresSslCertificatePtrOutput)
}

// The ssl*certificate secret value.
func (o ConnectionPostgresSslCertificateOutput) Secret() ConnectionPostgresSslCertificateSecretPtrOutput {
	return o.ApplyT(func(v ConnectionPostgresSslCertificate) *ConnectionPostgresSslCertificateSecret { return v.Secret }).(ConnectionPostgresSslCertificateSecretPtrOutput)
}

// The sslCertificate text value.
func (o ConnectionPostgresSslCertificateOutput) Text() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionPostgresSslCertificate) *string { return v.Text }).(pulumi.StringPtrOutput)
}

type ConnectionPostgresSslCertificatePtrOutput struct{ *pulumi.OutputState }

func (ConnectionPostgresSslCertificatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionPostgresSslCertificate)(nil)).Elem()
}

func (o ConnectionPostgresSslCertificatePtrOutput) ToConnectionPostgresSslCertificatePtrOutput() ConnectionPostgresSslCertificatePtrOutput {
	return o
}

func (o ConnectionPostgresSslCertificatePtrOutput) ToConnectionPostgresSslCertificatePtrOutputWithContext(ctx context.Context) ConnectionPostgresSslCertificatePtrOutput {
	return o
}

func (o ConnectionPostgresSslCertificatePtrOutput) Elem() ConnectionPostgresSslCertificateOutput {
	return o.ApplyT(func(v *ConnectionPostgresSslCertificate) ConnectionPostgresSslCertificate {
		if v != nil {
			return *v
		}
		var ret ConnectionPostgresSslCertificate
		return ret
	}).(ConnectionPostgresSslCertificateOutput)
}

// The ssl*certificate secret value.
func (o ConnectionPostgresSslCertificatePtrOutput) Secret() ConnectionPostgresSslCertificateSecretPtrOutput {
	return o.ApplyT(func(v *ConnectionPostgresSslCertificate) *ConnectionPostgresSslCertificateSecret {
		if v == nil {
			return nil
		}
		return v.Secret
	}).(ConnectionPostgresSslCertificateSecretPtrOutput)
}

// The sslCertificate text value.
func (o ConnectionPostgresSslCertificatePtrOutput) Text() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionPostgresSslCertificate) *string {
		if v == nil {
			return nil
		}
		return v.Text
	}).(pulumi.StringPtrOutput)
}

type ConnectionPostgresSslCertificateAuthority struct {
	// The ssl*certificate*authority secret value.
	Secret *ConnectionPostgresSslCertificateAuthoritySecret `pulumi:"secret"`
	// The ssl*certificate*authority text value.
	Text *string `pulumi:"text"`
}

// ConnectionPostgresSslCertificateAuthorityInput is an input type that accepts ConnectionPostgresSslCertificateAuthorityArgs and ConnectionPostgresSslCertificateAuthorityOutput values.
// You can construct a concrete instance of `ConnectionPostgresSslCertificateAuthorityInput` via:
//
//	ConnectionPostgresSslCertificateAuthorityArgs{...}
type ConnectionPostgresSslCertificateAuthorityInput interface {
	pulumi.Input

	ToConnectionPostgresSslCertificateAuthorityOutput() ConnectionPostgresSslCertificateAuthorityOutput
	ToConnectionPostgresSslCertificateAuthorityOutputWithContext(context.Context) ConnectionPostgresSslCertificateAuthorityOutput
}

type ConnectionPostgresSslCertificateAuthorityArgs struct {
	// The ssl*certificate*authority secret value.
	Secret ConnectionPostgresSslCertificateAuthoritySecretPtrInput `pulumi:"secret"`
	// The ssl*certificate*authority text value.
	Text pulumi.StringPtrInput `pulumi:"text"`
}

func (ConnectionPostgresSslCertificateAuthorityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionPostgresSslCertificateAuthority)(nil)).Elem()
}

func (i ConnectionPostgresSslCertificateAuthorityArgs) ToConnectionPostgresSslCertificateAuthorityOutput() ConnectionPostgresSslCertificateAuthorityOutput {
	return i.ToConnectionPostgresSslCertificateAuthorityOutputWithContext(context.Background())
}

func (i ConnectionPostgresSslCertificateAuthorityArgs) ToConnectionPostgresSslCertificateAuthorityOutputWithContext(ctx context.Context) ConnectionPostgresSslCertificateAuthorityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionPostgresSslCertificateAuthorityOutput)
}

func (i ConnectionPostgresSslCertificateAuthorityArgs) ToConnectionPostgresSslCertificateAuthorityPtrOutput() ConnectionPostgresSslCertificateAuthorityPtrOutput {
	return i.ToConnectionPostgresSslCertificateAuthorityPtrOutputWithContext(context.Background())
}

func (i ConnectionPostgresSslCertificateAuthorityArgs) ToConnectionPostgresSslCertificateAuthorityPtrOutputWithContext(ctx context.Context) ConnectionPostgresSslCertificateAuthorityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionPostgresSslCertificateAuthorityOutput).ToConnectionPostgresSslCertificateAuthorityPtrOutputWithContext(ctx)
}

// ConnectionPostgresSslCertificateAuthorityPtrInput is an input type that accepts ConnectionPostgresSslCertificateAuthorityArgs, ConnectionPostgresSslCertificateAuthorityPtr and ConnectionPostgresSslCertificateAuthorityPtrOutput values.
// You can construct a concrete instance of `ConnectionPostgresSslCertificateAuthorityPtrInput` via:
//
//	        ConnectionPostgresSslCertificateAuthorityArgs{...}
//
//	or:
//
//	        nil
type ConnectionPostgresSslCertificateAuthorityPtrInput interface {
	pulumi.Input

	ToConnectionPostgresSslCertificateAuthorityPtrOutput() ConnectionPostgresSslCertificateAuthorityPtrOutput
	ToConnectionPostgresSslCertificateAuthorityPtrOutputWithContext(context.Context) ConnectionPostgresSslCertificateAuthorityPtrOutput
}

type connectionPostgresSslCertificateAuthorityPtrType ConnectionPostgresSslCertificateAuthorityArgs

func ConnectionPostgresSslCertificateAuthorityPtr(v *ConnectionPostgresSslCertificateAuthorityArgs) ConnectionPostgresSslCertificateAuthorityPtrInput {
	return (*connectionPostgresSslCertificateAuthorityPtrType)(v)
}

func (*connectionPostgresSslCertificateAuthorityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionPostgresSslCertificateAuthority)(nil)).Elem()
}

func (i *connectionPostgresSslCertificateAuthorityPtrType) ToConnectionPostgresSslCertificateAuthorityPtrOutput() ConnectionPostgresSslCertificateAuthorityPtrOutput {
	return i.ToConnectionPostgresSslCertificateAuthorityPtrOutputWithContext(context.Background())
}

func (i *connectionPostgresSslCertificateAuthorityPtrType) ToConnectionPostgresSslCertificateAuthorityPtrOutputWithContext(ctx context.Context) ConnectionPostgresSslCertificateAuthorityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionPostgresSslCertificateAuthorityPtrOutput)
}

type ConnectionPostgresSslCertificateAuthorityOutput struct{ *pulumi.OutputState }

func (ConnectionPostgresSslCertificateAuthorityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionPostgresSslCertificateAuthority)(nil)).Elem()
}

func (o ConnectionPostgresSslCertificateAuthorityOutput) ToConnectionPostgresSslCertificateAuthorityOutput() ConnectionPostgresSslCertificateAuthorityOutput {
	return o
}

func (o ConnectionPostgresSslCertificateAuthorityOutput) ToConnectionPostgresSslCertificateAuthorityOutputWithContext(ctx context.Context) ConnectionPostgresSslCertificateAuthorityOutput {
	return o
}

func (o ConnectionPostgresSslCertificateAuthorityOutput) ToConnectionPostgresSslCertificateAuthorityPtrOutput() ConnectionPostgresSslCertificateAuthorityPtrOutput {
	return o.ToConnectionPostgresSslCertificateAuthorityPtrOutputWithContext(context.Background())
}

func (o ConnectionPostgresSslCertificateAuthorityOutput) ToConnectionPostgresSslCertificateAuthorityPtrOutputWithContext(ctx context.Context) ConnectionPostgresSslCertificateAuthorityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionPostgresSslCertificateAuthority) *ConnectionPostgresSslCertificateAuthority {
		return &v
	}).(ConnectionPostgresSslCertificateAuthorityPtrOutput)
}

// The ssl*certificate*authority secret value.
func (o ConnectionPostgresSslCertificateAuthorityOutput) Secret() ConnectionPostgresSslCertificateAuthoritySecretPtrOutput {
	return o.ApplyT(func(v ConnectionPostgresSslCertificateAuthority) *ConnectionPostgresSslCertificateAuthoritySecret {
		return v.Secret
	}).(ConnectionPostgresSslCertificateAuthoritySecretPtrOutput)
}

// The ssl*certificate*authority text value.
func (o ConnectionPostgresSslCertificateAuthorityOutput) Text() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionPostgresSslCertificateAuthority) *string { return v.Text }).(pulumi.StringPtrOutput)
}

type ConnectionPostgresSslCertificateAuthorityPtrOutput struct{ *pulumi.OutputState }

func (ConnectionPostgresSslCertificateAuthorityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionPostgresSslCertificateAuthority)(nil)).Elem()
}

func (o ConnectionPostgresSslCertificateAuthorityPtrOutput) ToConnectionPostgresSslCertificateAuthorityPtrOutput() ConnectionPostgresSslCertificateAuthorityPtrOutput {
	return o
}

func (o ConnectionPostgresSslCertificateAuthorityPtrOutput) ToConnectionPostgresSslCertificateAuthorityPtrOutputWithContext(ctx context.Context) ConnectionPostgresSslCertificateAuthorityPtrOutput {
	return o
}

func (o ConnectionPostgresSslCertificateAuthorityPtrOutput) Elem() ConnectionPostgresSslCertificateAuthorityOutput {
	return o.ApplyT(func(v *ConnectionPostgresSslCertificateAuthority) ConnectionPostgresSslCertificateAuthority {
		if v != nil {
			return *v
		}
		var ret ConnectionPostgresSslCertificateAuthority
		return ret
	}).(ConnectionPostgresSslCertificateAuthorityOutput)
}

// The ssl*certificate*authority secret value.
func (o ConnectionPostgresSslCertificateAuthorityPtrOutput) Secret() ConnectionPostgresSslCertificateAuthoritySecretPtrOutput {
	return o.ApplyT(func(v *ConnectionPostgresSslCertificateAuthority) *ConnectionPostgresSslCertificateAuthoritySecret {
		if v == nil {
			return nil
		}
		return v.Secret
	}).(ConnectionPostgresSslCertificateAuthoritySecretPtrOutput)
}

// The ssl*certificate*authority text value.
func (o ConnectionPostgresSslCertificateAuthorityPtrOutput) Text() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionPostgresSslCertificateAuthority) *string {
		if v == nil {
			return nil
		}
		return v.Text
	}).(pulumi.StringPtrOutput)
}

type ConnectionPostgresSslCertificateAuthoritySecret struct {
	// The identifier for the connection database.
	DatabaseName *string `pulumi:"databaseName"`
	// The identifier for the connection.
	Name string `pulumi:"name"`
	// The identifier for the connection schema.
	SchemaName *string `pulumi:"schemaName"`
}

// ConnectionPostgresSslCertificateAuthoritySecretInput is an input type that accepts ConnectionPostgresSslCertificateAuthoritySecretArgs and ConnectionPostgresSslCertificateAuthoritySecretOutput values.
// You can construct a concrete instance of `ConnectionPostgresSslCertificateAuthoritySecretInput` via:
//
//	ConnectionPostgresSslCertificateAuthoritySecretArgs{...}
type ConnectionPostgresSslCertificateAuthoritySecretInput interface {
	pulumi.Input

	ToConnectionPostgresSslCertificateAuthoritySecretOutput() ConnectionPostgresSslCertificateAuthoritySecretOutput
	ToConnectionPostgresSslCertificateAuthoritySecretOutputWithContext(context.Context) ConnectionPostgresSslCertificateAuthoritySecretOutput
}

type ConnectionPostgresSslCertificateAuthoritySecretArgs struct {
	// The identifier for the connection database.
	DatabaseName pulumi.StringPtrInput `pulumi:"databaseName"`
	// The identifier for the connection.
	Name pulumi.StringInput `pulumi:"name"`
	// The identifier for the connection schema.
	SchemaName pulumi.StringPtrInput `pulumi:"schemaName"`
}

func (ConnectionPostgresSslCertificateAuthoritySecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionPostgresSslCertificateAuthoritySecret)(nil)).Elem()
}

func (i ConnectionPostgresSslCertificateAuthoritySecretArgs) ToConnectionPostgresSslCertificateAuthoritySecretOutput() ConnectionPostgresSslCertificateAuthoritySecretOutput {
	return i.ToConnectionPostgresSslCertificateAuthoritySecretOutputWithContext(context.Background())
}

func (i ConnectionPostgresSslCertificateAuthoritySecretArgs) ToConnectionPostgresSslCertificateAuthoritySecretOutputWithContext(ctx context.Context) ConnectionPostgresSslCertificateAuthoritySecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionPostgresSslCertificateAuthoritySecretOutput)
}

func (i ConnectionPostgresSslCertificateAuthoritySecretArgs) ToConnectionPostgresSslCertificateAuthoritySecretPtrOutput() ConnectionPostgresSslCertificateAuthoritySecretPtrOutput {
	return i.ToConnectionPostgresSslCertificateAuthoritySecretPtrOutputWithContext(context.Background())
}

func (i ConnectionPostgresSslCertificateAuthoritySecretArgs) ToConnectionPostgresSslCertificateAuthoritySecretPtrOutputWithContext(ctx context.Context) ConnectionPostgresSslCertificateAuthoritySecretPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionPostgresSslCertificateAuthoritySecretOutput).ToConnectionPostgresSslCertificateAuthoritySecretPtrOutputWithContext(ctx)
}

// ConnectionPostgresSslCertificateAuthoritySecretPtrInput is an input type that accepts ConnectionPostgresSslCertificateAuthoritySecretArgs, ConnectionPostgresSslCertificateAuthoritySecretPtr and ConnectionPostgresSslCertificateAuthoritySecretPtrOutput values.
// You can construct a concrete instance of `ConnectionPostgresSslCertificateAuthoritySecretPtrInput` via:
//
//	        ConnectionPostgresSslCertificateAuthoritySecretArgs{...}
//
//	or:
//
//	        nil
type ConnectionPostgresSslCertificateAuthoritySecretPtrInput interface {
	pulumi.Input

	ToConnectionPostgresSslCertificateAuthoritySecretPtrOutput() ConnectionPostgresSslCertificateAuthoritySecretPtrOutput
	ToConnectionPostgresSslCertificateAuthoritySecretPtrOutputWithContext(context.Context) ConnectionPostgresSslCertificateAuthoritySecretPtrOutput
}

type connectionPostgresSslCertificateAuthoritySecretPtrType ConnectionPostgresSslCertificateAuthoritySecretArgs

func ConnectionPostgresSslCertificateAuthoritySecretPtr(v *ConnectionPostgresSslCertificateAuthoritySecretArgs) ConnectionPostgresSslCertificateAuthoritySecretPtrInput {
	return (*connectionPostgresSslCertificateAuthoritySecretPtrType)(v)
}

func (*connectionPostgresSslCertificateAuthoritySecretPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionPostgresSslCertificateAuthoritySecret)(nil)).Elem()
}

func (i *connectionPostgresSslCertificateAuthoritySecretPtrType) ToConnectionPostgresSslCertificateAuthoritySecretPtrOutput() ConnectionPostgresSslCertificateAuthoritySecretPtrOutput {
	return i.ToConnectionPostgresSslCertificateAuthoritySecretPtrOutputWithContext(context.Background())
}

func (i *connectionPostgresSslCertificateAuthoritySecretPtrType) ToConnectionPostgresSslCertificateAuthoritySecretPtrOutputWithContext(ctx context.Context) ConnectionPostgresSslCertificateAuthoritySecretPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionPostgresSslCertificateAuthoritySecretPtrOutput)
}

type ConnectionPostgresSslCertificateAuthoritySecretOutput struct{ *pulumi.OutputState }

func (ConnectionPostgresSslCertificateAuthoritySecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionPostgresSslCertificateAuthoritySecret)(nil)).Elem()
}

func (o ConnectionPostgresSslCertificateAuthoritySecretOutput) ToConnectionPostgresSslCertificateAuthoritySecretOutput() ConnectionPostgresSslCertificateAuthoritySecretOutput {
	return o
}

func (o ConnectionPostgresSslCertificateAuthoritySecretOutput) ToConnectionPostgresSslCertificateAuthoritySecretOutputWithContext(ctx context.Context) ConnectionPostgresSslCertificateAuthoritySecretOutput {
	return o
}

func (o ConnectionPostgresSslCertificateAuthoritySecretOutput) ToConnectionPostgresSslCertificateAuthoritySecretPtrOutput() ConnectionPostgresSslCertificateAuthoritySecretPtrOutput {
	return o.ToConnectionPostgresSslCertificateAuthoritySecretPtrOutputWithContext(context.Background())
}

func (o ConnectionPostgresSslCertificateAuthoritySecretOutput) ToConnectionPostgresSslCertificateAuthoritySecretPtrOutputWithContext(ctx context.Context) ConnectionPostgresSslCertificateAuthoritySecretPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionPostgresSslCertificateAuthoritySecret) *ConnectionPostgresSslCertificateAuthoritySecret {
		return &v
	}).(ConnectionPostgresSslCertificateAuthoritySecretPtrOutput)
}

// The identifier for the connection database.
func (o ConnectionPostgresSslCertificateAuthoritySecretOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionPostgresSslCertificateAuthoritySecret) *string { return v.DatabaseName }).(pulumi.StringPtrOutput)
}

// The identifier for the connection.
func (o ConnectionPostgresSslCertificateAuthoritySecretOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionPostgresSslCertificateAuthoritySecret) string { return v.Name }).(pulumi.StringOutput)
}

// The identifier for the connection schema.
func (o ConnectionPostgresSslCertificateAuthoritySecretOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionPostgresSslCertificateAuthoritySecret) *string { return v.SchemaName }).(pulumi.StringPtrOutput)
}

type ConnectionPostgresSslCertificateAuthoritySecretPtrOutput struct{ *pulumi.OutputState }

func (ConnectionPostgresSslCertificateAuthoritySecretPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionPostgresSslCertificateAuthoritySecret)(nil)).Elem()
}

func (o ConnectionPostgresSslCertificateAuthoritySecretPtrOutput) ToConnectionPostgresSslCertificateAuthoritySecretPtrOutput() ConnectionPostgresSslCertificateAuthoritySecretPtrOutput {
	return o
}

func (o ConnectionPostgresSslCertificateAuthoritySecretPtrOutput) ToConnectionPostgresSslCertificateAuthoritySecretPtrOutputWithContext(ctx context.Context) ConnectionPostgresSslCertificateAuthoritySecretPtrOutput {
	return o
}

func (o ConnectionPostgresSslCertificateAuthoritySecretPtrOutput) Elem() ConnectionPostgresSslCertificateAuthoritySecretOutput {
	return o.ApplyT(func(v *ConnectionPostgresSslCertificateAuthoritySecret) ConnectionPostgresSslCertificateAuthoritySecret {
		if v != nil {
			return *v
		}
		var ret ConnectionPostgresSslCertificateAuthoritySecret
		return ret
	}).(ConnectionPostgresSslCertificateAuthoritySecretOutput)
}

// The identifier for the connection database.
func (o ConnectionPostgresSslCertificateAuthoritySecretPtrOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionPostgresSslCertificateAuthoritySecret) *string {
		if v == nil {
			return nil
		}
		return v.DatabaseName
	}).(pulumi.StringPtrOutput)
}

// The identifier for the connection.
func (o ConnectionPostgresSslCertificateAuthoritySecretPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionPostgresSslCertificateAuthoritySecret) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The identifier for the connection schema.
func (o ConnectionPostgresSslCertificateAuthoritySecretPtrOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionPostgresSslCertificateAuthoritySecret) *string {
		if v == nil {
			return nil
		}
		return v.SchemaName
	}).(pulumi.StringPtrOutput)
}

type ConnectionPostgresSslCertificateSecret struct {
	// The identifier for the connection database.
	DatabaseName *string `pulumi:"databaseName"`
	// The identifier for the connection.
	Name string `pulumi:"name"`
	// The identifier for the connection schema.
	SchemaName *string `pulumi:"schemaName"`
}

// ConnectionPostgresSslCertificateSecretInput is an input type that accepts ConnectionPostgresSslCertificateSecretArgs and ConnectionPostgresSslCertificateSecretOutput values.
// You can construct a concrete instance of `ConnectionPostgresSslCertificateSecretInput` via:
//
//	ConnectionPostgresSslCertificateSecretArgs{...}
type ConnectionPostgresSslCertificateSecretInput interface {
	pulumi.Input

	ToConnectionPostgresSslCertificateSecretOutput() ConnectionPostgresSslCertificateSecretOutput
	ToConnectionPostgresSslCertificateSecretOutputWithContext(context.Context) ConnectionPostgresSslCertificateSecretOutput
}

type ConnectionPostgresSslCertificateSecretArgs struct {
	// The identifier for the connection database.
	DatabaseName pulumi.StringPtrInput `pulumi:"databaseName"`
	// The identifier for the connection.
	Name pulumi.StringInput `pulumi:"name"`
	// The identifier for the connection schema.
	SchemaName pulumi.StringPtrInput `pulumi:"schemaName"`
}

func (ConnectionPostgresSslCertificateSecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionPostgresSslCertificateSecret)(nil)).Elem()
}

func (i ConnectionPostgresSslCertificateSecretArgs) ToConnectionPostgresSslCertificateSecretOutput() ConnectionPostgresSslCertificateSecretOutput {
	return i.ToConnectionPostgresSslCertificateSecretOutputWithContext(context.Background())
}

func (i ConnectionPostgresSslCertificateSecretArgs) ToConnectionPostgresSslCertificateSecretOutputWithContext(ctx context.Context) ConnectionPostgresSslCertificateSecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionPostgresSslCertificateSecretOutput)
}

func (i ConnectionPostgresSslCertificateSecretArgs) ToConnectionPostgresSslCertificateSecretPtrOutput() ConnectionPostgresSslCertificateSecretPtrOutput {
	return i.ToConnectionPostgresSslCertificateSecretPtrOutputWithContext(context.Background())
}

func (i ConnectionPostgresSslCertificateSecretArgs) ToConnectionPostgresSslCertificateSecretPtrOutputWithContext(ctx context.Context) ConnectionPostgresSslCertificateSecretPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionPostgresSslCertificateSecretOutput).ToConnectionPostgresSslCertificateSecretPtrOutputWithContext(ctx)
}

// ConnectionPostgresSslCertificateSecretPtrInput is an input type that accepts ConnectionPostgresSslCertificateSecretArgs, ConnectionPostgresSslCertificateSecretPtr and ConnectionPostgresSslCertificateSecretPtrOutput values.
// You can construct a concrete instance of `ConnectionPostgresSslCertificateSecretPtrInput` via:
//
//	        ConnectionPostgresSslCertificateSecretArgs{...}
//
//	or:
//
//	        nil
type ConnectionPostgresSslCertificateSecretPtrInput interface {
	pulumi.Input

	ToConnectionPostgresSslCertificateSecretPtrOutput() ConnectionPostgresSslCertificateSecretPtrOutput
	ToConnectionPostgresSslCertificateSecretPtrOutputWithContext(context.Context) ConnectionPostgresSslCertificateSecretPtrOutput
}

type connectionPostgresSslCertificateSecretPtrType ConnectionPostgresSslCertificateSecretArgs

func ConnectionPostgresSslCertificateSecretPtr(v *ConnectionPostgresSslCertificateSecretArgs) ConnectionPostgresSslCertificateSecretPtrInput {
	return (*connectionPostgresSslCertificateSecretPtrType)(v)
}

func (*connectionPostgresSslCertificateSecretPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionPostgresSslCertificateSecret)(nil)).Elem()
}

func (i *connectionPostgresSslCertificateSecretPtrType) ToConnectionPostgresSslCertificateSecretPtrOutput() ConnectionPostgresSslCertificateSecretPtrOutput {
	return i.ToConnectionPostgresSslCertificateSecretPtrOutputWithContext(context.Background())
}

func (i *connectionPostgresSslCertificateSecretPtrType) ToConnectionPostgresSslCertificateSecretPtrOutputWithContext(ctx context.Context) ConnectionPostgresSslCertificateSecretPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionPostgresSslCertificateSecretPtrOutput)
}

type ConnectionPostgresSslCertificateSecretOutput struct{ *pulumi.OutputState }

func (ConnectionPostgresSslCertificateSecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionPostgresSslCertificateSecret)(nil)).Elem()
}

func (o ConnectionPostgresSslCertificateSecretOutput) ToConnectionPostgresSslCertificateSecretOutput() ConnectionPostgresSslCertificateSecretOutput {
	return o
}

func (o ConnectionPostgresSslCertificateSecretOutput) ToConnectionPostgresSslCertificateSecretOutputWithContext(ctx context.Context) ConnectionPostgresSslCertificateSecretOutput {
	return o
}

func (o ConnectionPostgresSslCertificateSecretOutput) ToConnectionPostgresSslCertificateSecretPtrOutput() ConnectionPostgresSslCertificateSecretPtrOutput {
	return o.ToConnectionPostgresSslCertificateSecretPtrOutputWithContext(context.Background())
}

func (o ConnectionPostgresSslCertificateSecretOutput) ToConnectionPostgresSslCertificateSecretPtrOutputWithContext(ctx context.Context) ConnectionPostgresSslCertificateSecretPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionPostgresSslCertificateSecret) *ConnectionPostgresSslCertificateSecret {
		return &v
	}).(ConnectionPostgresSslCertificateSecretPtrOutput)
}

// The identifier for the connection database.
func (o ConnectionPostgresSslCertificateSecretOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionPostgresSslCertificateSecret) *string { return v.DatabaseName }).(pulumi.StringPtrOutput)
}

// The identifier for the connection.
func (o ConnectionPostgresSslCertificateSecretOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionPostgresSslCertificateSecret) string { return v.Name }).(pulumi.StringOutput)
}

// The identifier for the connection schema.
func (o ConnectionPostgresSslCertificateSecretOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionPostgresSslCertificateSecret) *string { return v.SchemaName }).(pulumi.StringPtrOutput)
}

type ConnectionPostgresSslCertificateSecretPtrOutput struct{ *pulumi.OutputState }

func (ConnectionPostgresSslCertificateSecretPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionPostgresSslCertificateSecret)(nil)).Elem()
}

func (o ConnectionPostgresSslCertificateSecretPtrOutput) ToConnectionPostgresSslCertificateSecretPtrOutput() ConnectionPostgresSslCertificateSecretPtrOutput {
	return o
}

func (o ConnectionPostgresSslCertificateSecretPtrOutput) ToConnectionPostgresSslCertificateSecretPtrOutputWithContext(ctx context.Context) ConnectionPostgresSslCertificateSecretPtrOutput {
	return o
}

func (o ConnectionPostgresSslCertificateSecretPtrOutput) Elem() ConnectionPostgresSslCertificateSecretOutput {
	return o.ApplyT(func(v *ConnectionPostgresSslCertificateSecret) ConnectionPostgresSslCertificateSecret {
		if v != nil {
			return *v
		}
		var ret ConnectionPostgresSslCertificateSecret
		return ret
	}).(ConnectionPostgresSslCertificateSecretOutput)
}

// The identifier for the connection database.
func (o ConnectionPostgresSslCertificateSecretPtrOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionPostgresSslCertificateSecret) *string {
		if v == nil {
			return nil
		}
		return v.DatabaseName
	}).(pulumi.StringPtrOutput)
}

// The identifier for the connection.
func (o ConnectionPostgresSslCertificateSecretPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionPostgresSslCertificateSecret) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The identifier for the connection schema.
func (o ConnectionPostgresSslCertificateSecretPtrOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionPostgresSslCertificateSecret) *string {
		if v == nil {
			return nil
		}
		return v.SchemaName
	}).(pulumi.StringPtrOutput)
}

type ConnectionPostgresSslKey struct {
	// The sslKey database name.
	DatabaseName *string `pulumi:"databaseName"`
	// The sslKey name.
	Name string `pulumi:"name"`
	// The sslKey schema name.
	SchemaName *string `pulumi:"schemaName"`
}

// ConnectionPostgresSslKeyInput is an input type that accepts ConnectionPostgresSslKeyArgs and ConnectionPostgresSslKeyOutput values.
// You can construct a concrete instance of `ConnectionPostgresSslKeyInput` via:
//
//	ConnectionPostgresSslKeyArgs{...}
type ConnectionPostgresSslKeyInput interface {
	pulumi.Input

	ToConnectionPostgresSslKeyOutput() ConnectionPostgresSslKeyOutput
	ToConnectionPostgresSslKeyOutputWithContext(context.Context) ConnectionPostgresSslKeyOutput
}

type ConnectionPostgresSslKeyArgs struct {
	// The sslKey database name.
	DatabaseName pulumi.StringPtrInput `pulumi:"databaseName"`
	// The sslKey name.
	Name pulumi.StringInput `pulumi:"name"`
	// The sslKey schema name.
	SchemaName pulumi.StringPtrInput `pulumi:"schemaName"`
}

func (ConnectionPostgresSslKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionPostgresSslKey)(nil)).Elem()
}

func (i ConnectionPostgresSslKeyArgs) ToConnectionPostgresSslKeyOutput() ConnectionPostgresSslKeyOutput {
	return i.ToConnectionPostgresSslKeyOutputWithContext(context.Background())
}

func (i ConnectionPostgresSslKeyArgs) ToConnectionPostgresSslKeyOutputWithContext(ctx context.Context) ConnectionPostgresSslKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionPostgresSslKeyOutput)
}

func (i ConnectionPostgresSslKeyArgs) ToConnectionPostgresSslKeyPtrOutput() ConnectionPostgresSslKeyPtrOutput {
	return i.ToConnectionPostgresSslKeyPtrOutputWithContext(context.Background())
}

func (i ConnectionPostgresSslKeyArgs) ToConnectionPostgresSslKeyPtrOutputWithContext(ctx context.Context) ConnectionPostgresSslKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionPostgresSslKeyOutput).ToConnectionPostgresSslKeyPtrOutputWithContext(ctx)
}

// ConnectionPostgresSslKeyPtrInput is an input type that accepts ConnectionPostgresSslKeyArgs, ConnectionPostgresSslKeyPtr and ConnectionPostgresSslKeyPtrOutput values.
// You can construct a concrete instance of `ConnectionPostgresSslKeyPtrInput` via:
//
//	        ConnectionPostgresSslKeyArgs{...}
//
//	or:
//
//	        nil
type ConnectionPostgresSslKeyPtrInput interface {
	pulumi.Input

	ToConnectionPostgresSslKeyPtrOutput() ConnectionPostgresSslKeyPtrOutput
	ToConnectionPostgresSslKeyPtrOutputWithContext(context.Context) ConnectionPostgresSslKeyPtrOutput
}

type connectionPostgresSslKeyPtrType ConnectionPostgresSslKeyArgs

func ConnectionPostgresSslKeyPtr(v *ConnectionPostgresSslKeyArgs) ConnectionPostgresSslKeyPtrInput {
	return (*connectionPostgresSslKeyPtrType)(v)
}

func (*connectionPostgresSslKeyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionPostgresSslKey)(nil)).Elem()
}

func (i *connectionPostgresSslKeyPtrType) ToConnectionPostgresSslKeyPtrOutput() ConnectionPostgresSslKeyPtrOutput {
	return i.ToConnectionPostgresSslKeyPtrOutputWithContext(context.Background())
}

func (i *connectionPostgresSslKeyPtrType) ToConnectionPostgresSslKeyPtrOutputWithContext(ctx context.Context) ConnectionPostgresSslKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionPostgresSslKeyPtrOutput)
}

type ConnectionPostgresSslKeyOutput struct{ *pulumi.OutputState }

func (ConnectionPostgresSslKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionPostgresSslKey)(nil)).Elem()
}

func (o ConnectionPostgresSslKeyOutput) ToConnectionPostgresSslKeyOutput() ConnectionPostgresSslKeyOutput {
	return o
}

func (o ConnectionPostgresSslKeyOutput) ToConnectionPostgresSslKeyOutputWithContext(ctx context.Context) ConnectionPostgresSslKeyOutput {
	return o
}

func (o ConnectionPostgresSslKeyOutput) ToConnectionPostgresSslKeyPtrOutput() ConnectionPostgresSslKeyPtrOutput {
	return o.ToConnectionPostgresSslKeyPtrOutputWithContext(context.Background())
}

func (o ConnectionPostgresSslKeyOutput) ToConnectionPostgresSslKeyPtrOutputWithContext(ctx context.Context) ConnectionPostgresSslKeyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionPostgresSslKey) *ConnectionPostgresSslKey {
		return &v
	}).(ConnectionPostgresSslKeyPtrOutput)
}

// The sslKey database name.
func (o ConnectionPostgresSslKeyOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionPostgresSslKey) *string { return v.DatabaseName }).(pulumi.StringPtrOutput)
}

// The sslKey name.
func (o ConnectionPostgresSslKeyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionPostgresSslKey) string { return v.Name }).(pulumi.StringOutput)
}

// The sslKey schema name.
func (o ConnectionPostgresSslKeyOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionPostgresSslKey) *string { return v.SchemaName }).(pulumi.StringPtrOutput)
}

type ConnectionPostgresSslKeyPtrOutput struct{ *pulumi.OutputState }

func (ConnectionPostgresSslKeyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionPostgresSslKey)(nil)).Elem()
}

func (o ConnectionPostgresSslKeyPtrOutput) ToConnectionPostgresSslKeyPtrOutput() ConnectionPostgresSslKeyPtrOutput {
	return o
}

func (o ConnectionPostgresSslKeyPtrOutput) ToConnectionPostgresSslKeyPtrOutputWithContext(ctx context.Context) ConnectionPostgresSslKeyPtrOutput {
	return o
}

func (o ConnectionPostgresSslKeyPtrOutput) Elem() ConnectionPostgresSslKeyOutput {
	return o.ApplyT(func(v *ConnectionPostgresSslKey) ConnectionPostgresSslKey {
		if v != nil {
			return *v
		}
		var ret ConnectionPostgresSslKey
		return ret
	}).(ConnectionPostgresSslKeyOutput)
}

// The sslKey database name.
func (o ConnectionPostgresSslKeyPtrOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionPostgresSslKey) *string {
		if v == nil {
			return nil
		}
		return v.DatabaseName
	}).(pulumi.StringPtrOutput)
}

// The sslKey name.
func (o ConnectionPostgresSslKeyPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionPostgresSslKey) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The sslKey schema name.
func (o ConnectionPostgresSslKeyPtrOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionPostgresSslKey) *string {
		if v == nil {
			return nil
		}
		return v.SchemaName
	}).(pulumi.StringPtrOutput)
}

type ConnectionPostgresUser struct {
	// The user secret value.
	Secret *ConnectionPostgresUserSecret `pulumi:"secret"`
	// The user text value.
	Text *string `pulumi:"text"`
}

// ConnectionPostgresUserInput is an input type that accepts ConnectionPostgresUserArgs and ConnectionPostgresUserOutput values.
// You can construct a concrete instance of `ConnectionPostgresUserInput` via:
//
//	ConnectionPostgresUserArgs{...}
type ConnectionPostgresUserInput interface {
	pulumi.Input

	ToConnectionPostgresUserOutput() ConnectionPostgresUserOutput
	ToConnectionPostgresUserOutputWithContext(context.Context) ConnectionPostgresUserOutput
}

type ConnectionPostgresUserArgs struct {
	// The user secret value.
	Secret ConnectionPostgresUserSecretPtrInput `pulumi:"secret"`
	// The user text value.
	Text pulumi.StringPtrInput `pulumi:"text"`
}

func (ConnectionPostgresUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionPostgresUser)(nil)).Elem()
}

func (i ConnectionPostgresUserArgs) ToConnectionPostgresUserOutput() ConnectionPostgresUserOutput {
	return i.ToConnectionPostgresUserOutputWithContext(context.Background())
}

func (i ConnectionPostgresUserArgs) ToConnectionPostgresUserOutputWithContext(ctx context.Context) ConnectionPostgresUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionPostgresUserOutput)
}

func (i ConnectionPostgresUserArgs) ToConnectionPostgresUserPtrOutput() ConnectionPostgresUserPtrOutput {
	return i.ToConnectionPostgresUserPtrOutputWithContext(context.Background())
}

func (i ConnectionPostgresUserArgs) ToConnectionPostgresUserPtrOutputWithContext(ctx context.Context) ConnectionPostgresUserPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionPostgresUserOutput).ToConnectionPostgresUserPtrOutputWithContext(ctx)
}

// ConnectionPostgresUserPtrInput is an input type that accepts ConnectionPostgresUserArgs, ConnectionPostgresUserPtr and ConnectionPostgresUserPtrOutput values.
// You can construct a concrete instance of `ConnectionPostgresUserPtrInput` via:
//
//	        ConnectionPostgresUserArgs{...}
//
//	or:
//
//	        nil
type ConnectionPostgresUserPtrInput interface {
	pulumi.Input

	ToConnectionPostgresUserPtrOutput() ConnectionPostgresUserPtrOutput
	ToConnectionPostgresUserPtrOutputWithContext(context.Context) ConnectionPostgresUserPtrOutput
}

type connectionPostgresUserPtrType ConnectionPostgresUserArgs

func ConnectionPostgresUserPtr(v *ConnectionPostgresUserArgs) ConnectionPostgresUserPtrInput {
	return (*connectionPostgresUserPtrType)(v)
}

func (*connectionPostgresUserPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionPostgresUser)(nil)).Elem()
}

func (i *connectionPostgresUserPtrType) ToConnectionPostgresUserPtrOutput() ConnectionPostgresUserPtrOutput {
	return i.ToConnectionPostgresUserPtrOutputWithContext(context.Background())
}

func (i *connectionPostgresUserPtrType) ToConnectionPostgresUserPtrOutputWithContext(ctx context.Context) ConnectionPostgresUserPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionPostgresUserPtrOutput)
}

type ConnectionPostgresUserOutput struct{ *pulumi.OutputState }

func (ConnectionPostgresUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionPostgresUser)(nil)).Elem()
}

func (o ConnectionPostgresUserOutput) ToConnectionPostgresUserOutput() ConnectionPostgresUserOutput {
	return o
}

func (o ConnectionPostgresUserOutput) ToConnectionPostgresUserOutputWithContext(ctx context.Context) ConnectionPostgresUserOutput {
	return o
}

func (o ConnectionPostgresUserOutput) ToConnectionPostgresUserPtrOutput() ConnectionPostgresUserPtrOutput {
	return o.ToConnectionPostgresUserPtrOutputWithContext(context.Background())
}

func (o ConnectionPostgresUserOutput) ToConnectionPostgresUserPtrOutputWithContext(ctx context.Context) ConnectionPostgresUserPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionPostgresUser) *ConnectionPostgresUser {
		return &v
	}).(ConnectionPostgresUserPtrOutput)
}

// The user secret value.
func (o ConnectionPostgresUserOutput) Secret() ConnectionPostgresUserSecretPtrOutput {
	return o.ApplyT(func(v ConnectionPostgresUser) *ConnectionPostgresUserSecret { return v.Secret }).(ConnectionPostgresUserSecretPtrOutput)
}

// The user text value.
func (o ConnectionPostgresUserOutput) Text() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionPostgresUser) *string { return v.Text }).(pulumi.StringPtrOutput)
}

type ConnectionPostgresUserPtrOutput struct{ *pulumi.OutputState }

func (ConnectionPostgresUserPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionPostgresUser)(nil)).Elem()
}

func (o ConnectionPostgresUserPtrOutput) ToConnectionPostgresUserPtrOutput() ConnectionPostgresUserPtrOutput {
	return o
}

func (o ConnectionPostgresUserPtrOutput) ToConnectionPostgresUserPtrOutputWithContext(ctx context.Context) ConnectionPostgresUserPtrOutput {
	return o
}

func (o ConnectionPostgresUserPtrOutput) Elem() ConnectionPostgresUserOutput {
	return o.ApplyT(func(v *ConnectionPostgresUser) ConnectionPostgresUser {
		if v != nil {
			return *v
		}
		var ret ConnectionPostgresUser
		return ret
	}).(ConnectionPostgresUserOutput)
}

// The user secret value.
func (o ConnectionPostgresUserPtrOutput) Secret() ConnectionPostgresUserSecretPtrOutput {
	return o.ApplyT(func(v *ConnectionPostgresUser) *ConnectionPostgresUserSecret {
		if v == nil {
			return nil
		}
		return v.Secret
	}).(ConnectionPostgresUserSecretPtrOutput)
}

// The user text value.
func (o ConnectionPostgresUserPtrOutput) Text() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionPostgresUser) *string {
		if v == nil {
			return nil
		}
		return v.Text
	}).(pulumi.StringPtrOutput)
}

type ConnectionPostgresUserSecret struct {
	// The identifier for the connection database.
	DatabaseName *string `pulumi:"databaseName"`
	// The identifier for the connection.
	Name string `pulumi:"name"`
	// The identifier for the connection schema.
	SchemaName *string `pulumi:"schemaName"`
}

// ConnectionPostgresUserSecretInput is an input type that accepts ConnectionPostgresUserSecretArgs and ConnectionPostgresUserSecretOutput values.
// You can construct a concrete instance of `ConnectionPostgresUserSecretInput` via:
//
//	ConnectionPostgresUserSecretArgs{...}
type ConnectionPostgresUserSecretInput interface {
	pulumi.Input

	ToConnectionPostgresUserSecretOutput() ConnectionPostgresUserSecretOutput
	ToConnectionPostgresUserSecretOutputWithContext(context.Context) ConnectionPostgresUserSecretOutput
}

type ConnectionPostgresUserSecretArgs struct {
	// The identifier for the connection database.
	DatabaseName pulumi.StringPtrInput `pulumi:"databaseName"`
	// The identifier for the connection.
	Name pulumi.StringInput `pulumi:"name"`
	// The identifier for the connection schema.
	SchemaName pulumi.StringPtrInput `pulumi:"schemaName"`
}

func (ConnectionPostgresUserSecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionPostgresUserSecret)(nil)).Elem()
}

func (i ConnectionPostgresUserSecretArgs) ToConnectionPostgresUserSecretOutput() ConnectionPostgresUserSecretOutput {
	return i.ToConnectionPostgresUserSecretOutputWithContext(context.Background())
}

func (i ConnectionPostgresUserSecretArgs) ToConnectionPostgresUserSecretOutputWithContext(ctx context.Context) ConnectionPostgresUserSecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionPostgresUserSecretOutput)
}

func (i ConnectionPostgresUserSecretArgs) ToConnectionPostgresUserSecretPtrOutput() ConnectionPostgresUserSecretPtrOutput {
	return i.ToConnectionPostgresUserSecretPtrOutputWithContext(context.Background())
}

func (i ConnectionPostgresUserSecretArgs) ToConnectionPostgresUserSecretPtrOutputWithContext(ctx context.Context) ConnectionPostgresUserSecretPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionPostgresUserSecretOutput).ToConnectionPostgresUserSecretPtrOutputWithContext(ctx)
}

// ConnectionPostgresUserSecretPtrInput is an input type that accepts ConnectionPostgresUserSecretArgs, ConnectionPostgresUserSecretPtr and ConnectionPostgresUserSecretPtrOutput values.
// You can construct a concrete instance of `ConnectionPostgresUserSecretPtrInput` via:
//
//	        ConnectionPostgresUserSecretArgs{...}
//
//	or:
//
//	        nil
type ConnectionPostgresUserSecretPtrInput interface {
	pulumi.Input

	ToConnectionPostgresUserSecretPtrOutput() ConnectionPostgresUserSecretPtrOutput
	ToConnectionPostgresUserSecretPtrOutputWithContext(context.Context) ConnectionPostgresUserSecretPtrOutput
}

type connectionPostgresUserSecretPtrType ConnectionPostgresUserSecretArgs

func ConnectionPostgresUserSecretPtr(v *ConnectionPostgresUserSecretArgs) ConnectionPostgresUserSecretPtrInput {
	return (*connectionPostgresUserSecretPtrType)(v)
}

func (*connectionPostgresUserSecretPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionPostgresUserSecret)(nil)).Elem()
}

func (i *connectionPostgresUserSecretPtrType) ToConnectionPostgresUserSecretPtrOutput() ConnectionPostgresUserSecretPtrOutput {
	return i.ToConnectionPostgresUserSecretPtrOutputWithContext(context.Background())
}

func (i *connectionPostgresUserSecretPtrType) ToConnectionPostgresUserSecretPtrOutputWithContext(ctx context.Context) ConnectionPostgresUserSecretPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionPostgresUserSecretPtrOutput)
}

type ConnectionPostgresUserSecretOutput struct{ *pulumi.OutputState }

func (ConnectionPostgresUserSecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionPostgresUserSecret)(nil)).Elem()
}

func (o ConnectionPostgresUserSecretOutput) ToConnectionPostgresUserSecretOutput() ConnectionPostgresUserSecretOutput {
	return o
}

func (o ConnectionPostgresUserSecretOutput) ToConnectionPostgresUserSecretOutputWithContext(ctx context.Context) ConnectionPostgresUserSecretOutput {
	return o
}

func (o ConnectionPostgresUserSecretOutput) ToConnectionPostgresUserSecretPtrOutput() ConnectionPostgresUserSecretPtrOutput {
	return o.ToConnectionPostgresUserSecretPtrOutputWithContext(context.Background())
}

func (o ConnectionPostgresUserSecretOutput) ToConnectionPostgresUserSecretPtrOutputWithContext(ctx context.Context) ConnectionPostgresUserSecretPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionPostgresUserSecret) *ConnectionPostgresUserSecret {
		return &v
	}).(ConnectionPostgresUserSecretPtrOutput)
}

// The identifier for the connection database.
func (o ConnectionPostgresUserSecretOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionPostgresUserSecret) *string { return v.DatabaseName }).(pulumi.StringPtrOutput)
}

// The identifier for the connection.
func (o ConnectionPostgresUserSecretOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionPostgresUserSecret) string { return v.Name }).(pulumi.StringOutput)
}

// The identifier for the connection schema.
func (o ConnectionPostgresUserSecretOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionPostgresUserSecret) *string { return v.SchemaName }).(pulumi.StringPtrOutput)
}

type ConnectionPostgresUserSecretPtrOutput struct{ *pulumi.OutputState }

func (ConnectionPostgresUserSecretPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionPostgresUserSecret)(nil)).Elem()
}

func (o ConnectionPostgresUserSecretPtrOutput) ToConnectionPostgresUserSecretPtrOutput() ConnectionPostgresUserSecretPtrOutput {
	return o
}

func (o ConnectionPostgresUserSecretPtrOutput) ToConnectionPostgresUserSecretPtrOutputWithContext(ctx context.Context) ConnectionPostgresUserSecretPtrOutput {
	return o
}

func (o ConnectionPostgresUserSecretPtrOutput) Elem() ConnectionPostgresUserSecretOutput {
	return o.ApplyT(func(v *ConnectionPostgresUserSecret) ConnectionPostgresUserSecret {
		if v != nil {
			return *v
		}
		var ret ConnectionPostgresUserSecret
		return ret
	}).(ConnectionPostgresUserSecretOutput)
}

// The identifier for the connection database.
func (o ConnectionPostgresUserSecretPtrOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionPostgresUserSecret) *string {
		if v == nil {
			return nil
		}
		return v.DatabaseName
	}).(pulumi.StringPtrOutput)
}

// The identifier for the connection.
func (o ConnectionPostgresUserSecretPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionPostgresUserSecret) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The identifier for the connection schema.
func (o ConnectionPostgresUserSecretPtrOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionPostgresUserSecret) *string {
		if v == nil {
			return nil
		}
		return v.SchemaName
	}).(pulumi.StringPtrOutput)
}

type GetClusterReplicasClusterReplica struct {
	AvailabilityZone string `pulumi:"availabilityZone"`
	Cluster          string `pulumi:"cluster"`
	// The ID of this resource.
	Id   string `pulumi:"id"`
	Name string `pulumi:"name"`
	Size string `pulumi:"size"`
}

// GetClusterReplicasClusterReplicaInput is an input type that accepts GetClusterReplicasClusterReplicaArgs and GetClusterReplicasClusterReplicaOutput values.
// You can construct a concrete instance of `GetClusterReplicasClusterReplicaInput` via:
//
//	GetClusterReplicasClusterReplicaArgs{...}
type GetClusterReplicasClusterReplicaInput interface {
	pulumi.Input

	ToGetClusterReplicasClusterReplicaOutput() GetClusterReplicasClusterReplicaOutput
	ToGetClusterReplicasClusterReplicaOutputWithContext(context.Context) GetClusterReplicasClusterReplicaOutput
}

type GetClusterReplicasClusterReplicaArgs struct {
	AvailabilityZone pulumi.StringInput `pulumi:"availabilityZone"`
	Cluster          pulumi.StringInput `pulumi:"cluster"`
	// The ID of this resource.
	Id   pulumi.StringInput `pulumi:"id"`
	Name pulumi.StringInput `pulumi:"name"`
	Size pulumi.StringInput `pulumi:"size"`
}

func (GetClusterReplicasClusterReplicaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterReplicasClusterReplica)(nil)).Elem()
}

func (i GetClusterReplicasClusterReplicaArgs) ToGetClusterReplicasClusterReplicaOutput() GetClusterReplicasClusterReplicaOutput {
	return i.ToGetClusterReplicasClusterReplicaOutputWithContext(context.Background())
}

func (i GetClusterReplicasClusterReplicaArgs) ToGetClusterReplicasClusterReplicaOutputWithContext(ctx context.Context) GetClusterReplicasClusterReplicaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterReplicasClusterReplicaOutput)
}

// GetClusterReplicasClusterReplicaArrayInput is an input type that accepts GetClusterReplicasClusterReplicaArray and GetClusterReplicasClusterReplicaArrayOutput values.
// You can construct a concrete instance of `GetClusterReplicasClusterReplicaArrayInput` via:
//
//	GetClusterReplicasClusterReplicaArray{ GetClusterReplicasClusterReplicaArgs{...} }
type GetClusterReplicasClusterReplicaArrayInput interface {
	pulumi.Input

	ToGetClusterReplicasClusterReplicaArrayOutput() GetClusterReplicasClusterReplicaArrayOutput
	ToGetClusterReplicasClusterReplicaArrayOutputWithContext(context.Context) GetClusterReplicasClusterReplicaArrayOutput
}

type GetClusterReplicasClusterReplicaArray []GetClusterReplicasClusterReplicaInput

func (GetClusterReplicasClusterReplicaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClusterReplicasClusterReplica)(nil)).Elem()
}

func (i GetClusterReplicasClusterReplicaArray) ToGetClusterReplicasClusterReplicaArrayOutput() GetClusterReplicasClusterReplicaArrayOutput {
	return i.ToGetClusterReplicasClusterReplicaArrayOutputWithContext(context.Background())
}

func (i GetClusterReplicasClusterReplicaArray) ToGetClusterReplicasClusterReplicaArrayOutputWithContext(ctx context.Context) GetClusterReplicasClusterReplicaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterReplicasClusterReplicaArrayOutput)
}

type GetClusterReplicasClusterReplicaOutput struct{ *pulumi.OutputState }

func (GetClusterReplicasClusterReplicaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterReplicasClusterReplica)(nil)).Elem()
}

func (o GetClusterReplicasClusterReplicaOutput) ToGetClusterReplicasClusterReplicaOutput() GetClusterReplicasClusterReplicaOutput {
	return o
}

func (o GetClusterReplicasClusterReplicaOutput) ToGetClusterReplicasClusterReplicaOutputWithContext(ctx context.Context) GetClusterReplicasClusterReplicaOutput {
	return o
}

func (o GetClusterReplicasClusterReplicaOutput) AvailabilityZone() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterReplicasClusterReplica) string { return v.AvailabilityZone }).(pulumi.StringOutput)
}

func (o GetClusterReplicasClusterReplicaOutput) Cluster() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterReplicasClusterReplica) string { return v.Cluster }).(pulumi.StringOutput)
}

// The ID of this resource.
func (o GetClusterReplicasClusterReplicaOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterReplicasClusterReplica) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetClusterReplicasClusterReplicaOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterReplicasClusterReplica) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetClusterReplicasClusterReplicaOutput) Size() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterReplicasClusterReplica) string { return v.Size }).(pulumi.StringOutput)
}

type GetClusterReplicasClusterReplicaArrayOutput struct{ *pulumi.OutputState }

func (GetClusterReplicasClusterReplicaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClusterReplicasClusterReplica)(nil)).Elem()
}

func (o GetClusterReplicasClusterReplicaArrayOutput) ToGetClusterReplicasClusterReplicaArrayOutput() GetClusterReplicasClusterReplicaArrayOutput {
	return o
}

func (o GetClusterReplicasClusterReplicaArrayOutput) ToGetClusterReplicasClusterReplicaArrayOutputWithContext(ctx context.Context) GetClusterReplicasClusterReplicaArrayOutput {
	return o
}

func (o GetClusterReplicasClusterReplicaArrayOutput) Index(i pulumi.IntInput) GetClusterReplicasClusterReplicaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetClusterReplicasClusterReplica {
		return vs[0].([]GetClusterReplicasClusterReplica)[vs[1].(int)]
	}).(GetClusterReplicasClusterReplicaOutput)
}

type GetClustersCluster struct {
	// The ID of this resource.
	Id   string `pulumi:"id"`
	Name string `pulumi:"name"`
}

// GetClustersClusterInput is an input type that accepts GetClustersClusterArgs and GetClustersClusterOutput values.
// You can construct a concrete instance of `GetClustersClusterInput` via:
//
//	GetClustersClusterArgs{...}
type GetClustersClusterInput interface {
	pulumi.Input

	ToGetClustersClusterOutput() GetClustersClusterOutput
	ToGetClustersClusterOutputWithContext(context.Context) GetClustersClusterOutput
}

type GetClustersClusterArgs struct {
	// The ID of this resource.
	Id   pulumi.StringInput `pulumi:"id"`
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetClustersClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClustersCluster)(nil)).Elem()
}

func (i GetClustersClusterArgs) ToGetClustersClusterOutput() GetClustersClusterOutput {
	return i.ToGetClustersClusterOutputWithContext(context.Background())
}

func (i GetClustersClusterArgs) ToGetClustersClusterOutputWithContext(ctx context.Context) GetClustersClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClustersClusterOutput)
}

// GetClustersClusterArrayInput is an input type that accepts GetClustersClusterArray and GetClustersClusterArrayOutput values.
// You can construct a concrete instance of `GetClustersClusterArrayInput` via:
//
//	GetClustersClusterArray{ GetClustersClusterArgs{...} }
type GetClustersClusterArrayInput interface {
	pulumi.Input

	ToGetClustersClusterArrayOutput() GetClustersClusterArrayOutput
	ToGetClustersClusterArrayOutputWithContext(context.Context) GetClustersClusterArrayOutput
}

type GetClustersClusterArray []GetClustersClusterInput

func (GetClustersClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClustersCluster)(nil)).Elem()
}

func (i GetClustersClusterArray) ToGetClustersClusterArrayOutput() GetClustersClusterArrayOutput {
	return i.ToGetClustersClusterArrayOutputWithContext(context.Background())
}

func (i GetClustersClusterArray) ToGetClustersClusterArrayOutputWithContext(ctx context.Context) GetClustersClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClustersClusterArrayOutput)
}

type GetClustersClusterOutput struct{ *pulumi.OutputState }

func (GetClustersClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClustersCluster)(nil)).Elem()
}

func (o GetClustersClusterOutput) ToGetClustersClusterOutput() GetClustersClusterOutput {
	return o
}

func (o GetClustersClusterOutput) ToGetClustersClusterOutputWithContext(ctx context.Context) GetClustersClusterOutput {
	return o
}

// The ID of this resource.
func (o GetClustersClusterOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersCluster) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetClustersClusterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersCluster) string { return v.Name }).(pulumi.StringOutput)
}

type GetClustersClusterArrayOutput struct{ *pulumi.OutputState }

func (GetClustersClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClustersCluster)(nil)).Elem()
}

func (o GetClustersClusterArrayOutput) ToGetClustersClusterArrayOutput() GetClustersClusterArrayOutput {
	return o
}

func (o GetClustersClusterArrayOutput) ToGetClustersClusterArrayOutputWithContext(ctx context.Context) GetClustersClusterArrayOutput {
	return o
}

func (o GetClustersClusterArrayOutput) Index(i pulumi.IntInput) GetClustersClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetClustersCluster {
		return vs[0].([]GetClustersCluster)[vs[1].(int)]
	}).(GetClustersClusterOutput)
}

type GetConnectionsConnection struct {
	// Limit connections to a specific database
	DatabaseName string `pulumi:"databaseName"`
	// The ID of this resource.
	Id   string `pulumi:"id"`
	Name string `pulumi:"name"`
	// Limit connections to a specific schema within a specific database
	SchemaName string `pulumi:"schemaName"`
	Type       string `pulumi:"type"`
}

// GetConnectionsConnectionInput is an input type that accepts GetConnectionsConnectionArgs and GetConnectionsConnectionOutput values.
// You can construct a concrete instance of `GetConnectionsConnectionInput` via:
//
//	GetConnectionsConnectionArgs{...}
type GetConnectionsConnectionInput interface {
	pulumi.Input

	ToGetConnectionsConnectionOutput() GetConnectionsConnectionOutput
	ToGetConnectionsConnectionOutputWithContext(context.Context) GetConnectionsConnectionOutput
}

type GetConnectionsConnectionArgs struct {
	// Limit connections to a specific database
	DatabaseName pulumi.StringInput `pulumi:"databaseName"`
	// The ID of this resource.
	Id   pulumi.StringInput `pulumi:"id"`
	Name pulumi.StringInput `pulumi:"name"`
	// Limit connections to a specific schema within a specific database
	SchemaName pulumi.StringInput `pulumi:"schemaName"`
	Type       pulumi.StringInput `pulumi:"type"`
}

func (GetConnectionsConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetConnectionsConnection)(nil)).Elem()
}

func (i GetConnectionsConnectionArgs) ToGetConnectionsConnectionOutput() GetConnectionsConnectionOutput {
	return i.ToGetConnectionsConnectionOutputWithContext(context.Background())
}

func (i GetConnectionsConnectionArgs) ToGetConnectionsConnectionOutputWithContext(ctx context.Context) GetConnectionsConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetConnectionsConnectionOutput)
}

// GetConnectionsConnectionArrayInput is an input type that accepts GetConnectionsConnectionArray and GetConnectionsConnectionArrayOutput values.
// You can construct a concrete instance of `GetConnectionsConnectionArrayInput` via:
//
//	GetConnectionsConnectionArray{ GetConnectionsConnectionArgs{...} }
type GetConnectionsConnectionArrayInput interface {
	pulumi.Input

	ToGetConnectionsConnectionArrayOutput() GetConnectionsConnectionArrayOutput
	ToGetConnectionsConnectionArrayOutputWithContext(context.Context) GetConnectionsConnectionArrayOutput
}

type GetConnectionsConnectionArray []GetConnectionsConnectionInput

func (GetConnectionsConnectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetConnectionsConnection)(nil)).Elem()
}

func (i GetConnectionsConnectionArray) ToGetConnectionsConnectionArrayOutput() GetConnectionsConnectionArrayOutput {
	return i.ToGetConnectionsConnectionArrayOutputWithContext(context.Background())
}

func (i GetConnectionsConnectionArray) ToGetConnectionsConnectionArrayOutputWithContext(ctx context.Context) GetConnectionsConnectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetConnectionsConnectionArrayOutput)
}

type GetConnectionsConnectionOutput struct{ *pulumi.OutputState }

func (GetConnectionsConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetConnectionsConnection)(nil)).Elem()
}

func (o GetConnectionsConnectionOutput) ToGetConnectionsConnectionOutput() GetConnectionsConnectionOutput {
	return o
}

func (o GetConnectionsConnectionOutput) ToGetConnectionsConnectionOutputWithContext(ctx context.Context) GetConnectionsConnectionOutput {
	return o
}

// Limit connections to a specific database
func (o GetConnectionsConnectionOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v GetConnectionsConnection) string { return v.DatabaseName }).(pulumi.StringOutput)
}

// The ID of this resource.
func (o GetConnectionsConnectionOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetConnectionsConnection) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetConnectionsConnectionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetConnectionsConnection) string { return v.Name }).(pulumi.StringOutput)
}

// Limit connections to a specific schema within a specific database
func (o GetConnectionsConnectionOutput) SchemaName() pulumi.StringOutput {
	return o.ApplyT(func(v GetConnectionsConnection) string { return v.SchemaName }).(pulumi.StringOutput)
}

func (o GetConnectionsConnectionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetConnectionsConnection) string { return v.Type }).(pulumi.StringOutput)
}

type GetConnectionsConnectionArrayOutput struct{ *pulumi.OutputState }

func (GetConnectionsConnectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetConnectionsConnection)(nil)).Elem()
}

func (o GetConnectionsConnectionArrayOutput) ToGetConnectionsConnectionArrayOutput() GetConnectionsConnectionArrayOutput {
	return o
}

func (o GetConnectionsConnectionArrayOutput) ToGetConnectionsConnectionArrayOutputWithContext(ctx context.Context) GetConnectionsConnectionArrayOutput {
	return o
}

func (o GetConnectionsConnectionArrayOutput) Index(i pulumi.IntInput) GetConnectionsConnectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetConnectionsConnection {
		return vs[0].([]GetConnectionsConnection)[vs[1].(int)]
	}).(GetConnectionsConnectionOutput)
}

type GetDatabasesDatabase struct {
	// The ID of this resource.
	Id   string `pulumi:"id"`
	Name string `pulumi:"name"`
}

// GetDatabasesDatabaseInput is an input type that accepts GetDatabasesDatabaseArgs and GetDatabasesDatabaseOutput values.
// You can construct a concrete instance of `GetDatabasesDatabaseInput` via:
//
//	GetDatabasesDatabaseArgs{...}
type GetDatabasesDatabaseInput interface {
	pulumi.Input

	ToGetDatabasesDatabaseOutput() GetDatabasesDatabaseOutput
	ToGetDatabasesDatabaseOutputWithContext(context.Context) GetDatabasesDatabaseOutput
}

type GetDatabasesDatabaseArgs struct {
	// The ID of this resource.
	Id   pulumi.StringInput `pulumi:"id"`
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetDatabasesDatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatabasesDatabase)(nil)).Elem()
}

func (i GetDatabasesDatabaseArgs) ToGetDatabasesDatabaseOutput() GetDatabasesDatabaseOutput {
	return i.ToGetDatabasesDatabaseOutputWithContext(context.Background())
}

func (i GetDatabasesDatabaseArgs) ToGetDatabasesDatabaseOutputWithContext(ctx context.Context) GetDatabasesDatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDatabasesDatabaseOutput)
}

// GetDatabasesDatabaseArrayInput is an input type that accepts GetDatabasesDatabaseArray and GetDatabasesDatabaseArrayOutput values.
// You can construct a concrete instance of `GetDatabasesDatabaseArrayInput` via:
//
//	GetDatabasesDatabaseArray{ GetDatabasesDatabaseArgs{...} }
type GetDatabasesDatabaseArrayInput interface {
	pulumi.Input

	ToGetDatabasesDatabaseArrayOutput() GetDatabasesDatabaseArrayOutput
	ToGetDatabasesDatabaseArrayOutputWithContext(context.Context) GetDatabasesDatabaseArrayOutput
}

type GetDatabasesDatabaseArray []GetDatabasesDatabaseInput

func (GetDatabasesDatabaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDatabasesDatabase)(nil)).Elem()
}

func (i GetDatabasesDatabaseArray) ToGetDatabasesDatabaseArrayOutput() GetDatabasesDatabaseArrayOutput {
	return i.ToGetDatabasesDatabaseArrayOutputWithContext(context.Background())
}

func (i GetDatabasesDatabaseArray) ToGetDatabasesDatabaseArrayOutputWithContext(ctx context.Context) GetDatabasesDatabaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDatabasesDatabaseArrayOutput)
}

type GetDatabasesDatabaseOutput struct{ *pulumi.OutputState }

func (GetDatabasesDatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatabasesDatabase)(nil)).Elem()
}

func (o GetDatabasesDatabaseOutput) ToGetDatabasesDatabaseOutput() GetDatabasesDatabaseOutput {
	return o
}

func (o GetDatabasesDatabaseOutput) ToGetDatabasesDatabaseOutputWithContext(ctx context.Context) GetDatabasesDatabaseOutput {
	return o
}

// The ID of this resource.
func (o GetDatabasesDatabaseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabasesDatabase) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetDatabasesDatabaseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabasesDatabase) string { return v.Name }).(pulumi.StringOutput)
}

type GetDatabasesDatabaseArrayOutput struct{ *pulumi.OutputState }

func (GetDatabasesDatabaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDatabasesDatabase)(nil)).Elem()
}

func (o GetDatabasesDatabaseArrayOutput) ToGetDatabasesDatabaseArrayOutput() GetDatabasesDatabaseArrayOutput {
	return o
}

func (o GetDatabasesDatabaseArrayOutput) ToGetDatabasesDatabaseArrayOutputWithContext(ctx context.Context) GetDatabasesDatabaseArrayOutput {
	return o
}

func (o GetDatabasesDatabaseArrayOutput) Index(i pulumi.IntInput) GetDatabasesDatabaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDatabasesDatabase {
		return vs[0].([]GetDatabasesDatabase)[vs[1].(int)]
	}).(GetDatabasesDatabaseOutput)
}

type GetIndexesIndex struct {
	// The ID of this resource.
	Id          string `pulumi:"id"`
	Name        string `pulumi:"name"`
	ObjDatabase string `pulumi:"objDatabase"`
	ObjName     string `pulumi:"objName"`
	ObjSchema   string `pulumi:"objSchema"`
}

// GetIndexesIndexInput is an input type that accepts GetIndexesIndexArgs and GetIndexesIndexOutput values.
// You can construct a concrete instance of `GetIndexesIndexInput` via:
//
//	GetIndexesIndexArgs{...}
type GetIndexesIndexInput interface {
	pulumi.Input

	ToGetIndexesIndexOutput() GetIndexesIndexOutput
	ToGetIndexesIndexOutputWithContext(context.Context) GetIndexesIndexOutput
}

type GetIndexesIndexArgs struct {
	// The ID of this resource.
	Id          pulumi.StringInput `pulumi:"id"`
	Name        pulumi.StringInput `pulumi:"name"`
	ObjDatabase pulumi.StringInput `pulumi:"objDatabase"`
	ObjName     pulumi.StringInput `pulumi:"objName"`
	ObjSchema   pulumi.StringInput `pulumi:"objSchema"`
}

func (GetIndexesIndexArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIndexesIndex)(nil)).Elem()
}

func (i GetIndexesIndexArgs) ToGetIndexesIndexOutput() GetIndexesIndexOutput {
	return i.ToGetIndexesIndexOutputWithContext(context.Background())
}

func (i GetIndexesIndexArgs) ToGetIndexesIndexOutputWithContext(ctx context.Context) GetIndexesIndexOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetIndexesIndexOutput)
}

// GetIndexesIndexArrayInput is an input type that accepts GetIndexesIndexArray and GetIndexesIndexArrayOutput values.
// You can construct a concrete instance of `GetIndexesIndexArrayInput` via:
//
//	GetIndexesIndexArray{ GetIndexesIndexArgs{...} }
type GetIndexesIndexArrayInput interface {
	pulumi.Input

	ToGetIndexesIndexArrayOutput() GetIndexesIndexArrayOutput
	ToGetIndexesIndexArrayOutputWithContext(context.Context) GetIndexesIndexArrayOutput
}

type GetIndexesIndexArray []GetIndexesIndexInput

func (GetIndexesIndexArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetIndexesIndex)(nil)).Elem()
}

func (i GetIndexesIndexArray) ToGetIndexesIndexArrayOutput() GetIndexesIndexArrayOutput {
	return i.ToGetIndexesIndexArrayOutputWithContext(context.Background())
}

func (i GetIndexesIndexArray) ToGetIndexesIndexArrayOutputWithContext(ctx context.Context) GetIndexesIndexArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetIndexesIndexArrayOutput)
}

type GetIndexesIndexOutput struct{ *pulumi.OutputState }

func (GetIndexesIndexOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIndexesIndex)(nil)).Elem()
}

func (o GetIndexesIndexOutput) ToGetIndexesIndexOutput() GetIndexesIndexOutput {
	return o
}

func (o GetIndexesIndexOutput) ToGetIndexesIndexOutputWithContext(ctx context.Context) GetIndexesIndexOutput {
	return o
}

// The ID of this resource.
func (o GetIndexesIndexOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetIndexesIndex) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetIndexesIndexOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetIndexesIndex) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetIndexesIndexOutput) ObjDatabase() pulumi.StringOutput {
	return o.ApplyT(func(v GetIndexesIndex) string { return v.ObjDatabase }).(pulumi.StringOutput)
}

func (o GetIndexesIndexOutput) ObjName() pulumi.StringOutput {
	return o.ApplyT(func(v GetIndexesIndex) string { return v.ObjName }).(pulumi.StringOutput)
}

func (o GetIndexesIndexOutput) ObjSchema() pulumi.StringOutput {
	return o.ApplyT(func(v GetIndexesIndex) string { return v.ObjSchema }).(pulumi.StringOutput)
}

type GetIndexesIndexArrayOutput struct{ *pulumi.OutputState }

func (GetIndexesIndexArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetIndexesIndex)(nil)).Elem()
}

func (o GetIndexesIndexArrayOutput) ToGetIndexesIndexArrayOutput() GetIndexesIndexArrayOutput {
	return o
}

func (o GetIndexesIndexArrayOutput) ToGetIndexesIndexArrayOutputWithContext(ctx context.Context) GetIndexesIndexArrayOutput {
	return o
}

func (o GetIndexesIndexArrayOutput) Index(i pulumi.IntInput) GetIndexesIndexOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetIndexesIndex {
		return vs[0].([]GetIndexesIndex)[vs[1].(int)]
	}).(GetIndexesIndexOutput)
}

type GetMaterializedViewsMaterializedView struct {
	// Limit materialized views to a specific database
	DatabaseName string `pulumi:"databaseName"`
	// The ID of this resource.
	Id   string `pulumi:"id"`
	Name string `pulumi:"name"`
	// Limit materialized views to a specific schema within a specific database
	SchemaName string `pulumi:"schemaName"`
}

// GetMaterializedViewsMaterializedViewInput is an input type that accepts GetMaterializedViewsMaterializedViewArgs and GetMaterializedViewsMaterializedViewOutput values.
// You can construct a concrete instance of `GetMaterializedViewsMaterializedViewInput` via:
//
//	GetMaterializedViewsMaterializedViewArgs{...}
type GetMaterializedViewsMaterializedViewInput interface {
	pulumi.Input

	ToGetMaterializedViewsMaterializedViewOutput() GetMaterializedViewsMaterializedViewOutput
	ToGetMaterializedViewsMaterializedViewOutputWithContext(context.Context) GetMaterializedViewsMaterializedViewOutput
}

type GetMaterializedViewsMaterializedViewArgs struct {
	// Limit materialized views to a specific database
	DatabaseName pulumi.StringInput `pulumi:"databaseName"`
	// The ID of this resource.
	Id   pulumi.StringInput `pulumi:"id"`
	Name pulumi.StringInput `pulumi:"name"`
	// Limit materialized views to a specific schema within a specific database
	SchemaName pulumi.StringInput `pulumi:"schemaName"`
}

func (GetMaterializedViewsMaterializedViewArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMaterializedViewsMaterializedView)(nil)).Elem()
}

func (i GetMaterializedViewsMaterializedViewArgs) ToGetMaterializedViewsMaterializedViewOutput() GetMaterializedViewsMaterializedViewOutput {
	return i.ToGetMaterializedViewsMaterializedViewOutputWithContext(context.Background())
}

func (i GetMaterializedViewsMaterializedViewArgs) ToGetMaterializedViewsMaterializedViewOutputWithContext(ctx context.Context) GetMaterializedViewsMaterializedViewOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMaterializedViewsMaterializedViewOutput)
}

// GetMaterializedViewsMaterializedViewArrayInput is an input type that accepts GetMaterializedViewsMaterializedViewArray and GetMaterializedViewsMaterializedViewArrayOutput values.
// You can construct a concrete instance of `GetMaterializedViewsMaterializedViewArrayInput` via:
//
//	GetMaterializedViewsMaterializedViewArray{ GetMaterializedViewsMaterializedViewArgs{...} }
type GetMaterializedViewsMaterializedViewArrayInput interface {
	pulumi.Input

	ToGetMaterializedViewsMaterializedViewArrayOutput() GetMaterializedViewsMaterializedViewArrayOutput
	ToGetMaterializedViewsMaterializedViewArrayOutputWithContext(context.Context) GetMaterializedViewsMaterializedViewArrayOutput
}

type GetMaterializedViewsMaterializedViewArray []GetMaterializedViewsMaterializedViewInput

func (GetMaterializedViewsMaterializedViewArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMaterializedViewsMaterializedView)(nil)).Elem()
}

func (i GetMaterializedViewsMaterializedViewArray) ToGetMaterializedViewsMaterializedViewArrayOutput() GetMaterializedViewsMaterializedViewArrayOutput {
	return i.ToGetMaterializedViewsMaterializedViewArrayOutputWithContext(context.Background())
}

func (i GetMaterializedViewsMaterializedViewArray) ToGetMaterializedViewsMaterializedViewArrayOutputWithContext(ctx context.Context) GetMaterializedViewsMaterializedViewArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMaterializedViewsMaterializedViewArrayOutput)
}

type GetMaterializedViewsMaterializedViewOutput struct{ *pulumi.OutputState }

func (GetMaterializedViewsMaterializedViewOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMaterializedViewsMaterializedView)(nil)).Elem()
}

func (o GetMaterializedViewsMaterializedViewOutput) ToGetMaterializedViewsMaterializedViewOutput() GetMaterializedViewsMaterializedViewOutput {
	return o
}

func (o GetMaterializedViewsMaterializedViewOutput) ToGetMaterializedViewsMaterializedViewOutputWithContext(ctx context.Context) GetMaterializedViewsMaterializedViewOutput {
	return o
}

// Limit materialized views to a specific database
func (o GetMaterializedViewsMaterializedViewOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v GetMaterializedViewsMaterializedView) string { return v.DatabaseName }).(pulumi.StringOutput)
}

// The ID of this resource.
func (o GetMaterializedViewsMaterializedViewOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetMaterializedViewsMaterializedView) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetMaterializedViewsMaterializedViewOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetMaterializedViewsMaterializedView) string { return v.Name }).(pulumi.StringOutput)
}

// Limit materialized views to a specific schema within a specific database
func (o GetMaterializedViewsMaterializedViewOutput) SchemaName() pulumi.StringOutput {
	return o.ApplyT(func(v GetMaterializedViewsMaterializedView) string { return v.SchemaName }).(pulumi.StringOutput)
}

type GetMaterializedViewsMaterializedViewArrayOutput struct{ *pulumi.OutputState }

func (GetMaterializedViewsMaterializedViewArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMaterializedViewsMaterializedView)(nil)).Elem()
}

func (o GetMaterializedViewsMaterializedViewArrayOutput) ToGetMaterializedViewsMaterializedViewArrayOutput() GetMaterializedViewsMaterializedViewArrayOutput {
	return o
}

func (o GetMaterializedViewsMaterializedViewArrayOutput) ToGetMaterializedViewsMaterializedViewArrayOutputWithContext(ctx context.Context) GetMaterializedViewsMaterializedViewArrayOutput {
	return o
}

func (o GetMaterializedViewsMaterializedViewArrayOutput) Index(i pulumi.IntInput) GetMaterializedViewsMaterializedViewOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetMaterializedViewsMaterializedView {
		return vs[0].([]GetMaterializedViewsMaterializedView)[vs[1].(int)]
	}).(GetMaterializedViewsMaterializedViewOutput)
}

type GetSchemasSchema struct {
	// Limit schemas to a specific database
	DatabaseName string `pulumi:"databaseName"`
	// The ID of this resource.
	Id   string `pulumi:"id"`
	Name string `pulumi:"name"`
}

// GetSchemasSchemaInput is an input type that accepts GetSchemasSchemaArgs and GetSchemasSchemaOutput values.
// You can construct a concrete instance of `GetSchemasSchemaInput` via:
//
//	GetSchemasSchemaArgs{...}
type GetSchemasSchemaInput interface {
	pulumi.Input

	ToGetSchemasSchemaOutput() GetSchemasSchemaOutput
	ToGetSchemasSchemaOutputWithContext(context.Context) GetSchemasSchemaOutput
}

type GetSchemasSchemaArgs struct {
	// Limit schemas to a specific database
	DatabaseName pulumi.StringInput `pulumi:"databaseName"`
	// The ID of this resource.
	Id   pulumi.StringInput `pulumi:"id"`
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetSchemasSchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSchemasSchema)(nil)).Elem()
}

func (i GetSchemasSchemaArgs) ToGetSchemasSchemaOutput() GetSchemasSchemaOutput {
	return i.ToGetSchemasSchemaOutputWithContext(context.Background())
}

func (i GetSchemasSchemaArgs) ToGetSchemasSchemaOutputWithContext(ctx context.Context) GetSchemasSchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSchemasSchemaOutput)
}

// GetSchemasSchemaArrayInput is an input type that accepts GetSchemasSchemaArray and GetSchemasSchemaArrayOutput values.
// You can construct a concrete instance of `GetSchemasSchemaArrayInput` via:
//
//	GetSchemasSchemaArray{ GetSchemasSchemaArgs{...} }
type GetSchemasSchemaArrayInput interface {
	pulumi.Input

	ToGetSchemasSchemaArrayOutput() GetSchemasSchemaArrayOutput
	ToGetSchemasSchemaArrayOutputWithContext(context.Context) GetSchemasSchemaArrayOutput
}

type GetSchemasSchemaArray []GetSchemasSchemaInput

func (GetSchemasSchemaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSchemasSchema)(nil)).Elem()
}

func (i GetSchemasSchemaArray) ToGetSchemasSchemaArrayOutput() GetSchemasSchemaArrayOutput {
	return i.ToGetSchemasSchemaArrayOutputWithContext(context.Background())
}

func (i GetSchemasSchemaArray) ToGetSchemasSchemaArrayOutputWithContext(ctx context.Context) GetSchemasSchemaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSchemasSchemaArrayOutput)
}

type GetSchemasSchemaOutput struct{ *pulumi.OutputState }

func (GetSchemasSchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSchemasSchema)(nil)).Elem()
}

func (o GetSchemasSchemaOutput) ToGetSchemasSchemaOutput() GetSchemasSchemaOutput {
	return o
}

func (o GetSchemasSchemaOutput) ToGetSchemasSchemaOutputWithContext(ctx context.Context) GetSchemasSchemaOutput {
	return o
}

// Limit schemas to a specific database
func (o GetSchemasSchemaOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v GetSchemasSchema) string { return v.DatabaseName }).(pulumi.StringOutput)
}

// The ID of this resource.
func (o GetSchemasSchemaOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSchemasSchema) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetSchemasSchemaOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetSchemasSchema) string { return v.Name }).(pulumi.StringOutput)
}

type GetSchemasSchemaArrayOutput struct{ *pulumi.OutputState }

func (GetSchemasSchemaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSchemasSchema)(nil)).Elem()
}

func (o GetSchemasSchemaArrayOutput) ToGetSchemasSchemaArrayOutput() GetSchemasSchemaArrayOutput {
	return o
}

func (o GetSchemasSchemaArrayOutput) ToGetSchemasSchemaArrayOutputWithContext(ctx context.Context) GetSchemasSchemaArrayOutput {
	return o
}

func (o GetSchemasSchemaArrayOutput) Index(i pulumi.IntInput) GetSchemasSchemaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSchemasSchema {
		return vs[0].([]GetSchemasSchema)[vs[1].(int)]
	}).(GetSchemasSchemaOutput)
}

type GetSecretsSecret struct {
	// Limit secrets to a specific database
	DatabaseName string `pulumi:"databaseName"`
	// The ID of this resource.
	Id   string `pulumi:"id"`
	Name string `pulumi:"name"`
	// Limit secrets to a specific schema within a specific database
	SchemaName string `pulumi:"schemaName"`
}

// GetSecretsSecretInput is an input type that accepts GetSecretsSecretArgs and GetSecretsSecretOutput values.
// You can construct a concrete instance of `GetSecretsSecretInput` via:
//
//	GetSecretsSecretArgs{...}
type GetSecretsSecretInput interface {
	pulumi.Input

	ToGetSecretsSecretOutput() GetSecretsSecretOutput
	ToGetSecretsSecretOutputWithContext(context.Context) GetSecretsSecretOutput
}

type GetSecretsSecretArgs struct {
	// Limit secrets to a specific database
	DatabaseName pulumi.StringInput `pulumi:"databaseName"`
	// The ID of this resource.
	Id   pulumi.StringInput `pulumi:"id"`
	Name pulumi.StringInput `pulumi:"name"`
	// Limit secrets to a specific schema within a specific database
	SchemaName pulumi.StringInput `pulumi:"schemaName"`
}

func (GetSecretsSecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecretsSecret)(nil)).Elem()
}

func (i GetSecretsSecretArgs) ToGetSecretsSecretOutput() GetSecretsSecretOutput {
	return i.ToGetSecretsSecretOutputWithContext(context.Background())
}

func (i GetSecretsSecretArgs) ToGetSecretsSecretOutputWithContext(ctx context.Context) GetSecretsSecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecretsSecretOutput)
}

// GetSecretsSecretArrayInput is an input type that accepts GetSecretsSecretArray and GetSecretsSecretArrayOutput values.
// You can construct a concrete instance of `GetSecretsSecretArrayInput` via:
//
//	GetSecretsSecretArray{ GetSecretsSecretArgs{...} }
type GetSecretsSecretArrayInput interface {
	pulumi.Input

	ToGetSecretsSecretArrayOutput() GetSecretsSecretArrayOutput
	ToGetSecretsSecretArrayOutputWithContext(context.Context) GetSecretsSecretArrayOutput
}

type GetSecretsSecretArray []GetSecretsSecretInput

func (GetSecretsSecretArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecretsSecret)(nil)).Elem()
}

func (i GetSecretsSecretArray) ToGetSecretsSecretArrayOutput() GetSecretsSecretArrayOutput {
	return i.ToGetSecretsSecretArrayOutputWithContext(context.Background())
}

func (i GetSecretsSecretArray) ToGetSecretsSecretArrayOutputWithContext(ctx context.Context) GetSecretsSecretArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecretsSecretArrayOutput)
}

type GetSecretsSecretOutput struct{ *pulumi.OutputState }

func (GetSecretsSecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecretsSecret)(nil)).Elem()
}

func (o GetSecretsSecretOutput) ToGetSecretsSecretOutput() GetSecretsSecretOutput {
	return o
}

func (o GetSecretsSecretOutput) ToGetSecretsSecretOutputWithContext(ctx context.Context) GetSecretsSecretOutput {
	return o
}

// Limit secrets to a specific database
func (o GetSecretsSecretOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecretsSecret) string { return v.DatabaseName }).(pulumi.StringOutput)
}

// The ID of this resource.
func (o GetSecretsSecretOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecretsSecret) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetSecretsSecretOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecretsSecret) string { return v.Name }).(pulumi.StringOutput)
}

// Limit secrets to a specific schema within a specific database
func (o GetSecretsSecretOutput) SchemaName() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecretsSecret) string { return v.SchemaName }).(pulumi.StringOutput)
}

type GetSecretsSecretArrayOutput struct{ *pulumi.OutputState }

func (GetSecretsSecretArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecretsSecret)(nil)).Elem()
}

func (o GetSecretsSecretArrayOutput) ToGetSecretsSecretArrayOutput() GetSecretsSecretArrayOutput {
	return o
}

func (o GetSecretsSecretArrayOutput) ToGetSecretsSecretArrayOutputWithContext(ctx context.Context) GetSecretsSecretArrayOutput {
	return o
}

func (o GetSecretsSecretArrayOutput) Index(i pulumi.IntInput) GetSecretsSecretOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSecretsSecret {
		return vs[0].([]GetSecretsSecret)[vs[1].(int)]
	}).(GetSecretsSecretOutput)
}

type GetSinksSink struct {
	ClusterName    string `pulumi:"clusterName"`
	ConnectionName string `pulumi:"connectionName"`
	// Limit sinks to a specific database
	DatabaseName string `pulumi:"databaseName"`
	EnvelopeType string `pulumi:"envelopeType"`
	// The ID of this resource.
	Id   string `pulumi:"id"`
	Name string `pulumi:"name"`
	// Limit sinks to a specific schema within a specific database
	SchemaName string `pulumi:"schemaName"`
	Size       string `pulumi:"size"`
	Type       string `pulumi:"type"`
}

// GetSinksSinkInput is an input type that accepts GetSinksSinkArgs and GetSinksSinkOutput values.
// You can construct a concrete instance of `GetSinksSinkInput` via:
//
//	GetSinksSinkArgs{...}
type GetSinksSinkInput interface {
	pulumi.Input

	ToGetSinksSinkOutput() GetSinksSinkOutput
	ToGetSinksSinkOutputWithContext(context.Context) GetSinksSinkOutput
}

type GetSinksSinkArgs struct {
	ClusterName    pulumi.StringInput `pulumi:"clusterName"`
	ConnectionName pulumi.StringInput `pulumi:"connectionName"`
	// Limit sinks to a specific database
	DatabaseName pulumi.StringInput `pulumi:"databaseName"`
	EnvelopeType pulumi.StringInput `pulumi:"envelopeType"`
	// The ID of this resource.
	Id   pulumi.StringInput `pulumi:"id"`
	Name pulumi.StringInput `pulumi:"name"`
	// Limit sinks to a specific schema within a specific database
	SchemaName pulumi.StringInput `pulumi:"schemaName"`
	Size       pulumi.StringInput `pulumi:"size"`
	Type       pulumi.StringInput `pulumi:"type"`
}

func (GetSinksSinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSinksSink)(nil)).Elem()
}

func (i GetSinksSinkArgs) ToGetSinksSinkOutput() GetSinksSinkOutput {
	return i.ToGetSinksSinkOutputWithContext(context.Background())
}

func (i GetSinksSinkArgs) ToGetSinksSinkOutputWithContext(ctx context.Context) GetSinksSinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSinksSinkOutput)
}

// GetSinksSinkArrayInput is an input type that accepts GetSinksSinkArray and GetSinksSinkArrayOutput values.
// You can construct a concrete instance of `GetSinksSinkArrayInput` via:
//
//	GetSinksSinkArray{ GetSinksSinkArgs{...} }
type GetSinksSinkArrayInput interface {
	pulumi.Input

	ToGetSinksSinkArrayOutput() GetSinksSinkArrayOutput
	ToGetSinksSinkArrayOutputWithContext(context.Context) GetSinksSinkArrayOutput
}

type GetSinksSinkArray []GetSinksSinkInput

func (GetSinksSinkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSinksSink)(nil)).Elem()
}

func (i GetSinksSinkArray) ToGetSinksSinkArrayOutput() GetSinksSinkArrayOutput {
	return i.ToGetSinksSinkArrayOutputWithContext(context.Background())
}

func (i GetSinksSinkArray) ToGetSinksSinkArrayOutputWithContext(ctx context.Context) GetSinksSinkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSinksSinkArrayOutput)
}

type GetSinksSinkOutput struct{ *pulumi.OutputState }

func (GetSinksSinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSinksSink)(nil)).Elem()
}

func (o GetSinksSinkOutput) ToGetSinksSinkOutput() GetSinksSinkOutput {
	return o
}

func (o GetSinksSinkOutput) ToGetSinksSinkOutputWithContext(ctx context.Context) GetSinksSinkOutput {
	return o
}

func (o GetSinksSinkOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v GetSinksSink) string { return v.ClusterName }).(pulumi.StringOutput)
}

func (o GetSinksSinkOutput) ConnectionName() pulumi.StringOutput {
	return o.ApplyT(func(v GetSinksSink) string { return v.ConnectionName }).(pulumi.StringOutput)
}

// Limit sinks to a specific database
func (o GetSinksSinkOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v GetSinksSink) string { return v.DatabaseName }).(pulumi.StringOutput)
}

func (o GetSinksSinkOutput) EnvelopeType() pulumi.StringOutput {
	return o.ApplyT(func(v GetSinksSink) string { return v.EnvelopeType }).(pulumi.StringOutput)
}

// The ID of this resource.
func (o GetSinksSinkOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSinksSink) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetSinksSinkOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetSinksSink) string { return v.Name }).(pulumi.StringOutput)
}

// Limit sinks to a specific schema within a specific database
func (o GetSinksSinkOutput) SchemaName() pulumi.StringOutput {
	return o.ApplyT(func(v GetSinksSink) string { return v.SchemaName }).(pulumi.StringOutput)
}

func (o GetSinksSinkOutput) Size() pulumi.StringOutput {
	return o.ApplyT(func(v GetSinksSink) string { return v.Size }).(pulumi.StringOutput)
}

func (o GetSinksSinkOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetSinksSink) string { return v.Type }).(pulumi.StringOutput)
}

type GetSinksSinkArrayOutput struct{ *pulumi.OutputState }

func (GetSinksSinkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSinksSink)(nil)).Elem()
}

func (o GetSinksSinkArrayOutput) ToGetSinksSinkArrayOutput() GetSinksSinkArrayOutput {
	return o
}

func (o GetSinksSinkArrayOutput) ToGetSinksSinkArrayOutputWithContext(ctx context.Context) GetSinksSinkArrayOutput {
	return o
}

func (o GetSinksSinkArrayOutput) Index(i pulumi.IntInput) GetSinksSinkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSinksSink {
		return vs[0].([]GetSinksSink)[vs[1].(int)]
	}).(GetSinksSinkOutput)
}

type GetSourcesSource struct {
	ClusterName    string `pulumi:"clusterName"`
	ConnectionName string `pulumi:"connectionName"`
	// Limit sources to a specific database
	DatabaseName string `pulumi:"databaseName"`
	EnvelopeType string `pulumi:"envelopeType"`
	// The ID of this resource.
	Id   string `pulumi:"id"`
	Name string `pulumi:"name"`
	// Limit sources to a specific schema within a specific database
	SchemaName string `pulumi:"schemaName"`
	Size       string `pulumi:"size"`
	Type       string `pulumi:"type"`
}

// GetSourcesSourceInput is an input type that accepts GetSourcesSourceArgs and GetSourcesSourceOutput values.
// You can construct a concrete instance of `GetSourcesSourceInput` via:
//
//	GetSourcesSourceArgs{...}
type GetSourcesSourceInput interface {
	pulumi.Input

	ToGetSourcesSourceOutput() GetSourcesSourceOutput
	ToGetSourcesSourceOutputWithContext(context.Context) GetSourcesSourceOutput
}

type GetSourcesSourceArgs struct {
	ClusterName    pulumi.StringInput `pulumi:"clusterName"`
	ConnectionName pulumi.StringInput `pulumi:"connectionName"`
	// Limit sources to a specific database
	DatabaseName pulumi.StringInput `pulumi:"databaseName"`
	EnvelopeType pulumi.StringInput `pulumi:"envelopeType"`
	// The ID of this resource.
	Id   pulumi.StringInput `pulumi:"id"`
	Name pulumi.StringInput `pulumi:"name"`
	// Limit sources to a specific schema within a specific database
	SchemaName pulumi.StringInput `pulumi:"schemaName"`
	Size       pulumi.StringInput `pulumi:"size"`
	Type       pulumi.StringInput `pulumi:"type"`
}

func (GetSourcesSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSourcesSource)(nil)).Elem()
}

func (i GetSourcesSourceArgs) ToGetSourcesSourceOutput() GetSourcesSourceOutput {
	return i.ToGetSourcesSourceOutputWithContext(context.Background())
}

func (i GetSourcesSourceArgs) ToGetSourcesSourceOutputWithContext(ctx context.Context) GetSourcesSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSourcesSourceOutput)
}

// GetSourcesSourceArrayInput is an input type that accepts GetSourcesSourceArray and GetSourcesSourceArrayOutput values.
// You can construct a concrete instance of `GetSourcesSourceArrayInput` via:
//
//	GetSourcesSourceArray{ GetSourcesSourceArgs{...} }
type GetSourcesSourceArrayInput interface {
	pulumi.Input

	ToGetSourcesSourceArrayOutput() GetSourcesSourceArrayOutput
	ToGetSourcesSourceArrayOutputWithContext(context.Context) GetSourcesSourceArrayOutput
}

type GetSourcesSourceArray []GetSourcesSourceInput

func (GetSourcesSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSourcesSource)(nil)).Elem()
}

func (i GetSourcesSourceArray) ToGetSourcesSourceArrayOutput() GetSourcesSourceArrayOutput {
	return i.ToGetSourcesSourceArrayOutputWithContext(context.Background())
}

func (i GetSourcesSourceArray) ToGetSourcesSourceArrayOutputWithContext(ctx context.Context) GetSourcesSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSourcesSourceArrayOutput)
}

type GetSourcesSourceOutput struct{ *pulumi.OutputState }

func (GetSourcesSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSourcesSource)(nil)).Elem()
}

func (o GetSourcesSourceOutput) ToGetSourcesSourceOutput() GetSourcesSourceOutput {
	return o
}

func (o GetSourcesSourceOutput) ToGetSourcesSourceOutputWithContext(ctx context.Context) GetSourcesSourceOutput {
	return o
}

func (o GetSourcesSourceOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v GetSourcesSource) string { return v.ClusterName }).(pulumi.StringOutput)
}

func (o GetSourcesSourceOutput) ConnectionName() pulumi.StringOutput {
	return o.ApplyT(func(v GetSourcesSource) string { return v.ConnectionName }).(pulumi.StringOutput)
}

// Limit sources to a specific database
func (o GetSourcesSourceOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v GetSourcesSource) string { return v.DatabaseName }).(pulumi.StringOutput)
}

func (o GetSourcesSourceOutput) EnvelopeType() pulumi.StringOutput {
	return o.ApplyT(func(v GetSourcesSource) string { return v.EnvelopeType }).(pulumi.StringOutput)
}

// The ID of this resource.
func (o GetSourcesSourceOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSourcesSource) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetSourcesSourceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetSourcesSource) string { return v.Name }).(pulumi.StringOutput)
}

// Limit sources to a specific schema within a specific database
func (o GetSourcesSourceOutput) SchemaName() pulumi.StringOutput {
	return o.ApplyT(func(v GetSourcesSource) string { return v.SchemaName }).(pulumi.StringOutput)
}

func (o GetSourcesSourceOutput) Size() pulumi.StringOutput {
	return o.ApplyT(func(v GetSourcesSource) string { return v.Size }).(pulumi.StringOutput)
}

func (o GetSourcesSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetSourcesSource) string { return v.Type }).(pulumi.StringOutput)
}

type GetSourcesSourceArrayOutput struct{ *pulumi.OutputState }

func (GetSourcesSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSourcesSource)(nil)).Elem()
}

func (o GetSourcesSourceArrayOutput) ToGetSourcesSourceArrayOutput() GetSourcesSourceArrayOutput {
	return o
}

func (o GetSourcesSourceArrayOutput) ToGetSourcesSourceArrayOutputWithContext(ctx context.Context) GetSourcesSourceArrayOutput {
	return o
}

func (o GetSourcesSourceArrayOutput) Index(i pulumi.IntInput) GetSourcesSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSourcesSource {
		return vs[0].([]GetSourcesSource)[vs[1].(int)]
	}).(GetSourcesSourceOutput)
}

type GetTablesTable struct {
	// Limit tables to a specific database
	DatabaseName string `pulumi:"databaseName"`
	// The ID of this resource.
	Id   string `pulumi:"id"`
	Name string `pulumi:"name"`
	// Limit tables to a specific schema within a specific database
	SchemaName string `pulumi:"schemaName"`
}

// GetTablesTableInput is an input type that accepts GetTablesTableArgs and GetTablesTableOutput values.
// You can construct a concrete instance of `GetTablesTableInput` via:
//
//	GetTablesTableArgs{...}
type GetTablesTableInput interface {
	pulumi.Input

	ToGetTablesTableOutput() GetTablesTableOutput
	ToGetTablesTableOutputWithContext(context.Context) GetTablesTableOutput
}

type GetTablesTableArgs struct {
	// Limit tables to a specific database
	DatabaseName pulumi.StringInput `pulumi:"databaseName"`
	// The ID of this resource.
	Id   pulumi.StringInput `pulumi:"id"`
	Name pulumi.StringInput `pulumi:"name"`
	// Limit tables to a specific schema within a specific database
	SchemaName pulumi.StringInput `pulumi:"schemaName"`
}

func (GetTablesTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTablesTable)(nil)).Elem()
}

func (i GetTablesTableArgs) ToGetTablesTableOutput() GetTablesTableOutput {
	return i.ToGetTablesTableOutputWithContext(context.Background())
}

func (i GetTablesTableArgs) ToGetTablesTableOutputWithContext(ctx context.Context) GetTablesTableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTablesTableOutput)
}

// GetTablesTableArrayInput is an input type that accepts GetTablesTableArray and GetTablesTableArrayOutput values.
// You can construct a concrete instance of `GetTablesTableArrayInput` via:
//
//	GetTablesTableArray{ GetTablesTableArgs{...} }
type GetTablesTableArrayInput interface {
	pulumi.Input

	ToGetTablesTableArrayOutput() GetTablesTableArrayOutput
	ToGetTablesTableArrayOutputWithContext(context.Context) GetTablesTableArrayOutput
}

type GetTablesTableArray []GetTablesTableInput

func (GetTablesTableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTablesTable)(nil)).Elem()
}

func (i GetTablesTableArray) ToGetTablesTableArrayOutput() GetTablesTableArrayOutput {
	return i.ToGetTablesTableArrayOutputWithContext(context.Background())
}

func (i GetTablesTableArray) ToGetTablesTableArrayOutputWithContext(ctx context.Context) GetTablesTableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTablesTableArrayOutput)
}

type GetTablesTableOutput struct{ *pulumi.OutputState }

func (GetTablesTableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTablesTable)(nil)).Elem()
}

func (o GetTablesTableOutput) ToGetTablesTableOutput() GetTablesTableOutput {
	return o
}

func (o GetTablesTableOutput) ToGetTablesTableOutputWithContext(ctx context.Context) GetTablesTableOutput {
	return o
}

// Limit tables to a specific database
func (o GetTablesTableOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v GetTablesTable) string { return v.DatabaseName }).(pulumi.StringOutput)
}

// The ID of this resource.
func (o GetTablesTableOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetTablesTable) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetTablesTableOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetTablesTable) string { return v.Name }).(pulumi.StringOutput)
}

// Limit tables to a specific schema within a specific database
func (o GetTablesTableOutput) SchemaName() pulumi.StringOutput {
	return o.ApplyT(func(v GetTablesTable) string { return v.SchemaName }).(pulumi.StringOutput)
}

type GetTablesTableArrayOutput struct{ *pulumi.OutputState }

func (GetTablesTableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTablesTable)(nil)).Elem()
}

func (o GetTablesTableArrayOutput) ToGetTablesTableArrayOutput() GetTablesTableArrayOutput {
	return o
}

func (o GetTablesTableArrayOutput) ToGetTablesTableArrayOutputWithContext(ctx context.Context) GetTablesTableArrayOutput {
	return o
}

func (o GetTablesTableArrayOutput) Index(i pulumi.IntInput) GetTablesTableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTablesTable {
		return vs[0].([]GetTablesTable)[vs[1].(int)]
	}).(GetTablesTableOutput)
}

type GetViewsView struct {
	// Limit views to a specific database
	DatabaseName string `pulumi:"databaseName"`
	// The ID of this resource.
	Id   string `pulumi:"id"`
	Name string `pulumi:"name"`
	// Limit views to a specific schema within a specific database
	SchemaName string `pulumi:"schemaName"`
}

// GetViewsViewInput is an input type that accepts GetViewsViewArgs and GetViewsViewOutput values.
// You can construct a concrete instance of `GetViewsViewInput` via:
//
//	GetViewsViewArgs{...}
type GetViewsViewInput interface {
	pulumi.Input

	ToGetViewsViewOutput() GetViewsViewOutput
	ToGetViewsViewOutputWithContext(context.Context) GetViewsViewOutput
}

type GetViewsViewArgs struct {
	// Limit views to a specific database
	DatabaseName pulumi.StringInput `pulumi:"databaseName"`
	// The ID of this resource.
	Id   pulumi.StringInput `pulumi:"id"`
	Name pulumi.StringInput `pulumi:"name"`
	// Limit views to a specific schema within a specific database
	SchemaName pulumi.StringInput `pulumi:"schemaName"`
}

func (GetViewsViewArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetViewsView)(nil)).Elem()
}

func (i GetViewsViewArgs) ToGetViewsViewOutput() GetViewsViewOutput {
	return i.ToGetViewsViewOutputWithContext(context.Background())
}

func (i GetViewsViewArgs) ToGetViewsViewOutputWithContext(ctx context.Context) GetViewsViewOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetViewsViewOutput)
}

// GetViewsViewArrayInput is an input type that accepts GetViewsViewArray and GetViewsViewArrayOutput values.
// You can construct a concrete instance of `GetViewsViewArrayInput` via:
//
//	GetViewsViewArray{ GetViewsViewArgs{...} }
type GetViewsViewArrayInput interface {
	pulumi.Input

	ToGetViewsViewArrayOutput() GetViewsViewArrayOutput
	ToGetViewsViewArrayOutputWithContext(context.Context) GetViewsViewArrayOutput
}

type GetViewsViewArray []GetViewsViewInput

func (GetViewsViewArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetViewsView)(nil)).Elem()
}

func (i GetViewsViewArray) ToGetViewsViewArrayOutput() GetViewsViewArrayOutput {
	return i.ToGetViewsViewArrayOutputWithContext(context.Background())
}

func (i GetViewsViewArray) ToGetViewsViewArrayOutputWithContext(ctx context.Context) GetViewsViewArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetViewsViewArrayOutput)
}

type GetViewsViewOutput struct{ *pulumi.OutputState }

func (GetViewsViewOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetViewsView)(nil)).Elem()
}

func (o GetViewsViewOutput) ToGetViewsViewOutput() GetViewsViewOutput {
	return o
}

func (o GetViewsViewOutput) ToGetViewsViewOutputWithContext(ctx context.Context) GetViewsViewOutput {
	return o
}

// Limit views to a specific database
func (o GetViewsViewOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v GetViewsView) string { return v.DatabaseName }).(pulumi.StringOutput)
}

// The ID of this resource.
func (o GetViewsViewOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetViewsView) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetViewsViewOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetViewsView) string { return v.Name }).(pulumi.StringOutput)
}

// Limit views to a specific schema within a specific database
func (o GetViewsViewOutput) SchemaName() pulumi.StringOutput {
	return o.ApplyT(func(v GetViewsView) string { return v.SchemaName }).(pulumi.StringOutput)
}

type GetViewsViewArrayOutput struct{ *pulumi.OutputState }

func (GetViewsViewArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetViewsView)(nil)).Elem()
}

func (o GetViewsViewArrayOutput) ToGetViewsViewArrayOutput() GetViewsViewArrayOutput {
	return o
}

func (o GetViewsViewArrayOutput) ToGetViewsViewArrayOutputWithContext(ctx context.Context) GetViewsViewArrayOutput {
	return o
}

func (o GetViewsViewArrayOutput) Index(i pulumi.IntInput) GetViewsViewOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetViewsView {
		return vs[0].([]GetViewsView)[vs[1].(int)]
	}).(GetViewsViewOutput)
}

type IndexColExpr struct {
	// The name of the option you want to set.
	Field string `pulumi:"field"`
	// The value for the option.
	Val *string `pulumi:"val"`
}

// IndexColExprInput is an input type that accepts IndexColExprArgs and IndexColExprOutput values.
// You can construct a concrete instance of `IndexColExprInput` via:
//
//	IndexColExprArgs{...}
type IndexColExprInput interface {
	pulumi.Input

	ToIndexColExprOutput() IndexColExprOutput
	ToIndexColExprOutputWithContext(context.Context) IndexColExprOutput
}

type IndexColExprArgs struct {
	// The name of the option you want to set.
	Field pulumi.StringInput `pulumi:"field"`
	// The value for the option.
	Val pulumi.StringPtrInput `pulumi:"val"`
}

func (IndexColExprArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IndexColExpr)(nil)).Elem()
}

func (i IndexColExprArgs) ToIndexColExprOutput() IndexColExprOutput {
	return i.ToIndexColExprOutputWithContext(context.Background())
}

func (i IndexColExprArgs) ToIndexColExprOutputWithContext(ctx context.Context) IndexColExprOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexColExprOutput)
}

// IndexColExprArrayInput is an input type that accepts IndexColExprArray and IndexColExprArrayOutput values.
// You can construct a concrete instance of `IndexColExprArrayInput` via:
//
//	IndexColExprArray{ IndexColExprArgs{...} }
type IndexColExprArrayInput interface {
	pulumi.Input

	ToIndexColExprArrayOutput() IndexColExprArrayOutput
	ToIndexColExprArrayOutputWithContext(context.Context) IndexColExprArrayOutput
}

type IndexColExprArray []IndexColExprInput

func (IndexColExprArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IndexColExpr)(nil)).Elem()
}

func (i IndexColExprArray) ToIndexColExprArrayOutput() IndexColExprArrayOutput {
	return i.ToIndexColExprArrayOutputWithContext(context.Background())
}

func (i IndexColExprArray) ToIndexColExprArrayOutputWithContext(ctx context.Context) IndexColExprArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexColExprArrayOutput)
}

type IndexColExprOutput struct{ *pulumi.OutputState }

func (IndexColExprOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IndexColExpr)(nil)).Elem()
}

func (o IndexColExprOutput) ToIndexColExprOutput() IndexColExprOutput {
	return o
}

func (o IndexColExprOutput) ToIndexColExprOutputWithContext(ctx context.Context) IndexColExprOutput {
	return o
}

// The name of the option you want to set.
func (o IndexColExprOutput) Field() pulumi.StringOutput {
	return o.ApplyT(func(v IndexColExpr) string { return v.Field }).(pulumi.StringOutput)
}

// The value for the option.
func (o IndexColExprOutput) Val() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IndexColExpr) *string { return v.Val }).(pulumi.StringPtrOutput)
}

type IndexColExprArrayOutput struct{ *pulumi.OutputState }

func (IndexColExprArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IndexColExpr)(nil)).Elem()
}

func (o IndexColExprArrayOutput) ToIndexColExprArrayOutput() IndexColExprArrayOutput {
	return o
}

func (o IndexColExprArrayOutput) ToIndexColExprArrayOutputWithContext(ctx context.Context) IndexColExprArrayOutput {
	return o
}

func (o IndexColExprArrayOutput) Index(i pulumi.IntInput) IndexColExprOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IndexColExpr {
		return vs[0].([]IndexColExpr)[vs[1].(int)]
	}).(IndexColExprOutput)
}

type IndexObjName struct {
	// The objName database name.
	DatabaseName *string `pulumi:"databaseName"`
	// The objName name.
	Name string `pulumi:"name"`
	// The objName schema name.
	SchemaName *string `pulumi:"schemaName"`
}

// IndexObjNameInput is an input type that accepts IndexObjNameArgs and IndexObjNameOutput values.
// You can construct a concrete instance of `IndexObjNameInput` via:
//
//	IndexObjNameArgs{...}
type IndexObjNameInput interface {
	pulumi.Input

	ToIndexObjNameOutput() IndexObjNameOutput
	ToIndexObjNameOutputWithContext(context.Context) IndexObjNameOutput
}

type IndexObjNameArgs struct {
	// The objName database name.
	DatabaseName pulumi.StringPtrInput `pulumi:"databaseName"`
	// The objName name.
	Name pulumi.StringInput `pulumi:"name"`
	// The objName schema name.
	SchemaName pulumi.StringPtrInput `pulumi:"schemaName"`
}

func (IndexObjNameArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IndexObjName)(nil)).Elem()
}

func (i IndexObjNameArgs) ToIndexObjNameOutput() IndexObjNameOutput {
	return i.ToIndexObjNameOutputWithContext(context.Background())
}

func (i IndexObjNameArgs) ToIndexObjNameOutputWithContext(ctx context.Context) IndexObjNameOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexObjNameOutput)
}

func (i IndexObjNameArgs) ToIndexObjNamePtrOutput() IndexObjNamePtrOutput {
	return i.ToIndexObjNamePtrOutputWithContext(context.Background())
}

func (i IndexObjNameArgs) ToIndexObjNamePtrOutputWithContext(ctx context.Context) IndexObjNamePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexObjNameOutput).ToIndexObjNamePtrOutputWithContext(ctx)
}

// IndexObjNamePtrInput is an input type that accepts IndexObjNameArgs, IndexObjNamePtr and IndexObjNamePtrOutput values.
// You can construct a concrete instance of `IndexObjNamePtrInput` via:
//
//	        IndexObjNameArgs{...}
//
//	or:
//
//	        nil
type IndexObjNamePtrInput interface {
	pulumi.Input

	ToIndexObjNamePtrOutput() IndexObjNamePtrOutput
	ToIndexObjNamePtrOutputWithContext(context.Context) IndexObjNamePtrOutput
}

type indexObjNamePtrType IndexObjNameArgs

func IndexObjNamePtr(v *IndexObjNameArgs) IndexObjNamePtrInput {
	return (*indexObjNamePtrType)(v)
}

func (*indexObjNamePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IndexObjName)(nil)).Elem()
}

func (i *indexObjNamePtrType) ToIndexObjNamePtrOutput() IndexObjNamePtrOutput {
	return i.ToIndexObjNamePtrOutputWithContext(context.Background())
}

func (i *indexObjNamePtrType) ToIndexObjNamePtrOutputWithContext(ctx context.Context) IndexObjNamePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexObjNamePtrOutput)
}

type IndexObjNameOutput struct{ *pulumi.OutputState }

func (IndexObjNameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IndexObjName)(nil)).Elem()
}

func (o IndexObjNameOutput) ToIndexObjNameOutput() IndexObjNameOutput {
	return o
}

func (o IndexObjNameOutput) ToIndexObjNameOutputWithContext(ctx context.Context) IndexObjNameOutput {
	return o
}

func (o IndexObjNameOutput) ToIndexObjNamePtrOutput() IndexObjNamePtrOutput {
	return o.ToIndexObjNamePtrOutputWithContext(context.Background())
}

func (o IndexObjNameOutput) ToIndexObjNamePtrOutputWithContext(ctx context.Context) IndexObjNamePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IndexObjName) *IndexObjName {
		return &v
	}).(IndexObjNamePtrOutput)
}

// The objName database name.
func (o IndexObjNameOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IndexObjName) *string { return v.DatabaseName }).(pulumi.StringPtrOutput)
}

// The objName name.
func (o IndexObjNameOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v IndexObjName) string { return v.Name }).(pulumi.StringOutput)
}

// The objName schema name.
func (o IndexObjNameOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IndexObjName) *string { return v.SchemaName }).(pulumi.StringPtrOutput)
}

type IndexObjNamePtrOutput struct{ *pulumi.OutputState }

func (IndexObjNamePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IndexObjName)(nil)).Elem()
}

func (o IndexObjNamePtrOutput) ToIndexObjNamePtrOutput() IndexObjNamePtrOutput {
	return o
}

func (o IndexObjNamePtrOutput) ToIndexObjNamePtrOutputWithContext(ctx context.Context) IndexObjNamePtrOutput {
	return o
}

func (o IndexObjNamePtrOutput) Elem() IndexObjNameOutput {
	return o.ApplyT(func(v *IndexObjName) IndexObjName {
		if v != nil {
			return *v
		}
		var ret IndexObjName
		return ret
	}).(IndexObjNameOutput)
}

// The objName database name.
func (o IndexObjNamePtrOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IndexObjName) *string {
		if v == nil {
			return nil
		}
		return v.DatabaseName
	}).(pulumi.StringPtrOutput)
}

// The objName name.
func (o IndexObjNamePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IndexObjName) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The objName schema name.
func (o IndexObjNamePtrOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IndexObjName) *string {
		if v == nil {
			return nil
		}
		return v.SchemaName
	}).(pulumi.StringPtrOutput)
}

type SinkKafkaEnvelope struct {
	// The generated schemas have a Debezium-style diff envelope to capture changes in the input view or source.
	Debezium *bool `pulumi:"debezium"`
	// The sink emits data with upsert semantics: updates and inserts for the given key are expressed as a value, and deletes are expressed as a null value payload in Kafka.
	Upsert *bool `pulumi:"upsert"`
}

// SinkKafkaEnvelopeInput is an input type that accepts SinkKafkaEnvelopeArgs and SinkKafkaEnvelopeOutput values.
// You can construct a concrete instance of `SinkKafkaEnvelopeInput` via:
//
//	SinkKafkaEnvelopeArgs{...}
type SinkKafkaEnvelopeInput interface {
	pulumi.Input

	ToSinkKafkaEnvelopeOutput() SinkKafkaEnvelopeOutput
	ToSinkKafkaEnvelopeOutputWithContext(context.Context) SinkKafkaEnvelopeOutput
}

type SinkKafkaEnvelopeArgs struct {
	// The generated schemas have a Debezium-style diff envelope to capture changes in the input view or source.
	Debezium pulumi.BoolPtrInput `pulumi:"debezium"`
	// The sink emits data with upsert semantics: updates and inserts for the given key are expressed as a value, and deletes are expressed as a null value payload in Kafka.
	Upsert pulumi.BoolPtrInput `pulumi:"upsert"`
}

func (SinkKafkaEnvelopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SinkKafkaEnvelope)(nil)).Elem()
}

func (i SinkKafkaEnvelopeArgs) ToSinkKafkaEnvelopeOutput() SinkKafkaEnvelopeOutput {
	return i.ToSinkKafkaEnvelopeOutputWithContext(context.Background())
}

func (i SinkKafkaEnvelopeArgs) ToSinkKafkaEnvelopeOutputWithContext(ctx context.Context) SinkKafkaEnvelopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SinkKafkaEnvelopeOutput)
}

func (i SinkKafkaEnvelopeArgs) ToSinkKafkaEnvelopePtrOutput() SinkKafkaEnvelopePtrOutput {
	return i.ToSinkKafkaEnvelopePtrOutputWithContext(context.Background())
}

func (i SinkKafkaEnvelopeArgs) ToSinkKafkaEnvelopePtrOutputWithContext(ctx context.Context) SinkKafkaEnvelopePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SinkKafkaEnvelopeOutput).ToSinkKafkaEnvelopePtrOutputWithContext(ctx)
}

// SinkKafkaEnvelopePtrInput is an input type that accepts SinkKafkaEnvelopeArgs, SinkKafkaEnvelopePtr and SinkKafkaEnvelopePtrOutput values.
// You can construct a concrete instance of `SinkKafkaEnvelopePtrInput` via:
//
//	        SinkKafkaEnvelopeArgs{...}
//
//	or:
//
//	        nil
type SinkKafkaEnvelopePtrInput interface {
	pulumi.Input

	ToSinkKafkaEnvelopePtrOutput() SinkKafkaEnvelopePtrOutput
	ToSinkKafkaEnvelopePtrOutputWithContext(context.Context) SinkKafkaEnvelopePtrOutput
}

type sinkKafkaEnvelopePtrType SinkKafkaEnvelopeArgs

func SinkKafkaEnvelopePtr(v *SinkKafkaEnvelopeArgs) SinkKafkaEnvelopePtrInput {
	return (*sinkKafkaEnvelopePtrType)(v)
}

func (*sinkKafkaEnvelopePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SinkKafkaEnvelope)(nil)).Elem()
}

func (i *sinkKafkaEnvelopePtrType) ToSinkKafkaEnvelopePtrOutput() SinkKafkaEnvelopePtrOutput {
	return i.ToSinkKafkaEnvelopePtrOutputWithContext(context.Background())
}

func (i *sinkKafkaEnvelopePtrType) ToSinkKafkaEnvelopePtrOutputWithContext(ctx context.Context) SinkKafkaEnvelopePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SinkKafkaEnvelopePtrOutput)
}

type SinkKafkaEnvelopeOutput struct{ *pulumi.OutputState }

func (SinkKafkaEnvelopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SinkKafkaEnvelope)(nil)).Elem()
}

func (o SinkKafkaEnvelopeOutput) ToSinkKafkaEnvelopeOutput() SinkKafkaEnvelopeOutput {
	return o
}

func (o SinkKafkaEnvelopeOutput) ToSinkKafkaEnvelopeOutputWithContext(ctx context.Context) SinkKafkaEnvelopeOutput {
	return o
}

func (o SinkKafkaEnvelopeOutput) ToSinkKafkaEnvelopePtrOutput() SinkKafkaEnvelopePtrOutput {
	return o.ToSinkKafkaEnvelopePtrOutputWithContext(context.Background())
}

func (o SinkKafkaEnvelopeOutput) ToSinkKafkaEnvelopePtrOutputWithContext(ctx context.Context) SinkKafkaEnvelopePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SinkKafkaEnvelope) *SinkKafkaEnvelope {
		return &v
	}).(SinkKafkaEnvelopePtrOutput)
}

// The generated schemas have a Debezium-style diff envelope to capture changes in the input view or source.
func (o SinkKafkaEnvelopeOutput) Debezium() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SinkKafkaEnvelope) *bool { return v.Debezium }).(pulumi.BoolPtrOutput)
}

// The sink emits data with upsert semantics: updates and inserts for the given key are expressed as a value, and deletes are expressed as a null value payload in Kafka.
func (o SinkKafkaEnvelopeOutput) Upsert() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SinkKafkaEnvelope) *bool { return v.Upsert }).(pulumi.BoolPtrOutput)
}

type SinkKafkaEnvelopePtrOutput struct{ *pulumi.OutputState }

func (SinkKafkaEnvelopePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SinkKafkaEnvelope)(nil)).Elem()
}

func (o SinkKafkaEnvelopePtrOutput) ToSinkKafkaEnvelopePtrOutput() SinkKafkaEnvelopePtrOutput {
	return o
}

func (o SinkKafkaEnvelopePtrOutput) ToSinkKafkaEnvelopePtrOutputWithContext(ctx context.Context) SinkKafkaEnvelopePtrOutput {
	return o
}

func (o SinkKafkaEnvelopePtrOutput) Elem() SinkKafkaEnvelopeOutput {
	return o.ApplyT(func(v *SinkKafkaEnvelope) SinkKafkaEnvelope {
		if v != nil {
			return *v
		}
		var ret SinkKafkaEnvelope
		return ret
	}).(SinkKafkaEnvelopeOutput)
}

// The generated schemas have a Debezium-style diff envelope to capture changes in the input view or source.
func (o SinkKafkaEnvelopePtrOutput) Debezium() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SinkKafkaEnvelope) *bool {
		if v == nil {
			return nil
		}
		return v.Debezium
	}).(pulumi.BoolPtrOutput)
}

// The sink emits data with upsert semantics: updates and inserts for the given key are expressed as a value, and deletes are expressed as a null value payload in Kafka.
func (o SinkKafkaEnvelopePtrOutput) Upsert() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SinkKafkaEnvelope) *bool {
		if v == nil {
			return nil
		}
		return v.Upsert
	}).(pulumi.BoolPtrOutput)
}

type SinkKafkaFormat struct {
	// Avro format.
	Avro *SinkKafkaFormatAvro `pulumi:"avro"`
	// JSON format.
	Json *bool `pulumi:"json"`
}

// SinkKafkaFormatInput is an input type that accepts SinkKafkaFormatArgs and SinkKafkaFormatOutput values.
// You can construct a concrete instance of `SinkKafkaFormatInput` via:
//
//	SinkKafkaFormatArgs{...}
type SinkKafkaFormatInput interface {
	pulumi.Input

	ToSinkKafkaFormatOutput() SinkKafkaFormatOutput
	ToSinkKafkaFormatOutputWithContext(context.Context) SinkKafkaFormatOutput
}

type SinkKafkaFormatArgs struct {
	// Avro format.
	Avro SinkKafkaFormatAvroPtrInput `pulumi:"avro"`
	// JSON format.
	Json pulumi.BoolPtrInput `pulumi:"json"`
}

func (SinkKafkaFormatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SinkKafkaFormat)(nil)).Elem()
}

func (i SinkKafkaFormatArgs) ToSinkKafkaFormatOutput() SinkKafkaFormatOutput {
	return i.ToSinkKafkaFormatOutputWithContext(context.Background())
}

func (i SinkKafkaFormatArgs) ToSinkKafkaFormatOutputWithContext(ctx context.Context) SinkKafkaFormatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SinkKafkaFormatOutput)
}

func (i SinkKafkaFormatArgs) ToSinkKafkaFormatPtrOutput() SinkKafkaFormatPtrOutput {
	return i.ToSinkKafkaFormatPtrOutputWithContext(context.Background())
}

func (i SinkKafkaFormatArgs) ToSinkKafkaFormatPtrOutputWithContext(ctx context.Context) SinkKafkaFormatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SinkKafkaFormatOutput).ToSinkKafkaFormatPtrOutputWithContext(ctx)
}

// SinkKafkaFormatPtrInput is an input type that accepts SinkKafkaFormatArgs, SinkKafkaFormatPtr and SinkKafkaFormatPtrOutput values.
// You can construct a concrete instance of `SinkKafkaFormatPtrInput` via:
//
//	        SinkKafkaFormatArgs{...}
//
//	or:
//
//	        nil
type SinkKafkaFormatPtrInput interface {
	pulumi.Input

	ToSinkKafkaFormatPtrOutput() SinkKafkaFormatPtrOutput
	ToSinkKafkaFormatPtrOutputWithContext(context.Context) SinkKafkaFormatPtrOutput
}

type sinkKafkaFormatPtrType SinkKafkaFormatArgs

func SinkKafkaFormatPtr(v *SinkKafkaFormatArgs) SinkKafkaFormatPtrInput {
	return (*sinkKafkaFormatPtrType)(v)
}

func (*sinkKafkaFormatPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SinkKafkaFormat)(nil)).Elem()
}

func (i *sinkKafkaFormatPtrType) ToSinkKafkaFormatPtrOutput() SinkKafkaFormatPtrOutput {
	return i.ToSinkKafkaFormatPtrOutputWithContext(context.Background())
}

func (i *sinkKafkaFormatPtrType) ToSinkKafkaFormatPtrOutputWithContext(ctx context.Context) SinkKafkaFormatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SinkKafkaFormatPtrOutput)
}

type SinkKafkaFormatOutput struct{ *pulumi.OutputState }

func (SinkKafkaFormatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SinkKafkaFormat)(nil)).Elem()
}

func (o SinkKafkaFormatOutput) ToSinkKafkaFormatOutput() SinkKafkaFormatOutput {
	return o
}

func (o SinkKafkaFormatOutput) ToSinkKafkaFormatOutputWithContext(ctx context.Context) SinkKafkaFormatOutput {
	return o
}

func (o SinkKafkaFormatOutput) ToSinkKafkaFormatPtrOutput() SinkKafkaFormatPtrOutput {
	return o.ToSinkKafkaFormatPtrOutputWithContext(context.Background())
}

func (o SinkKafkaFormatOutput) ToSinkKafkaFormatPtrOutputWithContext(ctx context.Context) SinkKafkaFormatPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SinkKafkaFormat) *SinkKafkaFormat {
		return &v
	}).(SinkKafkaFormatPtrOutput)
}

// Avro format.
func (o SinkKafkaFormatOutput) Avro() SinkKafkaFormatAvroPtrOutput {
	return o.ApplyT(func(v SinkKafkaFormat) *SinkKafkaFormatAvro { return v.Avro }).(SinkKafkaFormatAvroPtrOutput)
}

// JSON format.
func (o SinkKafkaFormatOutput) Json() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SinkKafkaFormat) *bool { return v.Json }).(pulumi.BoolPtrOutput)
}

type SinkKafkaFormatPtrOutput struct{ *pulumi.OutputState }

func (SinkKafkaFormatPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SinkKafkaFormat)(nil)).Elem()
}

func (o SinkKafkaFormatPtrOutput) ToSinkKafkaFormatPtrOutput() SinkKafkaFormatPtrOutput {
	return o
}

func (o SinkKafkaFormatPtrOutput) ToSinkKafkaFormatPtrOutputWithContext(ctx context.Context) SinkKafkaFormatPtrOutput {
	return o
}

func (o SinkKafkaFormatPtrOutput) Elem() SinkKafkaFormatOutput {
	return o.ApplyT(func(v *SinkKafkaFormat) SinkKafkaFormat {
		if v != nil {
			return *v
		}
		var ret SinkKafkaFormat
		return ret
	}).(SinkKafkaFormatOutput)
}

// Avro format.
func (o SinkKafkaFormatPtrOutput) Avro() SinkKafkaFormatAvroPtrOutput {
	return o.ApplyT(func(v *SinkKafkaFormat) *SinkKafkaFormatAvro {
		if v == nil {
			return nil
		}
		return v.Avro
	}).(SinkKafkaFormatAvroPtrOutput)
}

// JSON format.
func (o SinkKafkaFormatPtrOutput) Json() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SinkKafkaFormat) *bool {
		if v == nil {
			return nil
		}
		return v.Json
	}).(pulumi.BoolPtrOutput)
}

type SinkKafkaFormatAvro struct {
	AvroKeyFullname          *string                                     `pulumi:"avroKeyFullname"`
	AvroValueFullname        *string                                     `pulumi:"avroValueFullname"`
	SchemaRegistryConnection SinkKafkaFormatAvroSchemaRegistryConnection `pulumi:"schemaRegistryConnection"`
}

// SinkKafkaFormatAvroInput is an input type that accepts SinkKafkaFormatAvroArgs and SinkKafkaFormatAvroOutput values.
// You can construct a concrete instance of `SinkKafkaFormatAvroInput` via:
//
//	SinkKafkaFormatAvroArgs{...}
type SinkKafkaFormatAvroInput interface {
	pulumi.Input

	ToSinkKafkaFormatAvroOutput() SinkKafkaFormatAvroOutput
	ToSinkKafkaFormatAvroOutputWithContext(context.Context) SinkKafkaFormatAvroOutput
}

type SinkKafkaFormatAvroArgs struct {
	AvroKeyFullname          pulumi.StringPtrInput                            `pulumi:"avroKeyFullname"`
	AvroValueFullname        pulumi.StringPtrInput                            `pulumi:"avroValueFullname"`
	SchemaRegistryConnection SinkKafkaFormatAvroSchemaRegistryConnectionInput `pulumi:"schemaRegistryConnection"`
}

func (SinkKafkaFormatAvroArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SinkKafkaFormatAvro)(nil)).Elem()
}

func (i SinkKafkaFormatAvroArgs) ToSinkKafkaFormatAvroOutput() SinkKafkaFormatAvroOutput {
	return i.ToSinkKafkaFormatAvroOutputWithContext(context.Background())
}

func (i SinkKafkaFormatAvroArgs) ToSinkKafkaFormatAvroOutputWithContext(ctx context.Context) SinkKafkaFormatAvroOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SinkKafkaFormatAvroOutput)
}

func (i SinkKafkaFormatAvroArgs) ToSinkKafkaFormatAvroPtrOutput() SinkKafkaFormatAvroPtrOutput {
	return i.ToSinkKafkaFormatAvroPtrOutputWithContext(context.Background())
}

func (i SinkKafkaFormatAvroArgs) ToSinkKafkaFormatAvroPtrOutputWithContext(ctx context.Context) SinkKafkaFormatAvroPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SinkKafkaFormatAvroOutput).ToSinkKafkaFormatAvroPtrOutputWithContext(ctx)
}

// SinkKafkaFormatAvroPtrInput is an input type that accepts SinkKafkaFormatAvroArgs, SinkKafkaFormatAvroPtr and SinkKafkaFormatAvroPtrOutput values.
// You can construct a concrete instance of `SinkKafkaFormatAvroPtrInput` via:
//
//	        SinkKafkaFormatAvroArgs{...}
//
//	or:
//
//	        nil
type SinkKafkaFormatAvroPtrInput interface {
	pulumi.Input

	ToSinkKafkaFormatAvroPtrOutput() SinkKafkaFormatAvroPtrOutput
	ToSinkKafkaFormatAvroPtrOutputWithContext(context.Context) SinkKafkaFormatAvroPtrOutput
}

type sinkKafkaFormatAvroPtrType SinkKafkaFormatAvroArgs

func SinkKafkaFormatAvroPtr(v *SinkKafkaFormatAvroArgs) SinkKafkaFormatAvroPtrInput {
	return (*sinkKafkaFormatAvroPtrType)(v)
}

func (*sinkKafkaFormatAvroPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SinkKafkaFormatAvro)(nil)).Elem()
}

func (i *sinkKafkaFormatAvroPtrType) ToSinkKafkaFormatAvroPtrOutput() SinkKafkaFormatAvroPtrOutput {
	return i.ToSinkKafkaFormatAvroPtrOutputWithContext(context.Background())
}

func (i *sinkKafkaFormatAvroPtrType) ToSinkKafkaFormatAvroPtrOutputWithContext(ctx context.Context) SinkKafkaFormatAvroPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SinkKafkaFormatAvroPtrOutput)
}

type SinkKafkaFormatAvroOutput struct{ *pulumi.OutputState }

func (SinkKafkaFormatAvroOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SinkKafkaFormatAvro)(nil)).Elem()
}

func (o SinkKafkaFormatAvroOutput) ToSinkKafkaFormatAvroOutput() SinkKafkaFormatAvroOutput {
	return o
}

func (o SinkKafkaFormatAvroOutput) ToSinkKafkaFormatAvroOutputWithContext(ctx context.Context) SinkKafkaFormatAvroOutput {
	return o
}

func (o SinkKafkaFormatAvroOutput) ToSinkKafkaFormatAvroPtrOutput() SinkKafkaFormatAvroPtrOutput {
	return o.ToSinkKafkaFormatAvroPtrOutputWithContext(context.Background())
}

func (o SinkKafkaFormatAvroOutput) ToSinkKafkaFormatAvroPtrOutputWithContext(ctx context.Context) SinkKafkaFormatAvroPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SinkKafkaFormatAvro) *SinkKafkaFormatAvro {
		return &v
	}).(SinkKafkaFormatAvroPtrOutput)
}

func (o SinkKafkaFormatAvroOutput) AvroKeyFullname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SinkKafkaFormatAvro) *string { return v.AvroKeyFullname }).(pulumi.StringPtrOutput)
}

func (o SinkKafkaFormatAvroOutput) AvroValueFullname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SinkKafkaFormatAvro) *string { return v.AvroValueFullname }).(pulumi.StringPtrOutput)
}

func (o SinkKafkaFormatAvroOutput) SchemaRegistryConnection() SinkKafkaFormatAvroSchemaRegistryConnectionOutput {
	return o.ApplyT(func(v SinkKafkaFormatAvro) SinkKafkaFormatAvroSchemaRegistryConnection {
		return v.SchemaRegistryConnection
	}).(SinkKafkaFormatAvroSchemaRegistryConnectionOutput)
}

type SinkKafkaFormatAvroPtrOutput struct{ *pulumi.OutputState }

func (SinkKafkaFormatAvroPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SinkKafkaFormatAvro)(nil)).Elem()
}

func (o SinkKafkaFormatAvroPtrOutput) ToSinkKafkaFormatAvroPtrOutput() SinkKafkaFormatAvroPtrOutput {
	return o
}

func (o SinkKafkaFormatAvroPtrOutput) ToSinkKafkaFormatAvroPtrOutputWithContext(ctx context.Context) SinkKafkaFormatAvroPtrOutput {
	return o
}

func (o SinkKafkaFormatAvroPtrOutput) Elem() SinkKafkaFormatAvroOutput {
	return o.ApplyT(func(v *SinkKafkaFormatAvro) SinkKafkaFormatAvro {
		if v != nil {
			return *v
		}
		var ret SinkKafkaFormatAvro
		return ret
	}).(SinkKafkaFormatAvroOutput)
}

func (o SinkKafkaFormatAvroPtrOutput) AvroKeyFullname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SinkKafkaFormatAvro) *string {
		if v == nil {
			return nil
		}
		return v.AvroKeyFullname
	}).(pulumi.StringPtrOutput)
}

func (o SinkKafkaFormatAvroPtrOutput) AvroValueFullname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SinkKafkaFormatAvro) *string {
		if v == nil {
			return nil
		}
		return v.AvroValueFullname
	}).(pulumi.StringPtrOutput)
}

func (o SinkKafkaFormatAvroPtrOutput) SchemaRegistryConnection() SinkKafkaFormatAvroSchemaRegistryConnectionPtrOutput {
	return o.ApplyT(func(v *SinkKafkaFormatAvro) *SinkKafkaFormatAvroSchemaRegistryConnection {
		if v == nil {
			return nil
		}
		return &v.SchemaRegistryConnection
	}).(SinkKafkaFormatAvroSchemaRegistryConnectionPtrOutput)
}

type SinkKafkaFormatAvroSchemaRegistryConnection struct {
	// The identifier for the sink database.
	DatabaseName *string `pulumi:"databaseName"`
	// The identifier for the sink.
	Name string `pulumi:"name"`
	// The identifier for the sink schema.
	SchemaName *string `pulumi:"schemaName"`
}

// SinkKafkaFormatAvroSchemaRegistryConnectionInput is an input type that accepts SinkKafkaFormatAvroSchemaRegistryConnectionArgs and SinkKafkaFormatAvroSchemaRegistryConnectionOutput values.
// You can construct a concrete instance of `SinkKafkaFormatAvroSchemaRegistryConnectionInput` via:
//
//	SinkKafkaFormatAvroSchemaRegistryConnectionArgs{...}
type SinkKafkaFormatAvroSchemaRegistryConnectionInput interface {
	pulumi.Input

	ToSinkKafkaFormatAvroSchemaRegistryConnectionOutput() SinkKafkaFormatAvroSchemaRegistryConnectionOutput
	ToSinkKafkaFormatAvroSchemaRegistryConnectionOutputWithContext(context.Context) SinkKafkaFormatAvroSchemaRegistryConnectionOutput
}

type SinkKafkaFormatAvroSchemaRegistryConnectionArgs struct {
	// The identifier for the sink database.
	DatabaseName pulumi.StringPtrInput `pulumi:"databaseName"`
	// The identifier for the sink.
	Name pulumi.StringInput `pulumi:"name"`
	// The identifier for the sink schema.
	SchemaName pulumi.StringPtrInput `pulumi:"schemaName"`
}

func (SinkKafkaFormatAvroSchemaRegistryConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SinkKafkaFormatAvroSchemaRegistryConnection)(nil)).Elem()
}

func (i SinkKafkaFormatAvroSchemaRegistryConnectionArgs) ToSinkKafkaFormatAvroSchemaRegistryConnectionOutput() SinkKafkaFormatAvroSchemaRegistryConnectionOutput {
	return i.ToSinkKafkaFormatAvroSchemaRegistryConnectionOutputWithContext(context.Background())
}

func (i SinkKafkaFormatAvroSchemaRegistryConnectionArgs) ToSinkKafkaFormatAvroSchemaRegistryConnectionOutputWithContext(ctx context.Context) SinkKafkaFormatAvroSchemaRegistryConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SinkKafkaFormatAvroSchemaRegistryConnectionOutput)
}

func (i SinkKafkaFormatAvroSchemaRegistryConnectionArgs) ToSinkKafkaFormatAvroSchemaRegistryConnectionPtrOutput() SinkKafkaFormatAvroSchemaRegistryConnectionPtrOutput {
	return i.ToSinkKafkaFormatAvroSchemaRegistryConnectionPtrOutputWithContext(context.Background())
}

func (i SinkKafkaFormatAvroSchemaRegistryConnectionArgs) ToSinkKafkaFormatAvroSchemaRegistryConnectionPtrOutputWithContext(ctx context.Context) SinkKafkaFormatAvroSchemaRegistryConnectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SinkKafkaFormatAvroSchemaRegistryConnectionOutput).ToSinkKafkaFormatAvroSchemaRegistryConnectionPtrOutputWithContext(ctx)
}

// SinkKafkaFormatAvroSchemaRegistryConnectionPtrInput is an input type that accepts SinkKafkaFormatAvroSchemaRegistryConnectionArgs, SinkKafkaFormatAvroSchemaRegistryConnectionPtr and SinkKafkaFormatAvroSchemaRegistryConnectionPtrOutput values.
// You can construct a concrete instance of `SinkKafkaFormatAvroSchemaRegistryConnectionPtrInput` via:
//
//	        SinkKafkaFormatAvroSchemaRegistryConnectionArgs{...}
//
//	or:
//
//	        nil
type SinkKafkaFormatAvroSchemaRegistryConnectionPtrInput interface {
	pulumi.Input

	ToSinkKafkaFormatAvroSchemaRegistryConnectionPtrOutput() SinkKafkaFormatAvroSchemaRegistryConnectionPtrOutput
	ToSinkKafkaFormatAvroSchemaRegistryConnectionPtrOutputWithContext(context.Context) SinkKafkaFormatAvroSchemaRegistryConnectionPtrOutput
}

type sinkKafkaFormatAvroSchemaRegistryConnectionPtrType SinkKafkaFormatAvroSchemaRegistryConnectionArgs

func SinkKafkaFormatAvroSchemaRegistryConnectionPtr(v *SinkKafkaFormatAvroSchemaRegistryConnectionArgs) SinkKafkaFormatAvroSchemaRegistryConnectionPtrInput {
	return (*sinkKafkaFormatAvroSchemaRegistryConnectionPtrType)(v)
}

func (*sinkKafkaFormatAvroSchemaRegistryConnectionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SinkKafkaFormatAvroSchemaRegistryConnection)(nil)).Elem()
}

func (i *sinkKafkaFormatAvroSchemaRegistryConnectionPtrType) ToSinkKafkaFormatAvroSchemaRegistryConnectionPtrOutput() SinkKafkaFormatAvroSchemaRegistryConnectionPtrOutput {
	return i.ToSinkKafkaFormatAvroSchemaRegistryConnectionPtrOutputWithContext(context.Background())
}

func (i *sinkKafkaFormatAvroSchemaRegistryConnectionPtrType) ToSinkKafkaFormatAvroSchemaRegistryConnectionPtrOutputWithContext(ctx context.Context) SinkKafkaFormatAvroSchemaRegistryConnectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SinkKafkaFormatAvroSchemaRegistryConnectionPtrOutput)
}

type SinkKafkaFormatAvroSchemaRegistryConnectionOutput struct{ *pulumi.OutputState }

func (SinkKafkaFormatAvroSchemaRegistryConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SinkKafkaFormatAvroSchemaRegistryConnection)(nil)).Elem()
}

func (o SinkKafkaFormatAvroSchemaRegistryConnectionOutput) ToSinkKafkaFormatAvroSchemaRegistryConnectionOutput() SinkKafkaFormatAvroSchemaRegistryConnectionOutput {
	return o
}

func (o SinkKafkaFormatAvroSchemaRegistryConnectionOutput) ToSinkKafkaFormatAvroSchemaRegistryConnectionOutputWithContext(ctx context.Context) SinkKafkaFormatAvroSchemaRegistryConnectionOutput {
	return o
}

func (o SinkKafkaFormatAvroSchemaRegistryConnectionOutput) ToSinkKafkaFormatAvroSchemaRegistryConnectionPtrOutput() SinkKafkaFormatAvroSchemaRegistryConnectionPtrOutput {
	return o.ToSinkKafkaFormatAvroSchemaRegistryConnectionPtrOutputWithContext(context.Background())
}

func (o SinkKafkaFormatAvroSchemaRegistryConnectionOutput) ToSinkKafkaFormatAvroSchemaRegistryConnectionPtrOutputWithContext(ctx context.Context) SinkKafkaFormatAvroSchemaRegistryConnectionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SinkKafkaFormatAvroSchemaRegistryConnection) *SinkKafkaFormatAvroSchemaRegistryConnection {
		return &v
	}).(SinkKafkaFormatAvroSchemaRegistryConnectionPtrOutput)
}

// The identifier for the sink database.
func (o SinkKafkaFormatAvroSchemaRegistryConnectionOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SinkKafkaFormatAvroSchemaRegistryConnection) *string { return v.DatabaseName }).(pulumi.StringPtrOutput)
}

// The identifier for the sink.
func (o SinkKafkaFormatAvroSchemaRegistryConnectionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SinkKafkaFormatAvroSchemaRegistryConnection) string { return v.Name }).(pulumi.StringOutput)
}

// The identifier for the sink schema.
func (o SinkKafkaFormatAvroSchemaRegistryConnectionOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SinkKafkaFormatAvroSchemaRegistryConnection) *string { return v.SchemaName }).(pulumi.StringPtrOutput)
}

type SinkKafkaFormatAvroSchemaRegistryConnectionPtrOutput struct{ *pulumi.OutputState }

func (SinkKafkaFormatAvroSchemaRegistryConnectionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SinkKafkaFormatAvroSchemaRegistryConnection)(nil)).Elem()
}

func (o SinkKafkaFormatAvroSchemaRegistryConnectionPtrOutput) ToSinkKafkaFormatAvroSchemaRegistryConnectionPtrOutput() SinkKafkaFormatAvroSchemaRegistryConnectionPtrOutput {
	return o
}

func (o SinkKafkaFormatAvroSchemaRegistryConnectionPtrOutput) ToSinkKafkaFormatAvroSchemaRegistryConnectionPtrOutputWithContext(ctx context.Context) SinkKafkaFormatAvroSchemaRegistryConnectionPtrOutput {
	return o
}

func (o SinkKafkaFormatAvroSchemaRegistryConnectionPtrOutput) Elem() SinkKafkaFormatAvroSchemaRegistryConnectionOutput {
	return o.ApplyT(func(v *SinkKafkaFormatAvroSchemaRegistryConnection) SinkKafkaFormatAvroSchemaRegistryConnection {
		if v != nil {
			return *v
		}
		var ret SinkKafkaFormatAvroSchemaRegistryConnection
		return ret
	}).(SinkKafkaFormatAvroSchemaRegistryConnectionOutput)
}

// The identifier for the sink database.
func (o SinkKafkaFormatAvroSchemaRegistryConnectionPtrOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SinkKafkaFormatAvroSchemaRegistryConnection) *string {
		if v == nil {
			return nil
		}
		return v.DatabaseName
	}).(pulumi.StringPtrOutput)
}

// The identifier for the sink.
func (o SinkKafkaFormatAvroSchemaRegistryConnectionPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SinkKafkaFormatAvroSchemaRegistryConnection) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The identifier for the sink schema.
func (o SinkKafkaFormatAvroSchemaRegistryConnectionPtrOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SinkKafkaFormatAvroSchemaRegistryConnection) *string {
		if v == nil {
			return nil
		}
		return v.SchemaName
	}).(pulumi.StringPtrOutput)
}

type SinkKafkaFrom struct {
	// The from database name.
	DatabaseName *string `pulumi:"databaseName"`
	// The from name.
	Name string `pulumi:"name"`
	// The from schema name.
	SchemaName *string `pulumi:"schemaName"`
}

// SinkKafkaFromInput is an input type that accepts SinkKafkaFromArgs and SinkKafkaFromOutput values.
// You can construct a concrete instance of `SinkKafkaFromInput` via:
//
//	SinkKafkaFromArgs{...}
type SinkKafkaFromInput interface {
	pulumi.Input

	ToSinkKafkaFromOutput() SinkKafkaFromOutput
	ToSinkKafkaFromOutputWithContext(context.Context) SinkKafkaFromOutput
}

type SinkKafkaFromArgs struct {
	// The from database name.
	DatabaseName pulumi.StringPtrInput `pulumi:"databaseName"`
	// The from name.
	Name pulumi.StringInput `pulumi:"name"`
	// The from schema name.
	SchemaName pulumi.StringPtrInput `pulumi:"schemaName"`
}

func (SinkKafkaFromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SinkKafkaFrom)(nil)).Elem()
}

func (i SinkKafkaFromArgs) ToSinkKafkaFromOutput() SinkKafkaFromOutput {
	return i.ToSinkKafkaFromOutputWithContext(context.Background())
}

func (i SinkKafkaFromArgs) ToSinkKafkaFromOutputWithContext(ctx context.Context) SinkKafkaFromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SinkKafkaFromOutput)
}

func (i SinkKafkaFromArgs) ToSinkKafkaFromPtrOutput() SinkKafkaFromPtrOutput {
	return i.ToSinkKafkaFromPtrOutputWithContext(context.Background())
}

func (i SinkKafkaFromArgs) ToSinkKafkaFromPtrOutputWithContext(ctx context.Context) SinkKafkaFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SinkKafkaFromOutput).ToSinkKafkaFromPtrOutputWithContext(ctx)
}

// SinkKafkaFromPtrInput is an input type that accepts SinkKafkaFromArgs, SinkKafkaFromPtr and SinkKafkaFromPtrOutput values.
// You can construct a concrete instance of `SinkKafkaFromPtrInput` via:
//
//	        SinkKafkaFromArgs{...}
//
//	or:
//
//	        nil
type SinkKafkaFromPtrInput interface {
	pulumi.Input

	ToSinkKafkaFromPtrOutput() SinkKafkaFromPtrOutput
	ToSinkKafkaFromPtrOutputWithContext(context.Context) SinkKafkaFromPtrOutput
}

type sinkKafkaFromPtrType SinkKafkaFromArgs

func SinkKafkaFromPtr(v *SinkKafkaFromArgs) SinkKafkaFromPtrInput {
	return (*sinkKafkaFromPtrType)(v)
}

func (*sinkKafkaFromPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SinkKafkaFrom)(nil)).Elem()
}

func (i *sinkKafkaFromPtrType) ToSinkKafkaFromPtrOutput() SinkKafkaFromPtrOutput {
	return i.ToSinkKafkaFromPtrOutputWithContext(context.Background())
}

func (i *sinkKafkaFromPtrType) ToSinkKafkaFromPtrOutputWithContext(ctx context.Context) SinkKafkaFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SinkKafkaFromPtrOutput)
}

type SinkKafkaFromOutput struct{ *pulumi.OutputState }

func (SinkKafkaFromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SinkKafkaFrom)(nil)).Elem()
}

func (o SinkKafkaFromOutput) ToSinkKafkaFromOutput() SinkKafkaFromOutput {
	return o
}

func (o SinkKafkaFromOutput) ToSinkKafkaFromOutputWithContext(ctx context.Context) SinkKafkaFromOutput {
	return o
}

func (o SinkKafkaFromOutput) ToSinkKafkaFromPtrOutput() SinkKafkaFromPtrOutput {
	return o.ToSinkKafkaFromPtrOutputWithContext(context.Background())
}

func (o SinkKafkaFromOutput) ToSinkKafkaFromPtrOutputWithContext(ctx context.Context) SinkKafkaFromPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SinkKafkaFrom) *SinkKafkaFrom {
		return &v
	}).(SinkKafkaFromPtrOutput)
}

// The from database name.
func (o SinkKafkaFromOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SinkKafkaFrom) *string { return v.DatabaseName }).(pulumi.StringPtrOutput)
}

// The from name.
func (o SinkKafkaFromOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SinkKafkaFrom) string { return v.Name }).(pulumi.StringOutput)
}

// The from schema name.
func (o SinkKafkaFromOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SinkKafkaFrom) *string { return v.SchemaName }).(pulumi.StringPtrOutput)
}

type SinkKafkaFromPtrOutput struct{ *pulumi.OutputState }

func (SinkKafkaFromPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SinkKafkaFrom)(nil)).Elem()
}

func (o SinkKafkaFromPtrOutput) ToSinkKafkaFromPtrOutput() SinkKafkaFromPtrOutput {
	return o
}

func (o SinkKafkaFromPtrOutput) ToSinkKafkaFromPtrOutputWithContext(ctx context.Context) SinkKafkaFromPtrOutput {
	return o
}

func (o SinkKafkaFromPtrOutput) Elem() SinkKafkaFromOutput {
	return o.ApplyT(func(v *SinkKafkaFrom) SinkKafkaFrom {
		if v != nil {
			return *v
		}
		var ret SinkKafkaFrom
		return ret
	}).(SinkKafkaFromOutput)
}

// The from database name.
func (o SinkKafkaFromPtrOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SinkKafkaFrom) *string {
		if v == nil {
			return nil
		}
		return v.DatabaseName
	}).(pulumi.StringPtrOutput)
}

// The from name.
func (o SinkKafkaFromPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SinkKafkaFrom) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The from schema name.
func (o SinkKafkaFromPtrOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SinkKafkaFrom) *string {
		if v == nil {
			return nil
		}
		return v.SchemaName
	}).(pulumi.StringPtrOutput)
}

type SinkKafkaKafkaConnection struct {
	// The kafkaConnection database name.
	DatabaseName *string `pulumi:"databaseName"`
	// The kafkaConnection name.
	Name string `pulumi:"name"`
	// The kafkaConnection schema name.
	SchemaName *string `pulumi:"schemaName"`
}

// SinkKafkaKafkaConnectionInput is an input type that accepts SinkKafkaKafkaConnectionArgs and SinkKafkaKafkaConnectionOutput values.
// You can construct a concrete instance of `SinkKafkaKafkaConnectionInput` via:
//
//	SinkKafkaKafkaConnectionArgs{...}
type SinkKafkaKafkaConnectionInput interface {
	pulumi.Input

	ToSinkKafkaKafkaConnectionOutput() SinkKafkaKafkaConnectionOutput
	ToSinkKafkaKafkaConnectionOutputWithContext(context.Context) SinkKafkaKafkaConnectionOutput
}

type SinkKafkaKafkaConnectionArgs struct {
	// The kafkaConnection database name.
	DatabaseName pulumi.StringPtrInput `pulumi:"databaseName"`
	// The kafkaConnection name.
	Name pulumi.StringInput `pulumi:"name"`
	// The kafkaConnection schema name.
	SchemaName pulumi.StringPtrInput `pulumi:"schemaName"`
}

func (SinkKafkaKafkaConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SinkKafkaKafkaConnection)(nil)).Elem()
}

func (i SinkKafkaKafkaConnectionArgs) ToSinkKafkaKafkaConnectionOutput() SinkKafkaKafkaConnectionOutput {
	return i.ToSinkKafkaKafkaConnectionOutputWithContext(context.Background())
}

func (i SinkKafkaKafkaConnectionArgs) ToSinkKafkaKafkaConnectionOutputWithContext(ctx context.Context) SinkKafkaKafkaConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SinkKafkaKafkaConnectionOutput)
}

func (i SinkKafkaKafkaConnectionArgs) ToSinkKafkaKafkaConnectionPtrOutput() SinkKafkaKafkaConnectionPtrOutput {
	return i.ToSinkKafkaKafkaConnectionPtrOutputWithContext(context.Background())
}

func (i SinkKafkaKafkaConnectionArgs) ToSinkKafkaKafkaConnectionPtrOutputWithContext(ctx context.Context) SinkKafkaKafkaConnectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SinkKafkaKafkaConnectionOutput).ToSinkKafkaKafkaConnectionPtrOutputWithContext(ctx)
}

// SinkKafkaKafkaConnectionPtrInput is an input type that accepts SinkKafkaKafkaConnectionArgs, SinkKafkaKafkaConnectionPtr and SinkKafkaKafkaConnectionPtrOutput values.
// You can construct a concrete instance of `SinkKafkaKafkaConnectionPtrInput` via:
//
//	        SinkKafkaKafkaConnectionArgs{...}
//
//	or:
//
//	        nil
type SinkKafkaKafkaConnectionPtrInput interface {
	pulumi.Input

	ToSinkKafkaKafkaConnectionPtrOutput() SinkKafkaKafkaConnectionPtrOutput
	ToSinkKafkaKafkaConnectionPtrOutputWithContext(context.Context) SinkKafkaKafkaConnectionPtrOutput
}

type sinkKafkaKafkaConnectionPtrType SinkKafkaKafkaConnectionArgs

func SinkKafkaKafkaConnectionPtr(v *SinkKafkaKafkaConnectionArgs) SinkKafkaKafkaConnectionPtrInput {
	return (*sinkKafkaKafkaConnectionPtrType)(v)
}

func (*sinkKafkaKafkaConnectionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SinkKafkaKafkaConnection)(nil)).Elem()
}

func (i *sinkKafkaKafkaConnectionPtrType) ToSinkKafkaKafkaConnectionPtrOutput() SinkKafkaKafkaConnectionPtrOutput {
	return i.ToSinkKafkaKafkaConnectionPtrOutputWithContext(context.Background())
}

func (i *sinkKafkaKafkaConnectionPtrType) ToSinkKafkaKafkaConnectionPtrOutputWithContext(ctx context.Context) SinkKafkaKafkaConnectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SinkKafkaKafkaConnectionPtrOutput)
}

type SinkKafkaKafkaConnectionOutput struct{ *pulumi.OutputState }

func (SinkKafkaKafkaConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SinkKafkaKafkaConnection)(nil)).Elem()
}

func (o SinkKafkaKafkaConnectionOutput) ToSinkKafkaKafkaConnectionOutput() SinkKafkaKafkaConnectionOutput {
	return o
}

func (o SinkKafkaKafkaConnectionOutput) ToSinkKafkaKafkaConnectionOutputWithContext(ctx context.Context) SinkKafkaKafkaConnectionOutput {
	return o
}

func (o SinkKafkaKafkaConnectionOutput) ToSinkKafkaKafkaConnectionPtrOutput() SinkKafkaKafkaConnectionPtrOutput {
	return o.ToSinkKafkaKafkaConnectionPtrOutputWithContext(context.Background())
}

func (o SinkKafkaKafkaConnectionOutput) ToSinkKafkaKafkaConnectionPtrOutputWithContext(ctx context.Context) SinkKafkaKafkaConnectionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SinkKafkaKafkaConnection) *SinkKafkaKafkaConnection {
		return &v
	}).(SinkKafkaKafkaConnectionPtrOutput)
}

// The kafkaConnection database name.
func (o SinkKafkaKafkaConnectionOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SinkKafkaKafkaConnection) *string { return v.DatabaseName }).(pulumi.StringPtrOutput)
}

// The kafkaConnection name.
func (o SinkKafkaKafkaConnectionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SinkKafkaKafkaConnection) string { return v.Name }).(pulumi.StringOutput)
}

// The kafkaConnection schema name.
func (o SinkKafkaKafkaConnectionOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SinkKafkaKafkaConnection) *string { return v.SchemaName }).(pulumi.StringPtrOutput)
}

type SinkKafkaKafkaConnectionPtrOutput struct{ *pulumi.OutputState }

func (SinkKafkaKafkaConnectionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SinkKafkaKafkaConnection)(nil)).Elem()
}

func (o SinkKafkaKafkaConnectionPtrOutput) ToSinkKafkaKafkaConnectionPtrOutput() SinkKafkaKafkaConnectionPtrOutput {
	return o
}

func (o SinkKafkaKafkaConnectionPtrOutput) ToSinkKafkaKafkaConnectionPtrOutputWithContext(ctx context.Context) SinkKafkaKafkaConnectionPtrOutput {
	return o
}

func (o SinkKafkaKafkaConnectionPtrOutput) Elem() SinkKafkaKafkaConnectionOutput {
	return o.ApplyT(func(v *SinkKafkaKafkaConnection) SinkKafkaKafkaConnection {
		if v != nil {
			return *v
		}
		var ret SinkKafkaKafkaConnection
		return ret
	}).(SinkKafkaKafkaConnectionOutput)
}

// The kafkaConnection database name.
func (o SinkKafkaKafkaConnectionPtrOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SinkKafkaKafkaConnection) *string {
		if v == nil {
			return nil
		}
		return v.DatabaseName
	}).(pulumi.StringPtrOutput)
}

// The kafkaConnection name.
func (o SinkKafkaKafkaConnectionPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SinkKafkaKafkaConnection) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The kafkaConnection schema name.
func (o SinkKafkaKafkaConnectionPtrOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SinkKafkaKafkaConnection) *string {
		if v == nil {
			return nil
		}
		return v.SchemaName
	}).(pulumi.StringPtrOutput)
}

type SourceKafkaEnvelope struct {
	// Use the Debezium envelope, which uses a diff envelope to handle CRUD operations.
	Debezium *bool `pulumi:"debezium"`
	// Use an append-only envelope. This means that records will only be appended and cannot be updated or deleted.
	None *bool `pulumi:"none"`
	// Use the upsert envelope, which uses message keys to handle CRUD operations.
	Upsert *bool `pulumi:"upsert"`
}

// SourceKafkaEnvelopeInput is an input type that accepts SourceKafkaEnvelopeArgs and SourceKafkaEnvelopeOutput values.
// You can construct a concrete instance of `SourceKafkaEnvelopeInput` via:
//
//	SourceKafkaEnvelopeArgs{...}
type SourceKafkaEnvelopeInput interface {
	pulumi.Input

	ToSourceKafkaEnvelopeOutput() SourceKafkaEnvelopeOutput
	ToSourceKafkaEnvelopeOutputWithContext(context.Context) SourceKafkaEnvelopeOutput
}

type SourceKafkaEnvelopeArgs struct {
	// Use the Debezium envelope, which uses a diff envelope to handle CRUD operations.
	Debezium pulumi.BoolPtrInput `pulumi:"debezium"`
	// Use an append-only envelope. This means that records will only be appended and cannot be updated or deleted.
	None pulumi.BoolPtrInput `pulumi:"none"`
	// Use the upsert envelope, which uses message keys to handle CRUD operations.
	Upsert pulumi.BoolPtrInput `pulumi:"upsert"`
}

func (SourceKafkaEnvelopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceKafkaEnvelope)(nil)).Elem()
}

func (i SourceKafkaEnvelopeArgs) ToSourceKafkaEnvelopeOutput() SourceKafkaEnvelopeOutput {
	return i.ToSourceKafkaEnvelopeOutputWithContext(context.Background())
}

func (i SourceKafkaEnvelopeArgs) ToSourceKafkaEnvelopeOutputWithContext(ctx context.Context) SourceKafkaEnvelopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceKafkaEnvelopeOutput)
}

func (i SourceKafkaEnvelopeArgs) ToSourceKafkaEnvelopePtrOutput() SourceKafkaEnvelopePtrOutput {
	return i.ToSourceKafkaEnvelopePtrOutputWithContext(context.Background())
}

func (i SourceKafkaEnvelopeArgs) ToSourceKafkaEnvelopePtrOutputWithContext(ctx context.Context) SourceKafkaEnvelopePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceKafkaEnvelopeOutput).ToSourceKafkaEnvelopePtrOutputWithContext(ctx)
}

// SourceKafkaEnvelopePtrInput is an input type that accepts SourceKafkaEnvelopeArgs, SourceKafkaEnvelopePtr and SourceKafkaEnvelopePtrOutput values.
// You can construct a concrete instance of `SourceKafkaEnvelopePtrInput` via:
//
//	        SourceKafkaEnvelopeArgs{...}
//
//	or:
//
//	        nil
type SourceKafkaEnvelopePtrInput interface {
	pulumi.Input

	ToSourceKafkaEnvelopePtrOutput() SourceKafkaEnvelopePtrOutput
	ToSourceKafkaEnvelopePtrOutputWithContext(context.Context) SourceKafkaEnvelopePtrOutput
}

type sourceKafkaEnvelopePtrType SourceKafkaEnvelopeArgs

func SourceKafkaEnvelopePtr(v *SourceKafkaEnvelopeArgs) SourceKafkaEnvelopePtrInput {
	return (*sourceKafkaEnvelopePtrType)(v)
}

func (*sourceKafkaEnvelopePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceKafkaEnvelope)(nil)).Elem()
}

func (i *sourceKafkaEnvelopePtrType) ToSourceKafkaEnvelopePtrOutput() SourceKafkaEnvelopePtrOutput {
	return i.ToSourceKafkaEnvelopePtrOutputWithContext(context.Background())
}

func (i *sourceKafkaEnvelopePtrType) ToSourceKafkaEnvelopePtrOutputWithContext(ctx context.Context) SourceKafkaEnvelopePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceKafkaEnvelopePtrOutput)
}

type SourceKafkaEnvelopeOutput struct{ *pulumi.OutputState }

func (SourceKafkaEnvelopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceKafkaEnvelope)(nil)).Elem()
}

func (o SourceKafkaEnvelopeOutput) ToSourceKafkaEnvelopeOutput() SourceKafkaEnvelopeOutput {
	return o
}

func (o SourceKafkaEnvelopeOutput) ToSourceKafkaEnvelopeOutputWithContext(ctx context.Context) SourceKafkaEnvelopeOutput {
	return o
}

func (o SourceKafkaEnvelopeOutput) ToSourceKafkaEnvelopePtrOutput() SourceKafkaEnvelopePtrOutput {
	return o.ToSourceKafkaEnvelopePtrOutputWithContext(context.Background())
}

func (o SourceKafkaEnvelopeOutput) ToSourceKafkaEnvelopePtrOutputWithContext(ctx context.Context) SourceKafkaEnvelopePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SourceKafkaEnvelope) *SourceKafkaEnvelope {
		return &v
	}).(SourceKafkaEnvelopePtrOutput)
}

// Use the Debezium envelope, which uses a diff envelope to handle CRUD operations.
func (o SourceKafkaEnvelopeOutput) Debezium() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SourceKafkaEnvelope) *bool { return v.Debezium }).(pulumi.BoolPtrOutput)
}

// Use an append-only envelope. This means that records will only be appended and cannot be updated or deleted.
func (o SourceKafkaEnvelopeOutput) None() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SourceKafkaEnvelope) *bool { return v.None }).(pulumi.BoolPtrOutput)
}

// Use the upsert envelope, which uses message keys to handle CRUD operations.
func (o SourceKafkaEnvelopeOutput) Upsert() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SourceKafkaEnvelope) *bool { return v.Upsert }).(pulumi.BoolPtrOutput)
}

type SourceKafkaEnvelopePtrOutput struct{ *pulumi.OutputState }

func (SourceKafkaEnvelopePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceKafkaEnvelope)(nil)).Elem()
}

func (o SourceKafkaEnvelopePtrOutput) ToSourceKafkaEnvelopePtrOutput() SourceKafkaEnvelopePtrOutput {
	return o
}

func (o SourceKafkaEnvelopePtrOutput) ToSourceKafkaEnvelopePtrOutputWithContext(ctx context.Context) SourceKafkaEnvelopePtrOutput {
	return o
}

func (o SourceKafkaEnvelopePtrOutput) Elem() SourceKafkaEnvelopeOutput {
	return o.ApplyT(func(v *SourceKafkaEnvelope) SourceKafkaEnvelope {
		if v != nil {
			return *v
		}
		var ret SourceKafkaEnvelope
		return ret
	}).(SourceKafkaEnvelopeOutput)
}

// Use the Debezium envelope, which uses a diff envelope to handle CRUD operations.
func (o SourceKafkaEnvelopePtrOutput) Debezium() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SourceKafkaEnvelope) *bool {
		if v == nil {
			return nil
		}
		return v.Debezium
	}).(pulumi.BoolPtrOutput)
}

// Use an append-only envelope. This means that records will only be appended and cannot be updated or deleted.
func (o SourceKafkaEnvelopePtrOutput) None() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SourceKafkaEnvelope) *bool {
		if v == nil {
			return nil
		}
		return v.None
	}).(pulumi.BoolPtrOutput)
}

// Use the upsert envelope, which uses message keys to handle CRUD operations.
func (o SourceKafkaEnvelopePtrOutput) Upsert() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SourceKafkaEnvelope) *bool {
		if v == nil {
			return nil
		}
		return v.Upsert
	}).(pulumi.BoolPtrOutput)
}

type SourceKafkaFormat struct {
	// Avro format.
	Avro *SourceKafkaFormatAvro `pulumi:"avro"`
	// CSV format.
	Csvs []SourceKafkaFormatCsv `pulumi:"csvs"`
	// JSON format.
	Json *bool `pulumi:"json"`
	// Protobuf format.
	Protobuf *SourceKafkaFormatProtobuf `pulumi:"protobuf"`
	// Text format.
	Text *bool `pulumi:"text"`
}

// SourceKafkaFormatInput is an input type that accepts SourceKafkaFormatArgs and SourceKafkaFormatOutput values.
// You can construct a concrete instance of `SourceKafkaFormatInput` via:
//
//	SourceKafkaFormatArgs{...}
type SourceKafkaFormatInput interface {
	pulumi.Input

	ToSourceKafkaFormatOutput() SourceKafkaFormatOutput
	ToSourceKafkaFormatOutputWithContext(context.Context) SourceKafkaFormatOutput
}

type SourceKafkaFormatArgs struct {
	// Avro format.
	Avro SourceKafkaFormatAvroPtrInput `pulumi:"avro"`
	// CSV format.
	Csvs SourceKafkaFormatCsvArrayInput `pulumi:"csvs"`
	// JSON format.
	Json pulumi.BoolPtrInput `pulumi:"json"`
	// Protobuf format.
	Protobuf SourceKafkaFormatProtobufPtrInput `pulumi:"protobuf"`
	// Text format.
	Text pulumi.BoolPtrInput `pulumi:"text"`
}

func (SourceKafkaFormatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceKafkaFormat)(nil)).Elem()
}

func (i SourceKafkaFormatArgs) ToSourceKafkaFormatOutput() SourceKafkaFormatOutput {
	return i.ToSourceKafkaFormatOutputWithContext(context.Background())
}

func (i SourceKafkaFormatArgs) ToSourceKafkaFormatOutputWithContext(ctx context.Context) SourceKafkaFormatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceKafkaFormatOutput)
}

func (i SourceKafkaFormatArgs) ToSourceKafkaFormatPtrOutput() SourceKafkaFormatPtrOutput {
	return i.ToSourceKafkaFormatPtrOutputWithContext(context.Background())
}

func (i SourceKafkaFormatArgs) ToSourceKafkaFormatPtrOutputWithContext(ctx context.Context) SourceKafkaFormatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceKafkaFormatOutput).ToSourceKafkaFormatPtrOutputWithContext(ctx)
}

// SourceKafkaFormatPtrInput is an input type that accepts SourceKafkaFormatArgs, SourceKafkaFormatPtr and SourceKafkaFormatPtrOutput values.
// You can construct a concrete instance of `SourceKafkaFormatPtrInput` via:
//
//	        SourceKafkaFormatArgs{...}
//
//	or:
//
//	        nil
type SourceKafkaFormatPtrInput interface {
	pulumi.Input

	ToSourceKafkaFormatPtrOutput() SourceKafkaFormatPtrOutput
	ToSourceKafkaFormatPtrOutputWithContext(context.Context) SourceKafkaFormatPtrOutput
}

type sourceKafkaFormatPtrType SourceKafkaFormatArgs

func SourceKafkaFormatPtr(v *SourceKafkaFormatArgs) SourceKafkaFormatPtrInput {
	return (*sourceKafkaFormatPtrType)(v)
}

func (*sourceKafkaFormatPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceKafkaFormat)(nil)).Elem()
}

func (i *sourceKafkaFormatPtrType) ToSourceKafkaFormatPtrOutput() SourceKafkaFormatPtrOutput {
	return i.ToSourceKafkaFormatPtrOutputWithContext(context.Background())
}

func (i *sourceKafkaFormatPtrType) ToSourceKafkaFormatPtrOutputWithContext(ctx context.Context) SourceKafkaFormatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceKafkaFormatPtrOutput)
}

type SourceKafkaFormatOutput struct{ *pulumi.OutputState }

func (SourceKafkaFormatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceKafkaFormat)(nil)).Elem()
}

func (o SourceKafkaFormatOutput) ToSourceKafkaFormatOutput() SourceKafkaFormatOutput {
	return o
}

func (o SourceKafkaFormatOutput) ToSourceKafkaFormatOutputWithContext(ctx context.Context) SourceKafkaFormatOutput {
	return o
}

func (o SourceKafkaFormatOutput) ToSourceKafkaFormatPtrOutput() SourceKafkaFormatPtrOutput {
	return o.ToSourceKafkaFormatPtrOutputWithContext(context.Background())
}

func (o SourceKafkaFormatOutput) ToSourceKafkaFormatPtrOutputWithContext(ctx context.Context) SourceKafkaFormatPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SourceKafkaFormat) *SourceKafkaFormat {
		return &v
	}).(SourceKafkaFormatPtrOutput)
}

// Avro format.
func (o SourceKafkaFormatOutput) Avro() SourceKafkaFormatAvroPtrOutput {
	return o.ApplyT(func(v SourceKafkaFormat) *SourceKafkaFormatAvro { return v.Avro }).(SourceKafkaFormatAvroPtrOutput)
}

// CSV format.
func (o SourceKafkaFormatOutput) Csvs() SourceKafkaFormatCsvArrayOutput {
	return o.ApplyT(func(v SourceKafkaFormat) []SourceKafkaFormatCsv { return v.Csvs }).(SourceKafkaFormatCsvArrayOutput)
}

// JSON format.
func (o SourceKafkaFormatOutput) Json() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SourceKafkaFormat) *bool { return v.Json }).(pulumi.BoolPtrOutput)
}

// Protobuf format.
func (o SourceKafkaFormatOutput) Protobuf() SourceKafkaFormatProtobufPtrOutput {
	return o.ApplyT(func(v SourceKafkaFormat) *SourceKafkaFormatProtobuf { return v.Protobuf }).(SourceKafkaFormatProtobufPtrOutput)
}

// Text format.
func (o SourceKafkaFormatOutput) Text() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SourceKafkaFormat) *bool { return v.Text }).(pulumi.BoolPtrOutput)
}

type SourceKafkaFormatPtrOutput struct{ *pulumi.OutputState }

func (SourceKafkaFormatPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceKafkaFormat)(nil)).Elem()
}

func (o SourceKafkaFormatPtrOutput) ToSourceKafkaFormatPtrOutput() SourceKafkaFormatPtrOutput {
	return o
}

func (o SourceKafkaFormatPtrOutput) ToSourceKafkaFormatPtrOutputWithContext(ctx context.Context) SourceKafkaFormatPtrOutput {
	return o
}

func (o SourceKafkaFormatPtrOutput) Elem() SourceKafkaFormatOutput {
	return o.ApplyT(func(v *SourceKafkaFormat) SourceKafkaFormat {
		if v != nil {
			return *v
		}
		var ret SourceKafkaFormat
		return ret
	}).(SourceKafkaFormatOutput)
}

// Avro format.
func (o SourceKafkaFormatPtrOutput) Avro() SourceKafkaFormatAvroPtrOutput {
	return o.ApplyT(func(v *SourceKafkaFormat) *SourceKafkaFormatAvro {
		if v == nil {
			return nil
		}
		return v.Avro
	}).(SourceKafkaFormatAvroPtrOutput)
}

// CSV format.
func (o SourceKafkaFormatPtrOutput) Csvs() SourceKafkaFormatCsvArrayOutput {
	return o.ApplyT(func(v *SourceKafkaFormat) []SourceKafkaFormatCsv {
		if v == nil {
			return nil
		}
		return v.Csvs
	}).(SourceKafkaFormatCsvArrayOutput)
}

// JSON format.
func (o SourceKafkaFormatPtrOutput) Json() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SourceKafkaFormat) *bool {
		if v == nil {
			return nil
		}
		return v.Json
	}).(pulumi.BoolPtrOutput)
}

// Protobuf format.
func (o SourceKafkaFormatPtrOutput) Protobuf() SourceKafkaFormatProtobufPtrOutput {
	return o.ApplyT(func(v *SourceKafkaFormat) *SourceKafkaFormatProtobuf {
		if v == nil {
			return nil
		}
		return v.Protobuf
	}).(SourceKafkaFormatProtobufPtrOutput)
}

// Text format.
func (o SourceKafkaFormatPtrOutput) Text() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SourceKafkaFormat) *bool {
		if v == nil {
			return nil
		}
		return v.Text
	}).(pulumi.BoolPtrOutput)
}

type SourceKafkaFormatAvro struct {
	KeyStrategy              *string                                       `pulumi:"keyStrategy"`
	SchemaRegistryConnection SourceKafkaFormatAvroSchemaRegistryConnection `pulumi:"schemaRegistryConnection"`
	ValueStrategy            *string                                       `pulumi:"valueStrategy"`
}

// SourceKafkaFormatAvroInput is an input type that accepts SourceKafkaFormatAvroArgs and SourceKafkaFormatAvroOutput values.
// You can construct a concrete instance of `SourceKafkaFormatAvroInput` via:
//
//	SourceKafkaFormatAvroArgs{...}
type SourceKafkaFormatAvroInput interface {
	pulumi.Input

	ToSourceKafkaFormatAvroOutput() SourceKafkaFormatAvroOutput
	ToSourceKafkaFormatAvroOutputWithContext(context.Context) SourceKafkaFormatAvroOutput
}

type SourceKafkaFormatAvroArgs struct {
	KeyStrategy              pulumi.StringPtrInput                              `pulumi:"keyStrategy"`
	SchemaRegistryConnection SourceKafkaFormatAvroSchemaRegistryConnectionInput `pulumi:"schemaRegistryConnection"`
	ValueStrategy            pulumi.StringPtrInput                              `pulumi:"valueStrategy"`
}

func (SourceKafkaFormatAvroArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceKafkaFormatAvro)(nil)).Elem()
}

func (i SourceKafkaFormatAvroArgs) ToSourceKafkaFormatAvroOutput() SourceKafkaFormatAvroOutput {
	return i.ToSourceKafkaFormatAvroOutputWithContext(context.Background())
}

func (i SourceKafkaFormatAvroArgs) ToSourceKafkaFormatAvroOutputWithContext(ctx context.Context) SourceKafkaFormatAvroOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceKafkaFormatAvroOutput)
}

func (i SourceKafkaFormatAvroArgs) ToSourceKafkaFormatAvroPtrOutput() SourceKafkaFormatAvroPtrOutput {
	return i.ToSourceKafkaFormatAvroPtrOutputWithContext(context.Background())
}

func (i SourceKafkaFormatAvroArgs) ToSourceKafkaFormatAvroPtrOutputWithContext(ctx context.Context) SourceKafkaFormatAvroPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceKafkaFormatAvroOutput).ToSourceKafkaFormatAvroPtrOutputWithContext(ctx)
}

// SourceKafkaFormatAvroPtrInput is an input type that accepts SourceKafkaFormatAvroArgs, SourceKafkaFormatAvroPtr and SourceKafkaFormatAvroPtrOutput values.
// You can construct a concrete instance of `SourceKafkaFormatAvroPtrInput` via:
//
//	        SourceKafkaFormatAvroArgs{...}
//
//	or:
//
//	        nil
type SourceKafkaFormatAvroPtrInput interface {
	pulumi.Input

	ToSourceKafkaFormatAvroPtrOutput() SourceKafkaFormatAvroPtrOutput
	ToSourceKafkaFormatAvroPtrOutputWithContext(context.Context) SourceKafkaFormatAvroPtrOutput
}

type sourceKafkaFormatAvroPtrType SourceKafkaFormatAvroArgs

func SourceKafkaFormatAvroPtr(v *SourceKafkaFormatAvroArgs) SourceKafkaFormatAvroPtrInput {
	return (*sourceKafkaFormatAvroPtrType)(v)
}

func (*sourceKafkaFormatAvroPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceKafkaFormatAvro)(nil)).Elem()
}

func (i *sourceKafkaFormatAvroPtrType) ToSourceKafkaFormatAvroPtrOutput() SourceKafkaFormatAvroPtrOutput {
	return i.ToSourceKafkaFormatAvroPtrOutputWithContext(context.Background())
}

func (i *sourceKafkaFormatAvroPtrType) ToSourceKafkaFormatAvroPtrOutputWithContext(ctx context.Context) SourceKafkaFormatAvroPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceKafkaFormatAvroPtrOutput)
}

type SourceKafkaFormatAvroOutput struct{ *pulumi.OutputState }

func (SourceKafkaFormatAvroOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceKafkaFormatAvro)(nil)).Elem()
}

func (o SourceKafkaFormatAvroOutput) ToSourceKafkaFormatAvroOutput() SourceKafkaFormatAvroOutput {
	return o
}

func (o SourceKafkaFormatAvroOutput) ToSourceKafkaFormatAvroOutputWithContext(ctx context.Context) SourceKafkaFormatAvroOutput {
	return o
}

func (o SourceKafkaFormatAvroOutput) ToSourceKafkaFormatAvroPtrOutput() SourceKafkaFormatAvroPtrOutput {
	return o.ToSourceKafkaFormatAvroPtrOutputWithContext(context.Background())
}

func (o SourceKafkaFormatAvroOutput) ToSourceKafkaFormatAvroPtrOutputWithContext(ctx context.Context) SourceKafkaFormatAvroPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SourceKafkaFormatAvro) *SourceKafkaFormatAvro {
		return &v
	}).(SourceKafkaFormatAvroPtrOutput)
}

func (o SourceKafkaFormatAvroOutput) KeyStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceKafkaFormatAvro) *string { return v.KeyStrategy }).(pulumi.StringPtrOutput)
}

func (o SourceKafkaFormatAvroOutput) SchemaRegistryConnection() SourceKafkaFormatAvroSchemaRegistryConnectionOutput {
	return o.ApplyT(func(v SourceKafkaFormatAvro) SourceKafkaFormatAvroSchemaRegistryConnection {
		return v.SchemaRegistryConnection
	}).(SourceKafkaFormatAvroSchemaRegistryConnectionOutput)
}

func (o SourceKafkaFormatAvroOutput) ValueStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceKafkaFormatAvro) *string { return v.ValueStrategy }).(pulumi.StringPtrOutput)
}

type SourceKafkaFormatAvroPtrOutput struct{ *pulumi.OutputState }

func (SourceKafkaFormatAvroPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceKafkaFormatAvro)(nil)).Elem()
}

func (o SourceKafkaFormatAvroPtrOutput) ToSourceKafkaFormatAvroPtrOutput() SourceKafkaFormatAvroPtrOutput {
	return o
}

func (o SourceKafkaFormatAvroPtrOutput) ToSourceKafkaFormatAvroPtrOutputWithContext(ctx context.Context) SourceKafkaFormatAvroPtrOutput {
	return o
}

func (o SourceKafkaFormatAvroPtrOutput) Elem() SourceKafkaFormatAvroOutput {
	return o.ApplyT(func(v *SourceKafkaFormatAvro) SourceKafkaFormatAvro {
		if v != nil {
			return *v
		}
		var ret SourceKafkaFormatAvro
		return ret
	}).(SourceKafkaFormatAvroOutput)
}

func (o SourceKafkaFormatAvroPtrOutput) KeyStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceKafkaFormatAvro) *string {
		if v == nil {
			return nil
		}
		return v.KeyStrategy
	}).(pulumi.StringPtrOutput)
}

func (o SourceKafkaFormatAvroPtrOutput) SchemaRegistryConnection() SourceKafkaFormatAvroSchemaRegistryConnectionPtrOutput {
	return o.ApplyT(func(v *SourceKafkaFormatAvro) *SourceKafkaFormatAvroSchemaRegistryConnection {
		if v == nil {
			return nil
		}
		return &v.SchemaRegistryConnection
	}).(SourceKafkaFormatAvroSchemaRegistryConnectionPtrOutput)
}

func (o SourceKafkaFormatAvroPtrOutput) ValueStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceKafkaFormatAvro) *string {
		if v == nil {
			return nil
		}
		return v.ValueStrategy
	}).(pulumi.StringPtrOutput)
}

type SourceKafkaFormatAvroSchemaRegistryConnection struct {
	// The identifier for the source database.
	DatabaseName *string `pulumi:"databaseName"`
	// The identifier for the source.
	Name string `pulumi:"name"`
	// The identifier for the source schema.
	SchemaName *string `pulumi:"schemaName"`
}

// SourceKafkaFormatAvroSchemaRegistryConnectionInput is an input type that accepts SourceKafkaFormatAvroSchemaRegistryConnectionArgs and SourceKafkaFormatAvroSchemaRegistryConnectionOutput values.
// You can construct a concrete instance of `SourceKafkaFormatAvroSchemaRegistryConnectionInput` via:
//
//	SourceKafkaFormatAvroSchemaRegistryConnectionArgs{...}
type SourceKafkaFormatAvroSchemaRegistryConnectionInput interface {
	pulumi.Input

	ToSourceKafkaFormatAvroSchemaRegistryConnectionOutput() SourceKafkaFormatAvroSchemaRegistryConnectionOutput
	ToSourceKafkaFormatAvroSchemaRegistryConnectionOutputWithContext(context.Context) SourceKafkaFormatAvroSchemaRegistryConnectionOutput
}

type SourceKafkaFormatAvroSchemaRegistryConnectionArgs struct {
	// The identifier for the source database.
	DatabaseName pulumi.StringPtrInput `pulumi:"databaseName"`
	// The identifier for the source.
	Name pulumi.StringInput `pulumi:"name"`
	// The identifier for the source schema.
	SchemaName pulumi.StringPtrInput `pulumi:"schemaName"`
}

func (SourceKafkaFormatAvroSchemaRegistryConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceKafkaFormatAvroSchemaRegistryConnection)(nil)).Elem()
}

func (i SourceKafkaFormatAvroSchemaRegistryConnectionArgs) ToSourceKafkaFormatAvroSchemaRegistryConnectionOutput() SourceKafkaFormatAvroSchemaRegistryConnectionOutput {
	return i.ToSourceKafkaFormatAvroSchemaRegistryConnectionOutputWithContext(context.Background())
}

func (i SourceKafkaFormatAvroSchemaRegistryConnectionArgs) ToSourceKafkaFormatAvroSchemaRegistryConnectionOutputWithContext(ctx context.Context) SourceKafkaFormatAvroSchemaRegistryConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceKafkaFormatAvroSchemaRegistryConnectionOutput)
}

func (i SourceKafkaFormatAvroSchemaRegistryConnectionArgs) ToSourceKafkaFormatAvroSchemaRegistryConnectionPtrOutput() SourceKafkaFormatAvroSchemaRegistryConnectionPtrOutput {
	return i.ToSourceKafkaFormatAvroSchemaRegistryConnectionPtrOutputWithContext(context.Background())
}

func (i SourceKafkaFormatAvroSchemaRegistryConnectionArgs) ToSourceKafkaFormatAvroSchemaRegistryConnectionPtrOutputWithContext(ctx context.Context) SourceKafkaFormatAvroSchemaRegistryConnectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceKafkaFormatAvroSchemaRegistryConnectionOutput).ToSourceKafkaFormatAvroSchemaRegistryConnectionPtrOutputWithContext(ctx)
}

// SourceKafkaFormatAvroSchemaRegistryConnectionPtrInput is an input type that accepts SourceKafkaFormatAvroSchemaRegistryConnectionArgs, SourceKafkaFormatAvroSchemaRegistryConnectionPtr and SourceKafkaFormatAvroSchemaRegistryConnectionPtrOutput values.
// You can construct a concrete instance of `SourceKafkaFormatAvroSchemaRegistryConnectionPtrInput` via:
//
//	        SourceKafkaFormatAvroSchemaRegistryConnectionArgs{...}
//
//	or:
//
//	        nil
type SourceKafkaFormatAvroSchemaRegistryConnectionPtrInput interface {
	pulumi.Input

	ToSourceKafkaFormatAvroSchemaRegistryConnectionPtrOutput() SourceKafkaFormatAvroSchemaRegistryConnectionPtrOutput
	ToSourceKafkaFormatAvroSchemaRegistryConnectionPtrOutputWithContext(context.Context) SourceKafkaFormatAvroSchemaRegistryConnectionPtrOutput
}

type sourceKafkaFormatAvroSchemaRegistryConnectionPtrType SourceKafkaFormatAvroSchemaRegistryConnectionArgs

func SourceKafkaFormatAvroSchemaRegistryConnectionPtr(v *SourceKafkaFormatAvroSchemaRegistryConnectionArgs) SourceKafkaFormatAvroSchemaRegistryConnectionPtrInput {
	return (*sourceKafkaFormatAvroSchemaRegistryConnectionPtrType)(v)
}

func (*sourceKafkaFormatAvroSchemaRegistryConnectionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceKafkaFormatAvroSchemaRegistryConnection)(nil)).Elem()
}

func (i *sourceKafkaFormatAvroSchemaRegistryConnectionPtrType) ToSourceKafkaFormatAvroSchemaRegistryConnectionPtrOutput() SourceKafkaFormatAvroSchemaRegistryConnectionPtrOutput {
	return i.ToSourceKafkaFormatAvroSchemaRegistryConnectionPtrOutputWithContext(context.Background())
}

func (i *sourceKafkaFormatAvroSchemaRegistryConnectionPtrType) ToSourceKafkaFormatAvroSchemaRegistryConnectionPtrOutputWithContext(ctx context.Context) SourceKafkaFormatAvroSchemaRegistryConnectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceKafkaFormatAvroSchemaRegistryConnectionPtrOutput)
}

type SourceKafkaFormatAvroSchemaRegistryConnectionOutput struct{ *pulumi.OutputState }

func (SourceKafkaFormatAvroSchemaRegistryConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceKafkaFormatAvroSchemaRegistryConnection)(nil)).Elem()
}

func (o SourceKafkaFormatAvroSchemaRegistryConnectionOutput) ToSourceKafkaFormatAvroSchemaRegistryConnectionOutput() SourceKafkaFormatAvroSchemaRegistryConnectionOutput {
	return o
}

func (o SourceKafkaFormatAvroSchemaRegistryConnectionOutput) ToSourceKafkaFormatAvroSchemaRegistryConnectionOutputWithContext(ctx context.Context) SourceKafkaFormatAvroSchemaRegistryConnectionOutput {
	return o
}

func (o SourceKafkaFormatAvroSchemaRegistryConnectionOutput) ToSourceKafkaFormatAvroSchemaRegistryConnectionPtrOutput() SourceKafkaFormatAvroSchemaRegistryConnectionPtrOutput {
	return o.ToSourceKafkaFormatAvroSchemaRegistryConnectionPtrOutputWithContext(context.Background())
}

func (o SourceKafkaFormatAvroSchemaRegistryConnectionOutput) ToSourceKafkaFormatAvroSchemaRegistryConnectionPtrOutputWithContext(ctx context.Context) SourceKafkaFormatAvroSchemaRegistryConnectionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SourceKafkaFormatAvroSchemaRegistryConnection) *SourceKafkaFormatAvroSchemaRegistryConnection {
		return &v
	}).(SourceKafkaFormatAvroSchemaRegistryConnectionPtrOutput)
}

// The identifier for the source database.
func (o SourceKafkaFormatAvroSchemaRegistryConnectionOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceKafkaFormatAvroSchemaRegistryConnection) *string { return v.DatabaseName }).(pulumi.StringPtrOutput)
}

// The identifier for the source.
func (o SourceKafkaFormatAvroSchemaRegistryConnectionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SourceKafkaFormatAvroSchemaRegistryConnection) string { return v.Name }).(pulumi.StringOutput)
}

// The identifier for the source schema.
func (o SourceKafkaFormatAvroSchemaRegistryConnectionOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceKafkaFormatAvroSchemaRegistryConnection) *string { return v.SchemaName }).(pulumi.StringPtrOutput)
}

type SourceKafkaFormatAvroSchemaRegistryConnectionPtrOutput struct{ *pulumi.OutputState }

func (SourceKafkaFormatAvroSchemaRegistryConnectionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceKafkaFormatAvroSchemaRegistryConnection)(nil)).Elem()
}

func (o SourceKafkaFormatAvroSchemaRegistryConnectionPtrOutput) ToSourceKafkaFormatAvroSchemaRegistryConnectionPtrOutput() SourceKafkaFormatAvroSchemaRegistryConnectionPtrOutput {
	return o
}

func (o SourceKafkaFormatAvroSchemaRegistryConnectionPtrOutput) ToSourceKafkaFormatAvroSchemaRegistryConnectionPtrOutputWithContext(ctx context.Context) SourceKafkaFormatAvroSchemaRegistryConnectionPtrOutput {
	return o
}

func (o SourceKafkaFormatAvroSchemaRegistryConnectionPtrOutput) Elem() SourceKafkaFormatAvroSchemaRegistryConnectionOutput {
	return o.ApplyT(func(v *SourceKafkaFormatAvroSchemaRegistryConnection) SourceKafkaFormatAvroSchemaRegistryConnection {
		if v != nil {
			return *v
		}
		var ret SourceKafkaFormatAvroSchemaRegistryConnection
		return ret
	}).(SourceKafkaFormatAvroSchemaRegistryConnectionOutput)
}

// The identifier for the source database.
func (o SourceKafkaFormatAvroSchemaRegistryConnectionPtrOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceKafkaFormatAvroSchemaRegistryConnection) *string {
		if v == nil {
			return nil
		}
		return v.DatabaseName
	}).(pulumi.StringPtrOutput)
}

// The identifier for the source.
func (o SourceKafkaFormatAvroSchemaRegistryConnectionPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceKafkaFormatAvroSchemaRegistryConnection) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The identifier for the source schema.
func (o SourceKafkaFormatAvroSchemaRegistryConnectionPtrOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceKafkaFormatAvroSchemaRegistryConnection) *string {
		if v == nil {
			return nil
		}
		return v.SchemaName
	}).(pulumi.StringPtrOutput)
}

type SourceKafkaFormatCsv struct {
	Column      *int     `pulumi:"column"`
	DelimitedBy *string  `pulumi:"delimitedBy"`
	Headers     []string `pulumi:"headers"`
}

// SourceKafkaFormatCsvInput is an input type that accepts SourceKafkaFormatCsvArgs and SourceKafkaFormatCsvOutput values.
// You can construct a concrete instance of `SourceKafkaFormatCsvInput` via:
//
//	SourceKafkaFormatCsvArgs{...}
type SourceKafkaFormatCsvInput interface {
	pulumi.Input

	ToSourceKafkaFormatCsvOutput() SourceKafkaFormatCsvOutput
	ToSourceKafkaFormatCsvOutputWithContext(context.Context) SourceKafkaFormatCsvOutput
}

type SourceKafkaFormatCsvArgs struct {
	Column      pulumi.IntPtrInput      `pulumi:"column"`
	DelimitedBy pulumi.StringPtrInput   `pulumi:"delimitedBy"`
	Headers     pulumi.StringArrayInput `pulumi:"headers"`
}

func (SourceKafkaFormatCsvArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceKafkaFormatCsv)(nil)).Elem()
}

func (i SourceKafkaFormatCsvArgs) ToSourceKafkaFormatCsvOutput() SourceKafkaFormatCsvOutput {
	return i.ToSourceKafkaFormatCsvOutputWithContext(context.Background())
}

func (i SourceKafkaFormatCsvArgs) ToSourceKafkaFormatCsvOutputWithContext(ctx context.Context) SourceKafkaFormatCsvOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceKafkaFormatCsvOutput)
}

// SourceKafkaFormatCsvArrayInput is an input type that accepts SourceKafkaFormatCsvArray and SourceKafkaFormatCsvArrayOutput values.
// You can construct a concrete instance of `SourceKafkaFormatCsvArrayInput` via:
//
//	SourceKafkaFormatCsvArray{ SourceKafkaFormatCsvArgs{...} }
type SourceKafkaFormatCsvArrayInput interface {
	pulumi.Input

	ToSourceKafkaFormatCsvArrayOutput() SourceKafkaFormatCsvArrayOutput
	ToSourceKafkaFormatCsvArrayOutputWithContext(context.Context) SourceKafkaFormatCsvArrayOutput
}

type SourceKafkaFormatCsvArray []SourceKafkaFormatCsvInput

func (SourceKafkaFormatCsvArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SourceKafkaFormatCsv)(nil)).Elem()
}

func (i SourceKafkaFormatCsvArray) ToSourceKafkaFormatCsvArrayOutput() SourceKafkaFormatCsvArrayOutput {
	return i.ToSourceKafkaFormatCsvArrayOutputWithContext(context.Background())
}

func (i SourceKafkaFormatCsvArray) ToSourceKafkaFormatCsvArrayOutputWithContext(ctx context.Context) SourceKafkaFormatCsvArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceKafkaFormatCsvArrayOutput)
}

type SourceKafkaFormatCsvOutput struct{ *pulumi.OutputState }

func (SourceKafkaFormatCsvOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceKafkaFormatCsv)(nil)).Elem()
}

func (o SourceKafkaFormatCsvOutput) ToSourceKafkaFormatCsvOutput() SourceKafkaFormatCsvOutput {
	return o
}

func (o SourceKafkaFormatCsvOutput) ToSourceKafkaFormatCsvOutputWithContext(ctx context.Context) SourceKafkaFormatCsvOutput {
	return o
}

func (o SourceKafkaFormatCsvOutput) Column() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SourceKafkaFormatCsv) *int { return v.Column }).(pulumi.IntPtrOutput)
}

func (o SourceKafkaFormatCsvOutput) DelimitedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceKafkaFormatCsv) *string { return v.DelimitedBy }).(pulumi.StringPtrOutput)
}

func (o SourceKafkaFormatCsvOutput) Headers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SourceKafkaFormatCsv) []string { return v.Headers }).(pulumi.StringArrayOutput)
}

type SourceKafkaFormatCsvArrayOutput struct{ *pulumi.OutputState }

func (SourceKafkaFormatCsvArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SourceKafkaFormatCsv)(nil)).Elem()
}

func (o SourceKafkaFormatCsvArrayOutput) ToSourceKafkaFormatCsvArrayOutput() SourceKafkaFormatCsvArrayOutput {
	return o
}

func (o SourceKafkaFormatCsvArrayOutput) ToSourceKafkaFormatCsvArrayOutputWithContext(ctx context.Context) SourceKafkaFormatCsvArrayOutput {
	return o
}

func (o SourceKafkaFormatCsvArrayOutput) Index(i pulumi.IntInput) SourceKafkaFormatCsvOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SourceKafkaFormatCsv {
		return vs[0].([]SourceKafkaFormatCsv)[vs[1].(int)]
	}).(SourceKafkaFormatCsvOutput)
}

type SourceKafkaFormatProtobuf struct {
	Message                  string                                            `pulumi:"message"`
	SchemaRegistryConnection SourceKafkaFormatProtobufSchemaRegistryConnection `pulumi:"schemaRegistryConnection"`
}

// SourceKafkaFormatProtobufInput is an input type that accepts SourceKafkaFormatProtobufArgs and SourceKafkaFormatProtobufOutput values.
// You can construct a concrete instance of `SourceKafkaFormatProtobufInput` via:
//
//	SourceKafkaFormatProtobufArgs{...}
type SourceKafkaFormatProtobufInput interface {
	pulumi.Input

	ToSourceKafkaFormatProtobufOutput() SourceKafkaFormatProtobufOutput
	ToSourceKafkaFormatProtobufOutputWithContext(context.Context) SourceKafkaFormatProtobufOutput
}

type SourceKafkaFormatProtobufArgs struct {
	Message                  pulumi.StringInput                                     `pulumi:"message"`
	SchemaRegistryConnection SourceKafkaFormatProtobufSchemaRegistryConnectionInput `pulumi:"schemaRegistryConnection"`
}

func (SourceKafkaFormatProtobufArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceKafkaFormatProtobuf)(nil)).Elem()
}

func (i SourceKafkaFormatProtobufArgs) ToSourceKafkaFormatProtobufOutput() SourceKafkaFormatProtobufOutput {
	return i.ToSourceKafkaFormatProtobufOutputWithContext(context.Background())
}

func (i SourceKafkaFormatProtobufArgs) ToSourceKafkaFormatProtobufOutputWithContext(ctx context.Context) SourceKafkaFormatProtobufOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceKafkaFormatProtobufOutput)
}

func (i SourceKafkaFormatProtobufArgs) ToSourceKafkaFormatProtobufPtrOutput() SourceKafkaFormatProtobufPtrOutput {
	return i.ToSourceKafkaFormatProtobufPtrOutputWithContext(context.Background())
}

func (i SourceKafkaFormatProtobufArgs) ToSourceKafkaFormatProtobufPtrOutputWithContext(ctx context.Context) SourceKafkaFormatProtobufPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceKafkaFormatProtobufOutput).ToSourceKafkaFormatProtobufPtrOutputWithContext(ctx)
}

// SourceKafkaFormatProtobufPtrInput is an input type that accepts SourceKafkaFormatProtobufArgs, SourceKafkaFormatProtobufPtr and SourceKafkaFormatProtobufPtrOutput values.
// You can construct a concrete instance of `SourceKafkaFormatProtobufPtrInput` via:
//
//	        SourceKafkaFormatProtobufArgs{...}
//
//	or:
//
//	        nil
type SourceKafkaFormatProtobufPtrInput interface {
	pulumi.Input

	ToSourceKafkaFormatProtobufPtrOutput() SourceKafkaFormatProtobufPtrOutput
	ToSourceKafkaFormatProtobufPtrOutputWithContext(context.Context) SourceKafkaFormatProtobufPtrOutput
}

type sourceKafkaFormatProtobufPtrType SourceKafkaFormatProtobufArgs

func SourceKafkaFormatProtobufPtr(v *SourceKafkaFormatProtobufArgs) SourceKafkaFormatProtobufPtrInput {
	return (*sourceKafkaFormatProtobufPtrType)(v)
}

func (*sourceKafkaFormatProtobufPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceKafkaFormatProtobuf)(nil)).Elem()
}

func (i *sourceKafkaFormatProtobufPtrType) ToSourceKafkaFormatProtobufPtrOutput() SourceKafkaFormatProtobufPtrOutput {
	return i.ToSourceKafkaFormatProtobufPtrOutputWithContext(context.Background())
}

func (i *sourceKafkaFormatProtobufPtrType) ToSourceKafkaFormatProtobufPtrOutputWithContext(ctx context.Context) SourceKafkaFormatProtobufPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceKafkaFormatProtobufPtrOutput)
}

type SourceKafkaFormatProtobufOutput struct{ *pulumi.OutputState }

func (SourceKafkaFormatProtobufOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceKafkaFormatProtobuf)(nil)).Elem()
}

func (o SourceKafkaFormatProtobufOutput) ToSourceKafkaFormatProtobufOutput() SourceKafkaFormatProtobufOutput {
	return o
}

func (o SourceKafkaFormatProtobufOutput) ToSourceKafkaFormatProtobufOutputWithContext(ctx context.Context) SourceKafkaFormatProtobufOutput {
	return o
}

func (o SourceKafkaFormatProtobufOutput) ToSourceKafkaFormatProtobufPtrOutput() SourceKafkaFormatProtobufPtrOutput {
	return o.ToSourceKafkaFormatProtobufPtrOutputWithContext(context.Background())
}

func (o SourceKafkaFormatProtobufOutput) ToSourceKafkaFormatProtobufPtrOutputWithContext(ctx context.Context) SourceKafkaFormatProtobufPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SourceKafkaFormatProtobuf) *SourceKafkaFormatProtobuf {
		return &v
	}).(SourceKafkaFormatProtobufPtrOutput)
}

func (o SourceKafkaFormatProtobufOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v SourceKafkaFormatProtobuf) string { return v.Message }).(pulumi.StringOutput)
}

func (o SourceKafkaFormatProtobufOutput) SchemaRegistryConnection() SourceKafkaFormatProtobufSchemaRegistryConnectionOutput {
	return o.ApplyT(func(v SourceKafkaFormatProtobuf) SourceKafkaFormatProtobufSchemaRegistryConnection {
		return v.SchemaRegistryConnection
	}).(SourceKafkaFormatProtobufSchemaRegistryConnectionOutput)
}

type SourceKafkaFormatProtobufPtrOutput struct{ *pulumi.OutputState }

func (SourceKafkaFormatProtobufPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceKafkaFormatProtobuf)(nil)).Elem()
}

func (o SourceKafkaFormatProtobufPtrOutput) ToSourceKafkaFormatProtobufPtrOutput() SourceKafkaFormatProtobufPtrOutput {
	return o
}

func (o SourceKafkaFormatProtobufPtrOutput) ToSourceKafkaFormatProtobufPtrOutputWithContext(ctx context.Context) SourceKafkaFormatProtobufPtrOutput {
	return o
}

func (o SourceKafkaFormatProtobufPtrOutput) Elem() SourceKafkaFormatProtobufOutput {
	return o.ApplyT(func(v *SourceKafkaFormatProtobuf) SourceKafkaFormatProtobuf {
		if v != nil {
			return *v
		}
		var ret SourceKafkaFormatProtobuf
		return ret
	}).(SourceKafkaFormatProtobufOutput)
}

func (o SourceKafkaFormatProtobufPtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceKafkaFormatProtobuf) *string {
		if v == nil {
			return nil
		}
		return &v.Message
	}).(pulumi.StringPtrOutput)
}

func (o SourceKafkaFormatProtobufPtrOutput) SchemaRegistryConnection() SourceKafkaFormatProtobufSchemaRegistryConnectionPtrOutput {
	return o.ApplyT(func(v *SourceKafkaFormatProtobuf) *SourceKafkaFormatProtobufSchemaRegistryConnection {
		if v == nil {
			return nil
		}
		return &v.SchemaRegistryConnection
	}).(SourceKafkaFormatProtobufSchemaRegistryConnectionPtrOutput)
}

type SourceKafkaFormatProtobufSchemaRegistryConnection struct {
	// The identifier for the source database.
	DatabaseName *string `pulumi:"databaseName"`
	// The identifier for the source.
	Name string `pulumi:"name"`
	// The identifier for the source schema.
	SchemaName *string `pulumi:"schemaName"`
}

// SourceKafkaFormatProtobufSchemaRegistryConnectionInput is an input type that accepts SourceKafkaFormatProtobufSchemaRegistryConnectionArgs and SourceKafkaFormatProtobufSchemaRegistryConnectionOutput values.
// You can construct a concrete instance of `SourceKafkaFormatProtobufSchemaRegistryConnectionInput` via:
//
//	SourceKafkaFormatProtobufSchemaRegistryConnectionArgs{...}
type SourceKafkaFormatProtobufSchemaRegistryConnectionInput interface {
	pulumi.Input

	ToSourceKafkaFormatProtobufSchemaRegistryConnectionOutput() SourceKafkaFormatProtobufSchemaRegistryConnectionOutput
	ToSourceKafkaFormatProtobufSchemaRegistryConnectionOutputWithContext(context.Context) SourceKafkaFormatProtobufSchemaRegistryConnectionOutput
}

type SourceKafkaFormatProtobufSchemaRegistryConnectionArgs struct {
	// The identifier for the source database.
	DatabaseName pulumi.StringPtrInput `pulumi:"databaseName"`
	// The identifier for the source.
	Name pulumi.StringInput `pulumi:"name"`
	// The identifier for the source schema.
	SchemaName pulumi.StringPtrInput `pulumi:"schemaName"`
}

func (SourceKafkaFormatProtobufSchemaRegistryConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceKafkaFormatProtobufSchemaRegistryConnection)(nil)).Elem()
}

func (i SourceKafkaFormatProtobufSchemaRegistryConnectionArgs) ToSourceKafkaFormatProtobufSchemaRegistryConnectionOutput() SourceKafkaFormatProtobufSchemaRegistryConnectionOutput {
	return i.ToSourceKafkaFormatProtobufSchemaRegistryConnectionOutputWithContext(context.Background())
}

func (i SourceKafkaFormatProtobufSchemaRegistryConnectionArgs) ToSourceKafkaFormatProtobufSchemaRegistryConnectionOutputWithContext(ctx context.Context) SourceKafkaFormatProtobufSchemaRegistryConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceKafkaFormatProtobufSchemaRegistryConnectionOutput)
}

func (i SourceKafkaFormatProtobufSchemaRegistryConnectionArgs) ToSourceKafkaFormatProtobufSchemaRegistryConnectionPtrOutput() SourceKafkaFormatProtobufSchemaRegistryConnectionPtrOutput {
	return i.ToSourceKafkaFormatProtobufSchemaRegistryConnectionPtrOutputWithContext(context.Background())
}

func (i SourceKafkaFormatProtobufSchemaRegistryConnectionArgs) ToSourceKafkaFormatProtobufSchemaRegistryConnectionPtrOutputWithContext(ctx context.Context) SourceKafkaFormatProtobufSchemaRegistryConnectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceKafkaFormatProtobufSchemaRegistryConnectionOutput).ToSourceKafkaFormatProtobufSchemaRegistryConnectionPtrOutputWithContext(ctx)
}

// SourceKafkaFormatProtobufSchemaRegistryConnectionPtrInput is an input type that accepts SourceKafkaFormatProtobufSchemaRegistryConnectionArgs, SourceKafkaFormatProtobufSchemaRegistryConnectionPtr and SourceKafkaFormatProtobufSchemaRegistryConnectionPtrOutput values.
// You can construct a concrete instance of `SourceKafkaFormatProtobufSchemaRegistryConnectionPtrInput` via:
//
//	        SourceKafkaFormatProtobufSchemaRegistryConnectionArgs{...}
//
//	or:
//
//	        nil
type SourceKafkaFormatProtobufSchemaRegistryConnectionPtrInput interface {
	pulumi.Input

	ToSourceKafkaFormatProtobufSchemaRegistryConnectionPtrOutput() SourceKafkaFormatProtobufSchemaRegistryConnectionPtrOutput
	ToSourceKafkaFormatProtobufSchemaRegistryConnectionPtrOutputWithContext(context.Context) SourceKafkaFormatProtobufSchemaRegistryConnectionPtrOutput
}

type sourceKafkaFormatProtobufSchemaRegistryConnectionPtrType SourceKafkaFormatProtobufSchemaRegistryConnectionArgs

func SourceKafkaFormatProtobufSchemaRegistryConnectionPtr(v *SourceKafkaFormatProtobufSchemaRegistryConnectionArgs) SourceKafkaFormatProtobufSchemaRegistryConnectionPtrInput {
	return (*sourceKafkaFormatProtobufSchemaRegistryConnectionPtrType)(v)
}

func (*sourceKafkaFormatProtobufSchemaRegistryConnectionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceKafkaFormatProtobufSchemaRegistryConnection)(nil)).Elem()
}

func (i *sourceKafkaFormatProtobufSchemaRegistryConnectionPtrType) ToSourceKafkaFormatProtobufSchemaRegistryConnectionPtrOutput() SourceKafkaFormatProtobufSchemaRegistryConnectionPtrOutput {
	return i.ToSourceKafkaFormatProtobufSchemaRegistryConnectionPtrOutputWithContext(context.Background())
}

func (i *sourceKafkaFormatProtobufSchemaRegistryConnectionPtrType) ToSourceKafkaFormatProtobufSchemaRegistryConnectionPtrOutputWithContext(ctx context.Context) SourceKafkaFormatProtobufSchemaRegistryConnectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceKafkaFormatProtobufSchemaRegistryConnectionPtrOutput)
}

type SourceKafkaFormatProtobufSchemaRegistryConnectionOutput struct{ *pulumi.OutputState }

func (SourceKafkaFormatProtobufSchemaRegistryConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceKafkaFormatProtobufSchemaRegistryConnection)(nil)).Elem()
}

func (o SourceKafkaFormatProtobufSchemaRegistryConnectionOutput) ToSourceKafkaFormatProtobufSchemaRegistryConnectionOutput() SourceKafkaFormatProtobufSchemaRegistryConnectionOutput {
	return o
}

func (o SourceKafkaFormatProtobufSchemaRegistryConnectionOutput) ToSourceKafkaFormatProtobufSchemaRegistryConnectionOutputWithContext(ctx context.Context) SourceKafkaFormatProtobufSchemaRegistryConnectionOutput {
	return o
}

func (o SourceKafkaFormatProtobufSchemaRegistryConnectionOutput) ToSourceKafkaFormatProtobufSchemaRegistryConnectionPtrOutput() SourceKafkaFormatProtobufSchemaRegistryConnectionPtrOutput {
	return o.ToSourceKafkaFormatProtobufSchemaRegistryConnectionPtrOutputWithContext(context.Background())
}

func (o SourceKafkaFormatProtobufSchemaRegistryConnectionOutput) ToSourceKafkaFormatProtobufSchemaRegistryConnectionPtrOutputWithContext(ctx context.Context) SourceKafkaFormatProtobufSchemaRegistryConnectionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SourceKafkaFormatProtobufSchemaRegistryConnection) *SourceKafkaFormatProtobufSchemaRegistryConnection {
		return &v
	}).(SourceKafkaFormatProtobufSchemaRegistryConnectionPtrOutput)
}

// The identifier for the source database.
func (o SourceKafkaFormatProtobufSchemaRegistryConnectionOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceKafkaFormatProtobufSchemaRegistryConnection) *string { return v.DatabaseName }).(pulumi.StringPtrOutput)
}

// The identifier for the source.
func (o SourceKafkaFormatProtobufSchemaRegistryConnectionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SourceKafkaFormatProtobufSchemaRegistryConnection) string { return v.Name }).(pulumi.StringOutput)
}

// The identifier for the source schema.
func (o SourceKafkaFormatProtobufSchemaRegistryConnectionOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceKafkaFormatProtobufSchemaRegistryConnection) *string { return v.SchemaName }).(pulumi.StringPtrOutput)
}

type SourceKafkaFormatProtobufSchemaRegistryConnectionPtrOutput struct{ *pulumi.OutputState }

func (SourceKafkaFormatProtobufSchemaRegistryConnectionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceKafkaFormatProtobufSchemaRegistryConnection)(nil)).Elem()
}

func (o SourceKafkaFormatProtobufSchemaRegistryConnectionPtrOutput) ToSourceKafkaFormatProtobufSchemaRegistryConnectionPtrOutput() SourceKafkaFormatProtobufSchemaRegistryConnectionPtrOutput {
	return o
}

func (o SourceKafkaFormatProtobufSchemaRegistryConnectionPtrOutput) ToSourceKafkaFormatProtobufSchemaRegistryConnectionPtrOutputWithContext(ctx context.Context) SourceKafkaFormatProtobufSchemaRegistryConnectionPtrOutput {
	return o
}

func (o SourceKafkaFormatProtobufSchemaRegistryConnectionPtrOutput) Elem() SourceKafkaFormatProtobufSchemaRegistryConnectionOutput {
	return o.ApplyT(func(v *SourceKafkaFormatProtobufSchemaRegistryConnection) SourceKafkaFormatProtobufSchemaRegistryConnection {
		if v != nil {
			return *v
		}
		var ret SourceKafkaFormatProtobufSchemaRegistryConnection
		return ret
	}).(SourceKafkaFormatProtobufSchemaRegistryConnectionOutput)
}

// The identifier for the source database.
func (o SourceKafkaFormatProtobufSchemaRegistryConnectionPtrOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceKafkaFormatProtobufSchemaRegistryConnection) *string {
		if v == nil {
			return nil
		}
		return v.DatabaseName
	}).(pulumi.StringPtrOutput)
}

// The identifier for the source.
func (o SourceKafkaFormatProtobufSchemaRegistryConnectionPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceKafkaFormatProtobufSchemaRegistryConnection) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The identifier for the source schema.
func (o SourceKafkaFormatProtobufSchemaRegistryConnectionPtrOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceKafkaFormatProtobufSchemaRegistryConnection) *string {
		if v == nil {
			return nil
		}
		return v.SchemaName
	}).(pulumi.StringPtrOutput)
}

type SourceKafkaKafkaConnection struct {
	// The kafkaConnection database name.
	DatabaseName *string `pulumi:"databaseName"`
	// The kafkaConnection name.
	Name string `pulumi:"name"`
	// The kafkaConnection schema name.
	SchemaName *string `pulumi:"schemaName"`
}

// SourceKafkaKafkaConnectionInput is an input type that accepts SourceKafkaKafkaConnectionArgs and SourceKafkaKafkaConnectionOutput values.
// You can construct a concrete instance of `SourceKafkaKafkaConnectionInput` via:
//
//	SourceKafkaKafkaConnectionArgs{...}
type SourceKafkaKafkaConnectionInput interface {
	pulumi.Input

	ToSourceKafkaKafkaConnectionOutput() SourceKafkaKafkaConnectionOutput
	ToSourceKafkaKafkaConnectionOutputWithContext(context.Context) SourceKafkaKafkaConnectionOutput
}

type SourceKafkaKafkaConnectionArgs struct {
	// The kafkaConnection database name.
	DatabaseName pulumi.StringPtrInput `pulumi:"databaseName"`
	// The kafkaConnection name.
	Name pulumi.StringInput `pulumi:"name"`
	// The kafkaConnection schema name.
	SchemaName pulumi.StringPtrInput `pulumi:"schemaName"`
}

func (SourceKafkaKafkaConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceKafkaKafkaConnection)(nil)).Elem()
}

func (i SourceKafkaKafkaConnectionArgs) ToSourceKafkaKafkaConnectionOutput() SourceKafkaKafkaConnectionOutput {
	return i.ToSourceKafkaKafkaConnectionOutputWithContext(context.Background())
}

func (i SourceKafkaKafkaConnectionArgs) ToSourceKafkaKafkaConnectionOutputWithContext(ctx context.Context) SourceKafkaKafkaConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceKafkaKafkaConnectionOutput)
}

func (i SourceKafkaKafkaConnectionArgs) ToSourceKafkaKafkaConnectionPtrOutput() SourceKafkaKafkaConnectionPtrOutput {
	return i.ToSourceKafkaKafkaConnectionPtrOutputWithContext(context.Background())
}

func (i SourceKafkaKafkaConnectionArgs) ToSourceKafkaKafkaConnectionPtrOutputWithContext(ctx context.Context) SourceKafkaKafkaConnectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceKafkaKafkaConnectionOutput).ToSourceKafkaKafkaConnectionPtrOutputWithContext(ctx)
}

// SourceKafkaKafkaConnectionPtrInput is an input type that accepts SourceKafkaKafkaConnectionArgs, SourceKafkaKafkaConnectionPtr and SourceKafkaKafkaConnectionPtrOutput values.
// You can construct a concrete instance of `SourceKafkaKafkaConnectionPtrInput` via:
//
//	        SourceKafkaKafkaConnectionArgs{...}
//
//	or:
//
//	        nil
type SourceKafkaKafkaConnectionPtrInput interface {
	pulumi.Input

	ToSourceKafkaKafkaConnectionPtrOutput() SourceKafkaKafkaConnectionPtrOutput
	ToSourceKafkaKafkaConnectionPtrOutputWithContext(context.Context) SourceKafkaKafkaConnectionPtrOutput
}

type sourceKafkaKafkaConnectionPtrType SourceKafkaKafkaConnectionArgs

func SourceKafkaKafkaConnectionPtr(v *SourceKafkaKafkaConnectionArgs) SourceKafkaKafkaConnectionPtrInput {
	return (*sourceKafkaKafkaConnectionPtrType)(v)
}

func (*sourceKafkaKafkaConnectionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceKafkaKafkaConnection)(nil)).Elem()
}

func (i *sourceKafkaKafkaConnectionPtrType) ToSourceKafkaKafkaConnectionPtrOutput() SourceKafkaKafkaConnectionPtrOutput {
	return i.ToSourceKafkaKafkaConnectionPtrOutputWithContext(context.Background())
}

func (i *sourceKafkaKafkaConnectionPtrType) ToSourceKafkaKafkaConnectionPtrOutputWithContext(ctx context.Context) SourceKafkaKafkaConnectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceKafkaKafkaConnectionPtrOutput)
}

type SourceKafkaKafkaConnectionOutput struct{ *pulumi.OutputState }

func (SourceKafkaKafkaConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceKafkaKafkaConnection)(nil)).Elem()
}

func (o SourceKafkaKafkaConnectionOutput) ToSourceKafkaKafkaConnectionOutput() SourceKafkaKafkaConnectionOutput {
	return o
}

func (o SourceKafkaKafkaConnectionOutput) ToSourceKafkaKafkaConnectionOutputWithContext(ctx context.Context) SourceKafkaKafkaConnectionOutput {
	return o
}

func (o SourceKafkaKafkaConnectionOutput) ToSourceKafkaKafkaConnectionPtrOutput() SourceKafkaKafkaConnectionPtrOutput {
	return o.ToSourceKafkaKafkaConnectionPtrOutputWithContext(context.Background())
}

func (o SourceKafkaKafkaConnectionOutput) ToSourceKafkaKafkaConnectionPtrOutputWithContext(ctx context.Context) SourceKafkaKafkaConnectionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SourceKafkaKafkaConnection) *SourceKafkaKafkaConnection {
		return &v
	}).(SourceKafkaKafkaConnectionPtrOutput)
}

// The kafkaConnection database name.
func (o SourceKafkaKafkaConnectionOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceKafkaKafkaConnection) *string { return v.DatabaseName }).(pulumi.StringPtrOutput)
}

// The kafkaConnection name.
func (o SourceKafkaKafkaConnectionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SourceKafkaKafkaConnection) string { return v.Name }).(pulumi.StringOutput)
}

// The kafkaConnection schema name.
func (o SourceKafkaKafkaConnectionOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceKafkaKafkaConnection) *string { return v.SchemaName }).(pulumi.StringPtrOutput)
}

type SourceKafkaKafkaConnectionPtrOutput struct{ *pulumi.OutputState }

func (SourceKafkaKafkaConnectionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceKafkaKafkaConnection)(nil)).Elem()
}

func (o SourceKafkaKafkaConnectionPtrOutput) ToSourceKafkaKafkaConnectionPtrOutput() SourceKafkaKafkaConnectionPtrOutput {
	return o
}

func (o SourceKafkaKafkaConnectionPtrOutput) ToSourceKafkaKafkaConnectionPtrOutputWithContext(ctx context.Context) SourceKafkaKafkaConnectionPtrOutput {
	return o
}

func (o SourceKafkaKafkaConnectionPtrOutput) Elem() SourceKafkaKafkaConnectionOutput {
	return o.ApplyT(func(v *SourceKafkaKafkaConnection) SourceKafkaKafkaConnection {
		if v != nil {
			return *v
		}
		var ret SourceKafkaKafkaConnection
		return ret
	}).(SourceKafkaKafkaConnectionOutput)
}

// The kafkaConnection database name.
func (o SourceKafkaKafkaConnectionPtrOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceKafkaKafkaConnection) *string {
		if v == nil {
			return nil
		}
		return v.DatabaseName
	}).(pulumi.StringPtrOutput)
}

// The kafkaConnection name.
func (o SourceKafkaKafkaConnectionPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceKafkaKafkaConnection) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The kafkaConnection schema name.
func (o SourceKafkaKafkaConnectionPtrOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceKafkaKafkaConnection) *string {
		if v == nil {
			return nil
		}
		return v.SchemaName
	}).(pulumi.StringPtrOutput)
}

type SourceKafkaKeyFormat struct {
	// Avro format.
	Avro *SourceKafkaKeyFormatAvro `pulumi:"avro"`
	// CSV format.
	Csvs []SourceKafkaKeyFormatCsv `pulumi:"csvs"`
	// JSON format.
	Json *bool `pulumi:"json"`
	// Protobuf format.
	Protobuf *SourceKafkaKeyFormatProtobuf `pulumi:"protobuf"`
	// Text format.
	Text *bool `pulumi:"text"`
}

// SourceKafkaKeyFormatInput is an input type that accepts SourceKafkaKeyFormatArgs and SourceKafkaKeyFormatOutput values.
// You can construct a concrete instance of `SourceKafkaKeyFormatInput` via:
//
//	SourceKafkaKeyFormatArgs{...}
type SourceKafkaKeyFormatInput interface {
	pulumi.Input

	ToSourceKafkaKeyFormatOutput() SourceKafkaKeyFormatOutput
	ToSourceKafkaKeyFormatOutputWithContext(context.Context) SourceKafkaKeyFormatOutput
}

type SourceKafkaKeyFormatArgs struct {
	// Avro format.
	Avro SourceKafkaKeyFormatAvroPtrInput `pulumi:"avro"`
	// CSV format.
	Csvs SourceKafkaKeyFormatCsvArrayInput `pulumi:"csvs"`
	// JSON format.
	Json pulumi.BoolPtrInput `pulumi:"json"`
	// Protobuf format.
	Protobuf SourceKafkaKeyFormatProtobufPtrInput `pulumi:"protobuf"`
	// Text format.
	Text pulumi.BoolPtrInput `pulumi:"text"`
}

func (SourceKafkaKeyFormatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceKafkaKeyFormat)(nil)).Elem()
}

func (i SourceKafkaKeyFormatArgs) ToSourceKafkaKeyFormatOutput() SourceKafkaKeyFormatOutput {
	return i.ToSourceKafkaKeyFormatOutputWithContext(context.Background())
}

func (i SourceKafkaKeyFormatArgs) ToSourceKafkaKeyFormatOutputWithContext(ctx context.Context) SourceKafkaKeyFormatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceKafkaKeyFormatOutput)
}

func (i SourceKafkaKeyFormatArgs) ToSourceKafkaKeyFormatPtrOutput() SourceKafkaKeyFormatPtrOutput {
	return i.ToSourceKafkaKeyFormatPtrOutputWithContext(context.Background())
}

func (i SourceKafkaKeyFormatArgs) ToSourceKafkaKeyFormatPtrOutputWithContext(ctx context.Context) SourceKafkaKeyFormatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceKafkaKeyFormatOutput).ToSourceKafkaKeyFormatPtrOutputWithContext(ctx)
}

// SourceKafkaKeyFormatPtrInput is an input type that accepts SourceKafkaKeyFormatArgs, SourceKafkaKeyFormatPtr and SourceKafkaKeyFormatPtrOutput values.
// You can construct a concrete instance of `SourceKafkaKeyFormatPtrInput` via:
//
//	        SourceKafkaKeyFormatArgs{...}
//
//	or:
//
//	        nil
type SourceKafkaKeyFormatPtrInput interface {
	pulumi.Input

	ToSourceKafkaKeyFormatPtrOutput() SourceKafkaKeyFormatPtrOutput
	ToSourceKafkaKeyFormatPtrOutputWithContext(context.Context) SourceKafkaKeyFormatPtrOutput
}

type sourceKafkaKeyFormatPtrType SourceKafkaKeyFormatArgs

func SourceKafkaKeyFormatPtr(v *SourceKafkaKeyFormatArgs) SourceKafkaKeyFormatPtrInput {
	return (*sourceKafkaKeyFormatPtrType)(v)
}

func (*sourceKafkaKeyFormatPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceKafkaKeyFormat)(nil)).Elem()
}

func (i *sourceKafkaKeyFormatPtrType) ToSourceKafkaKeyFormatPtrOutput() SourceKafkaKeyFormatPtrOutput {
	return i.ToSourceKafkaKeyFormatPtrOutputWithContext(context.Background())
}

func (i *sourceKafkaKeyFormatPtrType) ToSourceKafkaKeyFormatPtrOutputWithContext(ctx context.Context) SourceKafkaKeyFormatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceKafkaKeyFormatPtrOutput)
}

type SourceKafkaKeyFormatOutput struct{ *pulumi.OutputState }

func (SourceKafkaKeyFormatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceKafkaKeyFormat)(nil)).Elem()
}

func (o SourceKafkaKeyFormatOutput) ToSourceKafkaKeyFormatOutput() SourceKafkaKeyFormatOutput {
	return o
}

func (o SourceKafkaKeyFormatOutput) ToSourceKafkaKeyFormatOutputWithContext(ctx context.Context) SourceKafkaKeyFormatOutput {
	return o
}

func (o SourceKafkaKeyFormatOutput) ToSourceKafkaKeyFormatPtrOutput() SourceKafkaKeyFormatPtrOutput {
	return o.ToSourceKafkaKeyFormatPtrOutputWithContext(context.Background())
}

func (o SourceKafkaKeyFormatOutput) ToSourceKafkaKeyFormatPtrOutputWithContext(ctx context.Context) SourceKafkaKeyFormatPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SourceKafkaKeyFormat) *SourceKafkaKeyFormat {
		return &v
	}).(SourceKafkaKeyFormatPtrOutput)
}

// Avro format.
func (o SourceKafkaKeyFormatOutput) Avro() SourceKafkaKeyFormatAvroPtrOutput {
	return o.ApplyT(func(v SourceKafkaKeyFormat) *SourceKafkaKeyFormatAvro { return v.Avro }).(SourceKafkaKeyFormatAvroPtrOutput)
}

// CSV format.
func (o SourceKafkaKeyFormatOutput) Csvs() SourceKafkaKeyFormatCsvArrayOutput {
	return o.ApplyT(func(v SourceKafkaKeyFormat) []SourceKafkaKeyFormatCsv { return v.Csvs }).(SourceKafkaKeyFormatCsvArrayOutput)
}

// JSON format.
func (o SourceKafkaKeyFormatOutput) Json() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SourceKafkaKeyFormat) *bool { return v.Json }).(pulumi.BoolPtrOutput)
}

// Protobuf format.
func (o SourceKafkaKeyFormatOutput) Protobuf() SourceKafkaKeyFormatProtobufPtrOutput {
	return o.ApplyT(func(v SourceKafkaKeyFormat) *SourceKafkaKeyFormatProtobuf { return v.Protobuf }).(SourceKafkaKeyFormatProtobufPtrOutput)
}

// Text format.
func (o SourceKafkaKeyFormatOutput) Text() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SourceKafkaKeyFormat) *bool { return v.Text }).(pulumi.BoolPtrOutput)
}

type SourceKafkaKeyFormatPtrOutput struct{ *pulumi.OutputState }

func (SourceKafkaKeyFormatPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceKafkaKeyFormat)(nil)).Elem()
}

func (o SourceKafkaKeyFormatPtrOutput) ToSourceKafkaKeyFormatPtrOutput() SourceKafkaKeyFormatPtrOutput {
	return o
}

func (o SourceKafkaKeyFormatPtrOutput) ToSourceKafkaKeyFormatPtrOutputWithContext(ctx context.Context) SourceKafkaKeyFormatPtrOutput {
	return o
}

func (o SourceKafkaKeyFormatPtrOutput) Elem() SourceKafkaKeyFormatOutput {
	return o.ApplyT(func(v *SourceKafkaKeyFormat) SourceKafkaKeyFormat {
		if v != nil {
			return *v
		}
		var ret SourceKafkaKeyFormat
		return ret
	}).(SourceKafkaKeyFormatOutput)
}

// Avro format.
func (o SourceKafkaKeyFormatPtrOutput) Avro() SourceKafkaKeyFormatAvroPtrOutput {
	return o.ApplyT(func(v *SourceKafkaKeyFormat) *SourceKafkaKeyFormatAvro {
		if v == nil {
			return nil
		}
		return v.Avro
	}).(SourceKafkaKeyFormatAvroPtrOutput)
}

// CSV format.
func (o SourceKafkaKeyFormatPtrOutput) Csvs() SourceKafkaKeyFormatCsvArrayOutput {
	return o.ApplyT(func(v *SourceKafkaKeyFormat) []SourceKafkaKeyFormatCsv {
		if v == nil {
			return nil
		}
		return v.Csvs
	}).(SourceKafkaKeyFormatCsvArrayOutput)
}

// JSON format.
func (o SourceKafkaKeyFormatPtrOutput) Json() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SourceKafkaKeyFormat) *bool {
		if v == nil {
			return nil
		}
		return v.Json
	}).(pulumi.BoolPtrOutput)
}

// Protobuf format.
func (o SourceKafkaKeyFormatPtrOutput) Protobuf() SourceKafkaKeyFormatProtobufPtrOutput {
	return o.ApplyT(func(v *SourceKafkaKeyFormat) *SourceKafkaKeyFormatProtobuf {
		if v == nil {
			return nil
		}
		return v.Protobuf
	}).(SourceKafkaKeyFormatProtobufPtrOutput)
}

// Text format.
func (o SourceKafkaKeyFormatPtrOutput) Text() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SourceKafkaKeyFormat) *bool {
		if v == nil {
			return nil
		}
		return v.Text
	}).(pulumi.BoolPtrOutput)
}

type SourceKafkaKeyFormatAvro struct {
	KeyStrategy              *string                                          `pulumi:"keyStrategy"`
	SchemaRegistryConnection SourceKafkaKeyFormatAvroSchemaRegistryConnection `pulumi:"schemaRegistryConnection"`
	ValueStrategy            *string                                          `pulumi:"valueStrategy"`
}

// SourceKafkaKeyFormatAvroInput is an input type that accepts SourceKafkaKeyFormatAvroArgs and SourceKafkaKeyFormatAvroOutput values.
// You can construct a concrete instance of `SourceKafkaKeyFormatAvroInput` via:
//
//	SourceKafkaKeyFormatAvroArgs{...}
type SourceKafkaKeyFormatAvroInput interface {
	pulumi.Input

	ToSourceKafkaKeyFormatAvroOutput() SourceKafkaKeyFormatAvroOutput
	ToSourceKafkaKeyFormatAvroOutputWithContext(context.Context) SourceKafkaKeyFormatAvroOutput
}

type SourceKafkaKeyFormatAvroArgs struct {
	KeyStrategy              pulumi.StringPtrInput                                 `pulumi:"keyStrategy"`
	SchemaRegistryConnection SourceKafkaKeyFormatAvroSchemaRegistryConnectionInput `pulumi:"schemaRegistryConnection"`
	ValueStrategy            pulumi.StringPtrInput                                 `pulumi:"valueStrategy"`
}

func (SourceKafkaKeyFormatAvroArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceKafkaKeyFormatAvro)(nil)).Elem()
}

func (i SourceKafkaKeyFormatAvroArgs) ToSourceKafkaKeyFormatAvroOutput() SourceKafkaKeyFormatAvroOutput {
	return i.ToSourceKafkaKeyFormatAvroOutputWithContext(context.Background())
}

func (i SourceKafkaKeyFormatAvroArgs) ToSourceKafkaKeyFormatAvroOutputWithContext(ctx context.Context) SourceKafkaKeyFormatAvroOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceKafkaKeyFormatAvroOutput)
}

func (i SourceKafkaKeyFormatAvroArgs) ToSourceKafkaKeyFormatAvroPtrOutput() SourceKafkaKeyFormatAvroPtrOutput {
	return i.ToSourceKafkaKeyFormatAvroPtrOutputWithContext(context.Background())
}

func (i SourceKafkaKeyFormatAvroArgs) ToSourceKafkaKeyFormatAvroPtrOutputWithContext(ctx context.Context) SourceKafkaKeyFormatAvroPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceKafkaKeyFormatAvroOutput).ToSourceKafkaKeyFormatAvroPtrOutputWithContext(ctx)
}

// SourceKafkaKeyFormatAvroPtrInput is an input type that accepts SourceKafkaKeyFormatAvroArgs, SourceKafkaKeyFormatAvroPtr and SourceKafkaKeyFormatAvroPtrOutput values.
// You can construct a concrete instance of `SourceKafkaKeyFormatAvroPtrInput` via:
//
//	        SourceKafkaKeyFormatAvroArgs{...}
//
//	or:
//
//	        nil
type SourceKafkaKeyFormatAvroPtrInput interface {
	pulumi.Input

	ToSourceKafkaKeyFormatAvroPtrOutput() SourceKafkaKeyFormatAvroPtrOutput
	ToSourceKafkaKeyFormatAvroPtrOutputWithContext(context.Context) SourceKafkaKeyFormatAvroPtrOutput
}

type sourceKafkaKeyFormatAvroPtrType SourceKafkaKeyFormatAvroArgs

func SourceKafkaKeyFormatAvroPtr(v *SourceKafkaKeyFormatAvroArgs) SourceKafkaKeyFormatAvroPtrInput {
	return (*sourceKafkaKeyFormatAvroPtrType)(v)
}

func (*sourceKafkaKeyFormatAvroPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceKafkaKeyFormatAvro)(nil)).Elem()
}

func (i *sourceKafkaKeyFormatAvroPtrType) ToSourceKafkaKeyFormatAvroPtrOutput() SourceKafkaKeyFormatAvroPtrOutput {
	return i.ToSourceKafkaKeyFormatAvroPtrOutputWithContext(context.Background())
}

func (i *sourceKafkaKeyFormatAvroPtrType) ToSourceKafkaKeyFormatAvroPtrOutputWithContext(ctx context.Context) SourceKafkaKeyFormatAvroPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceKafkaKeyFormatAvroPtrOutput)
}

type SourceKafkaKeyFormatAvroOutput struct{ *pulumi.OutputState }

func (SourceKafkaKeyFormatAvroOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceKafkaKeyFormatAvro)(nil)).Elem()
}

func (o SourceKafkaKeyFormatAvroOutput) ToSourceKafkaKeyFormatAvroOutput() SourceKafkaKeyFormatAvroOutput {
	return o
}

func (o SourceKafkaKeyFormatAvroOutput) ToSourceKafkaKeyFormatAvroOutputWithContext(ctx context.Context) SourceKafkaKeyFormatAvroOutput {
	return o
}

func (o SourceKafkaKeyFormatAvroOutput) ToSourceKafkaKeyFormatAvroPtrOutput() SourceKafkaKeyFormatAvroPtrOutput {
	return o.ToSourceKafkaKeyFormatAvroPtrOutputWithContext(context.Background())
}

func (o SourceKafkaKeyFormatAvroOutput) ToSourceKafkaKeyFormatAvroPtrOutputWithContext(ctx context.Context) SourceKafkaKeyFormatAvroPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SourceKafkaKeyFormatAvro) *SourceKafkaKeyFormatAvro {
		return &v
	}).(SourceKafkaKeyFormatAvroPtrOutput)
}

func (o SourceKafkaKeyFormatAvroOutput) KeyStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceKafkaKeyFormatAvro) *string { return v.KeyStrategy }).(pulumi.StringPtrOutput)
}

func (o SourceKafkaKeyFormatAvroOutput) SchemaRegistryConnection() SourceKafkaKeyFormatAvroSchemaRegistryConnectionOutput {
	return o.ApplyT(func(v SourceKafkaKeyFormatAvro) SourceKafkaKeyFormatAvroSchemaRegistryConnection {
		return v.SchemaRegistryConnection
	}).(SourceKafkaKeyFormatAvroSchemaRegistryConnectionOutput)
}

func (o SourceKafkaKeyFormatAvroOutput) ValueStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceKafkaKeyFormatAvro) *string { return v.ValueStrategy }).(pulumi.StringPtrOutput)
}

type SourceKafkaKeyFormatAvroPtrOutput struct{ *pulumi.OutputState }

func (SourceKafkaKeyFormatAvroPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceKafkaKeyFormatAvro)(nil)).Elem()
}

func (o SourceKafkaKeyFormatAvroPtrOutput) ToSourceKafkaKeyFormatAvroPtrOutput() SourceKafkaKeyFormatAvroPtrOutput {
	return o
}

func (o SourceKafkaKeyFormatAvroPtrOutput) ToSourceKafkaKeyFormatAvroPtrOutputWithContext(ctx context.Context) SourceKafkaKeyFormatAvroPtrOutput {
	return o
}

func (o SourceKafkaKeyFormatAvroPtrOutput) Elem() SourceKafkaKeyFormatAvroOutput {
	return o.ApplyT(func(v *SourceKafkaKeyFormatAvro) SourceKafkaKeyFormatAvro {
		if v != nil {
			return *v
		}
		var ret SourceKafkaKeyFormatAvro
		return ret
	}).(SourceKafkaKeyFormatAvroOutput)
}

func (o SourceKafkaKeyFormatAvroPtrOutput) KeyStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceKafkaKeyFormatAvro) *string {
		if v == nil {
			return nil
		}
		return v.KeyStrategy
	}).(pulumi.StringPtrOutput)
}

func (o SourceKafkaKeyFormatAvroPtrOutput) SchemaRegistryConnection() SourceKafkaKeyFormatAvroSchemaRegistryConnectionPtrOutput {
	return o.ApplyT(func(v *SourceKafkaKeyFormatAvro) *SourceKafkaKeyFormatAvroSchemaRegistryConnection {
		if v == nil {
			return nil
		}
		return &v.SchemaRegistryConnection
	}).(SourceKafkaKeyFormatAvroSchemaRegistryConnectionPtrOutput)
}

func (o SourceKafkaKeyFormatAvroPtrOutput) ValueStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceKafkaKeyFormatAvro) *string {
		if v == nil {
			return nil
		}
		return v.ValueStrategy
	}).(pulumi.StringPtrOutput)
}

type SourceKafkaKeyFormatAvroSchemaRegistryConnection struct {
	// The identifier for the source database.
	DatabaseName *string `pulumi:"databaseName"`
	// The identifier for the source.
	Name string `pulumi:"name"`
	// The identifier for the source schema.
	SchemaName *string `pulumi:"schemaName"`
}

// SourceKafkaKeyFormatAvroSchemaRegistryConnectionInput is an input type that accepts SourceKafkaKeyFormatAvroSchemaRegistryConnectionArgs and SourceKafkaKeyFormatAvroSchemaRegistryConnectionOutput values.
// You can construct a concrete instance of `SourceKafkaKeyFormatAvroSchemaRegistryConnectionInput` via:
//
//	SourceKafkaKeyFormatAvroSchemaRegistryConnectionArgs{...}
type SourceKafkaKeyFormatAvroSchemaRegistryConnectionInput interface {
	pulumi.Input

	ToSourceKafkaKeyFormatAvroSchemaRegistryConnectionOutput() SourceKafkaKeyFormatAvroSchemaRegistryConnectionOutput
	ToSourceKafkaKeyFormatAvroSchemaRegistryConnectionOutputWithContext(context.Context) SourceKafkaKeyFormatAvroSchemaRegistryConnectionOutput
}

type SourceKafkaKeyFormatAvroSchemaRegistryConnectionArgs struct {
	// The identifier for the source database.
	DatabaseName pulumi.StringPtrInput `pulumi:"databaseName"`
	// The identifier for the source.
	Name pulumi.StringInput `pulumi:"name"`
	// The identifier for the source schema.
	SchemaName pulumi.StringPtrInput `pulumi:"schemaName"`
}

func (SourceKafkaKeyFormatAvroSchemaRegistryConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceKafkaKeyFormatAvroSchemaRegistryConnection)(nil)).Elem()
}

func (i SourceKafkaKeyFormatAvroSchemaRegistryConnectionArgs) ToSourceKafkaKeyFormatAvroSchemaRegistryConnectionOutput() SourceKafkaKeyFormatAvroSchemaRegistryConnectionOutput {
	return i.ToSourceKafkaKeyFormatAvroSchemaRegistryConnectionOutputWithContext(context.Background())
}

func (i SourceKafkaKeyFormatAvroSchemaRegistryConnectionArgs) ToSourceKafkaKeyFormatAvroSchemaRegistryConnectionOutputWithContext(ctx context.Context) SourceKafkaKeyFormatAvroSchemaRegistryConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceKafkaKeyFormatAvroSchemaRegistryConnectionOutput)
}

func (i SourceKafkaKeyFormatAvroSchemaRegistryConnectionArgs) ToSourceKafkaKeyFormatAvroSchemaRegistryConnectionPtrOutput() SourceKafkaKeyFormatAvroSchemaRegistryConnectionPtrOutput {
	return i.ToSourceKafkaKeyFormatAvroSchemaRegistryConnectionPtrOutputWithContext(context.Background())
}

func (i SourceKafkaKeyFormatAvroSchemaRegistryConnectionArgs) ToSourceKafkaKeyFormatAvroSchemaRegistryConnectionPtrOutputWithContext(ctx context.Context) SourceKafkaKeyFormatAvroSchemaRegistryConnectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceKafkaKeyFormatAvroSchemaRegistryConnectionOutput).ToSourceKafkaKeyFormatAvroSchemaRegistryConnectionPtrOutputWithContext(ctx)
}

// SourceKafkaKeyFormatAvroSchemaRegistryConnectionPtrInput is an input type that accepts SourceKafkaKeyFormatAvroSchemaRegistryConnectionArgs, SourceKafkaKeyFormatAvroSchemaRegistryConnectionPtr and SourceKafkaKeyFormatAvroSchemaRegistryConnectionPtrOutput values.
// You can construct a concrete instance of `SourceKafkaKeyFormatAvroSchemaRegistryConnectionPtrInput` via:
//
//	        SourceKafkaKeyFormatAvroSchemaRegistryConnectionArgs{...}
//
//	or:
//
//	        nil
type SourceKafkaKeyFormatAvroSchemaRegistryConnectionPtrInput interface {
	pulumi.Input

	ToSourceKafkaKeyFormatAvroSchemaRegistryConnectionPtrOutput() SourceKafkaKeyFormatAvroSchemaRegistryConnectionPtrOutput
	ToSourceKafkaKeyFormatAvroSchemaRegistryConnectionPtrOutputWithContext(context.Context) SourceKafkaKeyFormatAvroSchemaRegistryConnectionPtrOutput
}

type sourceKafkaKeyFormatAvroSchemaRegistryConnectionPtrType SourceKafkaKeyFormatAvroSchemaRegistryConnectionArgs

func SourceKafkaKeyFormatAvroSchemaRegistryConnectionPtr(v *SourceKafkaKeyFormatAvroSchemaRegistryConnectionArgs) SourceKafkaKeyFormatAvroSchemaRegistryConnectionPtrInput {
	return (*sourceKafkaKeyFormatAvroSchemaRegistryConnectionPtrType)(v)
}

func (*sourceKafkaKeyFormatAvroSchemaRegistryConnectionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceKafkaKeyFormatAvroSchemaRegistryConnection)(nil)).Elem()
}

func (i *sourceKafkaKeyFormatAvroSchemaRegistryConnectionPtrType) ToSourceKafkaKeyFormatAvroSchemaRegistryConnectionPtrOutput() SourceKafkaKeyFormatAvroSchemaRegistryConnectionPtrOutput {
	return i.ToSourceKafkaKeyFormatAvroSchemaRegistryConnectionPtrOutputWithContext(context.Background())
}

func (i *sourceKafkaKeyFormatAvroSchemaRegistryConnectionPtrType) ToSourceKafkaKeyFormatAvroSchemaRegistryConnectionPtrOutputWithContext(ctx context.Context) SourceKafkaKeyFormatAvroSchemaRegistryConnectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceKafkaKeyFormatAvroSchemaRegistryConnectionPtrOutput)
}

type SourceKafkaKeyFormatAvroSchemaRegistryConnectionOutput struct{ *pulumi.OutputState }

func (SourceKafkaKeyFormatAvroSchemaRegistryConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceKafkaKeyFormatAvroSchemaRegistryConnection)(nil)).Elem()
}

func (o SourceKafkaKeyFormatAvroSchemaRegistryConnectionOutput) ToSourceKafkaKeyFormatAvroSchemaRegistryConnectionOutput() SourceKafkaKeyFormatAvroSchemaRegistryConnectionOutput {
	return o
}

func (o SourceKafkaKeyFormatAvroSchemaRegistryConnectionOutput) ToSourceKafkaKeyFormatAvroSchemaRegistryConnectionOutputWithContext(ctx context.Context) SourceKafkaKeyFormatAvroSchemaRegistryConnectionOutput {
	return o
}

func (o SourceKafkaKeyFormatAvroSchemaRegistryConnectionOutput) ToSourceKafkaKeyFormatAvroSchemaRegistryConnectionPtrOutput() SourceKafkaKeyFormatAvroSchemaRegistryConnectionPtrOutput {
	return o.ToSourceKafkaKeyFormatAvroSchemaRegistryConnectionPtrOutputWithContext(context.Background())
}

func (o SourceKafkaKeyFormatAvroSchemaRegistryConnectionOutput) ToSourceKafkaKeyFormatAvroSchemaRegistryConnectionPtrOutputWithContext(ctx context.Context) SourceKafkaKeyFormatAvroSchemaRegistryConnectionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SourceKafkaKeyFormatAvroSchemaRegistryConnection) *SourceKafkaKeyFormatAvroSchemaRegistryConnection {
		return &v
	}).(SourceKafkaKeyFormatAvroSchemaRegistryConnectionPtrOutput)
}

// The identifier for the source database.
func (o SourceKafkaKeyFormatAvroSchemaRegistryConnectionOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceKafkaKeyFormatAvroSchemaRegistryConnection) *string { return v.DatabaseName }).(pulumi.StringPtrOutput)
}

// The identifier for the source.
func (o SourceKafkaKeyFormatAvroSchemaRegistryConnectionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SourceKafkaKeyFormatAvroSchemaRegistryConnection) string { return v.Name }).(pulumi.StringOutput)
}

// The identifier for the source schema.
func (o SourceKafkaKeyFormatAvroSchemaRegistryConnectionOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceKafkaKeyFormatAvroSchemaRegistryConnection) *string { return v.SchemaName }).(pulumi.StringPtrOutput)
}

type SourceKafkaKeyFormatAvroSchemaRegistryConnectionPtrOutput struct{ *pulumi.OutputState }

func (SourceKafkaKeyFormatAvroSchemaRegistryConnectionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceKafkaKeyFormatAvroSchemaRegistryConnection)(nil)).Elem()
}

func (o SourceKafkaKeyFormatAvroSchemaRegistryConnectionPtrOutput) ToSourceKafkaKeyFormatAvroSchemaRegistryConnectionPtrOutput() SourceKafkaKeyFormatAvroSchemaRegistryConnectionPtrOutput {
	return o
}

func (o SourceKafkaKeyFormatAvroSchemaRegistryConnectionPtrOutput) ToSourceKafkaKeyFormatAvroSchemaRegistryConnectionPtrOutputWithContext(ctx context.Context) SourceKafkaKeyFormatAvroSchemaRegistryConnectionPtrOutput {
	return o
}

func (o SourceKafkaKeyFormatAvroSchemaRegistryConnectionPtrOutput) Elem() SourceKafkaKeyFormatAvroSchemaRegistryConnectionOutput {
	return o.ApplyT(func(v *SourceKafkaKeyFormatAvroSchemaRegistryConnection) SourceKafkaKeyFormatAvroSchemaRegistryConnection {
		if v != nil {
			return *v
		}
		var ret SourceKafkaKeyFormatAvroSchemaRegistryConnection
		return ret
	}).(SourceKafkaKeyFormatAvroSchemaRegistryConnectionOutput)
}

// The identifier for the source database.
func (o SourceKafkaKeyFormatAvroSchemaRegistryConnectionPtrOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceKafkaKeyFormatAvroSchemaRegistryConnection) *string {
		if v == nil {
			return nil
		}
		return v.DatabaseName
	}).(pulumi.StringPtrOutput)
}

// The identifier for the source.
func (o SourceKafkaKeyFormatAvroSchemaRegistryConnectionPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceKafkaKeyFormatAvroSchemaRegistryConnection) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The identifier for the source schema.
func (o SourceKafkaKeyFormatAvroSchemaRegistryConnectionPtrOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceKafkaKeyFormatAvroSchemaRegistryConnection) *string {
		if v == nil {
			return nil
		}
		return v.SchemaName
	}).(pulumi.StringPtrOutput)
}

type SourceKafkaKeyFormatCsv struct {
	Column      *int     `pulumi:"column"`
	DelimitedBy *string  `pulumi:"delimitedBy"`
	Headers     []string `pulumi:"headers"`
}

// SourceKafkaKeyFormatCsvInput is an input type that accepts SourceKafkaKeyFormatCsvArgs and SourceKafkaKeyFormatCsvOutput values.
// You can construct a concrete instance of `SourceKafkaKeyFormatCsvInput` via:
//
//	SourceKafkaKeyFormatCsvArgs{...}
type SourceKafkaKeyFormatCsvInput interface {
	pulumi.Input

	ToSourceKafkaKeyFormatCsvOutput() SourceKafkaKeyFormatCsvOutput
	ToSourceKafkaKeyFormatCsvOutputWithContext(context.Context) SourceKafkaKeyFormatCsvOutput
}

type SourceKafkaKeyFormatCsvArgs struct {
	Column      pulumi.IntPtrInput      `pulumi:"column"`
	DelimitedBy pulumi.StringPtrInput   `pulumi:"delimitedBy"`
	Headers     pulumi.StringArrayInput `pulumi:"headers"`
}

func (SourceKafkaKeyFormatCsvArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceKafkaKeyFormatCsv)(nil)).Elem()
}

func (i SourceKafkaKeyFormatCsvArgs) ToSourceKafkaKeyFormatCsvOutput() SourceKafkaKeyFormatCsvOutput {
	return i.ToSourceKafkaKeyFormatCsvOutputWithContext(context.Background())
}

func (i SourceKafkaKeyFormatCsvArgs) ToSourceKafkaKeyFormatCsvOutputWithContext(ctx context.Context) SourceKafkaKeyFormatCsvOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceKafkaKeyFormatCsvOutput)
}

// SourceKafkaKeyFormatCsvArrayInput is an input type that accepts SourceKafkaKeyFormatCsvArray and SourceKafkaKeyFormatCsvArrayOutput values.
// You can construct a concrete instance of `SourceKafkaKeyFormatCsvArrayInput` via:
//
//	SourceKafkaKeyFormatCsvArray{ SourceKafkaKeyFormatCsvArgs{...} }
type SourceKafkaKeyFormatCsvArrayInput interface {
	pulumi.Input

	ToSourceKafkaKeyFormatCsvArrayOutput() SourceKafkaKeyFormatCsvArrayOutput
	ToSourceKafkaKeyFormatCsvArrayOutputWithContext(context.Context) SourceKafkaKeyFormatCsvArrayOutput
}

type SourceKafkaKeyFormatCsvArray []SourceKafkaKeyFormatCsvInput

func (SourceKafkaKeyFormatCsvArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SourceKafkaKeyFormatCsv)(nil)).Elem()
}

func (i SourceKafkaKeyFormatCsvArray) ToSourceKafkaKeyFormatCsvArrayOutput() SourceKafkaKeyFormatCsvArrayOutput {
	return i.ToSourceKafkaKeyFormatCsvArrayOutputWithContext(context.Background())
}

func (i SourceKafkaKeyFormatCsvArray) ToSourceKafkaKeyFormatCsvArrayOutputWithContext(ctx context.Context) SourceKafkaKeyFormatCsvArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceKafkaKeyFormatCsvArrayOutput)
}

type SourceKafkaKeyFormatCsvOutput struct{ *pulumi.OutputState }

func (SourceKafkaKeyFormatCsvOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceKafkaKeyFormatCsv)(nil)).Elem()
}

func (o SourceKafkaKeyFormatCsvOutput) ToSourceKafkaKeyFormatCsvOutput() SourceKafkaKeyFormatCsvOutput {
	return o
}

func (o SourceKafkaKeyFormatCsvOutput) ToSourceKafkaKeyFormatCsvOutputWithContext(ctx context.Context) SourceKafkaKeyFormatCsvOutput {
	return o
}

func (o SourceKafkaKeyFormatCsvOutput) Column() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SourceKafkaKeyFormatCsv) *int { return v.Column }).(pulumi.IntPtrOutput)
}

func (o SourceKafkaKeyFormatCsvOutput) DelimitedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceKafkaKeyFormatCsv) *string { return v.DelimitedBy }).(pulumi.StringPtrOutput)
}

func (o SourceKafkaKeyFormatCsvOutput) Headers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SourceKafkaKeyFormatCsv) []string { return v.Headers }).(pulumi.StringArrayOutput)
}

type SourceKafkaKeyFormatCsvArrayOutput struct{ *pulumi.OutputState }

func (SourceKafkaKeyFormatCsvArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SourceKafkaKeyFormatCsv)(nil)).Elem()
}

func (o SourceKafkaKeyFormatCsvArrayOutput) ToSourceKafkaKeyFormatCsvArrayOutput() SourceKafkaKeyFormatCsvArrayOutput {
	return o
}

func (o SourceKafkaKeyFormatCsvArrayOutput) ToSourceKafkaKeyFormatCsvArrayOutputWithContext(ctx context.Context) SourceKafkaKeyFormatCsvArrayOutput {
	return o
}

func (o SourceKafkaKeyFormatCsvArrayOutput) Index(i pulumi.IntInput) SourceKafkaKeyFormatCsvOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SourceKafkaKeyFormatCsv {
		return vs[0].([]SourceKafkaKeyFormatCsv)[vs[1].(int)]
	}).(SourceKafkaKeyFormatCsvOutput)
}

type SourceKafkaKeyFormatProtobuf struct {
	Message                  string                                               `pulumi:"message"`
	SchemaRegistryConnection SourceKafkaKeyFormatProtobufSchemaRegistryConnection `pulumi:"schemaRegistryConnection"`
}

// SourceKafkaKeyFormatProtobufInput is an input type that accepts SourceKafkaKeyFormatProtobufArgs and SourceKafkaKeyFormatProtobufOutput values.
// You can construct a concrete instance of `SourceKafkaKeyFormatProtobufInput` via:
//
//	SourceKafkaKeyFormatProtobufArgs{...}
type SourceKafkaKeyFormatProtobufInput interface {
	pulumi.Input

	ToSourceKafkaKeyFormatProtobufOutput() SourceKafkaKeyFormatProtobufOutput
	ToSourceKafkaKeyFormatProtobufOutputWithContext(context.Context) SourceKafkaKeyFormatProtobufOutput
}

type SourceKafkaKeyFormatProtobufArgs struct {
	Message                  pulumi.StringInput                                        `pulumi:"message"`
	SchemaRegistryConnection SourceKafkaKeyFormatProtobufSchemaRegistryConnectionInput `pulumi:"schemaRegistryConnection"`
}

func (SourceKafkaKeyFormatProtobufArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceKafkaKeyFormatProtobuf)(nil)).Elem()
}

func (i SourceKafkaKeyFormatProtobufArgs) ToSourceKafkaKeyFormatProtobufOutput() SourceKafkaKeyFormatProtobufOutput {
	return i.ToSourceKafkaKeyFormatProtobufOutputWithContext(context.Background())
}

func (i SourceKafkaKeyFormatProtobufArgs) ToSourceKafkaKeyFormatProtobufOutputWithContext(ctx context.Context) SourceKafkaKeyFormatProtobufOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceKafkaKeyFormatProtobufOutput)
}

func (i SourceKafkaKeyFormatProtobufArgs) ToSourceKafkaKeyFormatProtobufPtrOutput() SourceKafkaKeyFormatProtobufPtrOutput {
	return i.ToSourceKafkaKeyFormatProtobufPtrOutputWithContext(context.Background())
}

func (i SourceKafkaKeyFormatProtobufArgs) ToSourceKafkaKeyFormatProtobufPtrOutputWithContext(ctx context.Context) SourceKafkaKeyFormatProtobufPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceKafkaKeyFormatProtobufOutput).ToSourceKafkaKeyFormatProtobufPtrOutputWithContext(ctx)
}

// SourceKafkaKeyFormatProtobufPtrInput is an input type that accepts SourceKafkaKeyFormatProtobufArgs, SourceKafkaKeyFormatProtobufPtr and SourceKafkaKeyFormatProtobufPtrOutput values.
// You can construct a concrete instance of `SourceKafkaKeyFormatProtobufPtrInput` via:
//
//	        SourceKafkaKeyFormatProtobufArgs{...}
//
//	or:
//
//	        nil
type SourceKafkaKeyFormatProtobufPtrInput interface {
	pulumi.Input

	ToSourceKafkaKeyFormatProtobufPtrOutput() SourceKafkaKeyFormatProtobufPtrOutput
	ToSourceKafkaKeyFormatProtobufPtrOutputWithContext(context.Context) SourceKafkaKeyFormatProtobufPtrOutput
}

type sourceKafkaKeyFormatProtobufPtrType SourceKafkaKeyFormatProtobufArgs

func SourceKafkaKeyFormatProtobufPtr(v *SourceKafkaKeyFormatProtobufArgs) SourceKafkaKeyFormatProtobufPtrInput {
	return (*sourceKafkaKeyFormatProtobufPtrType)(v)
}

func (*sourceKafkaKeyFormatProtobufPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceKafkaKeyFormatProtobuf)(nil)).Elem()
}

func (i *sourceKafkaKeyFormatProtobufPtrType) ToSourceKafkaKeyFormatProtobufPtrOutput() SourceKafkaKeyFormatProtobufPtrOutput {
	return i.ToSourceKafkaKeyFormatProtobufPtrOutputWithContext(context.Background())
}

func (i *sourceKafkaKeyFormatProtobufPtrType) ToSourceKafkaKeyFormatProtobufPtrOutputWithContext(ctx context.Context) SourceKafkaKeyFormatProtobufPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceKafkaKeyFormatProtobufPtrOutput)
}

type SourceKafkaKeyFormatProtobufOutput struct{ *pulumi.OutputState }

func (SourceKafkaKeyFormatProtobufOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceKafkaKeyFormatProtobuf)(nil)).Elem()
}

func (o SourceKafkaKeyFormatProtobufOutput) ToSourceKafkaKeyFormatProtobufOutput() SourceKafkaKeyFormatProtobufOutput {
	return o
}

func (o SourceKafkaKeyFormatProtobufOutput) ToSourceKafkaKeyFormatProtobufOutputWithContext(ctx context.Context) SourceKafkaKeyFormatProtobufOutput {
	return o
}

func (o SourceKafkaKeyFormatProtobufOutput) ToSourceKafkaKeyFormatProtobufPtrOutput() SourceKafkaKeyFormatProtobufPtrOutput {
	return o.ToSourceKafkaKeyFormatProtobufPtrOutputWithContext(context.Background())
}

func (o SourceKafkaKeyFormatProtobufOutput) ToSourceKafkaKeyFormatProtobufPtrOutputWithContext(ctx context.Context) SourceKafkaKeyFormatProtobufPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SourceKafkaKeyFormatProtobuf) *SourceKafkaKeyFormatProtobuf {
		return &v
	}).(SourceKafkaKeyFormatProtobufPtrOutput)
}

func (o SourceKafkaKeyFormatProtobufOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v SourceKafkaKeyFormatProtobuf) string { return v.Message }).(pulumi.StringOutput)
}

func (o SourceKafkaKeyFormatProtobufOutput) SchemaRegistryConnection() SourceKafkaKeyFormatProtobufSchemaRegistryConnectionOutput {
	return o.ApplyT(func(v SourceKafkaKeyFormatProtobuf) SourceKafkaKeyFormatProtobufSchemaRegistryConnection {
		return v.SchemaRegistryConnection
	}).(SourceKafkaKeyFormatProtobufSchemaRegistryConnectionOutput)
}

type SourceKafkaKeyFormatProtobufPtrOutput struct{ *pulumi.OutputState }

func (SourceKafkaKeyFormatProtobufPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceKafkaKeyFormatProtobuf)(nil)).Elem()
}

func (o SourceKafkaKeyFormatProtobufPtrOutput) ToSourceKafkaKeyFormatProtobufPtrOutput() SourceKafkaKeyFormatProtobufPtrOutput {
	return o
}

func (o SourceKafkaKeyFormatProtobufPtrOutput) ToSourceKafkaKeyFormatProtobufPtrOutputWithContext(ctx context.Context) SourceKafkaKeyFormatProtobufPtrOutput {
	return o
}

func (o SourceKafkaKeyFormatProtobufPtrOutput) Elem() SourceKafkaKeyFormatProtobufOutput {
	return o.ApplyT(func(v *SourceKafkaKeyFormatProtobuf) SourceKafkaKeyFormatProtobuf {
		if v != nil {
			return *v
		}
		var ret SourceKafkaKeyFormatProtobuf
		return ret
	}).(SourceKafkaKeyFormatProtobufOutput)
}

func (o SourceKafkaKeyFormatProtobufPtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceKafkaKeyFormatProtobuf) *string {
		if v == nil {
			return nil
		}
		return &v.Message
	}).(pulumi.StringPtrOutput)
}

func (o SourceKafkaKeyFormatProtobufPtrOutput) SchemaRegistryConnection() SourceKafkaKeyFormatProtobufSchemaRegistryConnectionPtrOutput {
	return o.ApplyT(func(v *SourceKafkaKeyFormatProtobuf) *SourceKafkaKeyFormatProtobufSchemaRegistryConnection {
		if v == nil {
			return nil
		}
		return &v.SchemaRegistryConnection
	}).(SourceKafkaKeyFormatProtobufSchemaRegistryConnectionPtrOutput)
}

type SourceKafkaKeyFormatProtobufSchemaRegistryConnection struct {
	// The identifier for the source database.
	DatabaseName *string `pulumi:"databaseName"`
	// The identifier for the source.
	Name string `pulumi:"name"`
	// The identifier for the source schema.
	SchemaName *string `pulumi:"schemaName"`
}

// SourceKafkaKeyFormatProtobufSchemaRegistryConnectionInput is an input type that accepts SourceKafkaKeyFormatProtobufSchemaRegistryConnectionArgs and SourceKafkaKeyFormatProtobufSchemaRegistryConnectionOutput values.
// You can construct a concrete instance of `SourceKafkaKeyFormatProtobufSchemaRegistryConnectionInput` via:
//
//	SourceKafkaKeyFormatProtobufSchemaRegistryConnectionArgs{...}
type SourceKafkaKeyFormatProtobufSchemaRegistryConnectionInput interface {
	pulumi.Input

	ToSourceKafkaKeyFormatProtobufSchemaRegistryConnectionOutput() SourceKafkaKeyFormatProtobufSchemaRegistryConnectionOutput
	ToSourceKafkaKeyFormatProtobufSchemaRegistryConnectionOutputWithContext(context.Context) SourceKafkaKeyFormatProtobufSchemaRegistryConnectionOutput
}

type SourceKafkaKeyFormatProtobufSchemaRegistryConnectionArgs struct {
	// The identifier for the source database.
	DatabaseName pulumi.StringPtrInput `pulumi:"databaseName"`
	// The identifier for the source.
	Name pulumi.StringInput `pulumi:"name"`
	// The identifier for the source schema.
	SchemaName pulumi.StringPtrInput `pulumi:"schemaName"`
}

func (SourceKafkaKeyFormatProtobufSchemaRegistryConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceKafkaKeyFormatProtobufSchemaRegistryConnection)(nil)).Elem()
}

func (i SourceKafkaKeyFormatProtobufSchemaRegistryConnectionArgs) ToSourceKafkaKeyFormatProtobufSchemaRegistryConnectionOutput() SourceKafkaKeyFormatProtobufSchemaRegistryConnectionOutput {
	return i.ToSourceKafkaKeyFormatProtobufSchemaRegistryConnectionOutputWithContext(context.Background())
}

func (i SourceKafkaKeyFormatProtobufSchemaRegistryConnectionArgs) ToSourceKafkaKeyFormatProtobufSchemaRegistryConnectionOutputWithContext(ctx context.Context) SourceKafkaKeyFormatProtobufSchemaRegistryConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceKafkaKeyFormatProtobufSchemaRegistryConnectionOutput)
}

func (i SourceKafkaKeyFormatProtobufSchemaRegistryConnectionArgs) ToSourceKafkaKeyFormatProtobufSchemaRegistryConnectionPtrOutput() SourceKafkaKeyFormatProtobufSchemaRegistryConnectionPtrOutput {
	return i.ToSourceKafkaKeyFormatProtobufSchemaRegistryConnectionPtrOutputWithContext(context.Background())
}

func (i SourceKafkaKeyFormatProtobufSchemaRegistryConnectionArgs) ToSourceKafkaKeyFormatProtobufSchemaRegistryConnectionPtrOutputWithContext(ctx context.Context) SourceKafkaKeyFormatProtobufSchemaRegistryConnectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceKafkaKeyFormatProtobufSchemaRegistryConnectionOutput).ToSourceKafkaKeyFormatProtobufSchemaRegistryConnectionPtrOutputWithContext(ctx)
}

// SourceKafkaKeyFormatProtobufSchemaRegistryConnectionPtrInput is an input type that accepts SourceKafkaKeyFormatProtobufSchemaRegistryConnectionArgs, SourceKafkaKeyFormatProtobufSchemaRegistryConnectionPtr and SourceKafkaKeyFormatProtobufSchemaRegistryConnectionPtrOutput values.
// You can construct a concrete instance of `SourceKafkaKeyFormatProtobufSchemaRegistryConnectionPtrInput` via:
//
//	        SourceKafkaKeyFormatProtobufSchemaRegistryConnectionArgs{...}
//
//	or:
//
//	        nil
type SourceKafkaKeyFormatProtobufSchemaRegistryConnectionPtrInput interface {
	pulumi.Input

	ToSourceKafkaKeyFormatProtobufSchemaRegistryConnectionPtrOutput() SourceKafkaKeyFormatProtobufSchemaRegistryConnectionPtrOutput
	ToSourceKafkaKeyFormatProtobufSchemaRegistryConnectionPtrOutputWithContext(context.Context) SourceKafkaKeyFormatProtobufSchemaRegistryConnectionPtrOutput
}

type sourceKafkaKeyFormatProtobufSchemaRegistryConnectionPtrType SourceKafkaKeyFormatProtobufSchemaRegistryConnectionArgs

func SourceKafkaKeyFormatProtobufSchemaRegistryConnectionPtr(v *SourceKafkaKeyFormatProtobufSchemaRegistryConnectionArgs) SourceKafkaKeyFormatProtobufSchemaRegistryConnectionPtrInput {
	return (*sourceKafkaKeyFormatProtobufSchemaRegistryConnectionPtrType)(v)
}

func (*sourceKafkaKeyFormatProtobufSchemaRegistryConnectionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceKafkaKeyFormatProtobufSchemaRegistryConnection)(nil)).Elem()
}

func (i *sourceKafkaKeyFormatProtobufSchemaRegistryConnectionPtrType) ToSourceKafkaKeyFormatProtobufSchemaRegistryConnectionPtrOutput() SourceKafkaKeyFormatProtobufSchemaRegistryConnectionPtrOutput {
	return i.ToSourceKafkaKeyFormatProtobufSchemaRegistryConnectionPtrOutputWithContext(context.Background())
}

func (i *sourceKafkaKeyFormatProtobufSchemaRegistryConnectionPtrType) ToSourceKafkaKeyFormatProtobufSchemaRegistryConnectionPtrOutputWithContext(ctx context.Context) SourceKafkaKeyFormatProtobufSchemaRegistryConnectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceKafkaKeyFormatProtobufSchemaRegistryConnectionPtrOutput)
}

type SourceKafkaKeyFormatProtobufSchemaRegistryConnectionOutput struct{ *pulumi.OutputState }

func (SourceKafkaKeyFormatProtobufSchemaRegistryConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceKafkaKeyFormatProtobufSchemaRegistryConnection)(nil)).Elem()
}

func (o SourceKafkaKeyFormatProtobufSchemaRegistryConnectionOutput) ToSourceKafkaKeyFormatProtobufSchemaRegistryConnectionOutput() SourceKafkaKeyFormatProtobufSchemaRegistryConnectionOutput {
	return o
}

func (o SourceKafkaKeyFormatProtobufSchemaRegistryConnectionOutput) ToSourceKafkaKeyFormatProtobufSchemaRegistryConnectionOutputWithContext(ctx context.Context) SourceKafkaKeyFormatProtobufSchemaRegistryConnectionOutput {
	return o
}

func (o SourceKafkaKeyFormatProtobufSchemaRegistryConnectionOutput) ToSourceKafkaKeyFormatProtobufSchemaRegistryConnectionPtrOutput() SourceKafkaKeyFormatProtobufSchemaRegistryConnectionPtrOutput {
	return o.ToSourceKafkaKeyFormatProtobufSchemaRegistryConnectionPtrOutputWithContext(context.Background())
}

func (o SourceKafkaKeyFormatProtobufSchemaRegistryConnectionOutput) ToSourceKafkaKeyFormatProtobufSchemaRegistryConnectionPtrOutputWithContext(ctx context.Context) SourceKafkaKeyFormatProtobufSchemaRegistryConnectionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SourceKafkaKeyFormatProtobufSchemaRegistryConnection) *SourceKafkaKeyFormatProtobufSchemaRegistryConnection {
		return &v
	}).(SourceKafkaKeyFormatProtobufSchemaRegistryConnectionPtrOutput)
}

// The identifier for the source database.
func (o SourceKafkaKeyFormatProtobufSchemaRegistryConnectionOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceKafkaKeyFormatProtobufSchemaRegistryConnection) *string { return v.DatabaseName }).(pulumi.StringPtrOutput)
}

// The identifier for the source.
func (o SourceKafkaKeyFormatProtobufSchemaRegistryConnectionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SourceKafkaKeyFormatProtobufSchemaRegistryConnection) string { return v.Name }).(pulumi.StringOutput)
}

// The identifier for the source schema.
func (o SourceKafkaKeyFormatProtobufSchemaRegistryConnectionOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceKafkaKeyFormatProtobufSchemaRegistryConnection) *string { return v.SchemaName }).(pulumi.StringPtrOutput)
}

type SourceKafkaKeyFormatProtobufSchemaRegistryConnectionPtrOutput struct{ *pulumi.OutputState }

func (SourceKafkaKeyFormatProtobufSchemaRegistryConnectionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceKafkaKeyFormatProtobufSchemaRegistryConnection)(nil)).Elem()
}

func (o SourceKafkaKeyFormatProtobufSchemaRegistryConnectionPtrOutput) ToSourceKafkaKeyFormatProtobufSchemaRegistryConnectionPtrOutput() SourceKafkaKeyFormatProtobufSchemaRegistryConnectionPtrOutput {
	return o
}

func (o SourceKafkaKeyFormatProtobufSchemaRegistryConnectionPtrOutput) ToSourceKafkaKeyFormatProtobufSchemaRegistryConnectionPtrOutputWithContext(ctx context.Context) SourceKafkaKeyFormatProtobufSchemaRegistryConnectionPtrOutput {
	return o
}

func (o SourceKafkaKeyFormatProtobufSchemaRegistryConnectionPtrOutput) Elem() SourceKafkaKeyFormatProtobufSchemaRegistryConnectionOutput {
	return o.ApplyT(func(v *SourceKafkaKeyFormatProtobufSchemaRegistryConnection) SourceKafkaKeyFormatProtobufSchemaRegistryConnection {
		if v != nil {
			return *v
		}
		var ret SourceKafkaKeyFormatProtobufSchemaRegistryConnection
		return ret
	}).(SourceKafkaKeyFormatProtobufSchemaRegistryConnectionOutput)
}

// The identifier for the source database.
func (o SourceKafkaKeyFormatProtobufSchemaRegistryConnectionPtrOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceKafkaKeyFormatProtobufSchemaRegistryConnection) *string {
		if v == nil {
			return nil
		}
		return v.DatabaseName
	}).(pulumi.StringPtrOutput)
}

// The identifier for the source.
func (o SourceKafkaKeyFormatProtobufSchemaRegistryConnectionPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceKafkaKeyFormatProtobufSchemaRegistryConnection) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The identifier for the source schema.
func (o SourceKafkaKeyFormatProtobufSchemaRegistryConnectionPtrOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceKafkaKeyFormatProtobufSchemaRegistryConnection) *string {
		if v == nil {
			return nil
		}
		return v.SchemaName
	}).(pulumi.StringPtrOutput)
}

type SourceKafkaValueFormat struct {
	// Avro format.
	Avro *SourceKafkaValueFormatAvro `pulumi:"avro"`
	// CSV format.
	Csvs []SourceKafkaValueFormatCsv `pulumi:"csvs"`
	// JSON format.
	Json *bool `pulumi:"json"`
	// Protobuf format.
	Protobuf *SourceKafkaValueFormatProtobuf `pulumi:"protobuf"`
	// Text format.
	Text *bool `pulumi:"text"`
}

// SourceKafkaValueFormatInput is an input type that accepts SourceKafkaValueFormatArgs and SourceKafkaValueFormatOutput values.
// You can construct a concrete instance of `SourceKafkaValueFormatInput` via:
//
//	SourceKafkaValueFormatArgs{...}
type SourceKafkaValueFormatInput interface {
	pulumi.Input

	ToSourceKafkaValueFormatOutput() SourceKafkaValueFormatOutput
	ToSourceKafkaValueFormatOutputWithContext(context.Context) SourceKafkaValueFormatOutput
}

type SourceKafkaValueFormatArgs struct {
	// Avro format.
	Avro SourceKafkaValueFormatAvroPtrInput `pulumi:"avro"`
	// CSV format.
	Csvs SourceKafkaValueFormatCsvArrayInput `pulumi:"csvs"`
	// JSON format.
	Json pulumi.BoolPtrInput `pulumi:"json"`
	// Protobuf format.
	Protobuf SourceKafkaValueFormatProtobufPtrInput `pulumi:"protobuf"`
	// Text format.
	Text pulumi.BoolPtrInput `pulumi:"text"`
}

func (SourceKafkaValueFormatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceKafkaValueFormat)(nil)).Elem()
}

func (i SourceKafkaValueFormatArgs) ToSourceKafkaValueFormatOutput() SourceKafkaValueFormatOutput {
	return i.ToSourceKafkaValueFormatOutputWithContext(context.Background())
}

func (i SourceKafkaValueFormatArgs) ToSourceKafkaValueFormatOutputWithContext(ctx context.Context) SourceKafkaValueFormatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceKafkaValueFormatOutput)
}

func (i SourceKafkaValueFormatArgs) ToSourceKafkaValueFormatPtrOutput() SourceKafkaValueFormatPtrOutput {
	return i.ToSourceKafkaValueFormatPtrOutputWithContext(context.Background())
}

func (i SourceKafkaValueFormatArgs) ToSourceKafkaValueFormatPtrOutputWithContext(ctx context.Context) SourceKafkaValueFormatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceKafkaValueFormatOutput).ToSourceKafkaValueFormatPtrOutputWithContext(ctx)
}

// SourceKafkaValueFormatPtrInput is an input type that accepts SourceKafkaValueFormatArgs, SourceKafkaValueFormatPtr and SourceKafkaValueFormatPtrOutput values.
// You can construct a concrete instance of `SourceKafkaValueFormatPtrInput` via:
//
//	        SourceKafkaValueFormatArgs{...}
//
//	or:
//
//	        nil
type SourceKafkaValueFormatPtrInput interface {
	pulumi.Input

	ToSourceKafkaValueFormatPtrOutput() SourceKafkaValueFormatPtrOutput
	ToSourceKafkaValueFormatPtrOutputWithContext(context.Context) SourceKafkaValueFormatPtrOutput
}

type sourceKafkaValueFormatPtrType SourceKafkaValueFormatArgs

func SourceKafkaValueFormatPtr(v *SourceKafkaValueFormatArgs) SourceKafkaValueFormatPtrInput {
	return (*sourceKafkaValueFormatPtrType)(v)
}

func (*sourceKafkaValueFormatPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceKafkaValueFormat)(nil)).Elem()
}

func (i *sourceKafkaValueFormatPtrType) ToSourceKafkaValueFormatPtrOutput() SourceKafkaValueFormatPtrOutput {
	return i.ToSourceKafkaValueFormatPtrOutputWithContext(context.Background())
}

func (i *sourceKafkaValueFormatPtrType) ToSourceKafkaValueFormatPtrOutputWithContext(ctx context.Context) SourceKafkaValueFormatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceKafkaValueFormatPtrOutput)
}

type SourceKafkaValueFormatOutput struct{ *pulumi.OutputState }

func (SourceKafkaValueFormatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceKafkaValueFormat)(nil)).Elem()
}

func (o SourceKafkaValueFormatOutput) ToSourceKafkaValueFormatOutput() SourceKafkaValueFormatOutput {
	return o
}

func (o SourceKafkaValueFormatOutput) ToSourceKafkaValueFormatOutputWithContext(ctx context.Context) SourceKafkaValueFormatOutput {
	return o
}

func (o SourceKafkaValueFormatOutput) ToSourceKafkaValueFormatPtrOutput() SourceKafkaValueFormatPtrOutput {
	return o.ToSourceKafkaValueFormatPtrOutputWithContext(context.Background())
}

func (o SourceKafkaValueFormatOutput) ToSourceKafkaValueFormatPtrOutputWithContext(ctx context.Context) SourceKafkaValueFormatPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SourceKafkaValueFormat) *SourceKafkaValueFormat {
		return &v
	}).(SourceKafkaValueFormatPtrOutput)
}

// Avro format.
func (o SourceKafkaValueFormatOutput) Avro() SourceKafkaValueFormatAvroPtrOutput {
	return o.ApplyT(func(v SourceKafkaValueFormat) *SourceKafkaValueFormatAvro { return v.Avro }).(SourceKafkaValueFormatAvroPtrOutput)
}

// CSV format.
func (o SourceKafkaValueFormatOutput) Csvs() SourceKafkaValueFormatCsvArrayOutput {
	return o.ApplyT(func(v SourceKafkaValueFormat) []SourceKafkaValueFormatCsv { return v.Csvs }).(SourceKafkaValueFormatCsvArrayOutput)
}

// JSON format.
func (o SourceKafkaValueFormatOutput) Json() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SourceKafkaValueFormat) *bool { return v.Json }).(pulumi.BoolPtrOutput)
}

// Protobuf format.
func (o SourceKafkaValueFormatOutput) Protobuf() SourceKafkaValueFormatProtobufPtrOutput {
	return o.ApplyT(func(v SourceKafkaValueFormat) *SourceKafkaValueFormatProtobuf { return v.Protobuf }).(SourceKafkaValueFormatProtobufPtrOutput)
}

// Text format.
func (o SourceKafkaValueFormatOutput) Text() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SourceKafkaValueFormat) *bool { return v.Text }).(pulumi.BoolPtrOutput)
}

type SourceKafkaValueFormatPtrOutput struct{ *pulumi.OutputState }

func (SourceKafkaValueFormatPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceKafkaValueFormat)(nil)).Elem()
}

func (o SourceKafkaValueFormatPtrOutput) ToSourceKafkaValueFormatPtrOutput() SourceKafkaValueFormatPtrOutput {
	return o
}

func (o SourceKafkaValueFormatPtrOutput) ToSourceKafkaValueFormatPtrOutputWithContext(ctx context.Context) SourceKafkaValueFormatPtrOutput {
	return o
}

func (o SourceKafkaValueFormatPtrOutput) Elem() SourceKafkaValueFormatOutput {
	return o.ApplyT(func(v *SourceKafkaValueFormat) SourceKafkaValueFormat {
		if v != nil {
			return *v
		}
		var ret SourceKafkaValueFormat
		return ret
	}).(SourceKafkaValueFormatOutput)
}

// Avro format.
func (o SourceKafkaValueFormatPtrOutput) Avro() SourceKafkaValueFormatAvroPtrOutput {
	return o.ApplyT(func(v *SourceKafkaValueFormat) *SourceKafkaValueFormatAvro {
		if v == nil {
			return nil
		}
		return v.Avro
	}).(SourceKafkaValueFormatAvroPtrOutput)
}

// CSV format.
func (o SourceKafkaValueFormatPtrOutput) Csvs() SourceKafkaValueFormatCsvArrayOutput {
	return o.ApplyT(func(v *SourceKafkaValueFormat) []SourceKafkaValueFormatCsv {
		if v == nil {
			return nil
		}
		return v.Csvs
	}).(SourceKafkaValueFormatCsvArrayOutput)
}

// JSON format.
func (o SourceKafkaValueFormatPtrOutput) Json() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SourceKafkaValueFormat) *bool {
		if v == nil {
			return nil
		}
		return v.Json
	}).(pulumi.BoolPtrOutput)
}

// Protobuf format.
func (o SourceKafkaValueFormatPtrOutput) Protobuf() SourceKafkaValueFormatProtobufPtrOutput {
	return o.ApplyT(func(v *SourceKafkaValueFormat) *SourceKafkaValueFormatProtobuf {
		if v == nil {
			return nil
		}
		return v.Protobuf
	}).(SourceKafkaValueFormatProtobufPtrOutput)
}

// Text format.
func (o SourceKafkaValueFormatPtrOutput) Text() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SourceKafkaValueFormat) *bool {
		if v == nil {
			return nil
		}
		return v.Text
	}).(pulumi.BoolPtrOutput)
}

type SourceKafkaValueFormatAvro struct {
	KeyStrategy              *string                                            `pulumi:"keyStrategy"`
	SchemaRegistryConnection SourceKafkaValueFormatAvroSchemaRegistryConnection `pulumi:"schemaRegistryConnection"`
	ValueStrategy            *string                                            `pulumi:"valueStrategy"`
}

// SourceKafkaValueFormatAvroInput is an input type that accepts SourceKafkaValueFormatAvroArgs and SourceKafkaValueFormatAvroOutput values.
// You can construct a concrete instance of `SourceKafkaValueFormatAvroInput` via:
//
//	SourceKafkaValueFormatAvroArgs{...}
type SourceKafkaValueFormatAvroInput interface {
	pulumi.Input

	ToSourceKafkaValueFormatAvroOutput() SourceKafkaValueFormatAvroOutput
	ToSourceKafkaValueFormatAvroOutputWithContext(context.Context) SourceKafkaValueFormatAvroOutput
}

type SourceKafkaValueFormatAvroArgs struct {
	KeyStrategy              pulumi.StringPtrInput                                   `pulumi:"keyStrategy"`
	SchemaRegistryConnection SourceKafkaValueFormatAvroSchemaRegistryConnectionInput `pulumi:"schemaRegistryConnection"`
	ValueStrategy            pulumi.StringPtrInput                                   `pulumi:"valueStrategy"`
}

func (SourceKafkaValueFormatAvroArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceKafkaValueFormatAvro)(nil)).Elem()
}

func (i SourceKafkaValueFormatAvroArgs) ToSourceKafkaValueFormatAvroOutput() SourceKafkaValueFormatAvroOutput {
	return i.ToSourceKafkaValueFormatAvroOutputWithContext(context.Background())
}

func (i SourceKafkaValueFormatAvroArgs) ToSourceKafkaValueFormatAvroOutputWithContext(ctx context.Context) SourceKafkaValueFormatAvroOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceKafkaValueFormatAvroOutput)
}

func (i SourceKafkaValueFormatAvroArgs) ToSourceKafkaValueFormatAvroPtrOutput() SourceKafkaValueFormatAvroPtrOutput {
	return i.ToSourceKafkaValueFormatAvroPtrOutputWithContext(context.Background())
}

func (i SourceKafkaValueFormatAvroArgs) ToSourceKafkaValueFormatAvroPtrOutputWithContext(ctx context.Context) SourceKafkaValueFormatAvroPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceKafkaValueFormatAvroOutput).ToSourceKafkaValueFormatAvroPtrOutputWithContext(ctx)
}

// SourceKafkaValueFormatAvroPtrInput is an input type that accepts SourceKafkaValueFormatAvroArgs, SourceKafkaValueFormatAvroPtr and SourceKafkaValueFormatAvroPtrOutput values.
// You can construct a concrete instance of `SourceKafkaValueFormatAvroPtrInput` via:
//
//	        SourceKafkaValueFormatAvroArgs{...}
//
//	or:
//
//	        nil
type SourceKafkaValueFormatAvroPtrInput interface {
	pulumi.Input

	ToSourceKafkaValueFormatAvroPtrOutput() SourceKafkaValueFormatAvroPtrOutput
	ToSourceKafkaValueFormatAvroPtrOutputWithContext(context.Context) SourceKafkaValueFormatAvroPtrOutput
}

type sourceKafkaValueFormatAvroPtrType SourceKafkaValueFormatAvroArgs

func SourceKafkaValueFormatAvroPtr(v *SourceKafkaValueFormatAvroArgs) SourceKafkaValueFormatAvroPtrInput {
	return (*sourceKafkaValueFormatAvroPtrType)(v)
}

func (*sourceKafkaValueFormatAvroPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceKafkaValueFormatAvro)(nil)).Elem()
}

func (i *sourceKafkaValueFormatAvroPtrType) ToSourceKafkaValueFormatAvroPtrOutput() SourceKafkaValueFormatAvroPtrOutput {
	return i.ToSourceKafkaValueFormatAvroPtrOutputWithContext(context.Background())
}

func (i *sourceKafkaValueFormatAvroPtrType) ToSourceKafkaValueFormatAvroPtrOutputWithContext(ctx context.Context) SourceKafkaValueFormatAvroPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceKafkaValueFormatAvroPtrOutput)
}

type SourceKafkaValueFormatAvroOutput struct{ *pulumi.OutputState }

func (SourceKafkaValueFormatAvroOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceKafkaValueFormatAvro)(nil)).Elem()
}

func (o SourceKafkaValueFormatAvroOutput) ToSourceKafkaValueFormatAvroOutput() SourceKafkaValueFormatAvroOutput {
	return o
}

func (o SourceKafkaValueFormatAvroOutput) ToSourceKafkaValueFormatAvroOutputWithContext(ctx context.Context) SourceKafkaValueFormatAvroOutput {
	return o
}

func (o SourceKafkaValueFormatAvroOutput) ToSourceKafkaValueFormatAvroPtrOutput() SourceKafkaValueFormatAvroPtrOutput {
	return o.ToSourceKafkaValueFormatAvroPtrOutputWithContext(context.Background())
}

func (o SourceKafkaValueFormatAvroOutput) ToSourceKafkaValueFormatAvroPtrOutputWithContext(ctx context.Context) SourceKafkaValueFormatAvroPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SourceKafkaValueFormatAvro) *SourceKafkaValueFormatAvro {
		return &v
	}).(SourceKafkaValueFormatAvroPtrOutput)
}

func (o SourceKafkaValueFormatAvroOutput) KeyStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceKafkaValueFormatAvro) *string { return v.KeyStrategy }).(pulumi.StringPtrOutput)
}

func (o SourceKafkaValueFormatAvroOutput) SchemaRegistryConnection() SourceKafkaValueFormatAvroSchemaRegistryConnectionOutput {
	return o.ApplyT(func(v SourceKafkaValueFormatAvro) SourceKafkaValueFormatAvroSchemaRegistryConnection {
		return v.SchemaRegistryConnection
	}).(SourceKafkaValueFormatAvroSchemaRegistryConnectionOutput)
}

func (o SourceKafkaValueFormatAvroOutput) ValueStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceKafkaValueFormatAvro) *string { return v.ValueStrategy }).(pulumi.StringPtrOutput)
}

type SourceKafkaValueFormatAvroPtrOutput struct{ *pulumi.OutputState }

func (SourceKafkaValueFormatAvroPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceKafkaValueFormatAvro)(nil)).Elem()
}

func (o SourceKafkaValueFormatAvroPtrOutput) ToSourceKafkaValueFormatAvroPtrOutput() SourceKafkaValueFormatAvroPtrOutput {
	return o
}

func (o SourceKafkaValueFormatAvroPtrOutput) ToSourceKafkaValueFormatAvroPtrOutputWithContext(ctx context.Context) SourceKafkaValueFormatAvroPtrOutput {
	return o
}

func (o SourceKafkaValueFormatAvroPtrOutput) Elem() SourceKafkaValueFormatAvroOutput {
	return o.ApplyT(func(v *SourceKafkaValueFormatAvro) SourceKafkaValueFormatAvro {
		if v != nil {
			return *v
		}
		var ret SourceKafkaValueFormatAvro
		return ret
	}).(SourceKafkaValueFormatAvroOutput)
}

func (o SourceKafkaValueFormatAvroPtrOutput) KeyStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceKafkaValueFormatAvro) *string {
		if v == nil {
			return nil
		}
		return v.KeyStrategy
	}).(pulumi.StringPtrOutput)
}

func (o SourceKafkaValueFormatAvroPtrOutput) SchemaRegistryConnection() SourceKafkaValueFormatAvroSchemaRegistryConnectionPtrOutput {
	return o.ApplyT(func(v *SourceKafkaValueFormatAvro) *SourceKafkaValueFormatAvroSchemaRegistryConnection {
		if v == nil {
			return nil
		}
		return &v.SchemaRegistryConnection
	}).(SourceKafkaValueFormatAvroSchemaRegistryConnectionPtrOutput)
}

func (o SourceKafkaValueFormatAvroPtrOutput) ValueStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceKafkaValueFormatAvro) *string {
		if v == nil {
			return nil
		}
		return v.ValueStrategy
	}).(pulumi.StringPtrOutput)
}

type SourceKafkaValueFormatAvroSchemaRegistryConnection struct {
	// The identifier for the source database.
	DatabaseName *string `pulumi:"databaseName"`
	// The identifier for the source.
	Name string `pulumi:"name"`
	// The identifier for the source schema.
	SchemaName *string `pulumi:"schemaName"`
}

// SourceKafkaValueFormatAvroSchemaRegistryConnectionInput is an input type that accepts SourceKafkaValueFormatAvroSchemaRegistryConnectionArgs and SourceKafkaValueFormatAvroSchemaRegistryConnectionOutput values.
// You can construct a concrete instance of `SourceKafkaValueFormatAvroSchemaRegistryConnectionInput` via:
//
//	SourceKafkaValueFormatAvroSchemaRegistryConnectionArgs{...}
type SourceKafkaValueFormatAvroSchemaRegistryConnectionInput interface {
	pulumi.Input

	ToSourceKafkaValueFormatAvroSchemaRegistryConnectionOutput() SourceKafkaValueFormatAvroSchemaRegistryConnectionOutput
	ToSourceKafkaValueFormatAvroSchemaRegistryConnectionOutputWithContext(context.Context) SourceKafkaValueFormatAvroSchemaRegistryConnectionOutput
}

type SourceKafkaValueFormatAvroSchemaRegistryConnectionArgs struct {
	// The identifier for the source database.
	DatabaseName pulumi.StringPtrInput `pulumi:"databaseName"`
	// The identifier for the source.
	Name pulumi.StringInput `pulumi:"name"`
	// The identifier for the source schema.
	SchemaName pulumi.StringPtrInput `pulumi:"schemaName"`
}

func (SourceKafkaValueFormatAvroSchemaRegistryConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceKafkaValueFormatAvroSchemaRegistryConnection)(nil)).Elem()
}

func (i SourceKafkaValueFormatAvroSchemaRegistryConnectionArgs) ToSourceKafkaValueFormatAvroSchemaRegistryConnectionOutput() SourceKafkaValueFormatAvroSchemaRegistryConnectionOutput {
	return i.ToSourceKafkaValueFormatAvroSchemaRegistryConnectionOutputWithContext(context.Background())
}

func (i SourceKafkaValueFormatAvroSchemaRegistryConnectionArgs) ToSourceKafkaValueFormatAvroSchemaRegistryConnectionOutputWithContext(ctx context.Context) SourceKafkaValueFormatAvroSchemaRegistryConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceKafkaValueFormatAvroSchemaRegistryConnectionOutput)
}

func (i SourceKafkaValueFormatAvroSchemaRegistryConnectionArgs) ToSourceKafkaValueFormatAvroSchemaRegistryConnectionPtrOutput() SourceKafkaValueFormatAvroSchemaRegistryConnectionPtrOutput {
	return i.ToSourceKafkaValueFormatAvroSchemaRegistryConnectionPtrOutputWithContext(context.Background())
}

func (i SourceKafkaValueFormatAvroSchemaRegistryConnectionArgs) ToSourceKafkaValueFormatAvroSchemaRegistryConnectionPtrOutputWithContext(ctx context.Context) SourceKafkaValueFormatAvroSchemaRegistryConnectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceKafkaValueFormatAvroSchemaRegistryConnectionOutput).ToSourceKafkaValueFormatAvroSchemaRegistryConnectionPtrOutputWithContext(ctx)
}

// SourceKafkaValueFormatAvroSchemaRegistryConnectionPtrInput is an input type that accepts SourceKafkaValueFormatAvroSchemaRegistryConnectionArgs, SourceKafkaValueFormatAvroSchemaRegistryConnectionPtr and SourceKafkaValueFormatAvroSchemaRegistryConnectionPtrOutput values.
// You can construct a concrete instance of `SourceKafkaValueFormatAvroSchemaRegistryConnectionPtrInput` via:
//
//	        SourceKafkaValueFormatAvroSchemaRegistryConnectionArgs{...}
//
//	or:
//
//	        nil
type SourceKafkaValueFormatAvroSchemaRegistryConnectionPtrInput interface {
	pulumi.Input

	ToSourceKafkaValueFormatAvroSchemaRegistryConnectionPtrOutput() SourceKafkaValueFormatAvroSchemaRegistryConnectionPtrOutput
	ToSourceKafkaValueFormatAvroSchemaRegistryConnectionPtrOutputWithContext(context.Context) SourceKafkaValueFormatAvroSchemaRegistryConnectionPtrOutput
}

type sourceKafkaValueFormatAvroSchemaRegistryConnectionPtrType SourceKafkaValueFormatAvroSchemaRegistryConnectionArgs

func SourceKafkaValueFormatAvroSchemaRegistryConnectionPtr(v *SourceKafkaValueFormatAvroSchemaRegistryConnectionArgs) SourceKafkaValueFormatAvroSchemaRegistryConnectionPtrInput {
	return (*sourceKafkaValueFormatAvroSchemaRegistryConnectionPtrType)(v)
}

func (*sourceKafkaValueFormatAvroSchemaRegistryConnectionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceKafkaValueFormatAvroSchemaRegistryConnection)(nil)).Elem()
}

func (i *sourceKafkaValueFormatAvroSchemaRegistryConnectionPtrType) ToSourceKafkaValueFormatAvroSchemaRegistryConnectionPtrOutput() SourceKafkaValueFormatAvroSchemaRegistryConnectionPtrOutput {
	return i.ToSourceKafkaValueFormatAvroSchemaRegistryConnectionPtrOutputWithContext(context.Background())
}

func (i *sourceKafkaValueFormatAvroSchemaRegistryConnectionPtrType) ToSourceKafkaValueFormatAvroSchemaRegistryConnectionPtrOutputWithContext(ctx context.Context) SourceKafkaValueFormatAvroSchemaRegistryConnectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceKafkaValueFormatAvroSchemaRegistryConnectionPtrOutput)
}

type SourceKafkaValueFormatAvroSchemaRegistryConnectionOutput struct{ *pulumi.OutputState }

func (SourceKafkaValueFormatAvroSchemaRegistryConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceKafkaValueFormatAvroSchemaRegistryConnection)(nil)).Elem()
}

func (o SourceKafkaValueFormatAvroSchemaRegistryConnectionOutput) ToSourceKafkaValueFormatAvroSchemaRegistryConnectionOutput() SourceKafkaValueFormatAvroSchemaRegistryConnectionOutput {
	return o
}

func (o SourceKafkaValueFormatAvroSchemaRegistryConnectionOutput) ToSourceKafkaValueFormatAvroSchemaRegistryConnectionOutputWithContext(ctx context.Context) SourceKafkaValueFormatAvroSchemaRegistryConnectionOutput {
	return o
}

func (o SourceKafkaValueFormatAvroSchemaRegistryConnectionOutput) ToSourceKafkaValueFormatAvroSchemaRegistryConnectionPtrOutput() SourceKafkaValueFormatAvroSchemaRegistryConnectionPtrOutput {
	return o.ToSourceKafkaValueFormatAvroSchemaRegistryConnectionPtrOutputWithContext(context.Background())
}

func (o SourceKafkaValueFormatAvroSchemaRegistryConnectionOutput) ToSourceKafkaValueFormatAvroSchemaRegistryConnectionPtrOutputWithContext(ctx context.Context) SourceKafkaValueFormatAvroSchemaRegistryConnectionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SourceKafkaValueFormatAvroSchemaRegistryConnection) *SourceKafkaValueFormatAvroSchemaRegistryConnection {
		return &v
	}).(SourceKafkaValueFormatAvroSchemaRegistryConnectionPtrOutput)
}

// The identifier for the source database.
func (o SourceKafkaValueFormatAvroSchemaRegistryConnectionOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceKafkaValueFormatAvroSchemaRegistryConnection) *string { return v.DatabaseName }).(pulumi.StringPtrOutput)
}

// The identifier for the source.
func (o SourceKafkaValueFormatAvroSchemaRegistryConnectionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SourceKafkaValueFormatAvroSchemaRegistryConnection) string { return v.Name }).(pulumi.StringOutput)
}

// The identifier for the source schema.
func (o SourceKafkaValueFormatAvroSchemaRegistryConnectionOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceKafkaValueFormatAvroSchemaRegistryConnection) *string { return v.SchemaName }).(pulumi.StringPtrOutput)
}

type SourceKafkaValueFormatAvroSchemaRegistryConnectionPtrOutput struct{ *pulumi.OutputState }

func (SourceKafkaValueFormatAvroSchemaRegistryConnectionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceKafkaValueFormatAvroSchemaRegistryConnection)(nil)).Elem()
}

func (o SourceKafkaValueFormatAvroSchemaRegistryConnectionPtrOutput) ToSourceKafkaValueFormatAvroSchemaRegistryConnectionPtrOutput() SourceKafkaValueFormatAvroSchemaRegistryConnectionPtrOutput {
	return o
}

func (o SourceKafkaValueFormatAvroSchemaRegistryConnectionPtrOutput) ToSourceKafkaValueFormatAvroSchemaRegistryConnectionPtrOutputWithContext(ctx context.Context) SourceKafkaValueFormatAvroSchemaRegistryConnectionPtrOutput {
	return o
}

func (o SourceKafkaValueFormatAvroSchemaRegistryConnectionPtrOutput) Elem() SourceKafkaValueFormatAvroSchemaRegistryConnectionOutput {
	return o.ApplyT(func(v *SourceKafkaValueFormatAvroSchemaRegistryConnection) SourceKafkaValueFormatAvroSchemaRegistryConnection {
		if v != nil {
			return *v
		}
		var ret SourceKafkaValueFormatAvroSchemaRegistryConnection
		return ret
	}).(SourceKafkaValueFormatAvroSchemaRegistryConnectionOutput)
}

// The identifier for the source database.
func (o SourceKafkaValueFormatAvroSchemaRegistryConnectionPtrOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceKafkaValueFormatAvroSchemaRegistryConnection) *string {
		if v == nil {
			return nil
		}
		return v.DatabaseName
	}).(pulumi.StringPtrOutput)
}

// The identifier for the source.
func (o SourceKafkaValueFormatAvroSchemaRegistryConnectionPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceKafkaValueFormatAvroSchemaRegistryConnection) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The identifier for the source schema.
func (o SourceKafkaValueFormatAvroSchemaRegistryConnectionPtrOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceKafkaValueFormatAvroSchemaRegistryConnection) *string {
		if v == nil {
			return nil
		}
		return v.SchemaName
	}).(pulumi.StringPtrOutput)
}

type SourceKafkaValueFormatCsv struct {
	Column      *int     `pulumi:"column"`
	DelimitedBy *string  `pulumi:"delimitedBy"`
	Headers     []string `pulumi:"headers"`
}

// SourceKafkaValueFormatCsvInput is an input type that accepts SourceKafkaValueFormatCsvArgs and SourceKafkaValueFormatCsvOutput values.
// You can construct a concrete instance of `SourceKafkaValueFormatCsvInput` via:
//
//	SourceKafkaValueFormatCsvArgs{...}
type SourceKafkaValueFormatCsvInput interface {
	pulumi.Input

	ToSourceKafkaValueFormatCsvOutput() SourceKafkaValueFormatCsvOutput
	ToSourceKafkaValueFormatCsvOutputWithContext(context.Context) SourceKafkaValueFormatCsvOutput
}

type SourceKafkaValueFormatCsvArgs struct {
	Column      pulumi.IntPtrInput      `pulumi:"column"`
	DelimitedBy pulumi.StringPtrInput   `pulumi:"delimitedBy"`
	Headers     pulumi.StringArrayInput `pulumi:"headers"`
}

func (SourceKafkaValueFormatCsvArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceKafkaValueFormatCsv)(nil)).Elem()
}

func (i SourceKafkaValueFormatCsvArgs) ToSourceKafkaValueFormatCsvOutput() SourceKafkaValueFormatCsvOutput {
	return i.ToSourceKafkaValueFormatCsvOutputWithContext(context.Background())
}

func (i SourceKafkaValueFormatCsvArgs) ToSourceKafkaValueFormatCsvOutputWithContext(ctx context.Context) SourceKafkaValueFormatCsvOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceKafkaValueFormatCsvOutput)
}

// SourceKafkaValueFormatCsvArrayInput is an input type that accepts SourceKafkaValueFormatCsvArray and SourceKafkaValueFormatCsvArrayOutput values.
// You can construct a concrete instance of `SourceKafkaValueFormatCsvArrayInput` via:
//
//	SourceKafkaValueFormatCsvArray{ SourceKafkaValueFormatCsvArgs{...} }
type SourceKafkaValueFormatCsvArrayInput interface {
	pulumi.Input

	ToSourceKafkaValueFormatCsvArrayOutput() SourceKafkaValueFormatCsvArrayOutput
	ToSourceKafkaValueFormatCsvArrayOutputWithContext(context.Context) SourceKafkaValueFormatCsvArrayOutput
}

type SourceKafkaValueFormatCsvArray []SourceKafkaValueFormatCsvInput

func (SourceKafkaValueFormatCsvArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SourceKafkaValueFormatCsv)(nil)).Elem()
}

func (i SourceKafkaValueFormatCsvArray) ToSourceKafkaValueFormatCsvArrayOutput() SourceKafkaValueFormatCsvArrayOutput {
	return i.ToSourceKafkaValueFormatCsvArrayOutputWithContext(context.Background())
}

func (i SourceKafkaValueFormatCsvArray) ToSourceKafkaValueFormatCsvArrayOutputWithContext(ctx context.Context) SourceKafkaValueFormatCsvArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceKafkaValueFormatCsvArrayOutput)
}

type SourceKafkaValueFormatCsvOutput struct{ *pulumi.OutputState }

func (SourceKafkaValueFormatCsvOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceKafkaValueFormatCsv)(nil)).Elem()
}

func (o SourceKafkaValueFormatCsvOutput) ToSourceKafkaValueFormatCsvOutput() SourceKafkaValueFormatCsvOutput {
	return o
}

func (o SourceKafkaValueFormatCsvOutput) ToSourceKafkaValueFormatCsvOutputWithContext(ctx context.Context) SourceKafkaValueFormatCsvOutput {
	return o
}

func (o SourceKafkaValueFormatCsvOutput) Column() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SourceKafkaValueFormatCsv) *int { return v.Column }).(pulumi.IntPtrOutput)
}

func (o SourceKafkaValueFormatCsvOutput) DelimitedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceKafkaValueFormatCsv) *string { return v.DelimitedBy }).(pulumi.StringPtrOutput)
}

func (o SourceKafkaValueFormatCsvOutput) Headers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SourceKafkaValueFormatCsv) []string { return v.Headers }).(pulumi.StringArrayOutput)
}

type SourceKafkaValueFormatCsvArrayOutput struct{ *pulumi.OutputState }

func (SourceKafkaValueFormatCsvArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SourceKafkaValueFormatCsv)(nil)).Elem()
}

func (o SourceKafkaValueFormatCsvArrayOutput) ToSourceKafkaValueFormatCsvArrayOutput() SourceKafkaValueFormatCsvArrayOutput {
	return o
}

func (o SourceKafkaValueFormatCsvArrayOutput) ToSourceKafkaValueFormatCsvArrayOutputWithContext(ctx context.Context) SourceKafkaValueFormatCsvArrayOutput {
	return o
}

func (o SourceKafkaValueFormatCsvArrayOutput) Index(i pulumi.IntInput) SourceKafkaValueFormatCsvOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SourceKafkaValueFormatCsv {
		return vs[0].([]SourceKafkaValueFormatCsv)[vs[1].(int)]
	}).(SourceKafkaValueFormatCsvOutput)
}

type SourceKafkaValueFormatProtobuf struct {
	Message                  string                                                 `pulumi:"message"`
	SchemaRegistryConnection SourceKafkaValueFormatProtobufSchemaRegistryConnection `pulumi:"schemaRegistryConnection"`
}

// SourceKafkaValueFormatProtobufInput is an input type that accepts SourceKafkaValueFormatProtobufArgs and SourceKafkaValueFormatProtobufOutput values.
// You can construct a concrete instance of `SourceKafkaValueFormatProtobufInput` via:
//
//	SourceKafkaValueFormatProtobufArgs{...}
type SourceKafkaValueFormatProtobufInput interface {
	pulumi.Input

	ToSourceKafkaValueFormatProtobufOutput() SourceKafkaValueFormatProtobufOutput
	ToSourceKafkaValueFormatProtobufOutputWithContext(context.Context) SourceKafkaValueFormatProtobufOutput
}

type SourceKafkaValueFormatProtobufArgs struct {
	Message                  pulumi.StringInput                                          `pulumi:"message"`
	SchemaRegistryConnection SourceKafkaValueFormatProtobufSchemaRegistryConnectionInput `pulumi:"schemaRegistryConnection"`
}

func (SourceKafkaValueFormatProtobufArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceKafkaValueFormatProtobuf)(nil)).Elem()
}

func (i SourceKafkaValueFormatProtobufArgs) ToSourceKafkaValueFormatProtobufOutput() SourceKafkaValueFormatProtobufOutput {
	return i.ToSourceKafkaValueFormatProtobufOutputWithContext(context.Background())
}

func (i SourceKafkaValueFormatProtobufArgs) ToSourceKafkaValueFormatProtobufOutputWithContext(ctx context.Context) SourceKafkaValueFormatProtobufOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceKafkaValueFormatProtobufOutput)
}

func (i SourceKafkaValueFormatProtobufArgs) ToSourceKafkaValueFormatProtobufPtrOutput() SourceKafkaValueFormatProtobufPtrOutput {
	return i.ToSourceKafkaValueFormatProtobufPtrOutputWithContext(context.Background())
}

func (i SourceKafkaValueFormatProtobufArgs) ToSourceKafkaValueFormatProtobufPtrOutputWithContext(ctx context.Context) SourceKafkaValueFormatProtobufPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceKafkaValueFormatProtobufOutput).ToSourceKafkaValueFormatProtobufPtrOutputWithContext(ctx)
}

// SourceKafkaValueFormatProtobufPtrInput is an input type that accepts SourceKafkaValueFormatProtobufArgs, SourceKafkaValueFormatProtobufPtr and SourceKafkaValueFormatProtobufPtrOutput values.
// You can construct a concrete instance of `SourceKafkaValueFormatProtobufPtrInput` via:
//
//	        SourceKafkaValueFormatProtobufArgs{...}
//
//	or:
//
//	        nil
type SourceKafkaValueFormatProtobufPtrInput interface {
	pulumi.Input

	ToSourceKafkaValueFormatProtobufPtrOutput() SourceKafkaValueFormatProtobufPtrOutput
	ToSourceKafkaValueFormatProtobufPtrOutputWithContext(context.Context) SourceKafkaValueFormatProtobufPtrOutput
}

type sourceKafkaValueFormatProtobufPtrType SourceKafkaValueFormatProtobufArgs

func SourceKafkaValueFormatProtobufPtr(v *SourceKafkaValueFormatProtobufArgs) SourceKafkaValueFormatProtobufPtrInput {
	return (*sourceKafkaValueFormatProtobufPtrType)(v)
}

func (*sourceKafkaValueFormatProtobufPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceKafkaValueFormatProtobuf)(nil)).Elem()
}

func (i *sourceKafkaValueFormatProtobufPtrType) ToSourceKafkaValueFormatProtobufPtrOutput() SourceKafkaValueFormatProtobufPtrOutput {
	return i.ToSourceKafkaValueFormatProtobufPtrOutputWithContext(context.Background())
}

func (i *sourceKafkaValueFormatProtobufPtrType) ToSourceKafkaValueFormatProtobufPtrOutputWithContext(ctx context.Context) SourceKafkaValueFormatProtobufPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceKafkaValueFormatProtobufPtrOutput)
}

type SourceKafkaValueFormatProtobufOutput struct{ *pulumi.OutputState }

func (SourceKafkaValueFormatProtobufOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceKafkaValueFormatProtobuf)(nil)).Elem()
}

func (o SourceKafkaValueFormatProtobufOutput) ToSourceKafkaValueFormatProtobufOutput() SourceKafkaValueFormatProtobufOutput {
	return o
}

func (o SourceKafkaValueFormatProtobufOutput) ToSourceKafkaValueFormatProtobufOutputWithContext(ctx context.Context) SourceKafkaValueFormatProtobufOutput {
	return o
}

func (o SourceKafkaValueFormatProtobufOutput) ToSourceKafkaValueFormatProtobufPtrOutput() SourceKafkaValueFormatProtobufPtrOutput {
	return o.ToSourceKafkaValueFormatProtobufPtrOutputWithContext(context.Background())
}

func (o SourceKafkaValueFormatProtobufOutput) ToSourceKafkaValueFormatProtobufPtrOutputWithContext(ctx context.Context) SourceKafkaValueFormatProtobufPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SourceKafkaValueFormatProtobuf) *SourceKafkaValueFormatProtobuf {
		return &v
	}).(SourceKafkaValueFormatProtobufPtrOutput)
}

func (o SourceKafkaValueFormatProtobufOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v SourceKafkaValueFormatProtobuf) string { return v.Message }).(pulumi.StringOutput)
}

func (o SourceKafkaValueFormatProtobufOutput) SchemaRegistryConnection() SourceKafkaValueFormatProtobufSchemaRegistryConnectionOutput {
	return o.ApplyT(func(v SourceKafkaValueFormatProtobuf) SourceKafkaValueFormatProtobufSchemaRegistryConnection {
		return v.SchemaRegistryConnection
	}).(SourceKafkaValueFormatProtobufSchemaRegistryConnectionOutput)
}

type SourceKafkaValueFormatProtobufPtrOutput struct{ *pulumi.OutputState }

func (SourceKafkaValueFormatProtobufPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceKafkaValueFormatProtobuf)(nil)).Elem()
}

func (o SourceKafkaValueFormatProtobufPtrOutput) ToSourceKafkaValueFormatProtobufPtrOutput() SourceKafkaValueFormatProtobufPtrOutput {
	return o
}

func (o SourceKafkaValueFormatProtobufPtrOutput) ToSourceKafkaValueFormatProtobufPtrOutputWithContext(ctx context.Context) SourceKafkaValueFormatProtobufPtrOutput {
	return o
}

func (o SourceKafkaValueFormatProtobufPtrOutput) Elem() SourceKafkaValueFormatProtobufOutput {
	return o.ApplyT(func(v *SourceKafkaValueFormatProtobuf) SourceKafkaValueFormatProtobuf {
		if v != nil {
			return *v
		}
		var ret SourceKafkaValueFormatProtobuf
		return ret
	}).(SourceKafkaValueFormatProtobufOutput)
}

func (o SourceKafkaValueFormatProtobufPtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceKafkaValueFormatProtobuf) *string {
		if v == nil {
			return nil
		}
		return &v.Message
	}).(pulumi.StringPtrOutput)
}

func (o SourceKafkaValueFormatProtobufPtrOutput) SchemaRegistryConnection() SourceKafkaValueFormatProtobufSchemaRegistryConnectionPtrOutput {
	return o.ApplyT(func(v *SourceKafkaValueFormatProtobuf) *SourceKafkaValueFormatProtobufSchemaRegistryConnection {
		if v == nil {
			return nil
		}
		return &v.SchemaRegistryConnection
	}).(SourceKafkaValueFormatProtobufSchemaRegistryConnectionPtrOutput)
}

type SourceKafkaValueFormatProtobufSchemaRegistryConnection struct {
	// The identifier for the source database.
	DatabaseName *string `pulumi:"databaseName"`
	// The identifier for the source.
	Name string `pulumi:"name"`
	// The identifier for the source schema.
	SchemaName *string `pulumi:"schemaName"`
}

// SourceKafkaValueFormatProtobufSchemaRegistryConnectionInput is an input type that accepts SourceKafkaValueFormatProtobufSchemaRegistryConnectionArgs and SourceKafkaValueFormatProtobufSchemaRegistryConnectionOutput values.
// You can construct a concrete instance of `SourceKafkaValueFormatProtobufSchemaRegistryConnectionInput` via:
//
//	SourceKafkaValueFormatProtobufSchemaRegistryConnectionArgs{...}
type SourceKafkaValueFormatProtobufSchemaRegistryConnectionInput interface {
	pulumi.Input

	ToSourceKafkaValueFormatProtobufSchemaRegistryConnectionOutput() SourceKafkaValueFormatProtobufSchemaRegistryConnectionOutput
	ToSourceKafkaValueFormatProtobufSchemaRegistryConnectionOutputWithContext(context.Context) SourceKafkaValueFormatProtobufSchemaRegistryConnectionOutput
}

type SourceKafkaValueFormatProtobufSchemaRegistryConnectionArgs struct {
	// The identifier for the source database.
	DatabaseName pulumi.StringPtrInput `pulumi:"databaseName"`
	// The identifier for the source.
	Name pulumi.StringInput `pulumi:"name"`
	// The identifier for the source schema.
	SchemaName pulumi.StringPtrInput `pulumi:"schemaName"`
}

func (SourceKafkaValueFormatProtobufSchemaRegistryConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceKafkaValueFormatProtobufSchemaRegistryConnection)(nil)).Elem()
}

func (i SourceKafkaValueFormatProtobufSchemaRegistryConnectionArgs) ToSourceKafkaValueFormatProtobufSchemaRegistryConnectionOutput() SourceKafkaValueFormatProtobufSchemaRegistryConnectionOutput {
	return i.ToSourceKafkaValueFormatProtobufSchemaRegistryConnectionOutputWithContext(context.Background())
}

func (i SourceKafkaValueFormatProtobufSchemaRegistryConnectionArgs) ToSourceKafkaValueFormatProtobufSchemaRegistryConnectionOutputWithContext(ctx context.Context) SourceKafkaValueFormatProtobufSchemaRegistryConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceKafkaValueFormatProtobufSchemaRegistryConnectionOutput)
}

func (i SourceKafkaValueFormatProtobufSchemaRegistryConnectionArgs) ToSourceKafkaValueFormatProtobufSchemaRegistryConnectionPtrOutput() SourceKafkaValueFormatProtobufSchemaRegistryConnectionPtrOutput {
	return i.ToSourceKafkaValueFormatProtobufSchemaRegistryConnectionPtrOutputWithContext(context.Background())
}

func (i SourceKafkaValueFormatProtobufSchemaRegistryConnectionArgs) ToSourceKafkaValueFormatProtobufSchemaRegistryConnectionPtrOutputWithContext(ctx context.Context) SourceKafkaValueFormatProtobufSchemaRegistryConnectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceKafkaValueFormatProtobufSchemaRegistryConnectionOutput).ToSourceKafkaValueFormatProtobufSchemaRegistryConnectionPtrOutputWithContext(ctx)
}

// SourceKafkaValueFormatProtobufSchemaRegistryConnectionPtrInput is an input type that accepts SourceKafkaValueFormatProtobufSchemaRegistryConnectionArgs, SourceKafkaValueFormatProtobufSchemaRegistryConnectionPtr and SourceKafkaValueFormatProtobufSchemaRegistryConnectionPtrOutput values.
// You can construct a concrete instance of `SourceKafkaValueFormatProtobufSchemaRegistryConnectionPtrInput` via:
//
//	        SourceKafkaValueFormatProtobufSchemaRegistryConnectionArgs{...}
//
//	or:
//
//	        nil
type SourceKafkaValueFormatProtobufSchemaRegistryConnectionPtrInput interface {
	pulumi.Input

	ToSourceKafkaValueFormatProtobufSchemaRegistryConnectionPtrOutput() SourceKafkaValueFormatProtobufSchemaRegistryConnectionPtrOutput
	ToSourceKafkaValueFormatProtobufSchemaRegistryConnectionPtrOutputWithContext(context.Context) SourceKafkaValueFormatProtobufSchemaRegistryConnectionPtrOutput
}

type sourceKafkaValueFormatProtobufSchemaRegistryConnectionPtrType SourceKafkaValueFormatProtobufSchemaRegistryConnectionArgs

func SourceKafkaValueFormatProtobufSchemaRegistryConnectionPtr(v *SourceKafkaValueFormatProtobufSchemaRegistryConnectionArgs) SourceKafkaValueFormatProtobufSchemaRegistryConnectionPtrInput {
	return (*sourceKafkaValueFormatProtobufSchemaRegistryConnectionPtrType)(v)
}

func (*sourceKafkaValueFormatProtobufSchemaRegistryConnectionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceKafkaValueFormatProtobufSchemaRegistryConnection)(nil)).Elem()
}

func (i *sourceKafkaValueFormatProtobufSchemaRegistryConnectionPtrType) ToSourceKafkaValueFormatProtobufSchemaRegistryConnectionPtrOutput() SourceKafkaValueFormatProtobufSchemaRegistryConnectionPtrOutput {
	return i.ToSourceKafkaValueFormatProtobufSchemaRegistryConnectionPtrOutputWithContext(context.Background())
}

func (i *sourceKafkaValueFormatProtobufSchemaRegistryConnectionPtrType) ToSourceKafkaValueFormatProtobufSchemaRegistryConnectionPtrOutputWithContext(ctx context.Context) SourceKafkaValueFormatProtobufSchemaRegistryConnectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceKafkaValueFormatProtobufSchemaRegistryConnectionPtrOutput)
}

type SourceKafkaValueFormatProtobufSchemaRegistryConnectionOutput struct{ *pulumi.OutputState }

func (SourceKafkaValueFormatProtobufSchemaRegistryConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceKafkaValueFormatProtobufSchemaRegistryConnection)(nil)).Elem()
}

func (o SourceKafkaValueFormatProtobufSchemaRegistryConnectionOutput) ToSourceKafkaValueFormatProtobufSchemaRegistryConnectionOutput() SourceKafkaValueFormatProtobufSchemaRegistryConnectionOutput {
	return o
}

func (o SourceKafkaValueFormatProtobufSchemaRegistryConnectionOutput) ToSourceKafkaValueFormatProtobufSchemaRegistryConnectionOutputWithContext(ctx context.Context) SourceKafkaValueFormatProtobufSchemaRegistryConnectionOutput {
	return o
}

func (o SourceKafkaValueFormatProtobufSchemaRegistryConnectionOutput) ToSourceKafkaValueFormatProtobufSchemaRegistryConnectionPtrOutput() SourceKafkaValueFormatProtobufSchemaRegistryConnectionPtrOutput {
	return o.ToSourceKafkaValueFormatProtobufSchemaRegistryConnectionPtrOutputWithContext(context.Background())
}

func (o SourceKafkaValueFormatProtobufSchemaRegistryConnectionOutput) ToSourceKafkaValueFormatProtobufSchemaRegistryConnectionPtrOutputWithContext(ctx context.Context) SourceKafkaValueFormatProtobufSchemaRegistryConnectionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SourceKafkaValueFormatProtobufSchemaRegistryConnection) *SourceKafkaValueFormatProtobufSchemaRegistryConnection {
		return &v
	}).(SourceKafkaValueFormatProtobufSchemaRegistryConnectionPtrOutput)
}

// The identifier for the source database.
func (o SourceKafkaValueFormatProtobufSchemaRegistryConnectionOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceKafkaValueFormatProtobufSchemaRegistryConnection) *string { return v.DatabaseName }).(pulumi.StringPtrOutput)
}

// The identifier for the source.
func (o SourceKafkaValueFormatProtobufSchemaRegistryConnectionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SourceKafkaValueFormatProtobufSchemaRegistryConnection) string { return v.Name }).(pulumi.StringOutput)
}

// The identifier for the source schema.
func (o SourceKafkaValueFormatProtobufSchemaRegistryConnectionOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceKafkaValueFormatProtobufSchemaRegistryConnection) *string { return v.SchemaName }).(pulumi.StringPtrOutput)
}

type SourceKafkaValueFormatProtobufSchemaRegistryConnectionPtrOutput struct{ *pulumi.OutputState }

func (SourceKafkaValueFormatProtobufSchemaRegistryConnectionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceKafkaValueFormatProtobufSchemaRegistryConnection)(nil)).Elem()
}

func (o SourceKafkaValueFormatProtobufSchemaRegistryConnectionPtrOutput) ToSourceKafkaValueFormatProtobufSchemaRegistryConnectionPtrOutput() SourceKafkaValueFormatProtobufSchemaRegistryConnectionPtrOutput {
	return o
}

func (o SourceKafkaValueFormatProtobufSchemaRegistryConnectionPtrOutput) ToSourceKafkaValueFormatProtobufSchemaRegistryConnectionPtrOutputWithContext(ctx context.Context) SourceKafkaValueFormatProtobufSchemaRegistryConnectionPtrOutput {
	return o
}

func (o SourceKafkaValueFormatProtobufSchemaRegistryConnectionPtrOutput) Elem() SourceKafkaValueFormatProtobufSchemaRegistryConnectionOutput {
	return o.ApplyT(func(v *SourceKafkaValueFormatProtobufSchemaRegistryConnection) SourceKafkaValueFormatProtobufSchemaRegistryConnection {
		if v != nil {
			return *v
		}
		var ret SourceKafkaValueFormatProtobufSchemaRegistryConnection
		return ret
	}).(SourceKafkaValueFormatProtobufSchemaRegistryConnectionOutput)
}

// The identifier for the source database.
func (o SourceKafkaValueFormatProtobufSchemaRegistryConnectionPtrOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceKafkaValueFormatProtobufSchemaRegistryConnection) *string {
		if v == nil {
			return nil
		}
		return v.DatabaseName
	}).(pulumi.StringPtrOutput)
}

// The identifier for the source.
func (o SourceKafkaValueFormatProtobufSchemaRegistryConnectionPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceKafkaValueFormatProtobufSchemaRegistryConnection) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The identifier for the source schema.
func (o SourceKafkaValueFormatProtobufSchemaRegistryConnectionPtrOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceKafkaValueFormatProtobufSchemaRegistryConnection) *string {
		if v == nil {
			return nil
		}
		return v.SchemaName
	}).(pulumi.StringPtrOutput)
}

type SourceLoadgenAuctionOption struct {
	// The scale factor for the generator. Defaults to 0.01 (~ 10MB).
	ScaleFactor *float64 `pulumi:"scaleFactor"`
	// Creates subsources for specific tables.
	Tables []SourceLoadgenAuctionOptionTable `pulumi:"tables"`
	// The interval at which the next datum should be emitted. Defaults to one second.
	TickInterval *string `pulumi:"tickInterval"`
}

// SourceLoadgenAuctionOptionInput is an input type that accepts SourceLoadgenAuctionOptionArgs and SourceLoadgenAuctionOptionOutput values.
// You can construct a concrete instance of `SourceLoadgenAuctionOptionInput` via:
//
//	SourceLoadgenAuctionOptionArgs{...}
type SourceLoadgenAuctionOptionInput interface {
	pulumi.Input

	ToSourceLoadgenAuctionOptionOutput() SourceLoadgenAuctionOptionOutput
	ToSourceLoadgenAuctionOptionOutputWithContext(context.Context) SourceLoadgenAuctionOptionOutput
}

type SourceLoadgenAuctionOptionArgs struct {
	// The scale factor for the generator. Defaults to 0.01 (~ 10MB).
	ScaleFactor pulumi.Float64PtrInput `pulumi:"scaleFactor"`
	// Creates subsources for specific tables.
	Tables SourceLoadgenAuctionOptionTableArrayInput `pulumi:"tables"`
	// The interval at which the next datum should be emitted. Defaults to one second.
	TickInterval pulumi.StringPtrInput `pulumi:"tickInterval"`
}

func (SourceLoadgenAuctionOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceLoadgenAuctionOption)(nil)).Elem()
}

func (i SourceLoadgenAuctionOptionArgs) ToSourceLoadgenAuctionOptionOutput() SourceLoadgenAuctionOptionOutput {
	return i.ToSourceLoadgenAuctionOptionOutputWithContext(context.Background())
}

func (i SourceLoadgenAuctionOptionArgs) ToSourceLoadgenAuctionOptionOutputWithContext(ctx context.Context) SourceLoadgenAuctionOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceLoadgenAuctionOptionOutput)
}

// SourceLoadgenAuctionOptionArrayInput is an input type that accepts SourceLoadgenAuctionOptionArray and SourceLoadgenAuctionOptionArrayOutput values.
// You can construct a concrete instance of `SourceLoadgenAuctionOptionArrayInput` via:
//
//	SourceLoadgenAuctionOptionArray{ SourceLoadgenAuctionOptionArgs{...} }
type SourceLoadgenAuctionOptionArrayInput interface {
	pulumi.Input

	ToSourceLoadgenAuctionOptionArrayOutput() SourceLoadgenAuctionOptionArrayOutput
	ToSourceLoadgenAuctionOptionArrayOutputWithContext(context.Context) SourceLoadgenAuctionOptionArrayOutput
}

type SourceLoadgenAuctionOptionArray []SourceLoadgenAuctionOptionInput

func (SourceLoadgenAuctionOptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SourceLoadgenAuctionOption)(nil)).Elem()
}

func (i SourceLoadgenAuctionOptionArray) ToSourceLoadgenAuctionOptionArrayOutput() SourceLoadgenAuctionOptionArrayOutput {
	return i.ToSourceLoadgenAuctionOptionArrayOutputWithContext(context.Background())
}

func (i SourceLoadgenAuctionOptionArray) ToSourceLoadgenAuctionOptionArrayOutputWithContext(ctx context.Context) SourceLoadgenAuctionOptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceLoadgenAuctionOptionArrayOutput)
}

type SourceLoadgenAuctionOptionOutput struct{ *pulumi.OutputState }

func (SourceLoadgenAuctionOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceLoadgenAuctionOption)(nil)).Elem()
}

func (o SourceLoadgenAuctionOptionOutput) ToSourceLoadgenAuctionOptionOutput() SourceLoadgenAuctionOptionOutput {
	return o
}

func (o SourceLoadgenAuctionOptionOutput) ToSourceLoadgenAuctionOptionOutputWithContext(ctx context.Context) SourceLoadgenAuctionOptionOutput {
	return o
}

// The scale factor for the generator. Defaults to 0.01 (~ 10MB).
func (o SourceLoadgenAuctionOptionOutput) ScaleFactor() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SourceLoadgenAuctionOption) *float64 { return v.ScaleFactor }).(pulumi.Float64PtrOutput)
}

// Creates subsources for specific tables.
func (o SourceLoadgenAuctionOptionOutput) Tables() SourceLoadgenAuctionOptionTableArrayOutput {
	return o.ApplyT(func(v SourceLoadgenAuctionOption) []SourceLoadgenAuctionOptionTable { return v.Tables }).(SourceLoadgenAuctionOptionTableArrayOutput)
}

// The interval at which the next datum should be emitted. Defaults to one second.
func (o SourceLoadgenAuctionOptionOutput) TickInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceLoadgenAuctionOption) *string { return v.TickInterval }).(pulumi.StringPtrOutput)
}

type SourceLoadgenAuctionOptionArrayOutput struct{ *pulumi.OutputState }

func (SourceLoadgenAuctionOptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SourceLoadgenAuctionOption)(nil)).Elem()
}

func (o SourceLoadgenAuctionOptionArrayOutput) ToSourceLoadgenAuctionOptionArrayOutput() SourceLoadgenAuctionOptionArrayOutput {
	return o
}

func (o SourceLoadgenAuctionOptionArrayOutput) ToSourceLoadgenAuctionOptionArrayOutputWithContext(ctx context.Context) SourceLoadgenAuctionOptionArrayOutput {
	return o
}

func (o SourceLoadgenAuctionOptionArrayOutput) Index(i pulumi.IntInput) SourceLoadgenAuctionOptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SourceLoadgenAuctionOption {
		return vs[0].([]SourceLoadgenAuctionOption)[vs[1].(int)]
	}).(SourceLoadgenAuctionOptionOutput)
}

type SourceLoadgenAuctionOptionTable struct {
	Alias *string `pulumi:"alias"`
	// The identifier for the source.
	Name string `pulumi:"name"`
}

// SourceLoadgenAuctionOptionTableInput is an input type that accepts SourceLoadgenAuctionOptionTableArgs and SourceLoadgenAuctionOptionTableOutput values.
// You can construct a concrete instance of `SourceLoadgenAuctionOptionTableInput` via:
//
//	SourceLoadgenAuctionOptionTableArgs{...}
type SourceLoadgenAuctionOptionTableInput interface {
	pulumi.Input

	ToSourceLoadgenAuctionOptionTableOutput() SourceLoadgenAuctionOptionTableOutput
	ToSourceLoadgenAuctionOptionTableOutputWithContext(context.Context) SourceLoadgenAuctionOptionTableOutput
}

type SourceLoadgenAuctionOptionTableArgs struct {
	Alias pulumi.StringPtrInput `pulumi:"alias"`
	// The identifier for the source.
	Name pulumi.StringInput `pulumi:"name"`
}

func (SourceLoadgenAuctionOptionTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceLoadgenAuctionOptionTable)(nil)).Elem()
}

func (i SourceLoadgenAuctionOptionTableArgs) ToSourceLoadgenAuctionOptionTableOutput() SourceLoadgenAuctionOptionTableOutput {
	return i.ToSourceLoadgenAuctionOptionTableOutputWithContext(context.Background())
}

func (i SourceLoadgenAuctionOptionTableArgs) ToSourceLoadgenAuctionOptionTableOutputWithContext(ctx context.Context) SourceLoadgenAuctionOptionTableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceLoadgenAuctionOptionTableOutput)
}

// SourceLoadgenAuctionOptionTableArrayInput is an input type that accepts SourceLoadgenAuctionOptionTableArray and SourceLoadgenAuctionOptionTableArrayOutput values.
// You can construct a concrete instance of `SourceLoadgenAuctionOptionTableArrayInput` via:
//
//	SourceLoadgenAuctionOptionTableArray{ SourceLoadgenAuctionOptionTableArgs{...} }
type SourceLoadgenAuctionOptionTableArrayInput interface {
	pulumi.Input

	ToSourceLoadgenAuctionOptionTableArrayOutput() SourceLoadgenAuctionOptionTableArrayOutput
	ToSourceLoadgenAuctionOptionTableArrayOutputWithContext(context.Context) SourceLoadgenAuctionOptionTableArrayOutput
}

type SourceLoadgenAuctionOptionTableArray []SourceLoadgenAuctionOptionTableInput

func (SourceLoadgenAuctionOptionTableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SourceLoadgenAuctionOptionTable)(nil)).Elem()
}

func (i SourceLoadgenAuctionOptionTableArray) ToSourceLoadgenAuctionOptionTableArrayOutput() SourceLoadgenAuctionOptionTableArrayOutput {
	return i.ToSourceLoadgenAuctionOptionTableArrayOutputWithContext(context.Background())
}

func (i SourceLoadgenAuctionOptionTableArray) ToSourceLoadgenAuctionOptionTableArrayOutputWithContext(ctx context.Context) SourceLoadgenAuctionOptionTableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceLoadgenAuctionOptionTableArrayOutput)
}

type SourceLoadgenAuctionOptionTableOutput struct{ *pulumi.OutputState }

func (SourceLoadgenAuctionOptionTableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceLoadgenAuctionOptionTable)(nil)).Elem()
}

func (o SourceLoadgenAuctionOptionTableOutput) ToSourceLoadgenAuctionOptionTableOutput() SourceLoadgenAuctionOptionTableOutput {
	return o
}

func (o SourceLoadgenAuctionOptionTableOutput) ToSourceLoadgenAuctionOptionTableOutputWithContext(ctx context.Context) SourceLoadgenAuctionOptionTableOutput {
	return o
}

func (o SourceLoadgenAuctionOptionTableOutput) Alias() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceLoadgenAuctionOptionTable) *string { return v.Alias }).(pulumi.StringPtrOutput)
}

// The identifier for the source.
func (o SourceLoadgenAuctionOptionTableOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SourceLoadgenAuctionOptionTable) string { return v.Name }).(pulumi.StringOutput)
}

type SourceLoadgenAuctionOptionTableArrayOutput struct{ *pulumi.OutputState }

func (SourceLoadgenAuctionOptionTableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SourceLoadgenAuctionOptionTable)(nil)).Elem()
}

func (o SourceLoadgenAuctionOptionTableArrayOutput) ToSourceLoadgenAuctionOptionTableArrayOutput() SourceLoadgenAuctionOptionTableArrayOutput {
	return o
}

func (o SourceLoadgenAuctionOptionTableArrayOutput) ToSourceLoadgenAuctionOptionTableArrayOutputWithContext(ctx context.Context) SourceLoadgenAuctionOptionTableArrayOutput {
	return o
}

func (o SourceLoadgenAuctionOptionTableArrayOutput) Index(i pulumi.IntInput) SourceLoadgenAuctionOptionTableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SourceLoadgenAuctionOptionTable {
		return vs[0].([]SourceLoadgenAuctionOptionTable)[vs[1].(int)]
	}).(SourceLoadgenAuctionOptionTableOutput)
}

type SourceLoadgenCounterOption struct {
	// Causes the generator to delete old values to keep the collection at most a given size. Defaults to unlimited.
	MaxCardinality *int `pulumi:"maxCardinality"`
	// The scale factor for the generator. Defaults to 0.01 (~ 10MB).
	ScaleFactor *float64 `pulumi:"scaleFactor"`
	// The interval at which the next datum should be emitted. Defaults to one second.
	TickInterval *string `pulumi:"tickInterval"`
}

// SourceLoadgenCounterOptionInput is an input type that accepts SourceLoadgenCounterOptionArgs and SourceLoadgenCounterOptionOutput values.
// You can construct a concrete instance of `SourceLoadgenCounterOptionInput` via:
//
//	SourceLoadgenCounterOptionArgs{...}
type SourceLoadgenCounterOptionInput interface {
	pulumi.Input

	ToSourceLoadgenCounterOptionOutput() SourceLoadgenCounterOptionOutput
	ToSourceLoadgenCounterOptionOutputWithContext(context.Context) SourceLoadgenCounterOptionOutput
}

type SourceLoadgenCounterOptionArgs struct {
	// Causes the generator to delete old values to keep the collection at most a given size. Defaults to unlimited.
	MaxCardinality pulumi.IntPtrInput `pulumi:"maxCardinality"`
	// The scale factor for the generator. Defaults to 0.01 (~ 10MB).
	ScaleFactor pulumi.Float64PtrInput `pulumi:"scaleFactor"`
	// The interval at which the next datum should be emitted. Defaults to one second.
	TickInterval pulumi.StringPtrInput `pulumi:"tickInterval"`
}

func (SourceLoadgenCounterOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceLoadgenCounterOption)(nil)).Elem()
}

func (i SourceLoadgenCounterOptionArgs) ToSourceLoadgenCounterOptionOutput() SourceLoadgenCounterOptionOutput {
	return i.ToSourceLoadgenCounterOptionOutputWithContext(context.Background())
}

func (i SourceLoadgenCounterOptionArgs) ToSourceLoadgenCounterOptionOutputWithContext(ctx context.Context) SourceLoadgenCounterOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceLoadgenCounterOptionOutput)
}

// SourceLoadgenCounterOptionArrayInput is an input type that accepts SourceLoadgenCounterOptionArray and SourceLoadgenCounterOptionArrayOutput values.
// You can construct a concrete instance of `SourceLoadgenCounterOptionArrayInput` via:
//
//	SourceLoadgenCounterOptionArray{ SourceLoadgenCounterOptionArgs{...} }
type SourceLoadgenCounterOptionArrayInput interface {
	pulumi.Input

	ToSourceLoadgenCounterOptionArrayOutput() SourceLoadgenCounterOptionArrayOutput
	ToSourceLoadgenCounterOptionArrayOutputWithContext(context.Context) SourceLoadgenCounterOptionArrayOutput
}

type SourceLoadgenCounterOptionArray []SourceLoadgenCounterOptionInput

func (SourceLoadgenCounterOptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SourceLoadgenCounterOption)(nil)).Elem()
}

func (i SourceLoadgenCounterOptionArray) ToSourceLoadgenCounterOptionArrayOutput() SourceLoadgenCounterOptionArrayOutput {
	return i.ToSourceLoadgenCounterOptionArrayOutputWithContext(context.Background())
}

func (i SourceLoadgenCounterOptionArray) ToSourceLoadgenCounterOptionArrayOutputWithContext(ctx context.Context) SourceLoadgenCounterOptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceLoadgenCounterOptionArrayOutput)
}

type SourceLoadgenCounterOptionOutput struct{ *pulumi.OutputState }

func (SourceLoadgenCounterOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceLoadgenCounterOption)(nil)).Elem()
}

func (o SourceLoadgenCounterOptionOutput) ToSourceLoadgenCounterOptionOutput() SourceLoadgenCounterOptionOutput {
	return o
}

func (o SourceLoadgenCounterOptionOutput) ToSourceLoadgenCounterOptionOutputWithContext(ctx context.Context) SourceLoadgenCounterOptionOutput {
	return o
}

// Causes the generator to delete old values to keep the collection at most a given size. Defaults to unlimited.
func (o SourceLoadgenCounterOptionOutput) MaxCardinality() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SourceLoadgenCounterOption) *int { return v.MaxCardinality }).(pulumi.IntPtrOutput)
}

// The scale factor for the generator. Defaults to 0.01 (~ 10MB).
func (o SourceLoadgenCounterOptionOutput) ScaleFactor() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SourceLoadgenCounterOption) *float64 { return v.ScaleFactor }).(pulumi.Float64PtrOutput)
}

// The interval at which the next datum should be emitted. Defaults to one second.
func (o SourceLoadgenCounterOptionOutput) TickInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceLoadgenCounterOption) *string { return v.TickInterval }).(pulumi.StringPtrOutput)
}

type SourceLoadgenCounterOptionArrayOutput struct{ *pulumi.OutputState }

func (SourceLoadgenCounterOptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SourceLoadgenCounterOption)(nil)).Elem()
}

func (o SourceLoadgenCounterOptionArrayOutput) ToSourceLoadgenCounterOptionArrayOutput() SourceLoadgenCounterOptionArrayOutput {
	return o
}

func (o SourceLoadgenCounterOptionArrayOutput) ToSourceLoadgenCounterOptionArrayOutputWithContext(ctx context.Context) SourceLoadgenCounterOptionArrayOutput {
	return o
}

func (o SourceLoadgenCounterOptionArrayOutput) Index(i pulumi.IntInput) SourceLoadgenCounterOptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SourceLoadgenCounterOption {
		return vs[0].([]SourceLoadgenCounterOption)[vs[1].(int)]
	}).(SourceLoadgenCounterOptionOutput)
}

type SourceLoadgenTpchOption struct {
	// The scale factor for the generator. Defaults to 0.01 (~ 10MB).
	ScaleFactor *float64 `pulumi:"scaleFactor"`
	// Creates subsources for specific tables.
	Tables []SourceLoadgenTpchOptionTable `pulumi:"tables"`
	// The interval at which the next datum should be emitted. Defaults to one second.
	TickInterval *string `pulumi:"tickInterval"`
}

// SourceLoadgenTpchOptionInput is an input type that accepts SourceLoadgenTpchOptionArgs and SourceLoadgenTpchOptionOutput values.
// You can construct a concrete instance of `SourceLoadgenTpchOptionInput` via:
//
//	SourceLoadgenTpchOptionArgs{...}
type SourceLoadgenTpchOptionInput interface {
	pulumi.Input

	ToSourceLoadgenTpchOptionOutput() SourceLoadgenTpchOptionOutput
	ToSourceLoadgenTpchOptionOutputWithContext(context.Context) SourceLoadgenTpchOptionOutput
}

type SourceLoadgenTpchOptionArgs struct {
	// The scale factor for the generator. Defaults to 0.01 (~ 10MB).
	ScaleFactor pulumi.Float64PtrInput `pulumi:"scaleFactor"`
	// Creates subsources for specific tables.
	Tables SourceLoadgenTpchOptionTableArrayInput `pulumi:"tables"`
	// The interval at which the next datum should be emitted. Defaults to one second.
	TickInterval pulumi.StringPtrInput `pulumi:"tickInterval"`
}

func (SourceLoadgenTpchOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceLoadgenTpchOption)(nil)).Elem()
}

func (i SourceLoadgenTpchOptionArgs) ToSourceLoadgenTpchOptionOutput() SourceLoadgenTpchOptionOutput {
	return i.ToSourceLoadgenTpchOptionOutputWithContext(context.Background())
}

func (i SourceLoadgenTpchOptionArgs) ToSourceLoadgenTpchOptionOutputWithContext(ctx context.Context) SourceLoadgenTpchOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceLoadgenTpchOptionOutput)
}

// SourceLoadgenTpchOptionArrayInput is an input type that accepts SourceLoadgenTpchOptionArray and SourceLoadgenTpchOptionArrayOutput values.
// You can construct a concrete instance of `SourceLoadgenTpchOptionArrayInput` via:
//
//	SourceLoadgenTpchOptionArray{ SourceLoadgenTpchOptionArgs{...} }
type SourceLoadgenTpchOptionArrayInput interface {
	pulumi.Input

	ToSourceLoadgenTpchOptionArrayOutput() SourceLoadgenTpchOptionArrayOutput
	ToSourceLoadgenTpchOptionArrayOutputWithContext(context.Context) SourceLoadgenTpchOptionArrayOutput
}

type SourceLoadgenTpchOptionArray []SourceLoadgenTpchOptionInput

func (SourceLoadgenTpchOptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SourceLoadgenTpchOption)(nil)).Elem()
}

func (i SourceLoadgenTpchOptionArray) ToSourceLoadgenTpchOptionArrayOutput() SourceLoadgenTpchOptionArrayOutput {
	return i.ToSourceLoadgenTpchOptionArrayOutputWithContext(context.Background())
}

func (i SourceLoadgenTpchOptionArray) ToSourceLoadgenTpchOptionArrayOutputWithContext(ctx context.Context) SourceLoadgenTpchOptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceLoadgenTpchOptionArrayOutput)
}

type SourceLoadgenTpchOptionOutput struct{ *pulumi.OutputState }

func (SourceLoadgenTpchOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceLoadgenTpchOption)(nil)).Elem()
}

func (o SourceLoadgenTpchOptionOutput) ToSourceLoadgenTpchOptionOutput() SourceLoadgenTpchOptionOutput {
	return o
}

func (o SourceLoadgenTpchOptionOutput) ToSourceLoadgenTpchOptionOutputWithContext(ctx context.Context) SourceLoadgenTpchOptionOutput {
	return o
}

// The scale factor for the generator. Defaults to 0.01 (~ 10MB).
func (o SourceLoadgenTpchOptionOutput) ScaleFactor() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SourceLoadgenTpchOption) *float64 { return v.ScaleFactor }).(pulumi.Float64PtrOutput)
}

// Creates subsources for specific tables.
func (o SourceLoadgenTpchOptionOutput) Tables() SourceLoadgenTpchOptionTableArrayOutput {
	return o.ApplyT(func(v SourceLoadgenTpchOption) []SourceLoadgenTpchOptionTable { return v.Tables }).(SourceLoadgenTpchOptionTableArrayOutput)
}

// The interval at which the next datum should be emitted. Defaults to one second.
func (o SourceLoadgenTpchOptionOutput) TickInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceLoadgenTpchOption) *string { return v.TickInterval }).(pulumi.StringPtrOutput)
}

type SourceLoadgenTpchOptionArrayOutput struct{ *pulumi.OutputState }

func (SourceLoadgenTpchOptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SourceLoadgenTpchOption)(nil)).Elem()
}

func (o SourceLoadgenTpchOptionArrayOutput) ToSourceLoadgenTpchOptionArrayOutput() SourceLoadgenTpchOptionArrayOutput {
	return o
}

func (o SourceLoadgenTpchOptionArrayOutput) ToSourceLoadgenTpchOptionArrayOutputWithContext(ctx context.Context) SourceLoadgenTpchOptionArrayOutput {
	return o
}

func (o SourceLoadgenTpchOptionArrayOutput) Index(i pulumi.IntInput) SourceLoadgenTpchOptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SourceLoadgenTpchOption {
		return vs[0].([]SourceLoadgenTpchOption)[vs[1].(int)]
	}).(SourceLoadgenTpchOptionOutput)
}

type SourceLoadgenTpchOptionTable struct {
	Alias *string `pulumi:"alias"`
	// The identifier for the source.
	Name string `pulumi:"name"`
}

// SourceLoadgenTpchOptionTableInput is an input type that accepts SourceLoadgenTpchOptionTableArgs and SourceLoadgenTpchOptionTableOutput values.
// You can construct a concrete instance of `SourceLoadgenTpchOptionTableInput` via:
//
//	SourceLoadgenTpchOptionTableArgs{...}
type SourceLoadgenTpchOptionTableInput interface {
	pulumi.Input

	ToSourceLoadgenTpchOptionTableOutput() SourceLoadgenTpchOptionTableOutput
	ToSourceLoadgenTpchOptionTableOutputWithContext(context.Context) SourceLoadgenTpchOptionTableOutput
}

type SourceLoadgenTpchOptionTableArgs struct {
	Alias pulumi.StringPtrInput `pulumi:"alias"`
	// The identifier for the source.
	Name pulumi.StringInput `pulumi:"name"`
}

func (SourceLoadgenTpchOptionTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceLoadgenTpchOptionTable)(nil)).Elem()
}

func (i SourceLoadgenTpchOptionTableArgs) ToSourceLoadgenTpchOptionTableOutput() SourceLoadgenTpchOptionTableOutput {
	return i.ToSourceLoadgenTpchOptionTableOutputWithContext(context.Background())
}

func (i SourceLoadgenTpchOptionTableArgs) ToSourceLoadgenTpchOptionTableOutputWithContext(ctx context.Context) SourceLoadgenTpchOptionTableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceLoadgenTpchOptionTableOutput)
}

// SourceLoadgenTpchOptionTableArrayInput is an input type that accepts SourceLoadgenTpchOptionTableArray and SourceLoadgenTpchOptionTableArrayOutput values.
// You can construct a concrete instance of `SourceLoadgenTpchOptionTableArrayInput` via:
//
//	SourceLoadgenTpchOptionTableArray{ SourceLoadgenTpchOptionTableArgs{...} }
type SourceLoadgenTpchOptionTableArrayInput interface {
	pulumi.Input

	ToSourceLoadgenTpchOptionTableArrayOutput() SourceLoadgenTpchOptionTableArrayOutput
	ToSourceLoadgenTpchOptionTableArrayOutputWithContext(context.Context) SourceLoadgenTpchOptionTableArrayOutput
}

type SourceLoadgenTpchOptionTableArray []SourceLoadgenTpchOptionTableInput

func (SourceLoadgenTpchOptionTableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SourceLoadgenTpchOptionTable)(nil)).Elem()
}

func (i SourceLoadgenTpchOptionTableArray) ToSourceLoadgenTpchOptionTableArrayOutput() SourceLoadgenTpchOptionTableArrayOutput {
	return i.ToSourceLoadgenTpchOptionTableArrayOutputWithContext(context.Background())
}

func (i SourceLoadgenTpchOptionTableArray) ToSourceLoadgenTpchOptionTableArrayOutputWithContext(ctx context.Context) SourceLoadgenTpchOptionTableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceLoadgenTpchOptionTableArrayOutput)
}

type SourceLoadgenTpchOptionTableOutput struct{ *pulumi.OutputState }

func (SourceLoadgenTpchOptionTableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceLoadgenTpchOptionTable)(nil)).Elem()
}

func (o SourceLoadgenTpchOptionTableOutput) ToSourceLoadgenTpchOptionTableOutput() SourceLoadgenTpchOptionTableOutput {
	return o
}

func (o SourceLoadgenTpchOptionTableOutput) ToSourceLoadgenTpchOptionTableOutputWithContext(ctx context.Context) SourceLoadgenTpchOptionTableOutput {
	return o
}

func (o SourceLoadgenTpchOptionTableOutput) Alias() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceLoadgenTpchOptionTable) *string { return v.Alias }).(pulumi.StringPtrOutput)
}

// The identifier for the source.
func (o SourceLoadgenTpchOptionTableOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SourceLoadgenTpchOptionTable) string { return v.Name }).(pulumi.StringOutput)
}

type SourceLoadgenTpchOptionTableArrayOutput struct{ *pulumi.OutputState }

func (SourceLoadgenTpchOptionTableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SourceLoadgenTpchOptionTable)(nil)).Elem()
}

func (o SourceLoadgenTpchOptionTableArrayOutput) ToSourceLoadgenTpchOptionTableArrayOutput() SourceLoadgenTpchOptionTableArrayOutput {
	return o
}

func (o SourceLoadgenTpchOptionTableArrayOutput) ToSourceLoadgenTpchOptionTableArrayOutputWithContext(ctx context.Context) SourceLoadgenTpchOptionTableArrayOutput {
	return o
}

func (o SourceLoadgenTpchOptionTableArrayOutput) Index(i pulumi.IntInput) SourceLoadgenTpchOptionTableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SourceLoadgenTpchOptionTable {
		return vs[0].([]SourceLoadgenTpchOptionTable)[vs[1].(int)]
	}).(SourceLoadgenTpchOptionTableOutput)
}

type SourcePostgresPostgresConnection struct {
	// The posgresConnection database name.
	DatabaseName *string `pulumi:"databaseName"`
	// The posgresConnection name.
	Name string `pulumi:"name"`
	// The posgresConnection schema name.
	SchemaName *string `pulumi:"schemaName"`
}

// SourcePostgresPostgresConnectionInput is an input type that accepts SourcePostgresPostgresConnectionArgs and SourcePostgresPostgresConnectionOutput values.
// You can construct a concrete instance of `SourcePostgresPostgresConnectionInput` via:
//
//	SourcePostgresPostgresConnectionArgs{...}
type SourcePostgresPostgresConnectionInput interface {
	pulumi.Input

	ToSourcePostgresPostgresConnectionOutput() SourcePostgresPostgresConnectionOutput
	ToSourcePostgresPostgresConnectionOutputWithContext(context.Context) SourcePostgresPostgresConnectionOutput
}

type SourcePostgresPostgresConnectionArgs struct {
	// The posgresConnection database name.
	DatabaseName pulumi.StringPtrInput `pulumi:"databaseName"`
	// The posgresConnection name.
	Name pulumi.StringInput `pulumi:"name"`
	// The posgresConnection schema name.
	SchemaName pulumi.StringPtrInput `pulumi:"schemaName"`
}

func (SourcePostgresPostgresConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SourcePostgresPostgresConnection)(nil)).Elem()
}

func (i SourcePostgresPostgresConnectionArgs) ToSourcePostgresPostgresConnectionOutput() SourcePostgresPostgresConnectionOutput {
	return i.ToSourcePostgresPostgresConnectionOutputWithContext(context.Background())
}

func (i SourcePostgresPostgresConnectionArgs) ToSourcePostgresPostgresConnectionOutputWithContext(ctx context.Context) SourcePostgresPostgresConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourcePostgresPostgresConnectionOutput)
}

func (i SourcePostgresPostgresConnectionArgs) ToSourcePostgresPostgresConnectionPtrOutput() SourcePostgresPostgresConnectionPtrOutput {
	return i.ToSourcePostgresPostgresConnectionPtrOutputWithContext(context.Background())
}

func (i SourcePostgresPostgresConnectionArgs) ToSourcePostgresPostgresConnectionPtrOutputWithContext(ctx context.Context) SourcePostgresPostgresConnectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourcePostgresPostgresConnectionOutput).ToSourcePostgresPostgresConnectionPtrOutputWithContext(ctx)
}

// SourcePostgresPostgresConnectionPtrInput is an input type that accepts SourcePostgresPostgresConnectionArgs, SourcePostgresPostgresConnectionPtr and SourcePostgresPostgresConnectionPtrOutput values.
// You can construct a concrete instance of `SourcePostgresPostgresConnectionPtrInput` via:
//
//	        SourcePostgresPostgresConnectionArgs{...}
//
//	or:
//
//	        nil
type SourcePostgresPostgresConnectionPtrInput interface {
	pulumi.Input

	ToSourcePostgresPostgresConnectionPtrOutput() SourcePostgresPostgresConnectionPtrOutput
	ToSourcePostgresPostgresConnectionPtrOutputWithContext(context.Context) SourcePostgresPostgresConnectionPtrOutput
}

type sourcePostgresPostgresConnectionPtrType SourcePostgresPostgresConnectionArgs

func SourcePostgresPostgresConnectionPtr(v *SourcePostgresPostgresConnectionArgs) SourcePostgresPostgresConnectionPtrInput {
	return (*sourcePostgresPostgresConnectionPtrType)(v)
}

func (*sourcePostgresPostgresConnectionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SourcePostgresPostgresConnection)(nil)).Elem()
}

func (i *sourcePostgresPostgresConnectionPtrType) ToSourcePostgresPostgresConnectionPtrOutput() SourcePostgresPostgresConnectionPtrOutput {
	return i.ToSourcePostgresPostgresConnectionPtrOutputWithContext(context.Background())
}

func (i *sourcePostgresPostgresConnectionPtrType) ToSourcePostgresPostgresConnectionPtrOutputWithContext(ctx context.Context) SourcePostgresPostgresConnectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourcePostgresPostgresConnectionPtrOutput)
}

type SourcePostgresPostgresConnectionOutput struct{ *pulumi.OutputState }

func (SourcePostgresPostgresConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourcePostgresPostgresConnection)(nil)).Elem()
}

func (o SourcePostgresPostgresConnectionOutput) ToSourcePostgresPostgresConnectionOutput() SourcePostgresPostgresConnectionOutput {
	return o
}

func (o SourcePostgresPostgresConnectionOutput) ToSourcePostgresPostgresConnectionOutputWithContext(ctx context.Context) SourcePostgresPostgresConnectionOutput {
	return o
}

func (o SourcePostgresPostgresConnectionOutput) ToSourcePostgresPostgresConnectionPtrOutput() SourcePostgresPostgresConnectionPtrOutput {
	return o.ToSourcePostgresPostgresConnectionPtrOutputWithContext(context.Background())
}

func (o SourcePostgresPostgresConnectionOutput) ToSourcePostgresPostgresConnectionPtrOutputWithContext(ctx context.Context) SourcePostgresPostgresConnectionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SourcePostgresPostgresConnection) *SourcePostgresPostgresConnection {
		return &v
	}).(SourcePostgresPostgresConnectionPtrOutput)
}

// The posgresConnection database name.
func (o SourcePostgresPostgresConnectionOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourcePostgresPostgresConnection) *string { return v.DatabaseName }).(pulumi.StringPtrOutput)
}

// The posgresConnection name.
func (o SourcePostgresPostgresConnectionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SourcePostgresPostgresConnection) string { return v.Name }).(pulumi.StringOutput)
}

// The posgresConnection schema name.
func (o SourcePostgresPostgresConnectionOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourcePostgresPostgresConnection) *string { return v.SchemaName }).(pulumi.StringPtrOutput)
}

type SourcePostgresPostgresConnectionPtrOutput struct{ *pulumi.OutputState }

func (SourcePostgresPostgresConnectionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourcePostgresPostgresConnection)(nil)).Elem()
}

func (o SourcePostgresPostgresConnectionPtrOutput) ToSourcePostgresPostgresConnectionPtrOutput() SourcePostgresPostgresConnectionPtrOutput {
	return o
}

func (o SourcePostgresPostgresConnectionPtrOutput) ToSourcePostgresPostgresConnectionPtrOutputWithContext(ctx context.Context) SourcePostgresPostgresConnectionPtrOutput {
	return o
}

func (o SourcePostgresPostgresConnectionPtrOutput) Elem() SourcePostgresPostgresConnectionOutput {
	return o.ApplyT(func(v *SourcePostgresPostgresConnection) SourcePostgresPostgresConnection {
		if v != nil {
			return *v
		}
		var ret SourcePostgresPostgresConnection
		return ret
	}).(SourcePostgresPostgresConnectionOutput)
}

// The posgresConnection database name.
func (o SourcePostgresPostgresConnectionPtrOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourcePostgresPostgresConnection) *string {
		if v == nil {
			return nil
		}
		return v.DatabaseName
	}).(pulumi.StringPtrOutput)
}

// The posgresConnection name.
func (o SourcePostgresPostgresConnectionPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourcePostgresPostgresConnection) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The posgresConnection schema name.
func (o SourcePostgresPostgresConnectionPtrOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourcePostgresPostgresConnection) *string {
		if v == nil {
			return nil
		}
		return v.SchemaName
	}).(pulumi.StringPtrOutput)
}

type SourcePostgresTable struct {
	// The alias of the table.
	Alias *string `pulumi:"alias"`
	// The name of the table.
	Name string `pulumi:"name"`
}

// SourcePostgresTableInput is an input type that accepts SourcePostgresTableArgs and SourcePostgresTableOutput values.
// You can construct a concrete instance of `SourcePostgresTableInput` via:
//
//	SourcePostgresTableArgs{...}
type SourcePostgresTableInput interface {
	pulumi.Input

	ToSourcePostgresTableOutput() SourcePostgresTableOutput
	ToSourcePostgresTableOutputWithContext(context.Context) SourcePostgresTableOutput
}

type SourcePostgresTableArgs struct {
	// The alias of the table.
	Alias pulumi.StringPtrInput `pulumi:"alias"`
	// The name of the table.
	Name pulumi.StringInput `pulumi:"name"`
}

func (SourcePostgresTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SourcePostgresTable)(nil)).Elem()
}

func (i SourcePostgresTableArgs) ToSourcePostgresTableOutput() SourcePostgresTableOutput {
	return i.ToSourcePostgresTableOutputWithContext(context.Background())
}

func (i SourcePostgresTableArgs) ToSourcePostgresTableOutputWithContext(ctx context.Context) SourcePostgresTableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourcePostgresTableOutput)
}

// SourcePostgresTableArrayInput is an input type that accepts SourcePostgresTableArray and SourcePostgresTableArrayOutput values.
// You can construct a concrete instance of `SourcePostgresTableArrayInput` via:
//
//	SourcePostgresTableArray{ SourcePostgresTableArgs{...} }
type SourcePostgresTableArrayInput interface {
	pulumi.Input

	ToSourcePostgresTableArrayOutput() SourcePostgresTableArrayOutput
	ToSourcePostgresTableArrayOutputWithContext(context.Context) SourcePostgresTableArrayOutput
}

type SourcePostgresTableArray []SourcePostgresTableInput

func (SourcePostgresTableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SourcePostgresTable)(nil)).Elem()
}

func (i SourcePostgresTableArray) ToSourcePostgresTableArrayOutput() SourcePostgresTableArrayOutput {
	return i.ToSourcePostgresTableArrayOutputWithContext(context.Background())
}

func (i SourcePostgresTableArray) ToSourcePostgresTableArrayOutputWithContext(ctx context.Context) SourcePostgresTableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourcePostgresTableArrayOutput)
}

type SourcePostgresTableOutput struct{ *pulumi.OutputState }

func (SourcePostgresTableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourcePostgresTable)(nil)).Elem()
}

func (o SourcePostgresTableOutput) ToSourcePostgresTableOutput() SourcePostgresTableOutput {
	return o
}

func (o SourcePostgresTableOutput) ToSourcePostgresTableOutputWithContext(ctx context.Context) SourcePostgresTableOutput {
	return o
}

// The alias of the table.
func (o SourcePostgresTableOutput) Alias() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourcePostgresTable) *string { return v.Alias }).(pulumi.StringPtrOutput)
}

// The name of the table.
func (o SourcePostgresTableOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SourcePostgresTable) string { return v.Name }).(pulumi.StringOutput)
}

type SourcePostgresTableArrayOutput struct{ *pulumi.OutputState }

func (SourcePostgresTableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SourcePostgresTable)(nil)).Elem()
}

func (o SourcePostgresTableArrayOutput) ToSourcePostgresTableArrayOutput() SourcePostgresTableArrayOutput {
	return o
}

func (o SourcePostgresTableArrayOutput) ToSourcePostgresTableArrayOutputWithContext(ctx context.Context) SourcePostgresTableArrayOutput {
	return o
}

func (o SourcePostgresTableArrayOutput) Index(i pulumi.IntInput) SourcePostgresTableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SourcePostgresTable {
		return vs[0].([]SourcePostgresTable)[vs[1].(int)]
	}).(SourcePostgresTableOutput)
}

type TableColumn struct {
	// The name of the column to be created in the table.
	Name string `pulumi:"name"`
	// Do not allow the column to contain NULL values. Columns without this constraint can contain NULL values.
	Nullable *bool `pulumi:"nullable"`
	// The data type of the column indicated by name.
	Type string `pulumi:"type"`
}

// TableColumnInput is an input type that accepts TableColumnArgs and TableColumnOutput values.
// You can construct a concrete instance of `TableColumnInput` via:
//
//	TableColumnArgs{...}
type TableColumnInput interface {
	pulumi.Input

	ToTableColumnOutput() TableColumnOutput
	ToTableColumnOutputWithContext(context.Context) TableColumnOutput
}

type TableColumnArgs struct {
	// The name of the column to be created in the table.
	Name pulumi.StringInput `pulumi:"name"`
	// Do not allow the column to contain NULL values. Columns without this constraint can contain NULL values.
	Nullable pulumi.BoolPtrInput `pulumi:"nullable"`
	// The data type of the column indicated by name.
	Type pulumi.StringInput `pulumi:"type"`
}

func (TableColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableColumn)(nil)).Elem()
}

func (i TableColumnArgs) ToTableColumnOutput() TableColumnOutput {
	return i.ToTableColumnOutputWithContext(context.Background())
}

func (i TableColumnArgs) ToTableColumnOutputWithContext(ctx context.Context) TableColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableColumnOutput)
}

// TableColumnArrayInput is an input type that accepts TableColumnArray and TableColumnArrayOutput values.
// You can construct a concrete instance of `TableColumnArrayInput` via:
//
//	TableColumnArray{ TableColumnArgs{...} }
type TableColumnArrayInput interface {
	pulumi.Input

	ToTableColumnArrayOutput() TableColumnArrayOutput
	ToTableColumnArrayOutputWithContext(context.Context) TableColumnArrayOutput
}

type TableColumnArray []TableColumnInput

func (TableColumnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableColumn)(nil)).Elem()
}

func (i TableColumnArray) ToTableColumnArrayOutput() TableColumnArrayOutput {
	return i.ToTableColumnArrayOutputWithContext(context.Background())
}

func (i TableColumnArray) ToTableColumnArrayOutputWithContext(ctx context.Context) TableColumnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableColumnArrayOutput)
}

type TableColumnOutput struct{ *pulumi.OutputState }

func (TableColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableColumn)(nil)).Elem()
}

func (o TableColumnOutput) ToTableColumnOutput() TableColumnOutput {
	return o
}

func (o TableColumnOutput) ToTableColumnOutputWithContext(ctx context.Context) TableColumnOutput {
	return o
}

// The name of the column to be created in the table.
func (o TableColumnOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TableColumn) string { return v.Name }).(pulumi.StringOutput)
}

// Do not allow the column to contain NULL values. Columns without this constraint can contain NULL values.
func (o TableColumnOutput) Nullable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TableColumn) *bool { return v.Nullable }).(pulumi.BoolPtrOutput)
}

// The data type of the column indicated by name.
func (o TableColumnOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TableColumn) string { return v.Type }).(pulumi.StringOutput)
}

type TableColumnArrayOutput struct{ *pulumi.OutputState }

func (TableColumnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableColumn)(nil)).Elem()
}

func (o TableColumnArrayOutput) ToTableColumnArrayOutput() TableColumnArrayOutput {
	return o
}

func (o TableColumnArrayOutput) ToTableColumnArrayOutputWithContext(ctx context.Context) TableColumnArrayOutput {
	return o
}

func (o TableColumnArrayOutput) Index(i pulumi.IntInput) TableColumnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TableColumn {
		return vs[0].([]TableColumn)[vs[1].(int)]
	}).(TableColumnOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionConfluentSchemaRegistryAwsPrivatelinkInput)(nil)).Elem(), ConnectionConfluentSchemaRegistryAwsPrivatelinkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionConfluentSchemaRegistryAwsPrivatelinkPtrInput)(nil)).Elem(), ConnectionConfluentSchemaRegistryAwsPrivatelinkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionConfluentSchemaRegistryPasswordInput)(nil)).Elem(), ConnectionConfluentSchemaRegistryPasswordArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionConfluentSchemaRegistryPasswordPtrInput)(nil)).Elem(), ConnectionConfluentSchemaRegistryPasswordArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionConfluentSchemaRegistrySshTunnelInput)(nil)).Elem(), ConnectionConfluentSchemaRegistrySshTunnelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionConfluentSchemaRegistrySshTunnelPtrInput)(nil)).Elem(), ConnectionConfluentSchemaRegistrySshTunnelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionConfluentSchemaRegistrySslCertificateInput)(nil)).Elem(), ConnectionConfluentSchemaRegistrySslCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionConfluentSchemaRegistrySslCertificatePtrInput)(nil)).Elem(), ConnectionConfluentSchemaRegistrySslCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionConfluentSchemaRegistrySslCertificateAuthorityInput)(nil)).Elem(), ConnectionConfluentSchemaRegistrySslCertificateAuthorityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionConfluentSchemaRegistrySslCertificateAuthorityPtrInput)(nil)).Elem(), ConnectionConfluentSchemaRegistrySslCertificateAuthorityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretInput)(nil)).Elem(), ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretPtrInput)(nil)).Elem(), ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionConfluentSchemaRegistrySslCertificateSecretInput)(nil)).Elem(), ConnectionConfluentSchemaRegistrySslCertificateSecretArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionConfluentSchemaRegistrySslCertificateSecretPtrInput)(nil)).Elem(), ConnectionConfluentSchemaRegistrySslCertificateSecretArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionConfluentSchemaRegistrySslKeyInput)(nil)).Elem(), ConnectionConfluentSchemaRegistrySslKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionConfluentSchemaRegistrySslKeyPtrInput)(nil)).Elem(), ConnectionConfluentSchemaRegistrySslKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionConfluentSchemaRegistryUsernameInput)(nil)).Elem(), ConnectionConfluentSchemaRegistryUsernameArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionConfluentSchemaRegistryUsernamePtrInput)(nil)).Elem(), ConnectionConfluentSchemaRegistryUsernameArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionConfluentSchemaRegistryUsernameSecretInput)(nil)).Elem(), ConnectionConfluentSchemaRegistryUsernameSecretArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionConfluentSchemaRegistryUsernameSecretPtrInput)(nil)).Elem(), ConnectionConfluentSchemaRegistryUsernameSecretArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionKafkaKafkaBrokerInput)(nil)).Elem(), ConnectionKafkaKafkaBrokerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionKafkaKafkaBrokerArrayInput)(nil)).Elem(), ConnectionKafkaKafkaBrokerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionKafkaKafkaBrokerPrivatelinkConnectionInput)(nil)).Elem(), ConnectionKafkaKafkaBrokerPrivatelinkConnectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionKafkaKafkaBrokerPrivatelinkConnectionPtrInput)(nil)).Elem(), ConnectionKafkaKafkaBrokerPrivatelinkConnectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionKafkaSaslPasswordInput)(nil)).Elem(), ConnectionKafkaSaslPasswordArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionKafkaSaslPasswordPtrInput)(nil)).Elem(), ConnectionKafkaSaslPasswordArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionKafkaSaslUsernameInput)(nil)).Elem(), ConnectionKafkaSaslUsernameArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionKafkaSaslUsernamePtrInput)(nil)).Elem(), ConnectionKafkaSaslUsernameArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionKafkaSaslUsernameSecretInput)(nil)).Elem(), ConnectionKafkaSaslUsernameSecretArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionKafkaSaslUsernameSecretPtrInput)(nil)).Elem(), ConnectionKafkaSaslUsernameSecretArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionKafkaSshTunnelInput)(nil)).Elem(), ConnectionKafkaSshTunnelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionKafkaSshTunnelPtrInput)(nil)).Elem(), ConnectionKafkaSshTunnelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionKafkaSslCertificateInput)(nil)).Elem(), ConnectionKafkaSslCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionKafkaSslCertificatePtrInput)(nil)).Elem(), ConnectionKafkaSslCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionKafkaSslCertificateAuthorityInput)(nil)).Elem(), ConnectionKafkaSslCertificateAuthorityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionKafkaSslCertificateAuthorityPtrInput)(nil)).Elem(), ConnectionKafkaSslCertificateAuthorityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionKafkaSslCertificateAuthoritySecretInput)(nil)).Elem(), ConnectionKafkaSslCertificateAuthoritySecretArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionKafkaSslCertificateAuthoritySecretPtrInput)(nil)).Elem(), ConnectionKafkaSslCertificateAuthoritySecretArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionKafkaSslCertificateSecretInput)(nil)).Elem(), ConnectionKafkaSslCertificateSecretArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionKafkaSslCertificateSecretPtrInput)(nil)).Elem(), ConnectionKafkaSslCertificateSecretArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionKafkaSslKeyInput)(nil)).Elem(), ConnectionKafkaSslKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionKafkaSslKeyPtrInput)(nil)).Elem(), ConnectionKafkaSslKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionPostgresAwsPrivatelinkInput)(nil)).Elem(), ConnectionPostgresAwsPrivatelinkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionPostgresAwsPrivatelinkPtrInput)(nil)).Elem(), ConnectionPostgresAwsPrivatelinkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionPostgresPasswordInput)(nil)).Elem(), ConnectionPostgresPasswordArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionPostgresPasswordPtrInput)(nil)).Elem(), ConnectionPostgresPasswordArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionPostgresSshTunnelInput)(nil)).Elem(), ConnectionPostgresSshTunnelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionPostgresSshTunnelPtrInput)(nil)).Elem(), ConnectionPostgresSshTunnelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionPostgresSslCertificateInput)(nil)).Elem(), ConnectionPostgresSslCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionPostgresSslCertificatePtrInput)(nil)).Elem(), ConnectionPostgresSslCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionPostgresSslCertificateAuthorityInput)(nil)).Elem(), ConnectionPostgresSslCertificateAuthorityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionPostgresSslCertificateAuthorityPtrInput)(nil)).Elem(), ConnectionPostgresSslCertificateAuthorityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionPostgresSslCertificateAuthoritySecretInput)(nil)).Elem(), ConnectionPostgresSslCertificateAuthoritySecretArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionPostgresSslCertificateAuthoritySecretPtrInput)(nil)).Elem(), ConnectionPostgresSslCertificateAuthoritySecretArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionPostgresSslCertificateSecretInput)(nil)).Elem(), ConnectionPostgresSslCertificateSecretArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionPostgresSslCertificateSecretPtrInput)(nil)).Elem(), ConnectionPostgresSslCertificateSecretArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionPostgresSslKeyInput)(nil)).Elem(), ConnectionPostgresSslKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionPostgresSslKeyPtrInput)(nil)).Elem(), ConnectionPostgresSslKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionPostgresUserInput)(nil)).Elem(), ConnectionPostgresUserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionPostgresUserPtrInput)(nil)).Elem(), ConnectionPostgresUserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionPostgresUserSecretInput)(nil)).Elem(), ConnectionPostgresUserSecretArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionPostgresUserSecretPtrInput)(nil)).Elem(), ConnectionPostgresUserSecretArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClusterReplicasClusterReplicaInput)(nil)).Elem(), GetClusterReplicasClusterReplicaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClusterReplicasClusterReplicaArrayInput)(nil)).Elem(), GetClusterReplicasClusterReplicaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClustersClusterInput)(nil)).Elem(), GetClustersClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClustersClusterArrayInput)(nil)).Elem(), GetClustersClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetConnectionsConnectionInput)(nil)).Elem(), GetConnectionsConnectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetConnectionsConnectionArrayInput)(nil)).Elem(), GetConnectionsConnectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDatabasesDatabaseInput)(nil)).Elem(), GetDatabasesDatabaseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDatabasesDatabaseArrayInput)(nil)).Elem(), GetDatabasesDatabaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetIndexesIndexInput)(nil)).Elem(), GetIndexesIndexArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetIndexesIndexArrayInput)(nil)).Elem(), GetIndexesIndexArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetMaterializedViewsMaterializedViewInput)(nil)).Elem(), GetMaterializedViewsMaterializedViewArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetMaterializedViewsMaterializedViewArrayInput)(nil)).Elem(), GetMaterializedViewsMaterializedViewArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSchemasSchemaInput)(nil)).Elem(), GetSchemasSchemaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSchemasSchemaArrayInput)(nil)).Elem(), GetSchemasSchemaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecretsSecretInput)(nil)).Elem(), GetSecretsSecretArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecretsSecretArrayInput)(nil)).Elem(), GetSecretsSecretArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSinksSinkInput)(nil)).Elem(), GetSinksSinkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSinksSinkArrayInput)(nil)).Elem(), GetSinksSinkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSourcesSourceInput)(nil)).Elem(), GetSourcesSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSourcesSourceArrayInput)(nil)).Elem(), GetSourcesSourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTablesTableInput)(nil)).Elem(), GetTablesTableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTablesTableArrayInput)(nil)).Elem(), GetTablesTableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetViewsViewInput)(nil)).Elem(), GetViewsViewArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetViewsViewArrayInput)(nil)).Elem(), GetViewsViewArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IndexColExprInput)(nil)).Elem(), IndexColExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IndexColExprArrayInput)(nil)).Elem(), IndexColExprArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IndexObjNameInput)(nil)).Elem(), IndexObjNameArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IndexObjNamePtrInput)(nil)).Elem(), IndexObjNameArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SinkKafkaEnvelopeInput)(nil)).Elem(), SinkKafkaEnvelopeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SinkKafkaEnvelopePtrInput)(nil)).Elem(), SinkKafkaEnvelopeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SinkKafkaFormatInput)(nil)).Elem(), SinkKafkaFormatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SinkKafkaFormatPtrInput)(nil)).Elem(), SinkKafkaFormatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SinkKafkaFormatAvroInput)(nil)).Elem(), SinkKafkaFormatAvroArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SinkKafkaFormatAvroPtrInput)(nil)).Elem(), SinkKafkaFormatAvroArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SinkKafkaFormatAvroSchemaRegistryConnectionInput)(nil)).Elem(), SinkKafkaFormatAvroSchemaRegistryConnectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SinkKafkaFormatAvroSchemaRegistryConnectionPtrInput)(nil)).Elem(), SinkKafkaFormatAvroSchemaRegistryConnectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SinkKafkaFromInput)(nil)).Elem(), SinkKafkaFromArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SinkKafkaFromPtrInput)(nil)).Elem(), SinkKafkaFromArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SinkKafkaKafkaConnectionInput)(nil)).Elem(), SinkKafkaKafkaConnectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SinkKafkaKafkaConnectionPtrInput)(nil)).Elem(), SinkKafkaKafkaConnectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceKafkaEnvelopeInput)(nil)).Elem(), SourceKafkaEnvelopeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceKafkaEnvelopePtrInput)(nil)).Elem(), SourceKafkaEnvelopeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceKafkaFormatInput)(nil)).Elem(), SourceKafkaFormatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceKafkaFormatPtrInput)(nil)).Elem(), SourceKafkaFormatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceKafkaFormatAvroInput)(nil)).Elem(), SourceKafkaFormatAvroArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceKafkaFormatAvroPtrInput)(nil)).Elem(), SourceKafkaFormatAvroArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceKafkaFormatAvroSchemaRegistryConnectionInput)(nil)).Elem(), SourceKafkaFormatAvroSchemaRegistryConnectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceKafkaFormatAvroSchemaRegistryConnectionPtrInput)(nil)).Elem(), SourceKafkaFormatAvroSchemaRegistryConnectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceKafkaFormatCsvInput)(nil)).Elem(), SourceKafkaFormatCsvArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceKafkaFormatCsvArrayInput)(nil)).Elem(), SourceKafkaFormatCsvArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceKafkaFormatProtobufInput)(nil)).Elem(), SourceKafkaFormatProtobufArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceKafkaFormatProtobufPtrInput)(nil)).Elem(), SourceKafkaFormatProtobufArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceKafkaFormatProtobufSchemaRegistryConnectionInput)(nil)).Elem(), SourceKafkaFormatProtobufSchemaRegistryConnectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceKafkaFormatProtobufSchemaRegistryConnectionPtrInput)(nil)).Elem(), SourceKafkaFormatProtobufSchemaRegistryConnectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceKafkaKafkaConnectionInput)(nil)).Elem(), SourceKafkaKafkaConnectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceKafkaKafkaConnectionPtrInput)(nil)).Elem(), SourceKafkaKafkaConnectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceKafkaKeyFormatInput)(nil)).Elem(), SourceKafkaKeyFormatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceKafkaKeyFormatPtrInput)(nil)).Elem(), SourceKafkaKeyFormatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceKafkaKeyFormatAvroInput)(nil)).Elem(), SourceKafkaKeyFormatAvroArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceKafkaKeyFormatAvroPtrInput)(nil)).Elem(), SourceKafkaKeyFormatAvroArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceKafkaKeyFormatAvroSchemaRegistryConnectionInput)(nil)).Elem(), SourceKafkaKeyFormatAvroSchemaRegistryConnectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceKafkaKeyFormatAvroSchemaRegistryConnectionPtrInput)(nil)).Elem(), SourceKafkaKeyFormatAvroSchemaRegistryConnectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceKafkaKeyFormatCsvInput)(nil)).Elem(), SourceKafkaKeyFormatCsvArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceKafkaKeyFormatCsvArrayInput)(nil)).Elem(), SourceKafkaKeyFormatCsvArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceKafkaKeyFormatProtobufInput)(nil)).Elem(), SourceKafkaKeyFormatProtobufArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceKafkaKeyFormatProtobufPtrInput)(nil)).Elem(), SourceKafkaKeyFormatProtobufArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceKafkaKeyFormatProtobufSchemaRegistryConnectionInput)(nil)).Elem(), SourceKafkaKeyFormatProtobufSchemaRegistryConnectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceKafkaKeyFormatProtobufSchemaRegistryConnectionPtrInput)(nil)).Elem(), SourceKafkaKeyFormatProtobufSchemaRegistryConnectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceKafkaValueFormatInput)(nil)).Elem(), SourceKafkaValueFormatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceKafkaValueFormatPtrInput)(nil)).Elem(), SourceKafkaValueFormatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceKafkaValueFormatAvroInput)(nil)).Elem(), SourceKafkaValueFormatAvroArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceKafkaValueFormatAvroPtrInput)(nil)).Elem(), SourceKafkaValueFormatAvroArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceKafkaValueFormatAvroSchemaRegistryConnectionInput)(nil)).Elem(), SourceKafkaValueFormatAvroSchemaRegistryConnectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceKafkaValueFormatAvroSchemaRegistryConnectionPtrInput)(nil)).Elem(), SourceKafkaValueFormatAvroSchemaRegistryConnectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceKafkaValueFormatCsvInput)(nil)).Elem(), SourceKafkaValueFormatCsvArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceKafkaValueFormatCsvArrayInput)(nil)).Elem(), SourceKafkaValueFormatCsvArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceKafkaValueFormatProtobufInput)(nil)).Elem(), SourceKafkaValueFormatProtobufArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceKafkaValueFormatProtobufPtrInput)(nil)).Elem(), SourceKafkaValueFormatProtobufArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceKafkaValueFormatProtobufSchemaRegistryConnectionInput)(nil)).Elem(), SourceKafkaValueFormatProtobufSchemaRegistryConnectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceKafkaValueFormatProtobufSchemaRegistryConnectionPtrInput)(nil)).Elem(), SourceKafkaValueFormatProtobufSchemaRegistryConnectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceLoadgenAuctionOptionInput)(nil)).Elem(), SourceLoadgenAuctionOptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceLoadgenAuctionOptionArrayInput)(nil)).Elem(), SourceLoadgenAuctionOptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceLoadgenAuctionOptionTableInput)(nil)).Elem(), SourceLoadgenAuctionOptionTableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceLoadgenAuctionOptionTableArrayInput)(nil)).Elem(), SourceLoadgenAuctionOptionTableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceLoadgenCounterOptionInput)(nil)).Elem(), SourceLoadgenCounterOptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceLoadgenCounterOptionArrayInput)(nil)).Elem(), SourceLoadgenCounterOptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceLoadgenTpchOptionInput)(nil)).Elem(), SourceLoadgenTpchOptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceLoadgenTpchOptionArrayInput)(nil)).Elem(), SourceLoadgenTpchOptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceLoadgenTpchOptionTableInput)(nil)).Elem(), SourceLoadgenTpchOptionTableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceLoadgenTpchOptionTableArrayInput)(nil)).Elem(), SourceLoadgenTpchOptionTableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourcePostgresPostgresConnectionInput)(nil)).Elem(), SourcePostgresPostgresConnectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourcePostgresPostgresConnectionPtrInput)(nil)).Elem(), SourcePostgresPostgresConnectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourcePostgresTableInput)(nil)).Elem(), SourcePostgresTableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourcePostgresTableArrayInput)(nil)).Elem(), SourcePostgresTableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableColumnInput)(nil)).Elem(), TableColumnArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableColumnArrayInput)(nil)).Elem(), TableColumnArray{})
	pulumi.RegisterOutputType(ConnectionConfluentSchemaRegistryAwsPrivatelinkOutput{})
	pulumi.RegisterOutputType(ConnectionConfluentSchemaRegistryAwsPrivatelinkPtrOutput{})
	pulumi.RegisterOutputType(ConnectionConfluentSchemaRegistryPasswordOutput{})
	pulumi.RegisterOutputType(ConnectionConfluentSchemaRegistryPasswordPtrOutput{})
	pulumi.RegisterOutputType(ConnectionConfluentSchemaRegistrySshTunnelOutput{})
	pulumi.RegisterOutputType(ConnectionConfluentSchemaRegistrySshTunnelPtrOutput{})
	pulumi.RegisterOutputType(ConnectionConfluentSchemaRegistrySslCertificateOutput{})
	pulumi.RegisterOutputType(ConnectionConfluentSchemaRegistrySslCertificatePtrOutput{})
	pulumi.RegisterOutputType(ConnectionConfluentSchemaRegistrySslCertificateAuthorityOutput{})
	pulumi.RegisterOutputType(ConnectionConfluentSchemaRegistrySslCertificateAuthorityPtrOutput{})
	pulumi.RegisterOutputType(ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretOutput{})
	pulumi.RegisterOutputType(ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecretPtrOutput{})
	pulumi.RegisterOutputType(ConnectionConfluentSchemaRegistrySslCertificateSecretOutput{})
	pulumi.RegisterOutputType(ConnectionConfluentSchemaRegistrySslCertificateSecretPtrOutput{})
	pulumi.RegisterOutputType(ConnectionConfluentSchemaRegistrySslKeyOutput{})
	pulumi.RegisterOutputType(ConnectionConfluentSchemaRegistrySslKeyPtrOutput{})
	pulumi.RegisterOutputType(ConnectionConfluentSchemaRegistryUsernameOutput{})
	pulumi.RegisterOutputType(ConnectionConfluentSchemaRegistryUsernamePtrOutput{})
	pulumi.RegisterOutputType(ConnectionConfluentSchemaRegistryUsernameSecretOutput{})
	pulumi.RegisterOutputType(ConnectionConfluentSchemaRegistryUsernameSecretPtrOutput{})
	pulumi.RegisterOutputType(ConnectionKafkaKafkaBrokerOutput{})
	pulumi.RegisterOutputType(ConnectionKafkaKafkaBrokerArrayOutput{})
	pulumi.RegisterOutputType(ConnectionKafkaKafkaBrokerPrivatelinkConnectionOutput{})
	pulumi.RegisterOutputType(ConnectionKafkaKafkaBrokerPrivatelinkConnectionPtrOutput{})
	pulumi.RegisterOutputType(ConnectionKafkaSaslPasswordOutput{})
	pulumi.RegisterOutputType(ConnectionKafkaSaslPasswordPtrOutput{})
	pulumi.RegisterOutputType(ConnectionKafkaSaslUsernameOutput{})
	pulumi.RegisterOutputType(ConnectionKafkaSaslUsernamePtrOutput{})
	pulumi.RegisterOutputType(ConnectionKafkaSaslUsernameSecretOutput{})
	pulumi.RegisterOutputType(ConnectionKafkaSaslUsernameSecretPtrOutput{})
	pulumi.RegisterOutputType(ConnectionKafkaSshTunnelOutput{})
	pulumi.RegisterOutputType(ConnectionKafkaSshTunnelPtrOutput{})
	pulumi.RegisterOutputType(ConnectionKafkaSslCertificateOutput{})
	pulumi.RegisterOutputType(ConnectionKafkaSslCertificatePtrOutput{})
	pulumi.RegisterOutputType(ConnectionKafkaSslCertificateAuthorityOutput{})
	pulumi.RegisterOutputType(ConnectionKafkaSslCertificateAuthorityPtrOutput{})
	pulumi.RegisterOutputType(ConnectionKafkaSslCertificateAuthoritySecretOutput{})
	pulumi.RegisterOutputType(ConnectionKafkaSslCertificateAuthoritySecretPtrOutput{})
	pulumi.RegisterOutputType(ConnectionKafkaSslCertificateSecretOutput{})
	pulumi.RegisterOutputType(ConnectionKafkaSslCertificateSecretPtrOutput{})
	pulumi.RegisterOutputType(ConnectionKafkaSslKeyOutput{})
	pulumi.RegisterOutputType(ConnectionKafkaSslKeyPtrOutput{})
	pulumi.RegisterOutputType(ConnectionPostgresAwsPrivatelinkOutput{})
	pulumi.RegisterOutputType(ConnectionPostgresAwsPrivatelinkPtrOutput{})
	pulumi.RegisterOutputType(ConnectionPostgresPasswordOutput{})
	pulumi.RegisterOutputType(ConnectionPostgresPasswordPtrOutput{})
	pulumi.RegisterOutputType(ConnectionPostgresSshTunnelOutput{})
	pulumi.RegisterOutputType(ConnectionPostgresSshTunnelPtrOutput{})
	pulumi.RegisterOutputType(ConnectionPostgresSslCertificateOutput{})
	pulumi.RegisterOutputType(ConnectionPostgresSslCertificatePtrOutput{})
	pulumi.RegisterOutputType(ConnectionPostgresSslCertificateAuthorityOutput{})
	pulumi.RegisterOutputType(ConnectionPostgresSslCertificateAuthorityPtrOutput{})
	pulumi.RegisterOutputType(ConnectionPostgresSslCertificateAuthoritySecretOutput{})
	pulumi.RegisterOutputType(ConnectionPostgresSslCertificateAuthoritySecretPtrOutput{})
	pulumi.RegisterOutputType(ConnectionPostgresSslCertificateSecretOutput{})
	pulumi.RegisterOutputType(ConnectionPostgresSslCertificateSecretPtrOutput{})
	pulumi.RegisterOutputType(ConnectionPostgresSslKeyOutput{})
	pulumi.RegisterOutputType(ConnectionPostgresSslKeyPtrOutput{})
	pulumi.RegisterOutputType(ConnectionPostgresUserOutput{})
	pulumi.RegisterOutputType(ConnectionPostgresUserPtrOutput{})
	pulumi.RegisterOutputType(ConnectionPostgresUserSecretOutput{})
	pulumi.RegisterOutputType(ConnectionPostgresUserSecretPtrOutput{})
	pulumi.RegisterOutputType(GetClusterReplicasClusterReplicaOutput{})
	pulumi.RegisterOutputType(GetClusterReplicasClusterReplicaArrayOutput{})
	pulumi.RegisterOutputType(GetClustersClusterOutput{})
	pulumi.RegisterOutputType(GetClustersClusterArrayOutput{})
	pulumi.RegisterOutputType(GetConnectionsConnectionOutput{})
	pulumi.RegisterOutputType(GetConnectionsConnectionArrayOutput{})
	pulumi.RegisterOutputType(GetDatabasesDatabaseOutput{})
	pulumi.RegisterOutputType(GetDatabasesDatabaseArrayOutput{})
	pulumi.RegisterOutputType(GetIndexesIndexOutput{})
	pulumi.RegisterOutputType(GetIndexesIndexArrayOutput{})
	pulumi.RegisterOutputType(GetMaterializedViewsMaterializedViewOutput{})
	pulumi.RegisterOutputType(GetMaterializedViewsMaterializedViewArrayOutput{})
	pulumi.RegisterOutputType(GetSchemasSchemaOutput{})
	pulumi.RegisterOutputType(GetSchemasSchemaArrayOutput{})
	pulumi.RegisterOutputType(GetSecretsSecretOutput{})
	pulumi.RegisterOutputType(GetSecretsSecretArrayOutput{})
	pulumi.RegisterOutputType(GetSinksSinkOutput{})
	pulumi.RegisterOutputType(GetSinksSinkArrayOutput{})
	pulumi.RegisterOutputType(GetSourcesSourceOutput{})
	pulumi.RegisterOutputType(GetSourcesSourceArrayOutput{})
	pulumi.RegisterOutputType(GetTablesTableOutput{})
	pulumi.RegisterOutputType(GetTablesTableArrayOutput{})
	pulumi.RegisterOutputType(GetViewsViewOutput{})
	pulumi.RegisterOutputType(GetViewsViewArrayOutput{})
	pulumi.RegisterOutputType(IndexColExprOutput{})
	pulumi.RegisterOutputType(IndexColExprArrayOutput{})
	pulumi.RegisterOutputType(IndexObjNameOutput{})
	pulumi.RegisterOutputType(IndexObjNamePtrOutput{})
	pulumi.RegisterOutputType(SinkKafkaEnvelopeOutput{})
	pulumi.RegisterOutputType(SinkKafkaEnvelopePtrOutput{})
	pulumi.RegisterOutputType(SinkKafkaFormatOutput{})
	pulumi.RegisterOutputType(SinkKafkaFormatPtrOutput{})
	pulumi.RegisterOutputType(SinkKafkaFormatAvroOutput{})
	pulumi.RegisterOutputType(SinkKafkaFormatAvroPtrOutput{})
	pulumi.RegisterOutputType(SinkKafkaFormatAvroSchemaRegistryConnectionOutput{})
	pulumi.RegisterOutputType(SinkKafkaFormatAvroSchemaRegistryConnectionPtrOutput{})
	pulumi.RegisterOutputType(SinkKafkaFromOutput{})
	pulumi.RegisterOutputType(SinkKafkaFromPtrOutput{})
	pulumi.RegisterOutputType(SinkKafkaKafkaConnectionOutput{})
	pulumi.RegisterOutputType(SinkKafkaKafkaConnectionPtrOutput{})
	pulumi.RegisterOutputType(SourceKafkaEnvelopeOutput{})
	pulumi.RegisterOutputType(SourceKafkaEnvelopePtrOutput{})
	pulumi.RegisterOutputType(SourceKafkaFormatOutput{})
	pulumi.RegisterOutputType(SourceKafkaFormatPtrOutput{})
	pulumi.RegisterOutputType(SourceKafkaFormatAvroOutput{})
	pulumi.RegisterOutputType(SourceKafkaFormatAvroPtrOutput{})
	pulumi.RegisterOutputType(SourceKafkaFormatAvroSchemaRegistryConnectionOutput{})
	pulumi.RegisterOutputType(SourceKafkaFormatAvroSchemaRegistryConnectionPtrOutput{})
	pulumi.RegisterOutputType(SourceKafkaFormatCsvOutput{})
	pulumi.RegisterOutputType(SourceKafkaFormatCsvArrayOutput{})
	pulumi.RegisterOutputType(SourceKafkaFormatProtobufOutput{})
	pulumi.RegisterOutputType(SourceKafkaFormatProtobufPtrOutput{})
	pulumi.RegisterOutputType(SourceKafkaFormatProtobufSchemaRegistryConnectionOutput{})
	pulumi.RegisterOutputType(SourceKafkaFormatProtobufSchemaRegistryConnectionPtrOutput{})
	pulumi.RegisterOutputType(SourceKafkaKafkaConnectionOutput{})
	pulumi.RegisterOutputType(SourceKafkaKafkaConnectionPtrOutput{})
	pulumi.RegisterOutputType(SourceKafkaKeyFormatOutput{})
	pulumi.RegisterOutputType(SourceKafkaKeyFormatPtrOutput{})
	pulumi.RegisterOutputType(SourceKafkaKeyFormatAvroOutput{})
	pulumi.RegisterOutputType(SourceKafkaKeyFormatAvroPtrOutput{})
	pulumi.RegisterOutputType(SourceKafkaKeyFormatAvroSchemaRegistryConnectionOutput{})
	pulumi.RegisterOutputType(SourceKafkaKeyFormatAvroSchemaRegistryConnectionPtrOutput{})
	pulumi.RegisterOutputType(SourceKafkaKeyFormatCsvOutput{})
	pulumi.RegisterOutputType(SourceKafkaKeyFormatCsvArrayOutput{})
	pulumi.RegisterOutputType(SourceKafkaKeyFormatProtobufOutput{})
	pulumi.RegisterOutputType(SourceKafkaKeyFormatProtobufPtrOutput{})
	pulumi.RegisterOutputType(SourceKafkaKeyFormatProtobufSchemaRegistryConnectionOutput{})
	pulumi.RegisterOutputType(SourceKafkaKeyFormatProtobufSchemaRegistryConnectionPtrOutput{})
	pulumi.RegisterOutputType(SourceKafkaValueFormatOutput{})
	pulumi.RegisterOutputType(SourceKafkaValueFormatPtrOutput{})
	pulumi.RegisterOutputType(SourceKafkaValueFormatAvroOutput{})
	pulumi.RegisterOutputType(SourceKafkaValueFormatAvroPtrOutput{})
	pulumi.RegisterOutputType(SourceKafkaValueFormatAvroSchemaRegistryConnectionOutput{})
	pulumi.RegisterOutputType(SourceKafkaValueFormatAvroSchemaRegistryConnectionPtrOutput{})
	pulumi.RegisterOutputType(SourceKafkaValueFormatCsvOutput{})
	pulumi.RegisterOutputType(SourceKafkaValueFormatCsvArrayOutput{})
	pulumi.RegisterOutputType(SourceKafkaValueFormatProtobufOutput{})
	pulumi.RegisterOutputType(SourceKafkaValueFormatProtobufPtrOutput{})
	pulumi.RegisterOutputType(SourceKafkaValueFormatProtobufSchemaRegistryConnectionOutput{})
	pulumi.RegisterOutputType(SourceKafkaValueFormatProtobufSchemaRegistryConnectionPtrOutput{})
	pulumi.RegisterOutputType(SourceLoadgenAuctionOptionOutput{})
	pulumi.RegisterOutputType(SourceLoadgenAuctionOptionArrayOutput{})
	pulumi.RegisterOutputType(SourceLoadgenAuctionOptionTableOutput{})
	pulumi.RegisterOutputType(SourceLoadgenAuctionOptionTableArrayOutput{})
	pulumi.RegisterOutputType(SourceLoadgenCounterOptionOutput{})
	pulumi.RegisterOutputType(SourceLoadgenCounterOptionArrayOutput{})
	pulumi.RegisterOutputType(SourceLoadgenTpchOptionOutput{})
	pulumi.RegisterOutputType(SourceLoadgenTpchOptionArrayOutput{})
	pulumi.RegisterOutputType(SourceLoadgenTpchOptionTableOutput{})
	pulumi.RegisterOutputType(SourceLoadgenTpchOptionTableArrayOutput{})
	pulumi.RegisterOutputType(SourcePostgresPostgresConnectionOutput{})
	pulumi.RegisterOutputType(SourcePostgresPostgresConnectionPtrOutput{})
	pulumi.RegisterOutputType(SourcePostgresTableOutput{})
	pulumi.RegisterOutputType(SourcePostgresTableArrayOutput{})
	pulumi.RegisterOutputType(TableColumnOutput{})
	pulumi.RegisterOutputType(TableColumnArrayOutput{})
}
