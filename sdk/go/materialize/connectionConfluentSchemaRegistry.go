// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package materialize

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The connection resource allows you to manage connections in Materialize.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-materialize/sdk/go/materialize"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := materialize.NewConnectionConfluentSchemaRegistry(ctx, "exampleConfluentSchemaRegistryConnection", &materialize.ConnectionConfluentSchemaRegistryArgs{
//				Password: &ConnectionConfluentSchemaRegistryPasswordArgs{
//					DatabaseName: pulumi.String("database"),
//					Name:         pulumi.String("example"),
//					SchemaName:   pulumi.String("schema"),
//				},
//				Url: pulumi.String("https://rp-f00000bar.data.vectorized.cloud:30993"),
//				Username: &ConnectionConfluentSchemaRegistryUsernameArgs{
//					Text: pulumi.String("example"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// #Connections can be imported using the connection id
//
// ```sh
//
//	$ pulumi import materialize:index/connectionConfluentSchemaRegistry:ConnectionConfluentSchemaRegistry example <connection_id>
//
// ```
type ConnectionConfluentSchemaRegistry struct {
	pulumi.CustomResourceState

	// The AWS PrivateLink configuration for the Confluent Schema Registry.
	AwsPrivatelink ConnectionConfluentSchemaRegistryAwsPrivatelinkPtrOutput `pulumi:"awsPrivatelink"`
	// The type of connection.
	ConnectionType pulumi.StringOutput `pulumi:"connectionType"`
	// The identifier for the connection database.
	DatabaseName pulumi.StringPtrOutput `pulumi:"databaseName"`
	// The identifier for the connection.
	Name pulumi.StringOutput `pulumi:"name"`
	// The password for the Confluent Schema Registry.
	Password ConnectionConfluentSchemaRegistryPasswordPtrOutput `pulumi:"password"`
	// The fully qualified name of the connection.
	QualifiedSqlName pulumi.StringOutput `pulumi:"qualifiedSqlName"`
	// The identifier for the connection schema.
	SchemaName pulumi.StringPtrOutput `pulumi:"schemaName"`
	// The SSH tunnel configuration for the Confluent Schema Registry.
	SshTunnel ConnectionConfluentSchemaRegistrySshTunnelPtrOutput `pulumi:"sshTunnel"`
	// The client certificate for the Confluent Schema Registry.
	SslCertificate ConnectionConfluentSchemaRegistrySslCertificatePtrOutput `pulumi:"sslCertificate"`
	// The CA certificate for the Confluent Schema Registry.
	SslCertificateAuthority ConnectionConfluentSchemaRegistrySslCertificateAuthorityPtrOutput `pulumi:"sslCertificateAuthority"`
	// The client key for the Confluent Schema Registry.
	SslKey ConnectionConfluentSchemaRegistrySslKeyPtrOutput `pulumi:"sslKey"`
	// The URL of the Confluent Schema Registry.
	Url pulumi.StringOutput `pulumi:"url"`
	// The username for the Confluent Schema Registry.
	Username ConnectionConfluentSchemaRegistryUsernamePtrOutput `pulumi:"username"`
}

// NewConnectionConfluentSchemaRegistry registers a new resource with the given unique name, arguments, and options.
func NewConnectionConfluentSchemaRegistry(ctx *pulumi.Context,
	name string, args *ConnectionConfluentSchemaRegistryArgs, opts ...pulumi.ResourceOption) (*ConnectionConfluentSchemaRegistry, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource ConnectionConfluentSchemaRegistry
	err := ctx.RegisterResource("materialize:index/connectionConfluentSchemaRegistry:ConnectionConfluentSchemaRegistry", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConnectionConfluentSchemaRegistry gets an existing ConnectionConfluentSchemaRegistry resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConnectionConfluentSchemaRegistry(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConnectionConfluentSchemaRegistryState, opts ...pulumi.ResourceOption) (*ConnectionConfluentSchemaRegistry, error) {
	var resource ConnectionConfluentSchemaRegistry
	err := ctx.ReadResource("materialize:index/connectionConfluentSchemaRegistry:ConnectionConfluentSchemaRegistry", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConnectionConfluentSchemaRegistry resources.
type connectionConfluentSchemaRegistryState struct {
	// The AWS PrivateLink configuration for the Confluent Schema Registry.
	AwsPrivatelink *ConnectionConfluentSchemaRegistryAwsPrivatelink `pulumi:"awsPrivatelink"`
	// The type of connection.
	ConnectionType *string `pulumi:"connectionType"`
	// The identifier for the connection database.
	DatabaseName *string `pulumi:"databaseName"`
	// The identifier for the connection.
	Name *string `pulumi:"name"`
	// The password for the Confluent Schema Registry.
	Password *ConnectionConfluentSchemaRegistryPassword `pulumi:"password"`
	// The fully qualified name of the connection.
	QualifiedSqlName *string `pulumi:"qualifiedSqlName"`
	// The identifier for the connection schema.
	SchemaName *string `pulumi:"schemaName"`
	// The SSH tunnel configuration for the Confluent Schema Registry.
	SshTunnel *ConnectionConfluentSchemaRegistrySshTunnel `pulumi:"sshTunnel"`
	// The client certificate for the Confluent Schema Registry.
	SslCertificate *ConnectionConfluentSchemaRegistrySslCertificate `pulumi:"sslCertificate"`
	// The CA certificate for the Confluent Schema Registry.
	SslCertificateAuthority *ConnectionConfluentSchemaRegistrySslCertificateAuthority `pulumi:"sslCertificateAuthority"`
	// The client key for the Confluent Schema Registry.
	SslKey *ConnectionConfluentSchemaRegistrySslKey `pulumi:"sslKey"`
	// The URL of the Confluent Schema Registry.
	Url *string `pulumi:"url"`
	// The username for the Confluent Schema Registry.
	Username *ConnectionConfluentSchemaRegistryUsername `pulumi:"username"`
}

type ConnectionConfluentSchemaRegistryState struct {
	// The AWS PrivateLink configuration for the Confluent Schema Registry.
	AwsPrivatelink ConnectionConfluentSchemaRegistryAwsPrivatelinkPtrInput
	// The type of connection.
	ConnectionType pulumi.StringPtrInput
	// The identifier for the connection database.
	DatabaseName pulumi.StringPtrInput
	// The identifier for the connection.
	Name pulumi.StringPtrInput
	// The password for the Confluent Schema Registry.
	Password ConnectionConfluentSchemaRegistryPasswordPtrInput
	// The fully qualified name of the connection.
	QualifiedSqlName pulumi.StringPtrInput
	// The identifier for the connection schema.
	SchemaName pulumi.StringPtrInput
	// The SSH tunnel configuration for the Confluent Schema Registry.
	SshTunnel ConnectionConfluentSchemaRegistrySshTunnelPtrInput
	// The client certificate for the Confluent Schema Registry.
	SslCertificate ConnectionConfluentSchemaRegistrySslCertificatePtrInput
	// The CA certificate for the Confluent Schema Registry.
	SslCertificateAuthority ConnectionConfluentSchemaRegistrySslCertificateAuthorityPtrInput
	// The client key for the Confluent Schema Registry.
	SslKey ConnectionConfluentSchemaRegistrySslKeyPtrInput
	// The URL of the Confluent Schema Registry.
	Url pulumi.StringPtrInput
	// The username for the Confluent Schema Registry.
	Username ConnectionConfluentSchemaRegistryUsernamePtrInput
}

func (ConnectionConfluentSchemaRegistryState) ElementType() reflect.Type {
	return reflect.TypeOf((*connectionConfluentSchemaRegistryState)(nil)).Elem()
}

type connectionConfluentSchemaRegistryArgs struct {
	// The AWS PrivateLink configuration for the Confluent Schema Registry.
	AwsPrivatelink *ConnectionConfluentSchemaRegistryAwsPrivatelink `pulumi:"awsPrivatelink"`
	// The identifier for the connection database.
	DatabaseName *string `pulumi:"databaseName"`
	// The identifier for the connection.
	Name *string `pulumi:"name"`
	// The password for the Confluent Schema Registry.
	Password *ConnectionConfluentSchemaRegistryPassword `pulumi:"password"`
	// The identifier for the connection schema.
	SchemaName *string `pulumi:"schemaName"`
	// The SSH tunnel configuration for the Confluent Schema Registry.
	SshTunnel *ConnectionConfluentSchemaRegistrySshTunnel `pulumi:"sshTunnel"`
	// The client certificate for the Confluent Schema Registry.
	SslCertificate *ConnectionConfluentSchemaRegistrySslCertificate `pulumi:"sslCertificate"`
	// The CA certificate for the Confluent Schema Registry.
	SslCertificateAuthority *ConnectionConfluentSchemaRegistrySslCertificateAuthority `pulumi:"sslCertificateAuthority"`
	// The client key for the Confluent Schema Registry.
	SslKey *ConnectionConfluentSchemaRegistrySslKey `pulumi:"sslKey"`
	// The URL of the Confluent Schema Registry.
	Url string `pulumi:"url"`
	// The username for the Confluent Schema Registry.
	Username *ConnectionConfluentSchemaRegistryUsername `pulumi:"username"`
}

// The set of arguments for constructing a ConnectionConfluentSchemaRegistry resource.
type ConnectionConfluentSchemaRegistryArgs struct {
	// The AWS PrivateLink configuration for the Confluent Schema Registry.
	AwsPrivatelink ConnectionConfluentSchemaRegistryAwsPrivatelinkPtrInput
	// The identifier for the connection database.
	DatabaseName pulumi.StringPtrInput
	// The identifier for the connection.
	Name pulumi.StringPtrInput
	// The password for the Confluent Schema Registry.
	Password ConnectionConfluentSchemaRegistryPasswordPtrInput
	// The identifier for the connection schema.
	SchemaName pulumi.StringPtrInput
	// The SSH tunnel configuration for the Confluent Schema Registry.
	SshTunnel ConnectionConfluentSchemaRegistrySshTunnelPtrInput
	// The client certificate for the Confluent Schema Registry.
	SslCertificate ConnectionConfluentSchemaRegistrySslCertificatePtrInput
	// The CA certificate for the Confluent Schema Registry.
	SslCertificateAuthority ConnectionConfluentSchemaRegistrySslCertificateAuthorityPtrInput
	// The client key for the Confluent Schema Registry.
	SslKey ConnectionConfluentSchemaRegistrySslKeyPtrInput
	// The URL of the Confluent Schema Registry.
	Url pulumi.StringInput
	// The username for the Confluent Schema Registry.
	Username ConnectionConfluentSchemaRegistryUsernamePtrInput
}

func (ConnectionConfluentSchemaRegistryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*connectionConfluentSchemaRegistryArgs)(nil)).Elem()
}

type ConnectionConfluentSchemaRegistryInput interface {
	pulumi.Input

	ToConnectionConfluentSchemaRegistryOutput() ConnectionConfluentSchemaRegistryOutput
	ToConnectionConfluentSchemaRegistryOutputWithContext(ctx context.Context) ConnectionConfluentSchemaRegistryOutput
}

func (*ConnectionConfluentSchemaRegistry) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionConfluentSchemaRegistry)(nil)).Elem()
}

func (i *ConnectionConfluentSchemaRegistry) ToConnectionConfluentSchemaRegistryOutput() ConnectionConfluentSchemaRegistryOutput {
	return i.ToConnectionConfluentSchemaRegistryOutputWithContext(context.Background())
}

func (i *ConnectionConfluentSchemaRegistry) ToConnectionConfluentSchemaRegistryOutputWithContext(ctx context.Context) ConnectionConfluentSchemaRegistryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionConfluentSchemaRegistryOutput)
}

// ConnectionConfluentSchemaRegistryArrayInput is an input type that accepts ConnectionConfluentSchemaRegistryArray and ConnectionConfluentSchemaRegistryArrayOutput values.
// You can construct a concrete instance of `ConnectionConfluentSchemaRegistryArrayInput` via:
//
//	ConnectionConfluentSchemaRegistryArray{ ConnectionConfluentSchemaRegistryArgs{...} }
type ConnectionConfluentSchemaRegistryArrayInput interface {
	pulumi.Input

	ToConnectionConfluentSchemaRegistryArrayOutput() ConnectionConfluentSchemaRegistryArrayOutput
	ToConnectionConfluentSchemaRegistryArrayOutputWithContext(context.Context) ConnectionConfluentSchemaRegistryArrayOutput
}

type ConnectionConfluentSchemaRegistryArray []ConnectionConfluentSchemaRegistryInput

func (ConnectionConfluentSchemaRegistryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConnectionConfluentSchemaRegistry)(nil)).Elem()
}

func (i ConnectionConfluentSchemaRegistryArray) ToConnectionConfluentSchemaRegistryArrayOutput() ConnectionConfluentSchemaRegistryArrayOutput {
	return i.ToConnectionConfluentSchemaRegistryArrayOutputWithContext(context.Background())
}

func (i ConnectionConfluentSchemaRegistryArray) ToConnectionConfluentSchemaRegistryArrayOutputWithContext(ctx context.Context) ConnectionConfluentSchemaRegistryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionConfluentSchemaRegistryArrayOutput)
}

// ConnectionConfluentSchemaRegistryMapInput is an input type that accepts ConnectionConfluentSchemaRegistryMap and ConnectionConfluentSchemaRegistryMapOutput values.
// You can construct a concrete instance of `ConnectionConfluentSchemaRegistryMapInput` via:
//
//	ConnectionConfluentSchemaRegistryMap{ "key": ConnectionConfluentSchemaRegistryArgs{...} }
type ConnectionConfluentSchemaRegistryMapInput interface {
	pulumi.Input

	ToConnectionConfluentSchemaRegistryMapOutput() ConnectionConfluentSchemaRegistryMapOutput
	ToConnectionConfluentSchemaRegistryMapOutputWithContext(context.Context) ConnectionConfluentSchemaRegistryMapOutput
}

type ConnectionConfluentSchemaRegistryMap map[string]ConnectionConfluentSchemaRegistryInput

func (ConnectionConfluentSchemaRegistryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConnectionConfluentSchemaRegistry)(nil)).Elem()
}

func (i ConnectionConfluentSchemaRegistryMap) ToConnectionConfluentSchemaRegistryMapOutput() ConnectionConfluentSchemaRegistryMapOutput {
	return i.ToConnectionConfluentSchemaRegistryMapOutputWithContext(context.Background())
}

func (i ConnectionConfluentSchemaRegistryMap) ToConnectionConfluentSchemaRegistryMapOutputWithContext(ctx context.Context) ConnectionConfluentSchemaRegistryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionConfluentSchemaRegistryMapOutput)
}

type ConnectionConfluentSchemaRegistryOutput struct{ *pulumi.OutputState }

func (ConnectionConfluentSchemaRegistryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionConfluentSchemaRegistry)(nil)).Elem()
}

func (o ConnectionConfluentSchemaRegistryOutput) ToConnectionConfluentSchemaRegistryOutput() ConnectionConfluentSchemaRegistryOutput {
	return o
}

func (o ConnectionConfluentSchemaRegistryOutput) ToConnectionConfluentSchemaRegistryOutputWithContext(ctx context.Context) ConnectionConfluentSchemaRegistryOutput {
	return o
}

// The AWS PrivateLink configuration for the Confluent Schema Registry.
func (o ConnectionConfluentSchemaRegistryOutput) AwsPrivatelink() ConnectionConfluentSchemaRegistryAwsPrivatelinkPtrOutput {
	return o.ApplyT(func(v *ConnectionConfluentSchemaRegistry) ConnectionConfluentSchemaRegistryAwsPrivatelinkPtrOutput {
		return v.AwsPrivatelink
	}).(ConnectionConfluentSchemaRegistryAwsPrivatelinkPtrOutput)
}

// The type of connection.
func (o ConnectionConfluentSchemaRegistryOutput) ConnectionType() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectionConfluentSchemaRegistry) pulumi.StringOutput { return v.ConnectionType }).(pulumi.StringOutput)
}

// The identifier for the connection database.
func (o ConnectionConfluentSchemaRegistryOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionConfluentSchemaRegistry) pulumi.StringPtrOutput { return v.DatabaseName }).(pulumi.StringPtrOutput)
}

// The identifier for the connection.
func (o ConnectionConfluentSchemaRegistryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectionConfluentSchemaRegistry) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The password for the Confluent Schema Registry.
func (o ConnectionConfluentSchemaRegistryOutput) Password() ConnectionConfluentSchemaRegistryPasswordPtrOutput {
	return o.ApplyT(func(v *ConnectionConfluentSchemaRegistry) ConnectionConfluentSchemaRegistryPasswordPtrOutput {
		return v.Password
	}).(ConnectionConfluentSchemaRegistryPasswordPtrOutput)
}

// The fully qualified name of the connection.
func (o ConnectionConfluentSchemaRegistryOutput) QualifiedSqlName() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectionConfluentSchemaRegistry) pulumi.StringOutput { return v.QualifiedSqlName }).(pulumi.StringOutput)
}

// The identifier for the connection schema.
func (o ConnectionConfluentSchemaRegistryOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionConfluentSchemaRegistry) pulumi.StringPtrOutput { return v.SchemaName }).(pulumi.StringPtrOutput)
}

// The SSH tunnel configuration for the Confluent Schema Registry.
func (o ConnectionConfluentSchemaRegistryOutput) SshTunnel() ConnectionConfluentSchemaRegistrySshTunnelPtrOutput {
	return o.ApplyT(func(v *ConnectionConfluentSchemaRegistry) ConnectionConfluentSchemaRegistrySshTunnelPtrOutput {
		return v.SshTunnel
	}).(ConnectionConfluentSchemaRegistrySshTunnelPtrOutput)
}

// The client certificate for the Confluent Schema Registry.
func (o ConnectionConfluentSchemaRegistryOutput) SslCertificate() ConnectionConfluentSchemaRegistrySslCertificatePtrOutput {
	return o.ApplyT(func(v *ConnectionConfluentSchemaRegistry) ConnectionConfluentSchemaRegistrySslCertificatePtrOutput {
		return v.SslCertificate
	}).(ConnectionConfluentSchemaRegistrySslCertificatePtrOutput)
}

// The CA certificate for the Confluent Schema Registry.
func (o ConnectionConfluentSchemaRegistryOutput) SslCertificateAuthority() ConnectionConfluentSchemaRegistrySslCertificateAuthorityPtrOutput {
	return o.ApplyT(func(v *ConnectionConfluentSchemaRegistry) ConnectionConfluentSchemaRegistrySslCertificateAuthorityPtrOutput {
		return v.SslCertificateAuthority
	}).(ConnectionConfluentSchemaRegistrySslCertificateAuthorityPtrOutput)
}

// The client key for the Confluent Schema Registry.
func (o ConnectionConfluentSchemaRegistryOutput) SslKey() ConnectionConfluentSchemaRegistrySslKeyPtrOutput {
	return o.ApplyT(func(v *ConnectionConfluentSchemaRegistry) ConnectionConfluentSchemaRegistrySslKeyPtrOutput {
		return v.SslKey
	}).(ConnectionConfluentSchemaRegistrySslKeyPtrOutput)
}

// The URL of the Confluent Schema Registry.
func (o ConnectionConfluentSchemaRegistryOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectionConfluentSchemaRegistry) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

// The username for the Confluent Schema Registry.
func (o ConnectionConfluentSchemaRegistryOutput) Username() ConnectionConfluentSchemaRegistryUsernamePtrOutput {
	return o.ApplyT(func(v *ConnectionConfluentSchemaRegistry) ConnectionConfluentSchemaRegistryUsernamePtrOutput {
		return v.Username
	}).(ConnectionConfluentSchemaRegistryUsernamePtrOutput)
}

type ConnectionConfluentSchemaRegistryArrayOutput struct{ *pulumi.OutputState }

func (ConnectionConfluentSchemaRegistryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConnectionConfluentSchemaRegistry)(nil)).Elem()
}

func (o ConnectionConfluentSchemaRegistryArrayOutput) ToConnectionConfluentSchemaRegistryArrayOutput() ConnectionConfluentSchemaRegistryArrayOutput {
	return o
}

func (o ConnectionConfluentSchemaRegistryArrayOutput) ToConnectionConfluentSchemaRegistryArrayOutputWithContext(ctx context.Context) ConnectionConfluentSchemaRegistryArrayOutput {
	return o
}

func (o ConnectionConfluentSchemaRegistryArrayOutput) Index(i pulumi.IntInput) ConnectionConfluentSchemaRegistryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ConnectionConfluentSchemaRegistry {
		return vs[0].([]*ConnectionConfluentSchemaRegistry)[vs[1].(int)]
	}).(ConnectionConfluentSchemaRegistryOutput)
}

type ConnectionConfluentSchemaRegistryMapOutput struct{ *pulumi.OutputState }

func (ConnectionConfluentSchemaRegistryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConnectionConfluentSchemaRegistry)(nil)).Elem()
}

func (o ConnectionConfluentSchemaRegistryMapOutput) ToConnectionConfluentSchemaRegistryMapOutput() ConnectionConfluentSchemaRegistryMapOutput {
	return o
}

func (o ConnectionConfluentSchemaRegistryMapOutput) ToConnectionConfluentSchemaRegistryMapOutputWithContext(ctx context.Context) ConnectionConfluentSchemaRegistryMapOutput {
	return o
}

func (o ConnectionConfluentSchemaRegistryMapOutput) MapIndex(k pulumi.StringInput) ConnectionConfluentSchemaRegistryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ConnectionConfluentSchemaRegistry {
		return vs[0].(map[string]*ConnectionConfluentSchemaRegistry)[vs[1].(string)]
	}).(ConnectionConfluentSchemaRegistryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionConfluentSchemaRegistryInput)(nil)).Elem(), &ConnectionConfluentSchemaRegistry{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionConfluentSchemaRegistryArrayInput)(nil)).Elem(), ConnectionConfluentSchemaRegistryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionConfluentSchemaRegistryMapInput)(nil)).Elem(), ConnectionConfluentSchemaRegistryMap{})
	pulumi.RegisterOutputType(ConnectionConfluentSchemaRegistryOutput{})
	pulumi.RegisterOutputType(ConnectionConfluentSchemaRegistryArrayOutput{})
	pulumi.RegisterOutputType(ConnectionConfluentSchemaRegistryMapOutput{})
}
