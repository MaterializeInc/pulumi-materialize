// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package materialize

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A non-materialized view, provides an alias for the embedded SELECT statement.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-materialize/sdk/go/materialize"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := materialize.NewView(ctx, "simpleViewView", &materialize.ViewArgs{
//				SchemaName:   pulumi.Any(materialize_schema.Schema.Name),
//				DatabaseName: pulumi.Any(materialize_database.Database.Name),
//				Statement:    pulumi.String(fmt.Sprintf("SELECT\n    *\nFROM\n    %v\n", materialize_table.Simple_table.Qualified_name)),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				materialize_table.Simple_table,
//			}))
//			if err != nil {
//				return err
//			}
//			_, err = materialize.NewView(ctx, "simpleViewIndex/viewView", &materialize.ViewArgs{
//				SchemaName:   pulumi.Any(materialize_schema.Schema.Name),
//				DatabaseName: pulumi.Any(materialize_database.Database.Name),
//				Statement:    pulumi.String("SELECT * FROM materialize.public.simple_table"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # Views can be imported using the source id
//
// ```sh
//
//	$ pulumi import materialize:index/view:View example_view <view_id>
//
// ```
type View struct {
	pulumi.CustomResourceState

	// The identifier for the view database.
	DatabaseName pulumi.StringPtrOutput `pulumi:"databaseName"`
	// The identifier for the view.
	Name pulumi.StringOutput `pulumi:"name"`
	// The fully qualified name of the view.
	QualifiedSqlName pulumi.StringOutput `pulumi:"qualifiedSqlName"`
	// The identifier for the view schema.
	SchemaName pulumi.StringPtrOutput `pulumi:"schemaName"`
	// The SQL statement to create the view.
	Statement pulumi.StringOutput `pulumi:"statement"`
}

// NewView registers a new resource with the given unique name, arguments, and options.
func NewView(ctx *pulumi.Context,
	name string, args *ViewArgs, opts ...pulumi.ResourceOption) (*View, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Statement == nil {
		return nil, errors.New("invalid value for required argument 'Statement'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource View
	err := ctx.RegisterResource("materialize:index/view:View", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetView gets an existing View resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetView(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ViewState, opts ...pulumi.ResourceOption) (*View, error) {
	var resource View
	err := ctx.ReadResource("materialize:index/view:View", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering View resources.
type viewState struct {
	// The identifier for the view database.
	DatabaseName *string `pulumi:"databaseName"`
	// The identifier for the view.
	Name *string `pulumi:"name"`
	// The fully qualified name of the view.
	QualifiedSqlName *string `pulumi:"qualifiedSqlName"`
	// The identifier for the view schema.
	SchemaName *string `pulumi:"schemaName"`
	// The SQL statement to create the view.
	Statement *string `pulumi:"statement"`
}

type ViewState struct {
	// The identifier for the view database.
	DatabaseName pulumi.StringPtrInput
	// The identifier for the view.
	Name pulumi.StringPtrInput
	// The fully qualified name of the view.
	QualifiedSqlName pulumi.StringPtrInput
	// The identifier for the view schema.
	SchemaName pulumi.StringPtrInput
	// The SQL statement to create the view.
	Statement pulumi.StringPtrInput
}

func (ViewState) ElementType() reflect.Type {
	return reflect.TypeOf((*viewState)(nil)).Elem()
}

type viewArgs struct {
	// The identifier for the view database.
	DatabaseName *string `pulumi:"databaseName"`
	// The identifier for the view.
	Name *string `pulumi:"name"`
	// The identifier for the view schema.
	SchemaName *string `pulumi:"schemaName"`
	// The SQL statement to create the view.
	Statement string `pulumi:"statement"`
}

// The set of arguments for constructing a View resource.
type ViewArgs struct {
	// The identifier for the view database.
	DatabaseName pulumi.StringPtrInput
	// The identifier for the view.
	Name pulumi.StringPtrInput
	// The identifier for the view schema.
	SchemaName pulumi.StringPtrInput
	// The SQL statement to create the view.
	Statement pulumi.StringInput
}

func (ViewArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*viewArgs)(nil)).Elem()
}

type ViewInput interface {
	pulumi.Input

	ToViewOutput() ViewOutput
	ToViewOutputWithContext(ctx context.Context) ViewOutput
}

func (*View) ElementType() reflect.Type {
	return reflect.TypeOf((**View)(nil)).Elem()
}

func (i *View) ToViewOutput() ViewOutput {
	return i.ToViewOutputWithContext(context.Background())
}

func (i *View) ToViewOutputWithContext(ctx context.Context) ViewOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ViewOutput)
}

// ViewArrayInput is an input type that accepts ViewArray and ViewArrayOutput values.
// You can construct a concrete instance of `ViewArrayInput` via:
//
//	ViewArray{ ViewArgs{...} }
type ViewArrayInput interface {
	pulumi.Input

	ToViewArrayOutput() ViewArrayOutput
	ToViewArrayOutputWithContext(context.Context) ViewArrayOutput
}

type ViewArray []ViewInput

func (ViewArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*View)(nil)).Elem()
}

func (i ViewArray) ToViewArrayOutput() ViewArrayOutput {
	return i.ToViewArrayOutputWithContext(context.Background())
}

func (i ViewArray) ToViewArrayOutputWithContext(ctx context.Context) ViewArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ViewArrayOutput)
}

// ViewMapInput is an input type that accepts ViewMap and ViewMapOutput values.
// You can construct a concrete instance of `ViewMapInput` via:
//
//	ViewMap{ "key": ViewArgs{...} }
type ViewMapInput interface {
	pulumi.Input

	ToViewMapOutput() ViewMapOutput
	ToViewMapOutputWithContext(context.Context) ViewMapOutput
}

type ViewMap map[string]ViewInput

func (ViewMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*View)(nil)).Elem()
}

func (i ViewMap) ToViewMapOutput() ViewMapOutput {
	return i.ToViewMapOutputWithContext(context.Background())
}

func (i ViewMap) ToViewMapOutputWithContext(ctx context.Context) ViewMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ViewMapOutput)
}

type ViewOutput struct{ *pulumi.OutputState }

func (ViewOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**View)(nil)).Elem()
}

func (o ViewOutput) ToViewOutput() ViewOutput {
	return o
}

func (o ViewOutput) ToViewOutputWithContext(ctx context.Context) ViewOutput {
	return o
}

// The identifier for the view database.
func (o ViewOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *View) pulumi.StringPtrOutput { return v.DatabaseName }).(pulumi.StringPtrOutput)
}

// The identifier for the view.
func (o ViewOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *View) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The fully qualified name of the view.
func (o ViewOutput) QualifiedSqlName() pulumi.StringOutput {
	return o.ApplyT(func(v *View) pulumi.StringOutput { return v.QualifiedSqlName }).(pulumi.StringOutput)
}

// The identifier for the view schema.
func (o ViewOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *View) pulumi.StringPtrOutput { return v.SchemaName }).(pulumi.StringPtrOutput)
}

// The SQL statement to create the view.
func (o ViewOutput) Statement() pulumi.StringOutput {
	return o.ApplyT(func(v *View) pulumi.StringOutput { return v.Statement }).(pulumi.StringOutput)
}

type ViewArrayOutput struct{ *pulumi.OutputState }

func (ViewArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*View)(nil)).Elem()
}

func (o ViewArrayOutput) ToViewArrayOutput() ViewArrayOutput {
	return o
}

func (o ViewArrayOutput) ToViewArrayOutputWithContext(ctx context.Context) ViewArrayOutput {
	return o
}

func (o ViewArrayOutput) Index(i pulumi.IntInput) ViewOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *View {
		return vs[0].([]*View)[vs[1].(int)]
	}).(ViewOutput)
}

type ViewMapOutput struct{ *pulumi.OutputState }

func (ViewMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*View)(nil)).Elem()
}

func (o ViewMapOutput) ToViewMapOutput() ViewMapOutput {
	return o
}

func (o ViewMapOutput) ToViewMapOutputWithContext(ctx context.Context) ViewMapOutput {
	return o
}

func (o ViewMapOutput) MapIndex(k pulumi.StringInput) ViewOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *View {
		return vs[0].(map[string]*View)[vs[1].(string)]
	}).(ViewOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ViewInput)(nil)).Elem(), &View{})
	pulumi.RegisterInputType(reflect.TypeOf((*ViewArrayInput)(nil)).Elem(), ViewArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ViewMapInput)(nil)).Elem(), ViewMap{})
	pulumi.RegisterOutputType(ViewOutput{})
	pulumi.RegisterOutputType(ViewArrayOutput{})
	pulumi.RegisterOutputType(ViewMapOutput{})
}
