// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package materialize

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// An in-memory index on a source, view, or materialized view.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-materialize/sdk/go/materialize"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := materialize.NewIndex(ctx, "loadgenIndex", &materialize.IndexArgs{
//				ClusterName: pulumi.String("cluster"),
//				Method:      pulumi.String("ARRANGEMENT"),
//				ObjName: &IndexObjNameArgs{
//					DatabaseName: pulumi.String("database"),
//					Name:         pulumi.String("source"),
//					SchemaName:   pulumi.String("schema"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # Indexes can be imported using the index id
//
// ```sh
//
//	$ pulumi import materialize:index/index:Index example_index <index_id>
//
// ```
type Index struct {
	pulumi.CustomResourceState

	// The cluster to maintain this index. If not specified, defaults to the active cluster.
	ClusterName pulumi.StringOutput `pulumi:"clusterName"`
	// The expressions to use as the key for the index.
	ColExprs IndexColExprArrayOutput `pulumi:"colExprs"`
	// The identifier for the index database.
	DatabaseName pulumi.StringOutput `pulumi:"databaseName"`
	// Creates a default index using all inferred columns are used.
	Default pulumi.BoolPtrOutput `pulumi:"default"`
	// The name of the index method to use.
	Method pulumi.StringPtrOutput `pulumi:"method"`
	// The identifier for the index.
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of the source, view, or materialized view on which you want to create an index.
	ObjName IndexObjNameOutput `pulumi:"objName"`
	// The fully qualified name of the view.
	QualifiedSqlName pulumi.StringOutput `pulumi:"qualifiedSqlName"`
	// The identifier for the index schema.
	SchemaName pulumi.StringOutput `pulumi:"schemaName"`
}

// NewIndex registers a new resource with the given unique name, arguments, and options.
func NewIndex(ctx *pulumi.Context,
	name string, args *IndexArgs, opts ...pulumi.ResourceOption) (*Index, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterName == nil {
		return nil, errors.New("invalid value for required argument 'ClusterName'")
	}
	if args.ObjName == nil {
		return nil, errors.New("invalid value for required argument 'ObjName'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Index
	err := ctx.RegisterResource("materialize:index/index:Index", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIndex gets an existing Index resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIndex(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IndexState, opts ...pulumi.ResourceOption) (*Index, error) {
	var resource Index
	err := ctx.ReadResource("materialize:index/index:Index", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Index resources.
type indexState struct {
	// The cluster to maintain this index. If not specified, defaults to the active cluster.
	ClusterName *string `pulumi:"clusterName"`
	// The expressions to use as the key for the index.
	ColExprs []IndexColExpr `pulumi:"colExprs"`
	// The identifier for the index database.
	DatabaseName *string `pulumi:"databaseName"`
	// Creates a default index using all inferred columns are used.
	Default *bool `pulumi:"default"`
	// The name of the index method to use.
	Method *string `pulumi:"method"`
	// The identifier for the index.
	Name *string `pulumi:"name"`
	// The name of the source, view, or materialized view on which you want to create an index.
	ObjName *IndexObjName `pulumi:"objName"`
	// The fully qualified name of the view.
	QualifiedSqlName *string `pulumi:"qualifiedSqlName"`
	// The identifier for the index schema.
	SchemaName *string `pulumi:"schemaName"`
}

type IndexState struct {
	// The cluster to maintain this index. If not specified, defaults to the active cluster.
	ClusterName pulumi.StringPtrInput
	// The expressions to use as the key for the index.
	ColExprs IndexColExprArrayInput
	// The identifier for the index database.
	DatabaseName pulumi.StringPtrInput
	// Creates a default index using all inferred columns are used.
	Default pulumi.BoolPtrInput
	// The name of the index method to use.
	Method pulumi.StringPtrInput
	// The identifier for the index.
	Name pulumi.StringPtrInput
	// The name of the source, view, or materialized view on which you want to create an index.
	ObjName IndexObjNamePtrInput
	// The fully qualified name of the view.
	QualifiedSqlName pulumi.StringPtrInput
	// The identifier for the index schema.
	SchemaName pulumi.StringPtrInput
}

func (IndexState) ElementType() reflect.Type {
	return reflect.TypeOf((*indexState)(nil)).Elem()
}

type indexArgs struct {
	// The cluster to maintain this index. If not specified, defaults to the active cluster.
	ClusterName string `pulumi:"clusterName"`
	// The expressions to use as the key for the index.
	ColExprs []IndexColExpr `pulumi:"colExprs"`
	// Creates a default index using all inferred columns are used.
	Default *bool `pulumi:"default"`
	// The name of the index method to use.
	Method *string `pulumi:"method"`
	// The identifier for the index.
	Name *string `pulumi:"name"`
	// The name of the source, view, or materialized view on which you want to create an index.
	ObjName IndexObjName `pulumi:"objName"`
}

// The set of arguments for constructing a Index resource.
type IndexArgs struct {
	// The cluster to maintain this index. If not specified, defaults to the active cluster.
	ClusterName pulumi.StringInput
	// The expressions to use as the key for the index.
	ColExprs IndexColExprArrayInput
	// Creates a default index using all inferred columns are used.
	Default pulumi.BoolPtrInput
	// The name of the index method to use.
	Method pulumi.StringPtrInput
	// The identifier for the index.
	Name pulumi.StringPtrInput
	// The name of the source, view, or materialized view on which you want to create an index.
	ObjName IndexObjNameInput
}

func (IndexArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*indexArgs)(nil)).Elem()
}

type IndexInput interface {
	pulumi.Input

	ToIndexOutput() IndexOutput
	ToIndexOutputWithContext(ctx context.Context) IndexOutput
}

func (*Index) ElementType() reflect.Type {
	return reflect.TypeOf((**Index)(nil)).Elem()
}

func (i *Index) ToIndexOutput() IndexOutput {
	return i.ToIndexOutputWithContext(context.Background())
}

func (i *Index) ToIndexOutputWithContext(ctx context.Context) IndexOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexOutput)
}

// IndexArrayInput is an input type that accepts IndexArray and IndexArrayOutput values.
// You can construct a concrete instance of `IndexArrayInput` via:
//
//	IndexArray{ IndexArgs{...} }
type IndexArrayInput interface {
	pulumi.Input

	ToIndexArrayOutput() IndexArrayOutput
	ToIndexArrayOutputWithContext(context.Context) IndexArrayOutput
}

type IndexArray []IndexInput

func (IndexArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Index)(nil)).Elem()
}

func (i IndexArray) ToIndexArrayOutput() IndexArrayOutput {
	return i.ToIndexArrayOutputWithContext(context.Background())
}

func (i IndexArray) ToIndexArrayOutputWithContext(ctx context.Context) IndexArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexArrayOutput)
}

// IndexMapInput is an input type that accepts IndexMap and IndexMapOutput values.
// You can construct a concrete instance of `IndexMapInput` via:
//
//	IndexMap{ "key": IndexArgs{...} }
type IndexMapInput interface {
	pulumi.Input

	ToIndexMapOutput() IndexMapOutput
	ToIndexMapOutputWithContext(context.Context) IndexMapOutput
}

type IndexMap map[string]IndexInput

func (IndexMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Index)(nil)).Elem()
}

func (i IndexMap) ToIndexMapOutput() IndexMapOutput {
	return i.ToIndexMapOutputWithContext(context.Background())
}

func (i IndexMap) ToIndexMapOutputWithContext(ctx context.Context) IndexMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexMapOutput)
}

type IndexOutput struct{ *pulumi.OutputState }

func (IndexOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Index)(nil)).Elem()
}

func (o IndexOutput) ToIndexOutput() IndexOutput {
	return o
}

func (o IndexOutput) ToIndexOutputWithContext(ctx context.Context) IndexOutput {
	return o
}

// The cluster to maintain this index. If not specified, defaults to the active cluster.
func (o IndexOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v *Index) pulumi.StringOutput { return v.ClusterName }).(pulumi.StringOutput)
}

// The expressions to use as the key for the index.
func (o IndexOutput) ColExprs() IndexColExprArrayOutput {
	return o.ApplyT(func(v *Index) IndexColExprArrayOutput { return v.ColExprs }).(IndexColExprArrayOutput)
}

// The identifier for the index database.
func (o IndexOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v *Index) pulumi.StringOutput { return v.DatabaseName }).(pulumi.StringOutput)
}

// Creates a default index using all inferred columns are used.
func (o IndexOutput) Default() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.BoolPtrOutput { return v.Default }).(pulumi.BoolPtrOutput)
}

// The name of the index method to use.
func (o IndexOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.StringPtrOutput { return v.Method }).(pulumi.StringPtrOutput)
}

// The identifier for the index.
func (o IndexOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Index) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name of the source, view, or materialized view on which you want to create an index.
func (o IndexOutput) ObjName() IndexObjNameOutput {
	return o.ApplyT(func(v *Index) IndexObjNameOutput { return v.ObjName }).(IndexObjNameOutput)
}

// The fully qualified name of the view.
func (o IndexOutput) QualifiedSqlName() pulumi.StringOutput {
	return o.ApplyT(func(v *Index) pulumi.StringOutput { return v.QualifiedSqlName }).(pulumi.StringOutput)
}

// The identifier for the index schema.
func (o IndexOutput) SchemaName() pulumi.StringOutput {
	return o.ApplyT(func(v *Index) pulumi.StringOutput { return v.SchemaName }).(pulumi.StringOutput)
}

type IndexArrayOutput struct{ *pulumi.OutputState }

func (IndexArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Index)(nil)).Elem()
}

func (o IndexArrayOutput) ToIndexArrayOutput() IndexArrayOutput {
	return o
}

func (o IndexArrayOutput) ToIndexArrayOutputWithContext(ctx context.Context) IndexArrayOutput {
	return o
}

func (o IndexArrayOutput) Index(i pulumi.IntInput) IndexOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Index {
		return vs[0].([]*Index)[vs[1].(int)]
	}).(IndexOutput)
}

type IndexMapOutput struct{ *pulumi.OutputState }

func (IndexMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Index)(nil)).Elem()
}

func (o IndexMapOutput) ToIndexMapOutput() IndexMapOutput {
	return o
}

func (o IndexMapOutput) ToIndexMapOutputWithContext(ctx context.Context) IndexMapOutput {
	return o
}

func (o IndexMapOutput) MapIndex(k pulumi.StringInput) IndexOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Index {
		return vs[0].(map[string]*Index)[vs[1].(string)]
	}).(IndexOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IndexInput)(nil)).Elem(), &Index{})
	pulumi.RegisterInputType(reflect.TypeOf((*IndexArrayInput)(nil)).Elem(), IndexArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IndexMapInput)(nil)).Elem(), IndexMap{})
	pulumi.RegisterOutputType(IndexOutput{})
	pulumi.RegisterOutputType(IndexArrayOutput{})
	pulumi.RegisterOutputType(IndexMapOutput{})
}
