// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package materialize

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "materialize:index/cluster:Cluster":
		r = &Cluster{}
	case "materialize:index/clusterReplica:ClusterReplica":
		r = &ClusterReplica{}
	case "materialize:index/connectionAwsPrivatelink:ConnectionAwsPrivatelink":
		r = &ConnectionAwsPrivatelink{}
	case "materialize:index/connectionConfluentSchemaRegistry:ConnectionConfluentSchemaRegistry":
		r = &ConnectionConfluentSchemaRegistry{}
	case "materialize:index/connectionKafka:ConnectionKafka":
		r = &ConnectionKafka{}
	case "materialize:index/connectionPostgres:ConnectionPostgres":
		r = &ConnectionPostgres{}
	case "materialize:index/connectionSshTunnel:ConnectionSshTunnel":
		r = &ConnectionSshTunnel{}
	case "materialize:index/database:Database":
		r = &Database{}
	case "materialize:index/index:Index":
		r = &Index{}
	case "materialize:index/materializedView:MaterializedView":
		r = &MaterializedView{}
	case "materialize:index/schema:Schema":
		r = &Schema{}
	case "materialize:index/secret:Secret":
		r = &Secret{}
	case "materialize:index/sinkKafka:SinkKafka":
		r = &SinkKafka{}
	case "materialize:index/sourceKafka:SourceKafka":
		r = &SourceKafka{}
	case "materialize:index/sourceLoadgen:SourceLoadgen":
		r = &SourceLoadgen{}
	case "materialize:index/sourcePostgres:SourcePostgres":
		r = &SourcePostgres{}
	case "materialize:index/table:Table":
		r = &Table{}
	case "materialize:index/view:View":
		r = &View{}
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	err = ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return
}

type pkg struct {
	version semver.Version
}

func (p *pkg) Version() semver.Version {
	return p.version
}

func (p *pkg) ConstructProvider(ctx *pulumi.Context, name, typ, urn string) (pulumi.ProviderResource, error) {
	if typ != "pulumi:providers:materialize" {
		return nil, fmt.Errorf("unknown provider type: %s", typ)
	}

	r := &Provider{}
	err := ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return r, err
}

func init() {
	version, _ := PkgVersion()
	pulumi.RegisterResourceModule(
		"materialize",
		"index/cluster",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"materialize",
		"index/clusterReplica",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"materialize",
		"index/connectionAwsPrivatelink",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"materialize",
		"index/connectionConfluentSchemaRegistry",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"materialize",
		"index/connectionKafka",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"materialize",
		"index/connectionPostgres",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"materialize",
		"index/connectionSshTunnel",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"materialize",
		"index/database",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"materialize",
		"index/index",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"materialize",
		"index/materializedView",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"materialize",
		"index/schema",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"materialize",
		"index/secret",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"materialize",
		"index/sinkKafka",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"materialize",
		"index/sourceKafka",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"materialize",
		"index/sourceLoadgen",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"materialize",
		"index/sourcePostgres",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"materialize",
		"index/table",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"materialize",
		"index/view",
		&module{version},
	)
	pulumi.RegisterResourcePackage(
		"materialize",
		&pkg{version},
	)
}
