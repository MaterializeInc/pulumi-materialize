// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Materialize
{
    /// <summary>
    /// A source describes an external system you want Materialize to read data from, and provides details about how to decode and interpret that data.
    /// 
    /// ## Import
    /// 
    /// # Sources can be imported using the source id
    /// 
    /// ```sh
    ///  $ pulumi import materialize:index/sourceLoadgen:SourceLoadgen example_source_load_generator &lt;source_id&gt;
    /// ```
    /// </summary>
    [MaterializeResourceType("materialize:index/sourceLoadgen:SourceLoadgen")]
    public partial class SourceLoadgen : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Auction Options.
        /// </summary>
        [Output("auctionOptions")]
        public Output<ImmutableArray<Outputs.SourceLoadgenAuctionOption>> AuctionOptions { get; private set; } = null!;

        /// <summary>
        /// The cluster to maintain this source. If not specified, the size option must be specified.
        /// </summary>
        [Output("clusterName")]
        public Output<string> ClusterName { get; private set; } = null!;

        /// <summary>
        /// Counter Options.
        /// </summary>
        [Output("counterOptions")]
        public Output<ImmutableArray<Outputs.SourceLoadgenCounterOption>> CounterOptions { get; private set; } = null!;

        /// <summary>
        /// The identifier for the source database.
        /// </summary>
        [Output("databaseName")]
        public Output<string?> DatabaseName { get; private set; } = null!;

        /// <summary>
        /// The load generator types: [AUCTION COUNTER TPCH].
        /// </summary>
        [Output("loadGeneratorType")]
        public Output<string> LoadGeneratorType { get; private set; } = null!;

        /// <summary>
        /// The identifier for the source.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The fully qualified name of the source.
        /// </summary>
        [Output("qualifiedSqlName")]
        public Output<string> QualifiedSqlName { get; private set; } = null!;

        /// <summary>
        /// The identifier for the source schema.
        /// </summary>
        [Output("schemaName")]
        public Output<string?> SchemaName { get; private set; } = null!;

        /// <summary>
        /// The size of the source.
        /// </summary>
        [Output("size")]
        public Output<string> Size { get; private set; } = null!;

        /// <summary>
        /// The type of source.
        /// </summary>
        [Output("sourceType")]
        public Output<string> SourceType { get; private set; } = null!;

        /// <summary>
        /// TPCH Options.
        /// </summary>
        [Output("tpchOptions")]
        public Output<ImmutableArray<Outputs.SourceLoadgenTpchOption>> TpchOptions { get; private set; } = null!;


        /// <summary>
        /// Create a SourceLoadgen resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SourceLoadgen(string name, SourceLoadgenArgs args, CustomResourceOptions? options = null)
            : base("materialize:index/sourceLoadgen:SourceLoadgen", name, args ?? new SourceLoadgenArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SourceLoadgen(string name, Input<string> id, SourceLoadgenState? state = null, CustomResourceOptions? options = null)
            : base("materialize:index/sourceLoadgen:SourceLoadgen", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/MaterializeInc/pulumi-materialize",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SourceLoadgen resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SourceLoadgen Get(string name, Input<string> id, SourceLoadgenState? state = null, CustomResourceOptions? options = null)
        {
            return new SourceLoadgen(name, id, state, options);
        }
    }

    public sealed class SourceLoadgenArgs : global::Pulumi.ResourceArgs
    {
        [Input("auctionOptions")]
        private InputList<Inputs.SourceLoadgenAuctionOptionArgs>? _auctionOptions;

        /// <summary>
        /// Auction Options.
        /// </summary>
        public InputList<Inputs.SourceLoadgenAuctionOptionArgs> AuctionOptions
        {
            get => _auctionOptions ?? (_auctionOptions = new InputList<Inputs.SourceLoadgenAuctionOptionArgs>());
            set => _auctionOptions = value;
        }

        /// <summary>
        /// The cluster to maintain this source. If not specified, the size option must be specified.
        /// </summary>
        [Input("clusterName")]
        public Input<string>? ClusterName { get; set; }

        [Input("counterOptions")]
        private InputList<Inputs.SourceLoadgenCounterOptionArgs>? _counterOptions;

        /// <summary>
        /// Counter Options.
        /// </summary>
        public InputList<Inputs.SourceLoadgenCounterOptionArgs> CounterOptions
        {
            get => _counterOptions ?? (_counterOptions = new InputList<Inputs.SourceLoadgenCounterOptionArgs>());
            set => _counterOptions = value;
        }

        /// <summary>
        /// The identifier for the source database.
        /// </summary>
        [Input("databaseName")]
        public Input<string>? DatabaseName { get; set; }

        /// <summary>
        /// The load generator types: [AUCTION COUNTER TPCH].
        /// </summary>
        [Input("loadGeneratorType", required: true)]
        public Input<string> LoadGeneratorType { get; set; } = null!;

        /// <summary>
        /// The identifier for the source.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The identifier for the source schema.
        /// </summary>
        [Input("schemaName")]
        public Input<string>? SchemaName { get; set; }

        /// <summary>
        /// The size of the source.
        /// </summary>
        [Input("size")]
        public Input<string>? Size { get; set; }

        [Input("tpchOptions")]
        private InputList<Inputs.SourceLoadgenTpchOptionArgs>? _tpchOptions;

        /// <summary>
        /// TPCH Options.
        /// </summary>
        public InputList<Inputs.SourceLoadgenTpchOptionArgs> TpchOptions
        {
            get => _tpchOptions ?? (_tpchOptions = new InputList<Inputs.SourceLoadgenTpchOptionArgs>());
            set => _tpchOptions = value;
        }

        public SourceLoadgenArgs()
        {
        }
        public static new SourceLoadgenArgs Empty => new SourceLoadgenArgs();
    }

    public sealed class SourceLoadgenState : global::Pulumi.ResourceArgs
    {
        [Input("auctionOptions")]
        private InputList<Inputs.SourceLoadgenAuctionOptionGetArgs>? _auctionOptions;

        /// <summary>
        /// Auction Options.
        /// </summary>
        public InputList<Inputs.SourceLoadgenAuctionOptionGetArgs> AuctionOptions
        {
            get => _auctionOptions ?? (_auctionOptions = new InputList<Inputs.SourceLoadgenAuctionOptionGetArgs>());
            set => _auctionOptions = value;
        }

        /// <summary>
        /// The cluster to maintain this source. If not specified, the size option must be specified.
        /// </summary>
        [Input("clusterName")]
        public Input<string>? ClusterName { get; set; }

        [Input("counterOptions")]
        private InputList<Inputs.SourceLoadgenCounterOptionGetArgs>? _counterOptions;

        /// <summary>
        /// Counter Options.
        /// </summary>
        public InputList<Inputs.SourceLoadgenCounterOptionGetArgs> CounterOptions
        {
            get => _counterOptions ?? (_counterOptions = new InputList<Inputs.SourceLoadgenCounterOptionGetArgs>());
            set => _counterOptions = value;
        }

        /// <summary>
        /// The identifier for the source database.
        /// </summary>
        [Input("databaseName")]
        public Input<string>? DatabaseName { get; set; }

        /// <summary>
        /// The load generator types: [AUCTION COUNTER TPCH].
        /// </summary>
        [Input("loadGeneratorType")]
        public Input<string>? LoadGeneratorType { get; set; }

        /// <summary>
        /// The identifier for the source.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The fully qualified name of the source.
        /// </summary>
        [Input("qualifiedSqlName")]
        public Input<string>? QualifiedSqlName { get; set; }

        /// <summary>
        /// The identifier for the source schema.
        /// </summary>
        [Input("schemaName")]
        public Input<string>? SchemaName { get; set; }

        /// <summary>
        /// The size of the source.
        /// </summary>
        [Input("size")]
        public Input<string>? Size { get; set; }

        /// <summary>
        /// The type of source.
        /// </summary>
        [Input("sourceType")]
        public Input<string>? SourceType { get; set; }

        [Input("tpchOptions")]
        private InputList<Inputs.SourceLoadgenTpchOptionGetArgs>? _tpchOptions;

        /// <summary>
        /// TPCH Options.
        /// </summary>
        public InputList<Inputs.SourceLoadgenTpchOptionGetArgs> TpchOptions
        {
            get => _tpchOptions ?? (_tpchOptions = new InputList<Inputs.SourceLoadgenTpchOptionGetArgs>());
            set => _tpchOptions = value;
        }

        public SourceLoadgenState()
        {
        }
        public static new SourceLoadgenState Empty => new SourceLoadgenState();
    }
}
