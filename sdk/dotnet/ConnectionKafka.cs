// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Materialize
{
    /// <summary>
    /// The connection resource allows you to manage connections in Materialize.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Materialize = Pulumi.Materialize;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Create a Kafka Connection
    ///     var exampleKafkaConnection = new Materialize.ConnectionKafka("exampleKafkaConnection", new()
    ///     {
    ///         KafkaBrokers = new[]
    ///         {
    ///             new Materialize.Inputs.ConnectionKafkaKafkaBrokerArgs
    ///             {
    ///                 Broker = "b-1.hostname-1:9096",
    ///             },
    ///         },
    ///         ProgressTopic = "example",
    ///         SaslMechanisms = "SCRAM-SHA-256",
    ///         SaslPassword = new Materialize.Inputs.ConnectionKafkaSaslPasswordArgs
    ///         {
    ///             DatabaseName = "materialize",
    ///             Name = "kafka_password",
    ///             SchemaName = "public",
    ///         },
    ///         SaslUsername = "example",
    ///     });
    /// 
    ///     var exampleKafkaConnectionMultipleBrokers = new Materialize.ConnectionKafka("exampleKafkaConnectionMultipleBrokers", new()
    ///     {
    ///         KafkaBrokers = new[]
    ///         {
    ///             new Materialize.Inputs.ConnectionKafkaKafkaBrokerArgs
    ///             {
    ///                 AvailabilityZone = "use1-az1",
    ///                 Broker = "b-1.hostname-1:9096",
    ///                 PrivatelinkConnection = new Materialize.Inputs.ConnectionKafkaKafkaBrokerPrivatelinkConnectionArgs
    ///                 {
    ///                     DatabaseName = "materialize",
    ///                     Name = "example_aws_privatelink_conn",
    ///                     SchemaName = "public",
    ///                 },
    ///                 TargetGroupPort = 9001,
    ///             },
    ///             new Materialize.Inputs.ConnectionKafkaKafkaBrokerArgs
    ///             {
    ///                 AvailabilityZone = "use1-az2",
    ///                 Broker = "b-2.hostname-2:9096",
    ///                 PrivatelinkConnection = new Materialize.Inputs.ConnectionKafkaKafkaBrokerPrivatelinkConnectionArgs
    ///                 {
    ///                     DatabaseName = "materialize",
    ///                     Name = "example_aws_privatelink_conn",
    ///                     SchemaName = "public",
    ///                 },
    ///                 TargetGroupPort = 9002,
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// #Connections can be imported using the connection id
    /// 
    /// ```sh
    ///  $ pulumi import materialize:index/connectionKafka:ConnectionKafka example &lt;connection_id&gt;
    /// ```
    /// </summary>
    [MaterializeResourceType("materialize:index/connectionKafka:ConnectionKafka")]
    public partial class ConnectionKafka : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The type of connection.
        /// </summary>
        [Output("connectionType")]
        public Output<string> ConnectionType { get; private set; } = null!;

        /// <summary>
        /// The identifier for the connection database.
        /// </summary>
        [Output("databaseName")]
        public Output<string?> DatabaseName { get; private set; } = null!;

        /// <summary>
        /// The Kafka brokers configuration.
        /// </summary>
        [Output("kafkaBrokers")]
        public Output<ImmutableArray<Outputs.ConnectionKafkaKafkaBroker>> KafkaBrokers { get; private set; } = null!;

        /// <summary>
        /// The identifier for the connection.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The name of a topic that Kafka sinks can use to track internal consistency metadata.
        /// </summary>
        [Output("progressTopic")]
        public Output<string?> ProgressTopic { get; private set; } = null!;

        /// <summary>
        /// The fully qualified name of the connection.
        /// </summary>
        [Output("qualifiedSqlName")]
        public Output<string> QualifiedSqlName { get; private set; } = null!;

        /// <summary>
        /// The SASL mechanism for the Kafka broker.
        /// </summary>
        [Output("saslMechanisms")]
        public Output<string?> SaslMechanisms { get; private set; } = null!;

        /// <summary>
        /// The SASL password for the Kafka broker.
        /// </summary>
        [Output("saslPassword")]
        public Output<Outputs.ConnectionKafkaSaslPassword?> SaslPassword { get; private set; } = null!;

        /// <summary>
        /// The SASL username for the Kafka broker.
        /// </summary>
        [Output("saslUsername")]
        public Output<Outputs.ConnectionKafkaSaslUsername?> SaslUsername { get; private set; } = null!;

        /// <summary>
        /// The identifier for the connection schema.
        /// </summary>
        [Output("schemaName")]
        public Output<string?> SchemaName { get; private set; } = null!;

        /// <summary>
        /// The SSH tunnel configuration for the Kafka broker.
        /// </summary>
        [Output("sshTunnel")]
        public Output<Outputs.ConnectionKafkaSshTunnel?> SshTunnel { get; private set; } = null!;

        /// <summary>
        /// The client certificate for the Kafka broker.
        /// </summary>
        [Output("sslCertificate")]
        public Output<Outputs.ConnectionKafkaSslCertificate?> SslCertificate { get; private set; } = null!;

        /// <summary>
        /// The CA certificate for the Kafka broker.
        /// </summary>
        [Output("sslCertificateAuthority")]
        public Output<Outputs.ConnectionKafkaSslCertificateAuthority?> SslCertificateAuthority { get; private set; } = null!;

        /// <summary>
        /// The client key for the Kafka broker.
        /// </summary>
        [Output("sslKey")]
        public Output<Outputs.ConnectionKafkaSslKey?> SslKey { get; private set; } = null!;


        /// <summary>
        /// Create a ConnectionKafka resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ConnectionKafka(string name, ConnectionKafkaArgs args, CustomResourceOptions? options = null)
            : base("materialize:index/connectionKafka:ConnectionKafka", name, args ?? new ConnectionKafkaArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ConnectionKafka(string name, Input<string> id, ConnectionKafkaState? state = null, CustomResourceOptions? options = null)
            : base("materialize:index/connectionKafka:ConnectionKafka", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/MaterializeInc/pulumi-materialize",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ConnectionKafka resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ConnectionKafka Get(string name, Input<string> id, ConnectionKafkaState? state = null, CustomResourceOptions? options = null)
        {
            return new ConnectionKafka(name, id, state, options);
        }
    }

    public sealed class ConnectionKafkaArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The identifier for the connection database.
        /// </summary>
        [Input("databaseName")]
        public Input<string>? DatabaseName { get; set; }

        [Input("kafkaBrokers", required: true)]
        private InputList<Inputs.ConnectionKafkaKafkaBrokerArgs>? _kafkaBrokers;

        /// <summary>
        /// The Kafka brokers configuration.
        /// </summary>
        public InputList<Inputs.ConnectionKafkaKafkaBrokerArgs> KafkaBrokers
        {
            get => _kafkaBrokers ?? (_kafkaBrokers = new InputList<Inputs.ConnectionKafkaKafkaBrokerArgs>());
            set => _kafkaBrokers = value;
        }

        /// <summary>
        /// The identifier for the connection.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of a topic that Kafka sinks can use to track internal consistency metadata.
        /// </summary>
        [Input("progressTopic")]
        public Input<string>? ProgressTopic { get; set; }

        /// <summary>
        /// The SASL mechanism for the Kafka broker.
        /// </summary>
        [Input("saslMechanisms")]
        public Input<string>? SaslMechanisms { get; set; }

        /// <summary>
        /// The SASL password for the Kafka broker.
        /// </summary>
        [Input("saslPassword")]
        public Input<Inputs.ConnectionKafkaSaslPasswordArgs>? SaslPassword { get; set; }

        /// <summary>
        /// The SASL username for the Kafka broker.
        /// </summary>
        [Input("saslUsername")]
        public Input<Inputs.ConnectionKafkaSaslUsernameArgs>? SaslUsername { get; set; }

        /// <summary>
        /// The identifier for the connection schema.
        /// </summary>
        [Input("schemaName")]
        public Input<string>? SchemaName { get; set; }

        /// <summary>
        /// The SSH tunnel configuration for the Kafka broker.
        /// </summary>
        [Input("sshTunnel")]
        public Input<Inputs.ConnectionKafkaSshTunnelArgs>? SshTunnel { get; set; }

        /// <summary>
        /// The client certificate for the Kafka broker.
        /// </summary>
        [Input("sslCertificate")]
        public Input<Inputs.ConnectionKafkaSslCertificateArgs>? SslCertificate { get; set; }

        /// <summary>
        /// The CA certificate for the Kafka broker.
        /// </summary>
        [Input("sslCertificateAuthority")]
        public Input<Inputs.ConnectionKafkaSslCertificateAuthorityArgs>? SslCertificateAuthority { get; set; }

        /// <summary>
        /// The client key for the Kafka broker.
        /// </summary>
        [Input("sslKey")]
        public Input<Inputs.ConnectionKafkaSslKeyArgs>? SslKey { get; set; }

        public ConnectionKafkaArgs()
        {
        }
        public static new ConnectionKafkaArgs Empty => new ConnectionKafkaArgs();
    }

    public sealed class ConnectionKafkaState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The type of connection.
        /// </summary>
        [Input("connectionType")]
        public Input<string>? ConnectionType { get; set; }

        /// <summary>
        /// The identifier for the connection database.
        /// </summary>
        [Input("databaseName")]
        public Input<string>? DatabaseName { get; set; }

        [Input("kafkaBrokers")]
        private InputList<Inputs.ConnectionKafkaKafkaBrokerGetArgs>? _kafkaBrokers;

        /// <summary>
        /// The Kafka brokers configuration.
        /// </summary>
        public InputList<Inputs.ConnectionKafkaKafkaBrokerGetArgs> KafkaBrokers
        {
            get => _kafkaBrokers ?? (_kafkaBrokers = new InputList<Inputs.ConnectionKafkaKafkaBrokerGetArgs>());
            set => _kafkaBrokers = value;
        }

        /// <summary>
        /// The identifier for the connection.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of a topic that Kafka sinks can use to track internal consistency metadata.
        /// </summary>
        [Input("progressTopic")]
        public Input<string>? ProgressTopic { get; set; }

        /// <summary>
        /// The fully qualified name of the connection.
        /// </summary>
        [Input("qualifiedSqlName")]
        public Input<string>? QualifiedSqlName { get; set; }

        /// <summary>
        /// The SASL mechanism for the Kafka broker.
        /// </summary>
        [Input("saslMechanisms")]
        public Input<string>? SaslMechanisms { get; set; }

        /// <summary>
        /// The SASL password for the Kafka broker.
        /// </summary>
        [Input("saslPassword")]
        public Input<Inputs.ConnectionKafkaSaslPasswordGetArgs>? SaslPassword { get; set; }

        /// <summary>
        /// The SASL username for the Kafka broker.
        /// </summary>
        [Input("saslUsername")]
        public Input<Inputs.ConnectionKafkaSaslUsernameGetArgs>? SaslUsername { get; set; }

        /// <summary>
        /// The identifier for the connection schema.
        /// </summary>
        [Input("schemaName")]
        public Input<string>? SchemaName { get; set; }

        /// <summary>
        /// The SSH tunnel configuration for the Kafka broker.
        /// </summary>
        [Input("sshTunnel")]
        public Input<Inputs.ConnectionKafkaSshTunnelGetArgs>? SshTunnel { get; set; }

        /// <summary>
        /// The client certificate for the Kafka broker.
        /// </summary>
        [Input("sslCertificate")]
        public Input<Inputs.ConnectionKafkaSslCertificateGetArgs>? SslCertificate { get; set; }

        /// <summary>
        /// The CA certificate for the Kafka broker.
        /// </summary>
        [Input("sslCertificateAuthority")]
        public Input<Inputs.ConnectionKafkaSslCertificateAuthorityGetArgs>? SslCertificateAuthority { get; set; }

        /// <summary>
        /// The client key for the Kafka broker.
        /// </summary>
        [Input("sslKey")]
        public Input<Inputs.ConnectionKafkaSslKeyGetArgs>? SslKey { get; set; }

        public ConnectionKafkaState()
        {
        }
        public static new ConnectionKafkaState Empty => new ConnectionKafkaState();
    }
}
