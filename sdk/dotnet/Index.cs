// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Materialize
{
    /// <summary>
    /// An in-memory index on a source, view, or materialized view.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Materialize = Pulumi.Materialize;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var loadgenIndex = new Materialize.Index("loadgenIndex", new()
    ///     {
    ///         ClusterName = "cluster",
    ///         Method = "ARRANGEMENT",
    ///         ObjName = new Materialize.Inputs.IndexObjNameArgs
    ///         {
    ///             DatabaseName = "database",
    ///             Name = "source",
    ///             SchemaName = "schema",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// # Indexes can be imported using the index id
    /// 
    /// ```sh
    ///  $ pulumi import materialize:index/index:Index example_index &lt;index_id&gt;
    /// ```
    /// </summary>
    [MaterializeResourceType("materialize:index/index:Index")]
    public partial class Index : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The cluster to maintain this index. If not specified, defaults to the active cluster.
        /// </summary>
        [Output("clusterName")]
        public Output<string> ClusterName { get; private set; } = null!;

        /// <summary>
        /// The expressions to use as the key for the index.
        /// </summary>
        [Output("colExprs")]
        public Output<ImmutableArray<Outputs.IndexColExpr>> ColExprs { get; private set; } = null!;

        /// <summary>
        /// The identifier for the index database.
        /// </summary>
        [Output("databaseName")]
        public Output<string> DatabaseName { get; private set; } = null!;

        /// <summary>
        /// Creates a default index using all inferred columns are used.
        /// </summary>
        [Output("default")]
        public Output<bool?> Default { get; private set; } = null!;

        /// <summary>
        /// The name of the index method to use.
        /// </summary>
        [Output("method")]
        public Output<string?> Method { get; private set; } = null!;

        /// <summary>
        /// The identifier for the index.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The name of the source, view, or materialized view on which you want to create an index.
        /// </summary>
        [Output("objName")]
        public Output<Outputs.IndexObjName> ObjName { get; private set; } = null!;

        /// <summary>
        /// The fully qualified name of the view.
        /// </summary>
        [Output("qualifiedSqlName")]
        public Output<string> QualifiedSqlName { get; private set; } = null!;

        /// <summary>
        /// The identifier for the index schema.
        /// </summary>
        [Output("schemaName")]
        public Output<string> SchemaName { get; private set; } = null!;


        /// <summary>
        /// Create a Index resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Index(string name, IndexArgs args, CustomResourceOptions? options = null)
            : base("materialize:index/index:Index", name, args ?? new IndexArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Index(string name, Input<string> id, IndexState? state = null, CustomResourceOptions? options = null)
            : base("materialize:index/index:Index", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/MaterializeInc/pulumi-materialize",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Index resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Index Get(string name, Input<string> id, IndexState? state = null, CustomResourceOptions? options = null)
        {
            return new Index(name, id, state, options);
        }
    }

    public sealed class IndexArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The cluster to maintain this index. If not specified, defaults to the active cluster.
        /// </summary>
        [Input("clusterName", required: true)]
        public Input<string> ClusterName { get; set; } = null!;

        [Input("colExprs")]
        private InputList<Inputs.IndexColExprArgs>? _colExprs;

        /// <summary>
        /// The expressions to use as the key for the index.
        /// </summary>
        public InputList<Inputs.IndexColExprArgs> ColExprs
        {
            get => _colExprs ?? (_colExprs = new InputList<Inputs.IndexColExprArgs>());
            set => _colExprs = value;
        }

        /// <summary>
        /// Creates a default index using all inferred columns are used.
        /// </summary>
        [Input("default")]
        public Input<bool>? Default { get; set; }

        /// <summary>
        /// The name of the index method to use.
        /// </summary>
        [Input("method")]
        public Input<string>? Method { get; set; }

        /// <summary>
        /// The identifier for the index.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the source, view, or materialized view on which you want to create an index.
        /// </summary>
        [Input("objName", required: true)]
        public Input<Inputs.IndexObjNameArgs> ObjName { get; set; } = null!;

        public IndexArgs()
        {
        }
        public static new IndexArgs Empty => new IndexArgs();
    }

    public sealed class IndexState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The cluster to maintain this index. If not specified, defaults to the active cluster.
        /// </summary>
        [Input("clusterName")]
        public Input<string>? ClusterName { get; set; }

        [Input("colExprs")]
        private InputList<Inputs.IndexColExprGetArgs>? _colExprs;

        /// <summary>
        /// The expressions to use as the key for the index.
        /// </summary>
        public InputList<Inputs.IndexColExprGetArgs> ColExprs
        {
            get => _colExprs ?? (_colExprs = new InputList<Inputs.IndexColExprGetArgs>());
            set => _colExprs = value;
        }

        /// <summary>
        /// The identifier for the index database.
        /// </summary>
        [Input("databaseName")]
        public Input<string>? DatabaseName { get; set; }

        /// <summary>
        /// Creates a default index using all inferred columns are used.
        /// </summary>
        [Input("default")]
        public Input<bool>? Default { get; set; }

        /// <summary>
        /// The name of the index method to use.
        /// </summary>
        [Input("method")]
        public Input<string>? Method { get; set; }

        /// <summary>
        /// The identifier for the index.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the source, view, or materialized view on which you want to create an index.
        /// </summary>
        [Input("objName")]
        public Input<Inputs.IndexObjNameGetArgs>? ObjName { get; set; }

        /// <summary>
        /// The fully qualified name of the view.
        /// </summary>
        [Input("qualifiedSqlName")]
        public Input<string>? QualifiedSqlName { get; set; }

        /// <summary>
        /// The identifier for the index schema.
        /// </summary>
        [Input("schemaName")]
        public Input<string>? SchemaName { get; set; }

        public IndexState()
        {
        }
        public static new IndexState Empty => new IndexState();
    }
}
