// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Materialize
{
    public static class GetMaterializedViews
    {
        /// <summary>
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Materialize = Pulumi.Materialize;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var all = Materialize.GetMaterializedViews.Invoke();
        /// 
        ///     var materialize = Materialize.GetMaterializedViews.Invoke(new()
        ///     {
        ///         DatabaseName = "materialize",
        ///     });
        /// 
        ///     var materializeSchema = Materialize.GetMaterializedViews.Invoke(new()
        ///     {
        ///         DatabaseName = "materialize",
        ///         SchemaName = "schema",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetMaterializedViewsResult> InvokeAsync(GetMaterializedViewsArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetMaterializedViewsResult>("materialize:index/getMaterializedViews:GetMaterializedViews", args ?? new GetMaterializedViewsArgs(), options.WithDefaults());

        /// <summary>
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Materialize = Pulumi.Materialize;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var all = Materialize.GetMaterializedViews.Invoke();
        /// 
        ///     var materialize = Materialize.GetMaterializedViews.Invoke(new()
        ///     {
        ///         DatabaseName = "materialize",
        ///     });
        /// 
        ///     var materializeSchema = Materialize.GetMaterializedViews.Invoke(new()
        ///     {
        ///         DatabaseName = "materialize",
        ///         SchemaName = "schema",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetMaterializedViewsResult> Invoke(GetMaterializedViewsInvokeArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetMaterializedViewsResult>("materialize:index/getMaterializedViews:GetMaterializedViews", args ?? new GetMaterializedViewsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetMaterializedViewsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Limit materialized views to a specific database
        /// </summary>
        [Input("databaseName")]
        public string? DatabaseName { get; set; }

        /// <summary>
        /// Limit materialized views to a specific schema within a specific database
        /// </summary>
        [Input("schemaName")]
        public string? SchemaName { get; set; }

        public GetMaterializedViewsArgs()
        {
        }
        public static new GetMaterializedViewsArgs Empty => new GetMaterializedViewsArgs();
    }

    public sealed class GetMaterializedViewsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Limit materialized views to a specific database
        /// </summary>
        [Input("databaseName")]
        public Input<string>? DatabaseName { get; set; }

        /// <summary>
        /// Limit materialized views to a specific schema within a specific database
        /// </summary>
        [Input("schemaName")]
        public Input<string>? SchemaName { get; set; }

        public GetMaterializedViewsInvokeArgs()
        {
        }
        public static new GetMaterializedViewsInvokeArgs Empty => new GetMaterializedViewsInvokeArgs();
    }


    [OutputType]
    public sealed class GetMaterializedViewsResult
    {
        /// <summary>
        /// Limit materialized views to a specific database
        /// </summary>
        public readonly string? DatabaseName;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The materialized views in the account
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMaterializedViewsMaterializedViewResult> MaterializedViews;
        /// <summary>
        /// Limit materialized views to a specific schema within a specific database
        /// </summary>
        public readonly string? SchemaName;

        [OutputConstructor]
        private GetMaterializedViewsResult(
            string? databaseName,

            string id,

            ImmutableArray<Outputs.GetMaterializedViewsMaterializedViewResult> materializedViews,

            string? schemaName)
        {
            DatabaseName = databaseName;
            Id = id;
            MaterializedViews = materializedViews;
            SchemaName = schemaName;
        }
    }
}
