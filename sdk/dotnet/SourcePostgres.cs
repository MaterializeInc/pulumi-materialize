// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Materialize
{
    /// <summary>
    /// A source describes an external system you want Materialize to read data from, and provides details about how to decode and interpret that data.
    /// 
    /// ## Import
    /// 
    /// # Sources can be imported using the source id
    /// 
    /// ```sh
    ///  $ pulumi import materialize:index/sourcePostgres:SourcePostgres example_source_postgres &lt;source_id&gt;
    /// ```
    /// </summary>
    [MaterializeResourceType("materialize:index/sourcePostgres:SourcePostgres")]
    public partial class SourcePostgres : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The cluster to maintain this source. If not specified, the size option must be specified.
        /// </summary>
        [Output("clusterName")]
        public Output<string> ClusterName { get; private set; } = null!;

        /// <summary>
        /// The identifier for the source database.
        /// </summary>
        [Output("databaseName")]
        public Output<string?> DatabaseName { get; private set; } = null!;

        /// <summary>
        /// The identifier for the source.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The PostgreSQL connection to use in the source.
        /// </summary>
        [Output("postgresConnection")]
        public Output<Outputs.SourcePostgresPostgresConnection> PostgresConnection { get; private set; } = null!;

        /// <summary>
        /// The PostgreSQL publication (the replication data set containing the tables to be streamed to Materialize).
        /// </summary>
        [Output("publication")]
        public Output<string> Publication { get; private set; } = null!;

        /// <summary>
        /// The fully qualified name of the source.
        /// </summary>
        [Output("qualifiedSqlName")]
        public Output<string> QualifiedSqlName { get; private set; } = null!;

        /// <summary>
        /// The identifier for the source schema.
        /// </summary>
        [Output("schemaName")]
        public Output<string?> SchemaName { get; private set; } = null!;

        /// <summary>
        /// The size of the source.
        /// </summary>
        [Output("size")]
        public Output<string> Size { get; private set; } = null!;

        /// <summary>
        /// The type of source.
        /// </summary>
        [Output("sourceType")]
        public Output<string> SourceType { get; private set; } = null!;

        /// <summary>
        /// Creates subsources for specific tables.
        /// </summary>
        [Output("tables")]
        public Output<ImmutableArray<Outputs.SourcePostgresTable>> Tables { get; private set; } = null!;

        /// <summary>
        /// Decode data as text for specific columns that contain PostgreSQL types that are unsupported in Materialize.
        /// </summary>
        [Output("textColumns")]
        public Output<ImmutableArray<string>> TextColumns { get; private set; } = null!;


        /// <summary>
        /// Create a SourcePostgres resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SourcePostgres(string name, SourcePostgresArgs args, CustomResourceOptions? options = null)
            : base("materialize:index/sourcePostgres:SourcePostgres", name, args ?? new SourcePostgresArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SourcePostgres(string name, Input<string> id, SourcePostgresState? state = null, CustomResourceOptions? options = null)
            : base("materialize:index/sourcePostgres:SourcePostgres", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/MaterializeInc/pulumi-materialize",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SourcePostgres resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SourcePostgres Get(string name, Input<string> id, SourcePostgresState? state = null, CustomResourceOptions? options = null)
        {
            return new SourcePostgres(name, id, state, options);
        }
    }

    public sealed class SourcePostgresArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The cluster to maintain this source. If not specified, the size option must be specified.
        /// </summary>
        [Input("clusterName")]
        public Input<string>? ClusterName { get; set; }

        /// <summary>
        /// The identifier for the source database.
        /// </summary>
        [Input("databaseName")]
        public Input<string>? DatabaseName { get; set; }

        /// <summary>
        /// The identifier for the source.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The PostgreSQL connection to use in the source.
        /// </summary>
        [Input("postgresConnection", required: true)]
        public Input<Inputs.SourcePostgresPostgresConnectionArgs> PostgresConnection { get; set; } = null!;

        /// <summary>
        /// The PostgreSQL publication (the replication data set containing the tables to be streamed to Materialize).
        /// </summary>
        [Input("publication", required: true)]
        public Input<string> Publication { get; set; } = null!;

        /// <summary>
        /// The identifier for the source schema.
        /// </summary>
        [Input("schemaName")]
        public Input<string>? SchemaName { get; set; }

        /// <summary>
        /// The size of the source.
        /// </summary>
        [Input("size")]
        public Input<string>? Size { get; set; }

        [Input("tables")]
        private InputList<Inputs.SourcePostgresTableArgs>? _tables;

        /// <summary>
        /// Creates subsources for specific tables.
        /// </summary>
        public InputList<Inputs.SourcePostgresTableArgs> Tables
        {
            get => _tables ?? (_tables = new InputList<Inputs.SourcePostgresTableArgs>());
            set => _tables = value;
        }

        [Input("textColumns")]
        private InputList<string>? _textColumns;

        /// <summary>
        /// Decode data as text for specific columns that contain PostgreSQL types that are unsupported in Materialize.
        /// </summary>
        public InputList<string> TextColumns
        {
            get => _textColumns ?? (_textColumns = new InputList<string>());
            set => _textColumns = value;
        }

        public SourcePostgresArgs()
        {
        }
        public static new SourcePostgresArgs Empty => new SourcePostgresArgs();
    }

    public sealed class SourcePostgresState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The cluster to maintain this source. If not specified, the size option must be specified.
        /// </summary>
        [Input("clusterName")]
        public Input<string>? ClusterName { get; set; }

        /// <summary>
        /// The identifier for the source database.
        /// </summary>
        [Input("databaseName")]
        public Input<string>? DatabaseName { get; set; }

        /// <summary>
        /// The identifier for the source.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The PostgreSQL connection to use in the source.
        /// </summary>
        [Input("postgresConnection")]
        public Input<Inputs.SourcePostgresPostgresConnectionGetArgs>? PostgresConnection { get; set; }

        /// <summary>
        /// The PostgreSQL publication (the replication data set containing the tables to be streamed to Materialize).
        /// </summary>
        [Input("publication")]
        public Input<string>? Publication { get; set; }

        /// <summary>
        /// The fully qualified name of the source.
        /// </summary>
        [Input("qualifiedSqlName")]
        public Input<string>? QualifiedSqlName { get; set; }

        /// <summary>
        /// The identifier for the source schema.
        /// </summary>
        [Input("schemaName")]
        public Input<string>? SchemaName { get; set; }

        /// <summary>
        /// The size of the source.
        /// </summary>
        [Input("size")]
        public Input<string>? Size { get; set; }

        /// <summary>
        /// The type of source.
        /// </summary>
        [Input("sourceType")]
        public Input<string>? SourceType { get; set; }

        [Input("tables")]
        private InputList<Inputs.SourcePostgresTableGetArgs>? _tables;

        /// <summary>
        /// Creates subsources for specific tables.
        /// </summary>
        public InputList<Inputs.SourcePostgresTableGetArgs> Tables
        {
            get => _tables ?? (_tables = new InputList<Inputs.SourcePostgresTableGetArgs>());
            set => _tables = value;
        }

        [Input("textColumns")]
        private InputList<string>? _textColumns;

        /// <summary>
        /// Decode data as text for specific columns that contain PostgreSQL types that are unsupported in Materialize.
        /// </summary>
        public InputList<string> TextColumns
        {
            get => _textColumns ?? (_textColumns = new InputList<string>());
            set => _textColumns = value;
        }

        public SourcePostgresState()
        {
        }
        public static new SourcePostgresState Empty => new SourcePostgresState();
    }
}
